Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (139579)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 324
% Passive clauses: 4604
% Generated clauses: 32634
% Final active clauses: 256
% Final passive clauses: 4038
% Input formulas: 133
% Initial clauses: 237
% 
% Duplicate literals: 346
% Trivial inequalities: 214
% Fw subsumption resolutions: 1666
% Fw demodulations: 6458
% Bw demodulations: 65
% 
% Simple tautologies: 256
% Equational tautologies: 42
% Forward subsumptions: 18719
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 781
% Factoring: 2
% Forward superposition: 11017
% Backward superposition: 11524
% Self superposition: 102
% Equality factoring: 60
% Equality resolution: 23
% 
% Split clauses: 212
% Split components: 428
% SAT solver clauses: 375
% SAT solver unit clauses: 17
% SAT solver binary clauses: 186
% 
% Sat splits: 212
% Sat splitting refutations: 26
% 
% TWLsolver clauses: 375
% TWLsolver calls for satisfiability: 80
% 
% Memory used [KB]: 21748
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (139607)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 232
% Passive clauses: 2083
% Generated clauses: 21200
% Final active clauses: 203
% Final passive clauses: 1554
% Input formulas: 133
% Initial clauses: 237
% 
% Duplicate literals: 102
% Trivial inequalities: 136
% Fw subsumption resolutions: 1033
% Fw demodulations: 5498
% Bw demodulations: 322
% Condensations: 195
% Global subsumptions: 18
% 
% Simple tautologies: 175
% Equational tautologies: 12
% Forward subsumptions: 9109
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 390
% Factoring: 2
% Forward superposition: 6427
% Backward superposition: 4601
% Self superposition: 67
% Equality factoring: 20
% Equality resolution: 18
% 
% Split clauses: 76
% Split components: 152
% SAT solver clauses: 3047
% SAT solver unit clauses: 300
% SAT solver binary clauses: 89
% SAT solver learnt clauses: 37
% SAT solver learnt literals: 3
% 
% Sat splits: 76
% Sat splitting refutations: 15
% 
% TWLsolver clauses: 2974
% TWLsolver calls for satisfiability: 1266
% 
% Memory used [KB]: 19573
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f25423,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7594,f7709,f7598,f7596,f11967,f11968,f12127,f11970,f12131,f12125,f12129,f12014,f12149,f12032,f12172,f12035,f12173,f12060,f12194,f12061,f12195,f12148,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12512,f12514,f12516,f12518,f12520,f12522,f12523,f12524,f12527,f12530,f12533,f12534,f12535,f12538,f12541,f12544,f12546,f12548,f12550,f12552,f12553,f12554,f12555,f12556,f12557,f12559,f12560,f12562,f12564,f12565,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12573,f12574,f12575,f12576,f12578,f12580,f12581,f12582,f12583,f12584,f12585,f12586,f12587,f12589,f12593,f12598,f12603,f12609,f12611,f12613,f12614,f12615,f12617,f12618,f12620,f12624,f12629,f12634,f12640,f12642,f12644,f15703,f15704,f15712,f15706,f15713,f15745,f15746,f15750,f12130,f15751,f16372,f16374,f16375,f16381,f16382,f16383,f16384,f16385,f16386,f16387,f16388,f16389,f16390,f16391,f16392,f16393,f16394,f16396,f16625,f16744,f16749,f16750,f16753,f16755,f16761,f16763,f16769,f16771,f16773,f16775,f16777,f16779,f16781,f16783,f16842,f16844,f16846,f16848,f16853,f16856,f16859,f24028,f24032,f24030,f24457,f24458,f24459,f24460,f24461,f24462,f24463,f24464,f24465,f24466,f24467,f24468,f24470,f24471,f24472,f24473,f24474,f24475,f24476,f24477,f24478,f24479,f24480,f24481,f24484,f24485,f25203,f25207,f25205,f25209,f25241,f25385,f25386,f25387,f25388,f25389,f25390,f25391,f25392,f25393,f25394,f25395,f25396,f25397,f25398,f25399,f25400,f25401,f25402,f25403,f25404,f25406,f25408,f25409,f25410,f25411,f25412,f25413,f25414,f25415,f25416,f25417,f25419,f25420,f25422])).
fof(f25422,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25421,f692])).
fof(f692,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f444,f436])).
fof(f436,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.LESS_MONO_ADD_INV',aHL_TRUTH)).
fof(f444,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f343])).
fof(f343,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f34])).
fof(f34,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.NOT_CLAUSES|split|2')).
fof(f25421,plain,(
  p(s(bool,'F_0')) | $spl0),
  inference(forward_demodulation,[],[f25380,f744])).
fof(f744,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f536,f480])).
fof(f480,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f350])).
fof(f350,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f168])).
fof(f168,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.EQ_CLAUSES|split|3')).
fof(f536,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(flattening,[],[f196])).
fof(f196,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X7] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_REFL')).
fof(f25380,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))))))))) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f25212])).
fof(f25212,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f25211,f636])).
fof(f636,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f275])).
fof(f275,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X6,X7,X8] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X8)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_ASSOC')).
fof(f25211,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f25210,f636])).
fof(f25210,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X0))))))) )),
  inference(subsumption_resolution,[],[f25160,f436])).
fof(f25160,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X0))))))) )),
  inference(superposition,[],[f639,f732])).
fof(f732,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f434,f476])).
fof(f476,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f348])).
fof(f348,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.EQ_CLAUSES|split|0')).
fof(f434,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(cnf_transformation,[],[f342])).
fof(f342,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3])],[f289])).
fof(f289,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_MONO_ADD_INV')).
fof(f639,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(cnf_transformation,[],[f331])).
fof(f331,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f278])).
fof(f278,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_MONO_ADD')).
fof(f25420,plain,(
  $false | ($spl0 | $spl38)),
  inference(subsumption_resolution,[],[f25379,f6191])).
fof(f6191,plain,(
  ( ! [X61,X62] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X62))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num',X62)))))) )),
  inference(superposition,[],[f2682,f566])).
fof(f566,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_SUC')).
fof(f2682,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f2665,f436])).
fof(f2665,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f574,f897])).
fof(f897,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f458,f476])).
fof(f458,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f113])).
fof(f113,axiom,(
  ! [X6] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_SUC_SUC|split|0')).
fof(f574,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f301])).
fof(f301,plain,(
  ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f232])).
fof(f232,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) => ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f231])).
fof(f231,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) => ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f111])).
fof(f111,axiom,(
  ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num',X7) => ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.NOT_LESS_EQ')).
fof(f25379,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl0 | $spl38)),
  inference(backward_demodulation,[],[f7596,f25205])).
fof(f25419,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25418,f436])).
fof(f25418,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl7 | $spl36)),
  inference(forward_demodulation,[],[f25378,f1378])).
fof(f1378,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f436,f1333,f598])).
fof(f598,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f324])).
fof(f324,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f323])).
fof(f323,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f252])).
fof(f252,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X17,X18] : ((p(s(bool,X17)) => p(s(bool,X18))) => ((p(s(bool,X18)) => p(s(bool,X17))) => s(bool,X17) = s(bool,X18)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.IMP_ANTISYM_AX')).
fof(f1333,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(superposition,[],[f559,f449])).
fof(f449,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_|48|')).
fof(f559,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6,X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_EQ_ADD')).
fof(f25378,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | ($spl0 | $spl7 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25145])).
fof(f25145,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | ($spl7 | $spl36)),
  inference(forward_demodulation,[],[f25049,f21341])).
fof(f21341,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X0)))) ) | $spl7),
  inference(superposition,[],[f561,f17162])).
fof(f17162,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1)))) | $spl7),
  inference(unit_resulting_resolution,[],[f12127,f471])).
fof(f471,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f162])).
fof(f162,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f133])).
fof(f133,axiom,(
  ! [X6] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | ? [X7] : s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.num_CASES')).
fof(f561,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f131])).
fof(f131,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_EQ')).
fof(f25049,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)))) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f601])).
fof(f601,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f406,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(flattening,[],[f405])).
fof(f405,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1))) & ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f255])).
fof(f255,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num',X6) = s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_OR_EQ')).
fof(f24632,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)))) | $spl36),
  inference(unit_resulting_resolution,[],[f24032,f629])).
fof(f629,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f420])).
fof(f420,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f266])).
fof(f266,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f265])).
fof(f265,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.NOT_LESS')).
fof(f25417,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25377,f22859])).
fof(f22859,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),X0,X1)) ) | $spl7),
  inference(unit_resulting_resolution,[],[f22302,f683])).
fof(f683,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(duplicate_literal_removal,[],[f656])).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f429])).
fof(f429,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | ((~p(s(bool,X2)) | p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X2)) & ~p(s(bool,X0))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f428])).
fof(f428,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & ((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2))) | sP0(X2,X1,X0)))),
  inference(flattening,[],[f427])).
fof(f427,plain,(
  ! [X2,X1,X0] : ((~sP0(X2,X1,X0) | ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2))))) & (((p(s(bool,X0)) & ~p(s(bool,X2))) | (p(s(bool,X1)) & ~p(s(bool,X2)))) | sP0(X2,X1,X0)))),
  inference(nnf_transformation,[],[f340])).
fof(f340,plain,(
  ! [X2,X1,X0] : (sP0(X2,X1,X0) <=> ((~p(s(bool,X0)) | p(s(bool,X2))) & (~p(s(bool,X1)) | p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f22302,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)))) | $spl7),
  inference(unit_resulting_resolution,[],[f692,f21364,f653])).
fof(f653,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f429])).
fof(f21364,plain,(
  ( ! [X22] : (~sP0('F_0',X22,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)))) ) | $spl7),
  inference(superposition,[],[f4022,f17162])).
fof(f4022,plain,(
  ( ! [X8,X9] : (~sP0('F_0',X9,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) )),
  inference(superposition,[],[f1298,f695])).
fof(f695,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f465,f441])).
fof(f441,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f79])).
fof(f79,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ONE')).
fof(f465,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X6] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD|49|')).
fof(f1298,plain,(
  ( ! [X2,X0,X1] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(unit_resulting_resolution,[],[f692,f559,f651])).
fof(f651,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f429])).
fof(f25377,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25110])).
fof(f25110,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1770])).
fof(f1770,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X6) | p(s(bool,X5))) )),
  inference(subsumption_resolution,[],[f1759,f436])).
fof(f1759,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X6)) )),
  inference(superposition,[],[f652,f734])).
fof(f734,plain,(
  s(bool,'T_0') = s(bool,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))),
  inference(unit_resulting_resolution,[],[f439,f476])).
fof(f439,plain,(
  p(s(bool,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))))),
  inference(cnf_transformation,[],[f120])).
fof(f120,axiom,(
  p(s(bool,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.transitive_LESS')).
fof(f652,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | ~sP0(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f429])).
fof(f25416,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25376,f22859])).
fof(f25376,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25109])).
fof(f25109,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1769])).
fof(f1769,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))) | p(s(bool,X3))) )),
  inference(subsumption_resolution,[],[f1758,f436])).
fof(f1758,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(superposition,[],[f651,f734])).
fof(f25415,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25375,f22859])).
fof(f25375,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25108])).
fof(f25108,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1672])).
fof(f1672,plain,(
  ( ! [X14,X15,X16] : (~sP0(X15,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X14)),X16) | p(s(bool,X15))) )),
  inference(subsumption_resolution,[],[f1661,f436])).
fof(f1661,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | ~sP0(X15,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X14)),X16)) )),
  inference(superposition,[],[f652,f1378])).
fof(f25414,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25374,f22859])).
fof(f25374,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25107])).
fof(f25107,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1671])).
fof(f1671,plain,(
  ( ! [X12,X13,X11] : (~sP0(X12,X13,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X11))) | p(s(bool,X12))) )),
  inference(subsumption_resolution,[],[f1660,f436])).
fof(f1660,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | ~sP0(X12,X13,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X11)))) )),
  inference(superposition,[],[f651,f1378])).
fof(f25413,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25373,f22859])).
fof(f25373,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25106])).
fof(f25106,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1031])).
fof(f1031,plain,(
  ( ! [X10,X8,X9] : (~sP0(X9,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X10) | p(s(bool,X9))) )),
  inference(subsumption_resolution,[],[f1024,f436])).
fof(f1024,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,X9)) | ~sP0(X9,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)),X10)) )),
  inference(superposition,[],[f652,f733])).
fof(f733,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f448,f476])).
fof(f448,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f121])).
fof(f121,axiom,(
  ! [X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ZERO_LESS_EQ')).
fof(f25412,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25372,f22859])).
fof(f25372,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25105])).
fof(f25105,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl36),
  inference(unit_resulting_resolution,[],[f24632,f1030])).
fof(f1030,plain,(
  ( ! [X6,X7,X5] : (~sP0(X6,X7,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | p(s(bool,X6))) )),
  inference(subsumption_resolution,[],[f1023,f436])).
fof(f1023,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP0(X6,X7,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)))) )),
  inference(superposition,[],[f651,f733])).
fof(f25411,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25371,f22830])).
fof(f22830,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1))) | $spl7),
  inference(unit_resulting_resolution,[],[f436,f22302,f598])).
fof(f25371,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1))) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25101])).
fof(f25101,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2))) | $spl36),
  inference(unit_resulting_resolution,[],[f436,f24632,f682])).
fof(f682,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f681])).
fof(f681,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f669])).
fof(f669,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f432])).
fof(f432,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f339])).
fof(f339,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f338])).
fof(f338,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f98])).
fof(f98,axiom,(
  ! [X16,X24,X20,X25] : ((s(bool,X16) = s(bool,X24) & (p(s(bool,X24)) => s(bool,X20) = s(bool,X25))) => ((p(s(bool,X16)) => p(s(bool,X20))) <=> (p(s(bool,X24)) => p(s(bool,X25)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.IMP_CONG')).
fof(f25410,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25367,f22859])).
fof(f25367,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),'T_0',X0)) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25064])).
fof(f25064,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),'T_0',X0)) ) | $spl36),
  inference(unit_resulting_resolution,[],[f436,f24632,f652])).
fof(f25409,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25366,f22859])).
fof(f25366,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1)),X0,'T_0')) ) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25058])).
fof(f25058,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2)),X0,'T_0')) ) | $spl36),
  inference(unit_resulting_resolution,[],[f436,f24632,f651])).
fof(f25408,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25407,f726])).
fof(f726,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f692,f475])).
fof(f475,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f348])).
fof(f25407,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl7 | $spl36)),
  inference(forward_demodulation,[],[f25365,f22830])).
fof(f25365,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK1))) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f25056])).
fof(f25056,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(sK1)),s('type.num.num',sK2))) | $spl36),
  inference(unit_resulting_resolution,[],[f692,f24632,f595])).
fof(f595,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f324])).
fof(f25406,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25405,f692])).
fof(f25405,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl7 | $spl36)),
  inference(forward_demodulation,[],[f25362,f744])).
fof(f25362,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | ($spl0 | $spl7 | $spl36)),
  inference(backward_demodulation,[],[f7596,f24704])).
fof(f24704,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | ($spl7 | $spl36)),
  inference(forward_demodulation,[],[f24629,f21547])).
fof(f21547,plain,(
  ( ! [X4] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',sK4(sK1))))) ) | $spl7),
  inference(forward_demodulation,[],[f21345,f561])).
fof(f21345,plain,(
  ( ! [X4] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',sK4(sK1)))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',sK1)))) ) | $spl7),
  inference(superposition,[],[f565,f17162])).
fof(f565,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f77])).
fof(f77,axiom,(
  ! [X7,X6] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_EQ_MONO')).
fof(f24629,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK4(sK1))))) | $spl36),
  inference(unit_resulting_resolution,[],[f24032,f601])).
fof(f25404,plain,(
  $false | ($spl0 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f25358,f22958])).
fof(f22958,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK4(sK1)))) | $spl7),
  inference(unit_resulting_resolution,[],[f436,f22825,f682])).
fof(f22825,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK4(sK1))))) | $spl7),
  inference(unit_resulting_resolution,[],[f22302,f629])).
fof(f25358,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK4(sK1)))) | ($spl0 | $spl36)),
  inference(backward_demodulation,[],[f7596,f24642])).
fof(f24642,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK4(sK1)))) | $spl36),
  inference(unit_resulting_resolution,[],[f436,f24032,f598])).
fof(f25403,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25338,f9706])).
fof(f9706,plain,(
  ( ! [X2,X0] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f9705,f661])).
fof(f661,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f285])).
fof(f285,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f123])).
fof(f123,axiom,(
  ! [X33,X34,X35] : ! [X36,X37,X38] : s(X33,happ(s(fun(X34,X33),'_dst_x1x0_2'(s(fun(X34,fun(X35,X33)),X36),s(X35,X37))),s(X34,X38))) = s(X33,happ(s(fun(X35,X33),happ(s(fun(X34,fun(X35,X33)),X36),s(X34,X38))),s(X35,X37)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','_dst_x1x0_ax')).
fof(f9705,plain,(
  ( ! [X2,X0] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f9704,f553])).
fof(f553,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0,X1,X2] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num',X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10])],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2] : ? [X3] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X4))))))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X0] : ! [X1,X2] : ? [X3] : (s(X0,X1) = s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.|48|_0'))) & ! [X4] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X4))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X11] : ! [X13,X14] : ? [X15] : (s(X11,X13) = s(X11,happ(s(fun('type.num.num',X11),X15),s('type.num.num','const.num.|48|_0'))) & ! [X7] : s(X11,happ(s(fun('type.num.num',X11),X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) = s(X11,happ(s(fun(X11,X11),happ(s(fun('type.num.num',fun(X11,X11)),X14),s('type.num.num',X7))),s(X11,happ(s(fun('type.num.num',X11),X15),s('type.num.num',X7))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.num_Axiom')).
fof(f9704,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2))),s(X0,happ(s(fun('type.num.num',X0),sK10(X1,X2,X0)),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f9618,f661])).
fof(f9618,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),sK10(X1,X2,X0)),s('type.num.num','const.num.|48|_0'))))),s(X0,X2))))) )),
  inference(unit_resulting_resolution,[],[f553,f644])).
fof(f644,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f281])).
fof(f281,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f122])).
fof(f122,axiom,(
  ! [X30,X31,X32] : (p(s(bool,happ(s(fun(X30,bool),happ(s(fun(X30,fun(X30,bool)),'=_0'),s(X30,X31))),s(X30,X32)))) <=> s(X30,X31) = s(X30,X32))),
  file('thm.arithmetic.LESS_MONO_ADD_INV',arity_0_HL_EQ)).
fof(f25338,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f9306])).
fof(f9306,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(unit_resulting_resolution,[],[f3391,f643])).
fof(f643,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f424])).
fof(f3391,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(forward_demodulation,[],[f3390,f566])).
fof(f3390,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(forward_demodulation,[],[f3389,f566])).
fof(f3389,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f3283,f585])).
fof(f585,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) => s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f132])).
fof(f132,axiom,(
  ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) => s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.num.INV_SUC')).
fof(f3283,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),
  inference(forward_demodulation,[],[f3282,f566])).
fof(f3282,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(forward_demodulation,[],[f3226,f566])).
fof(f3226,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f1988,f585])).
fof(f1988,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),
  inference(subsumption_resolution,[],[f1919,f436])).
fof(f1919,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),
  inference(superposition,[],[f574,f732])).
fof(f25402,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25337,f9706])).
fof(f25337,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f9302])).
fof(f9302,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f1988,f643])).
fof(f25401,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25332,f9706])).
fof(f25332,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f9277])).
fof(f9277,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(unit_resulting_resolution,[],[f3391,f643])).
fof(f25400,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25331,f9706])).
fof(f25331,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f9273])).
fof(f9273,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f1988,f643])).
fof(f25399,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25330,f3299])).
fof(f3299,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f534,f586])).
fof(f586,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f312])).
fof(f312,plain,(
  ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) => s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) => s('type.num.num','const.num.|48|_0') = s('type.num.num',X7))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_INV_|48|')).
fof(f534,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f193])).
fof(f193,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f192])).
fof(f192,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.num.NOT_SUC')).
fof(f25330,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f9261])).
fof(f9261,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(subsumption_resolution,[],[f9182,f436])).
fof(f9182,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(superposition,[],[f705,f732])).
fof(f705,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X1,X0))))))) )),
  inference(forward_demodulation,[],[f584,f560])).
fof(f560,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f217])).
fof(f217,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_SYM')).
fof(f584,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X1,X0)))),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X1,X0)))),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13])],[f310])).
fof(f310,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X1))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) => ? [X8] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_STRONG_ADD')).
fof(f25398,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25275,f25242])).
fof(f25242,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,X1)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f723])).
fof(f723,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f434,f683])).
fof(f25275,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4837])).
fof(f4837,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f4788,f1770])).
fof(f4788,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(subsumption_resolution,[],[f4750,f436])).
fof(f4750,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(superposition,[],[f632,f732])).
fof(f632,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f328])).
fof(f328,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0,X1] : ~(p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f108])).
fof(f108,axiom,(
  ! [X6,X7] : ~(p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_ANTISYM')).
fof(f25397,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25274,f25242])).
fof(f25274,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4836])).
fof(f4836,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(unit_resulting_resolution,[],[f4788,f1769])).
fof(f25396,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25273,f25242])).
fof(f25273,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4835])).
fof(f4835,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f4788,f1672])).
fof(f25395,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25272,f25242])).
fof(f25272,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4834])).
fof(f4834,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f4788,f1671])).
fof(f25394,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25271,f25242])).
fof(f25271,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4833])).
fof(f4833,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f4788,f1031])).
fof(f25393,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25270,f25242])).
fof(f25270,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4832])).
fof(f4832,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f4788,f1030])).
fof(f25392,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25269,f25242])).
fof(f25269,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4831])).
fof(f4831,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f4788,f812])).
fof(f812,plain,(
  ( ! [X2,X3] : (~sP0(X2,X3,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | p(s(bool,X2))) )),
  inference(subsumption_resolution,[],[f804,f436])).
fof(f804,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | ~sP0(X2,X3,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f651,f732])).
fof(f25391,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25268,f25242])).
fof(f25268,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4830])).
fof(f4830,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) )),
  inference(unit_resulting_resolution,[],[f4788,f811])).
fof(f811,plain,(
  ( ! [X0,X1] : (~sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f803,f436])).
fof(f803,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | ~sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1)) )),
  inference(superposition,[],[f652,f732])).
fof(f25390,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25263,f25242])).
fof(f25263,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4801])).
fof(f4801,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f436,f4788,f652])).
fof(f25389,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25262,f25242])).
fof(f25262,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) ) | $spl0),
  inference(backward_demodulation,[],[f7596,f4799])).
fof(f4799,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f436,f4788,f651])).
fof(f25388,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f25244,f729])).
fof(f729,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f536,f475])).
fof(f25244,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f732])).
fof(f25387,plain,(
  $false | $spl0),
  inference(trivial_inequality_removal,[],[f25250])).
fof(f25250,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) | $spl0),
  inference(backward_demodulation,[],[f7596,f1988])).
fof(f25386,plain,(
  $false | $spl0),
  inference(trivial_inequality_removal,[],[f25255])).
fof(f25255,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f3391])).
fof(f25385,plain,(
  $false | $spl0),
  inference(trivial_inequality_removal,[],[f25257])).
fof(f25257,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | $spl0),
  inference(backward_demodulation,[],[f7596,f3588])).
fof(f3588,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(forward_demodulation,[],[f3587,f566])).
fof(f3587,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(forward_demodulation,[],[f3586,f566])).
fof(f3586,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(unit_resulting_resolution,[],[f3391,f585])).
fof(f25241,plain,(
  $false | ($spl3 | $spl7 | $spl36)),
  inference(subsumption_resolution,[],[f7597,f24704])).
fof(f7597,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl3),
  inference(cnf_transformation,[],[f7597_D])).
fof(f7597_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f25209,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f25208,f18227])).
fof(f18227,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f639])).
fof(f25208,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(subsumption_resolution,[],[f25159,f436])).
fof(f25159,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(superposition,[],[f632,f732])).
fof(f25205,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl38),
  inference(cnf_transformation,[],[f25205_D])).
fof(f25205_D,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f25207,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl40),
  inference(cnf_transformation,[],[f25207_D])).
fof(f25207_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f25203,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),
  inference(forward_demodulation,[],[f25202,f566])).
fof(f25202,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(forward_demodulation,[],[f25201,f566])).
fof(f25201,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(subsumption_resolution,[],[f25156,f436])).
fof(f25156,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(superposition,[],[f591,f732])).
fof(f591,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f319])).
fof(f319,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(flattening,[],[f318])).
fof(f318,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(flattening,[],[f247])).
fof(f247,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X6,X7] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & ~s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_NOT_SUC')).
fof(f24485,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24448,f9706])).
fof(f24448,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f9456])).
fof(f9456,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(forward_demodulation,[],[f9278,f566])).
fof(f9278,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(unit_resulting_resolution,[],[f4791,f643])).
fof(f4791,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f4788,f575])).
fof(f575,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f302])).
fof(f302,plain,(
  ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f112])).
fof(f112,axiom,(
  ! [X6,X7] : (s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.EQ_LESS')).
fof(f24329,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24316,f21351])).
fof(f21351,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) ) | $spl7),
  inference(superposition,[],[f698,f17162])).
fof(f698,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f566,f562])).
fof(f562,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f219])).
fof(f219,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_CLAUSES|split|2')).
fof(f24316,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK4(sK1)) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24103,f21339])).
fof(f21339,plain,(
  s('type.num.num',sK4(sK1)) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | $spl7),
  inference(superposition,[],[f456,f17162])).
fof(f456,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f115])).
fof(f115,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.PRE|split|1')).
fof(f24103,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | $spl34),
  inference(superposition,[],[f456,f24030])).
fof(f24484,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24483,f9706])).
fof(f24483,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) | ($spl7 | $spl34)),
  inference(forward_demodulation,[],[f24447,f661])).
fof(f24447,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f9443])).
fof(f9443,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(forward_demodulation,[],[f9442,f566])).
fof(f9442,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(forward_demodulation,[],[f9307,f661])).
fof(f9307,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f4791,f643])).
fof(f24481,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24440,f1396])).
fof(f1396,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f1333,f683])).
fof(f24440,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5805])).
fof(f5805,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f5485,f1770])).
fof(f5485,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f5145,f629])).
fof(f5145,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(forward_demodulation,[],[f5144,f566])).
fof(f5144,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(subsumption_resolution,[],[f5100,f436])).
fof(f5100,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))))),
  inference(superposition,[],[f577,f732])).
fof(f577,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f304])).
fof(f304,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))),
  inference(ennf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))),
  inference(rectify,[],[f93])).
fof(f93,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_SUC')).
fof(f24480,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24439,f1396])).
fof(f24439,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5804])).
fof(f5804,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(unit_resulting_resolution,[],[f5485,f1769])).
fof(f24479,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24438,f1396])).
fof(f24438,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5803])).
fof(f5803,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f5485,f1672])).
fof(f24478,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24437,f1396])).
fof(f24437,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5802])).
fof(f5802,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f5485,f1671])).
fof(f24477,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24436,f1396])).
fof(f24436,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5801])).
fof(f5801,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f5485,f1031])).
fof(f24476,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24435,f1396])).
fof(f24435,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5800])).
fof(f5800,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f5485,f1030])).
fof(f24475,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24434,f1396])).
fof(f24434,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5799])).
fof(f5799,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f5485,f812])).
fof(f24474,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24433,f1396])).
fof(f24433,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5798])).
fof(f5798,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5485,f811])).
fof(f24473,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24432,f1378])).
fof(f24432,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5796])).
fof(f5796,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f436,f5485,f682])).
fof(f24472,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24428,f1396])).
fof(f24428,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5763])).
fof(f5763,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f436,f5485,f652])).
fof(f24471,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24427,f1396])).
fof(f24427,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5759])).
fof(f5759,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f436,f5485,f651])).
fof(f24470,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24469,f726])).
fof(f24469,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl7 | $spl34)),
  inference(forward_demodulation,[],[f24426,f1378])).
fof(f24426,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5757])).
fof(f5757,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f692,f5485,f595])).
fof(f24468,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24425,f24409])).
fof(f24409,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,X1)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5519])).
fof(f5519,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f5145,f683])).
fof(f24425,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5722])).
fof(f5722,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f5484,f1770])).
fof(f5484,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f5145,f632])).
fof(f24467,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24424,f24409])).
fof(f24424,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5721])).
fof(f5721,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(unit_resulting_resolution,[],[f5484,f1769])).
fof(f24466,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24423,f24409])).
fof(f24423,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5720])).
fof(f5720,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f5484,f1672])).
fof(f24465,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24422,f24409])).
fof(f24422,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5719])).
fof(f5719,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f5484,f1671])).
fof(f24464,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24421,f24409])).
fof(f24421,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5718])).
fof(f5718,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f5484,f1031])).
fof(f24463,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24420,f24409])).
fof(f24420,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5717])).
fof(f5717,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f5484,f1030])).
fof(f24462,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24419,f24409])).
fof(f24419,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5716])).
fof(f5716,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f5484,f812])).
fof(f24461,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24418,f24409])).
fof(f24418,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5715])).
fof(f5715,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) )),
  inference(unit_resulting_resolution,[],[f5484,f811])).
fof(f24460,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24413,f24409])).
fof(f24413,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5679])).
fof(f5679,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f436,f5484,f652])).
fof(f24459,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24412,f24409])).
fof(f24412,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5675])).
fof(f5675,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f436,f5484,f651])).
fof(f24458,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24406,f729])).
fof(f24406,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f5492])).
fof(f5492,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f436,f5145,f598])).
fof(f24457,plain,(
  $false | ($spl7 | $spl34)),
  inference(subsumption_resolution,[],[f24405,f566])).
fof(f24405,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) | ($spl7 | $spl34)),
  inference(backward_demodulation,[],[f24329,f4863])).
fof(f4863,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(forward_demodulation,[],[f4862,f566])).
fof(f4862,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(forward_demodulation,[],[f4861,f566])).
fof(f4861,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f4791,f585])).
fof(f24030,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl34),
  inference(cnf_transformation,[],[f24030_D])).
fof(f24030_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f24032,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK4(sK1))))) | $spl36),
  inference(cnf_transformation,[],[f24032_D])).
fof(f24032_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK4(sK1))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f24028,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK4(sK1))))) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | ($spl2 | $spl7)),
  inference(forward_demodulation,[],[f24027,f21343])).
fof(f21343,plain,(
  ( ! [X2] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',sK4(sK1)))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',sK1)))) ) | $spl7),
  inference(superposition,[],[f564,f17162])).
fof(f564,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6,X7] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_MONO_EQ')).
fof(f24027,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1)))) | $spl2),
  inference(subsumption_resolution,[],[f23982,f436])).
fof(f23982,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.num.num',sK1)))) | $spl2),
  inference(superposition,[],[f591,f18234])).
fof(f18234,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7598,f598])).
fof(f16859,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16858,f9706])).
fof(f16858,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16857,f661])).
fof(f16857,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16732,f450])).
fof(f450,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD|split|0')).
fof(f16732,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16612])).
fof(f16612,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl6),
  inference(forward_demodulation,[],[f16611,f661])).
fof(f16611,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl6),
  inference(forward_demodulation,[],[f16498,f450])).
fof(f16498,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9306])).
fof(f12126,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | $spl6),
  inference(cnf_transformation,[],[f12126_D])).
fof(f12126_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f16630,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f7596,f12126])).
fof(f16856,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16855,f9706])).
fof(f16855,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16854,f661])).
fof(f16854,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16731,f450])).
fof(f16731,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16610])).
fof(f16610,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl6),
  inference(forward_demodulation,[],[f16609,f661])).
fof(f16609,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f16497,f450])).
fof(f16497,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9305])).
fof(f9305,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(unit_resulting_resolution,[],[f3283,f643])).
fof(f16853,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16852,f9706])).
fof(f16852,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num',sK3)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16851,f661])).
fof(f16851,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num',sK3)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16730,f450])).
fof(f16730,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16608])).
fof(f16608,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f16607,f661])).
fof(f16607,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num',sK3)))) | $spl6),
  inference(forward_demodulation,[],[f16496,f450])).
fof(f16496,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9302])).
fof(f16848,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16847,f9706])).
fof(f16847,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16726,f450])).
fof(f16726,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16603])).
fof(f16603,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl6),
  inference(forward_demodulation,[],[f16491,f450])).
fof(f16491,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9277])).
fof(f16846,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16845,f9706])).
fof(f16845,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16725,f450])).
fof(f16725,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16602])).
fof(f16602,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl6),
  inference(forward_demodulation,[],[f16490,f450])).
fof(f16490,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9276])).
fof(f9276,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(unit_resulting_resolution,[],[f3283,f643])).
fof(f16844,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16843,f9706])).
fof(f16843,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num',sK3)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16724,f450])).
fof(f16724,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16601])).
fof(f16601,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl6),
  inference(forward_demodulation,[],[f16489,f450])).
fof(f16489,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9273])).
fof(f16842,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16841,f3299])).
fof(f16841,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16723,f450])).
fof(f16723,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16600])).
fof(f16600,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | $spl6),
  inference(forward_demodulation,[],[f16488,f450])).
fof(f16488,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f9261])).
fof(f16783,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16782,f16742])).
fof(f16742,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,X1)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16638,f450])).
fof(f16638,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,X1)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16514])).
fof(f16514,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | $spl6),
  inference(forward_demodulation,[],[f16397,f450])).
fof(f16397,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f723])).
fof(f16782,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16668,f450])).
fof(f16668,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16544])).
fof(f16544,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl6),
  inference(forward_demodulation,[],[f16431,f450])).
fof(f16431,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4837])).
fof(f16781,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16780,f16742])).
fof(f16780,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16667,f450])).
fof(f16667,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16543])).
fof(f16543,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl6),
  inference(forward_demodulation,[],[f16430,f450])).
fof(f16430,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4836])).
fof(f16779,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16778,f16742])).
fof(f16778,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16666,f450])).
fof(f16666,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16542])).
fof(f16542,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f16429,f450])).
fof(f16429,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4835])).
fof(f16777,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16776,f16742])).
fof(f16776,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16665,f450])).
fof(f16665,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16541])).
fof(f16541,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl6),
  inference(forward_demodulation,[],[f16428,f450])).
fof(f16428,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4834])).
fof(f16775,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16774,f16742])).
fof(f16774,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16664,f450])).
fof(f16664,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16540])).
fof(f16540,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl6),
  inference(forward_demodulation,[],[f16427,f450])).
fof(f16427,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4833])).
fof(f16773,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16772,f16742])).
fof(f16772,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16663,f450])).
fof(f16663,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16539])).
fof(f16539,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl6),
  inference(forward_demodulation,[],[f16426,f450])).
fof(f16426,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4832])).
fof(f16771,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16770,f16742])).
fof(f16770,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)))) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16662,f450])).
fof(f16662,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16538])).
fof(f16538,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | $spl6),
  inference(forward_demodulation,[],[f16425,f450])).
fof(f16425,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4831])).
fof(f16769,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16768,f16742])).
fof(f16768,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16661,f450])).
fof(f16661,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16537])).
fof(f16537,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | $spl6),
  inference(forward_demodulation,[],[f16424,f450])).
fof(f16424,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4830])).
fof(f16763,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16762,f16742])).
fof(f16762,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),'T_0',X0)) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16656,f450])).
fof(f16656,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),'T_0',X0)) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16532])).
fof(f16532,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'T_0',X0)) ) | $spl6),
  inference(forward_demodulation,[],[f16419,f450])).
fof(f16419,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'T_0',X0)) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4801])).
fof(f16761,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16760,f16742])).
fof(f16760,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3)),X0,'T_0')) ) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16655,f450])).
fof(f16655,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'T_0')) ) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16531])).
fof(f16531,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'T_0')) ) | $spl6),
  inference(forward_demodulation,[],[f16418,f450])).
fof(f16418,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'T_0')) ) | $spl6),
  inference(backward_demodulation,[],[f12126,f4799])).
fof(f16755,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16650,f450])).
fof(f16650,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16526])).
fof(f16526,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | $spl6),
  inference(forward_demodulation,[],[f16413,f450])).
fof(f16413,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f3588])).
fof(f16753,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16648,f450])).
fof(f16648,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16524])).
fof(f16524,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | $spl6),
  inference(forward_demodulation,[],[f16411,f450])).
fof(f16411,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f3391])).
fof(f16750,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16645,f450])).
fof(f16645,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16521])).
fof(f16521,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl6),
  inference(forward_demodulation,[],[f16408,f450])).
fof(f16408,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f3283])).
fof(f16749,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16644,f450])).
fof(f16644,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16520])).
fof(f16520,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | $spl6),
  inference(forward_demodulation,[],[f16405,f450])).
fof(f16405,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | $spl6),
  inference(backward_demodulation,[],[f12126,f1988])).
fof(f16744,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f16743,f729])).
fof(f16743,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',sK3))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f16639,f450])).
fof(f16639,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl0 | $spl6)),
  inference(backward_demodulation,[],[f16630,f16515])).
fof(f16515,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | $spl6),
  inference(forward_demodulation,[],[f16399,f450])).
fof(f16399,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | $spl6),
  inference(backward_demodulation,[],[f12126,f732])).
fof(f16625,plain,(
  $false | ($spl6 | $spl14)),
  inference(subsumption_resolution,[],[f16509,f449])).
fof(f16509,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')))) ) | ($spl6 | $spl14)),
  inference(backward_demodulation,[],[f12126,f12149])).
fof(f16396,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16395,f9706])).
fof(f16395,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl2 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f16371,f661])).
fof(f16371,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16132])).
fof(f16132,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl10),
  inference(forward_demodulation,[],[f16111,f661])).
fof(f16111,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9302])).
fof(f15769,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X1)))) ) | $spl10),
  inference(backward_demodulation,[],[f12130,f2713])).
fof(f2713,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f695,f560])).
fof(f16279,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X0)))) ) | ($spl2 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f16274,f450])).
fof(f16274,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f12129,f16016])).
fof(f16016,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',X0)))))) ) | ($spl2 | $spl10)),
  inference(backward_demodulation,[],[f15769,f11969])).
fof(f11969,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',X0)))))) ) | $spl2),
  inference(superposition,[],[f636,f7717])).
fof(f7717,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f704])).
fof(f704,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK12(X1,X0))))) )),
  inference(forward_demodulation,[],[f583,f560])).
fof(f583,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(X1,X0)),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f402])).
fof(f402,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(X1,X0)),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f309])).
fof(f309,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) => ? [X8] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_ADD')).
fof(f16394,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16366,f9706])).
fof(f16366,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16110])).
fof(f16110,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9273])).
fof(f16393,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16365,f3299])).
fof(f16365,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16109])).
fof(f16109,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9261])).
fof(f16392,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16351,f16328])).
fof(f16328,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,X1)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16029])).
fof(f16029,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f723])).
fof(f16351,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16053])).
fof(f16053,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4837])).
fof(f16391,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16350,f16328])).
fof(f16350,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16052])).
fof(f16052,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4836])).
fof(f16390,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16349,f16328])).
fof(f16349,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16051])).
fof(f16051,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4835])).
fof(f16389,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16348,f16328])).
fof(f16348,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16050])).
fof(f16050,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4834])).
fof(f16388,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16347,f16328])).
fof(f16347,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16049])).
fof(f16049,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4833])).
fof(f16387,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16346,f16328])).
fof(f16346,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16048])).
fof(f16048,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4832])).
fof(f16386,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16345,f16328])).
fof(f16345,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16047])).
fof(f16047,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4831])).
fof(f16385,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16344,f16328])).
fof(f16344,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16046])).
fof(f16046,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4830])).
fof(f16384,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16339,f16328])).
fof(f16339,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16041])).
fof(f16041,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),'T_0',X0)) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4801])).
fof(f16383,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16338,f16328])).
fof(f16338,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16040])).
fof(f16040,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))),X0,'T_0')) ) | $spl10),
  inference(backward_demodulation,[],[f15769,f4799])).
fof(f16382,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16329,f729])).
fof(f16329,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16030])).
fof(f16030,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f732])).
fof(f16381,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16380,f9706])).
fof(f16380,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f16327,f661])).
fof(f16327,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16131])).
fof(f16131,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl10),
  inference(forward_demodulation,[],[f16025,f661])).
fof(f16025,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9305])).
fof(f16375,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16286,f9706])).
fof(f16286,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16024])).
fof(f16024,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9276])).
fof(f16374,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16373,f9706])).
fof(f16373,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl8 | $spl10)),
  inference(forward_demodulation,[],[f16284,f661])).
fof(f16284,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16130])).
fof(f16130,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl10),
  inference(forward_demodulation,[],[f16019,f661])).
fof(f16019,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9306])).
fof(f16372,plain,(
  $false | ($spl2 | $spl8 | $spl10)),
  inference(subsumption_resolution,[],[f16280,f9706])).
fof(f16280,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl8 | $spl10)),
  inference(backward_demodulation,[],[f16279,f16018])).
fof(f16018,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | $spl10),
  inference(backward_demodulation,[],[f15769,f9277])).
fof(f15751,plain,(
  ( ! [X114] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK1)))) ) | $spl32),
  inference(cnf_transformation,[],[f15751_D])).
fof(f15751_D,plain,(
  ( ! [X114] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK1)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f12130,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl10),
  inference(cnf_transformation,[],[f12130_D])).
fof(f12130_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f15750,plain,(
  ( ! [X114] : (s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK1)))) ) | $spl7),
  inference(forward_demodulation,[],[f15749,f12809])).
fof(f12809,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1)))) | $spl7),
  inference(unit_resulting_resolution,[],[f12127,f471])).
fof(f15749,plain,(
  ( ! [X114] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1))))) ) | $spl7),
  inference(subsumption_resolution,[],[f15245,f534])).
fof(f15245,plain,(
  ( ! [X114] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1))))) ) | $spl7),
  inference(superposition,[],[f710,f12809])).
fof(f710,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f709,f441])).
fof(f709,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f621,f441])).
fof(f621,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f417,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) & (((s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f416])).
fof(f416,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) & (((s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f262])).
fof(f262,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> ((s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> ((s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & s('type.num.num',X7) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_EQ_|49|')).
fof(f15746,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X119)))) ) | $spl30),
  inference(cnf_transformation,[],[f15746_D])).
fof(f15746_D,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X119)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f15745,plain,(
  ( ! [X119] : (s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X119)))) ) | $spl7),
  inference(forward_demodulation,[],[f15744,f12809])).
fof(f15744,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X119))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1))))) ) | $spl7),
  inference(subsumption_resolution,[],[f15250,f534])).
fof(f15250,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X119))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(sK1))))) ) | $spl7),
  inference(superposition,[],[f716,f12809])).
fof(f716,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f715,f441])).
fof(f715,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f618,f441])).
fof(f618,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f15713,plain,(
  ( ! [X96] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X96)))) ) | $spl28),
  inference(cnf_transformation,[],[f15713_D])).
fof(f15713_D,plain,(
  ( ! [X96] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X96)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f15706,plain,(
  s('type.num.num',sK4(sK1)) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl26),
  inference(cnf_transformation,[],[f15706_D])).
fof(f15706_D,plain,(
  s('type.num.num',sK4(sK1)) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f15712,plain,(
  ( ! [X96] : (s('type.num.num',sK4(sK1)) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X96)))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f15711,f15121])).
fof(f15121,plain,(
  s('type.num.num',sK4(sK1)) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | $spl7),
  inference(superposition,[],[f456,f12809])).
fof(f15711,plain,(
  ( ! [X96] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X96))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1)))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f15541,f13817])).
fof(f13817,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | ($spl7 | $spl11)),
  inference(unit_resulting_resolution,[],[f12131,f12808,f580])).
fof(f580,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num',X0) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | ((s('type.num.num',X0) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))) & (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f307])).
fof(f307,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | (s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) <=> s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) => (s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) <=> s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f117])).
fof(f117,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => (s('type.num.num',X6) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))) <=> s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.PRE_SUC_EQ')).
fof(f12808,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl7),
  inference(unit_resulting_resolution,[],[f12127,f470])).
fof(f470,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f110])).
fof(f110,axiom,(
  ! [X6] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_|48|_CASES')).
fof(f15541,plain,(
  ( ! [X96] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(sK1)),s('type.num.num',X96))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1)))) ) | $spl7),
  inference(superposition,[],[f716,f15121])).
fof(f15704,plain,(
  ( ! [X91] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',sK4(sK1))))) ) | $spl24),
  inference(cnf_transformation,[],[f15704_D])).
fof(f15704_D,plain,(
  ( ! [X91] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',sK4(sK1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f15703,plain,(
  ( ! [X91] : (s('type.num.num',sK4(sK1)) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',sK4(sK1))))) ) | ($spl7 | $spl11)),
  inference(forward_demodulation,[],[f15702,f15121])).
fof(f15702,plain,(
  ( ! [X91] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',sK4(sK1)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1)))) ) | ($spl7 | $spl11)),
  inference(subsumption_resolution,[],[f15536,f13817])).
fof(f15536,plain,(
  ( ! [X91] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',sK4(sK1)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',sK1)))) ) | $spl7),
  inference(superposition,[],[f710,f15121])).
fof(f12644,plain,(
  $false | ($spl2 | $spl7 | $spl12)),
  inference(subsumption_resolution,[],[f12127,f12204])).
fof(f12204,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12148,f7717])).
fof(f12642,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619,f12623,f12628,f12633,f12639,f12641])).
fof(f12641,plain,(
  ( ! [X114] : (p(s(bool,happ(s(fun('type.num.num',bool),X114),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X114,'type.num.num'))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12395,f12204])).
fof(f12395,plain,(
  ( ! [X114] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X114,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X114),s('type.num.num',sK1))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12196])).
fof(f12639,plain,(
  ( ! [X77] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77)))) | s('type.num.num',X77) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12638,f12204])).
fof(f12638,plain,(
  ( ! [X77] : (s('type.num.num',X77) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X77))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12394,f450])).
fof(f12394,plain,(
  ( ! [X77] : (s('type.num.num',X77) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X77))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12193])).
fof(f12633,plain,(
  ( ! [X75] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X75)))) | s('type.num.num',X75) = s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12632,f12204])).
fof(f12632,plain,(
  ( ! [X75] : (s('type.num.num',X75) = s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X75))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12392,f450])).
fof(f12392,plain,(
  ( ! [X75] : (s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X75))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12190])).
fof(f12628,plain,(
  ( ! [X73] : (s('type.num.num',X73) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73))) ) | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12627,f436])).
fof(f12627,plain,(
  ( ! [X73] : (~p(s(bool,'T_0')) | s('type.num.num',X73) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12626,f733])).
fof(f12626,plain,(
  ( ! [X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73)))) | s('type.num.num',X73) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12625,f12204])).
fof(f12625,plain,(
  ( ! [X73] : (s('type.num.num',X73) = s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X73))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12390,f450])).
fof(f12390,plain,(
  ( ! [X73] : (s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X73))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12187])).
fof(f12623,plain,(
  ( ! [X72] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK11(X72,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12389,f12204])).
fof(f12389,plain,(
  ( ! [X72] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK11(X72,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',sK1))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12185])).
fof(f12619,plain,(
  ( ! [X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X44,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12387,f12204])).
fof(f12387,plain,(
  ( ! [X44] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X44,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X44))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12167])).
fof(f12386,plain,(
  ( ! [X28] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f12011])).
fof(f12616,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',X0)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12385,f450])).
fof(f12385,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',X0)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f11969])).
fof(f12384,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12(sK2,sK1)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f11964])).
fof(f12383,plain,(
  ( ! [X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X15))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10995])).
fof(f12612,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num',X6)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X6))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12382,f450])).
fof(f12382,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',X6)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X6))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10993])).
fof(f12610,plain,(
  ( ! [X98] : (p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X98,'type.num.num'))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12381,f12204])).
fof(f12381,plain,(
  ( ! [X98] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X98,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num',sK1))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10871])).
fof(f12608,plain,(
  ( ! [X63] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X63)))) | s('type.num.num',X63) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X63))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12607,f12204])).
fof(f12607,plain,(
  ( ! [X63] : (s('type.num.num',X63) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X63)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X63))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12380,f450])).
fof(f12380,plain,(
  ( ! [X63] : (s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X63)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X63))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10870])).
fof(f12602,plain,(
  ( ! [X61] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X61)))) | s('type.num.num',X61) = s('type.num.num',sK12(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X61))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12601,f12204])).
fof(f12601,plain,(
  ( ! [X61] : (s('type.num.num',X61) = s('type.num.num',sK12(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X61)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X61))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12378,f450])).
fof(f12378,plain,(
  ( ! [X61] : (s('type.num.num',X61) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X61)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X61))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10868])).
fof(f12597,plain,(
  ( ! [X59] : (s('type.num.num',X59) = s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59))) ) | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12596,f436])).
fof(f12596,plain,(
  ( ! [X59] : (~p(s(bool,'T_0')) | s('type.num.num',X59) = s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12595,f733])).
fof(f12595,plain,(
  ( ! [X59] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X59)))) | s('type.num.num',X59) = s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12594,f12204])).
fof(f12594,plain,(
  ( ! [X59] : (s('type.num.num',X59) = s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59)) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X59))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12376,f450])).
fof(f12376,plain,(
  ( ! [X59] : (s('type.num.num',X59) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X59))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10866])).
fof(f12592,plain,(
  ( ! [X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK11(X58,sK9(sK1,sK14(sK1,sK2),'type.num.num')))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12375,f12204])).
fof(f12375,plain,(
  ( ! [X58] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK11(X58,sK9(sK1,sK14(sK1,sK2),'type.num.num'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num',sK1))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10865])).
fof(f12588,plain,(
  ( ! [X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X40,sK9(sK1,sK14(sK1,sK2),'type.num.num'))),s('type.num.num','const.num.|48|_0'))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12373,f12204])).
fof(f12373,plain,(
  ( ! [X40] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X40,sK9(sK1,sK14(sK1,sK2),'type.num.num'))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X40))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10851])).
fof(f12372,plain,(
  ( ! [X24] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num'))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10714])).
fof(f12371,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10622])).
fof(f12370,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10621])).
fof(f12369,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10620])).
fof(f12368,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10619])).
fof(f12367,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10618])).
fof(f12366,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10617])).
fof(f12579,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12365,f450])).
fof(f12365,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10616])).
fof(f12577,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12364,f450])).
fof(f12364,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10615])).
fof(f12363,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10613])).
fof(f12362,plain,(
  ( ! [X0] : (sP0(X0,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10594])).
fof(f12361,plain,(
  ( ! [X0] : (sP0(X0,'F_0',happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10593])).
fof(f12360,plain,(
  ( ! [X0] : (sP0(X0,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'F_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10570])).
fof(f12359,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10560])).
fof(f12358,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0')),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10550])).
fof(f12357,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10548])).
fof(f12356,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10543])).
fof(f12355,plain,(
  ( ! [X8] : (s(bool,'F_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'F_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10258])).
fof(f12354,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10205])).
fof(f12353,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X6) | p(s(bool,X5))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10202])).
fof(f12352,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | p(s(bool,X3))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10201])).
fof(f12563,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12351,f452])).
fof(f12351,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10195])).
fof(f12561,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12350,f450])).
fof(f12350,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f10146])).
fof(f12349,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9998])).
fof(f12558,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12348,f6423])).
fof(f12348,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9997])).
fof(f12347,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9995])).
fof(f12346,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9986])).
fof(f12345,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X6) | p(s(bool,X5))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9983])).
fof(f12344,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | p(s(bool,X3))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9982])).
fof(f12551,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12342,f450])).
fof(f12342,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9456])).
fof(f12549,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12341,f450])).
fof(f12341,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9455])).
fof(f12547,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12340,f450])).
fof(f12340,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9443])).
fof(f12545,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12339,f450])).
fof(f12339,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9441])).
fof(f12543,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12542,f661])).
fof(f12542,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12338,f6423])).
fof(f12338,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9428])).
fof(f12540,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12539,f661])).
fof(f12539,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12337,f6423])).
fof(f12337,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9427])).
fof(f12537,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12536,f661])).
fof(f12536,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12336,f6423])).
fof(f12336,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9426])).
fof(f12335,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9425])).
fof(f12334,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0')))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9321])).
fof(f12532,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12531,f661])).
fof(f12531,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12333,f450])).
fof(f12333,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9306])).
fof(f12529,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12528,f661])).
fof(f12528,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12332,f450])).
fof(f12332,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9305])).
fof(f12526,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12525,f661])).
fof(f12525,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num',sK3)))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12331,f450])).
fof(f12331,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9302])).
fof(f12330,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9293])).
fof(f12329,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2)))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9292])).
fof(f12521,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12328,f6423])).
fof(f12328,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9291])).
fof(f12519,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12327,f6423])).
fof(f12327,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9290])).
fof(f12517,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12326,f6423])).
fof(f12326,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9289])).
fof(f12515,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12325,f450])).
fof(f12325,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9277])).
fof(f12513,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12324,f450])).
fof(f12324,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9276])).
fof(f12511,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12323,f450])).
fof(f12323,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9273])).
fof(f12509,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12322,f450])).
fof(f12322,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9261])).
fof(f12312,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8069])).
fof(f12311,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8068])).
fof(f12310,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'F_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8048])).
fof(f12306,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7989])).
fof(f12305,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7973])).
fof(f12304,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7960])).
fof(f12303,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7958])).
fof(f12302,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK11(sK2,sK1)))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7952])).
fof(f12301,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7789])).
fof(f12300,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7754])).
fof(f12299,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7737])).
fof(f12298,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7724])).
fof(f12296,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7710])).
fof(f12481,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12295,f450])).
fof(f12295,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7335])).
fof(f12480,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12294,f450])).
fof(f12294,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7204])).
fof(f12479,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12293,f450])).
fof(f12293,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f6389])).
fof(f12478,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12292,f450])).
fof(f12292,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f6387])).
fof(f12477,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12291,f450])).
fof(f12291,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f6384])).
fof(f12476,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X6) | p(s(bool,X5))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12290,f450])).
fof(f12290,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X6) | p(s(bool,X5))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f6379])).
fof(f12475,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | p(s(bool,X3))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12289,f450])).
fof(f12289,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | p(s(bool,X3))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f6378])).
fof(f12474,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12288,f450])).
fof(f12288,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5947])).
fof(f12473,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12287,f450])).
fof(f12287,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5934])).
fof(f12472,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12286,f450])).
fof(f12286,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5923])).
fof(f12471,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12285,f450])).
fof(f12285,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5921])).
fof(f12470,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12284,f450])).
fof(f12284,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5805])).
fof(f12469,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12283,f450])).
fof(f12283,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5804])).
fof(f12468,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12282,f450])).
fof(f12282,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5803])).
fof(f12467,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12281,f450])).
fof(f12281,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5802])).
fof(f12466,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12280,f450])).
fof(f12280,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5801])).
fof(f12465,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12279,f450])).
fof(f12279,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5800])).
fof(f12464,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12278,f450])).
fof(f12278,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5799])).
fof(f12463,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12277,f450])).
fof(f12277,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5798])).
fof(f12462,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12276,f450])).
fof(f12276,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5796])).
fof(f12461,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12275,f450])).
fof(f12275,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5784])).
fof(f12460,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12274,f450])).
fof(f12274,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5783])).
fof(f12459,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'F_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12273,f450])).
fof(f12273,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'F_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5767])).
fof(f12458,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12272,f450])).
fof(f12272,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5763])).
fof(f12457,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12271,f450])).
fof(f12271,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5759])).
fof(f12456,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12270,f450])).
fof(f12270,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5757])).
fof(f12455,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12269,f450])).
fof(f12269,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5722])).
fof(f12454,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12268,f450])).
fof(f12268,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5721])).
fof(f12453,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12267,f450])).
fof(f12267,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5720])).
fof(f12452,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12266,f450])).
fof(f12266,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5719])).
fof(f12451,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12265,f450])).
fof(f12265,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5718])).
fof(f12450,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12264,f450])).
fof(f12264,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5717])).
fof(f12449,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12263,f450])).
fof(f12263,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5716])).
fof(f12448,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12262,f450])).
fof(f12262,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5715])).
fof(f12447,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12261,f450])).
fof(f12261,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5712])).
fof(f12446,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12260,f450])).
fof(f12260,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5700])).
fof(f12445,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12259,f450])).
fof(f12259,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5699])).
fof(f12444,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'F_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12258,f450])).
fof(f12258,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'F_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5683])).
fof(f12443,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12257,f450])).
fof(f12257,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5679])).
fof(f12442,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3)),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12256,f450])).
fof(f12256,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5675])).
fof(f12441,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12255,f450])).
fof(f12255,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5673])).
fof(f12440,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12254,f450])).
fof(f12254,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5667])).
fof(f12439,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'F_0'))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12253,f450])).
fof(f12253,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'F_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5617])).
fof(f12438,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12252,f450])).
fof(f12252,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5544])).
fof(f12437,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12251,f450])).
fof(f12251,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5519])).
fof(f12436,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12250,f450])).
fof(f12250,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5505])).
fof(f12435,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12249,f450])).
fof(f12249,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5494])).
fof(f12434,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12248,f450])).
fof(f12248,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5492])).
fof(f12433,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12247,f450])).
fof(f12247,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f5487])).
fof(f12432,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12246,f450])).
fof(f12246,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4956])).
fof(f12431,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12245,f450])).
fof(f12245,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4944])).
fof(f12429,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12243,f450])).
fof(f12243,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4932])).
fof(f12242,plain,(
  ( ! [X49] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X49,bool)) | p(s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4921])).
fof(f12428,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X45,bool)) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12241,f450])).
fof(f12241,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X45,bool)) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0'))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4918])).
fof(f12427,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12240,f450])).
fof(f12240,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4863])).
fof(f12426,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12239,f450])).
fof(f12239,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4837])).
fof(f12425,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12238,f450])).
fof(f12238,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4836])).
fof(f12424,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12237,f450])).
fof(f12237,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4835])).
fof(f12423,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12236,f450])).
fof(f12236,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4834])).
fof(f12422,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12235,f450])).
fof(f12235,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4833])).
fof(f12421,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12234,f450])).
fof(f12234,plain,(
  ( ! [X0,X1] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4832])).
fof(f12420,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12233,f450])).
fof(f12233,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4831])).
fof(f12419,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12232,f450])).
fof(f12232,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4830])).
fof(f12418,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12231,f450])).
fof(f12231,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4828])).
fof(f12417,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12230,f450])).
fof(f12230,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4818])).
fof(f12416,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12229,f450])).
fof(f12229,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4817])).
fof(f12415,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'F_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12228,f450])).
fof(f12228,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'F_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4803])).
fof(f12414,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12227,f450])).
fof(f12227,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4801])).
fof(f12413,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3)),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12226,f450])).
fof(f12226,plain,(
  ( ! [X0] : (~sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3)))),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4799])).
fof(f12412,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12225,f450])).
fof(f12225,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4797])).
fof(f12411,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12224,f450])).
fof(f12224,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4791])).
fof(f12410,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12223,f450])).
fof(f12223,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4541])).
fof(f12409,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12222,f450])).
fof(f12222,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f4540])).
fof(f12408,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12221,f450])).
fof(f12221,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3588])).
fof(f12407,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12220,f6423])).
fof(f12220,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3584])).
fof(f12406,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12219,f450])).
fof(f12219,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3391])).
fof(f12405,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12218,f6423])).
fof(f12218,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3297])).
fof(f12404,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12217,f6423])).
fof(f12217,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3295])).
fof(f12403,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12216,f450])).
fof(f12216,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3283])).
fof(f12215,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3234])).
fof(f12214,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f3213])).
fof(f12402,plain,(
  s('type.num.num',sK3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12213,f450])).
fof(f12213,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f1988])).
fof(f12401,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12212,f450])).
fof(f12212,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f1594])).
fof(f12400,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12211,f450])).
fof(f12211,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f1551])).
fof(f12399,plain,(
  ( ! [X2,X3] : (~sP0(X2,X3,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | p(s(bool,X2))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12210,f450])).
fof(f12210,plain,(
  ( ! [X2,X3] : (~sP0(X2,X3,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | p(s(bool,X2))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f812])).
fof(f12398,plain,(
  ( ! [X0,X1] : (~sP0(X0,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1) | p(s(bool,X0))) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12209,f450])).
fof(f12209,plain,(
  ( ! [X0,X1] : (~sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1) | p(s(bool,X0))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f811])).
fof(f12208,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f742])).
fof(f12397,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12207,f450])).
fof(f12207,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f732])).
fof(f12206,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f727])).
fof(f12396,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12205,f450])).
fof(f12205,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f723])).
fof(f12196,plain,(
  ( ! [X114] : (s('type.num.num',sK1) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X114,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X114),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12101,f7717])).
fof(f12101,plain,(
  ( ! [X114] : (p(s(bool,happ(s(fun('type.num.num',bool),X114),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X114,'type.num.num'))) ) | $spl2),
  inference(superposition,[],[f550,f7717])).
fof(f12193,plain,(
  ( ! [X77] : (s('type.num.num',X77) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X77))))) ) | $spl2),
  inference(forward_demodulation,[],[f12192,f11969])).
fof(f12192,plain,(
  ( ! [X77] : (s('type.num.num',X77) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X77))))) ) | $spl2),
  inference(forward_demodulation,[],[f12059,f636])).
fof(f12059,plain,(
  ( ! [X77] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X77)))) | s('type.num.num',X77) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X77))))))) ) | $spl2),
  inference(superposition,[],[f705,f7717])).
fof(f12191,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X76,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X76),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12058,f7717])).
fof(f12058,plain,(
  ( ! [X76] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X76),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X76,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))))))))) ) | $spl2),
  inference(superposition,[],[f705,f7717])).
fof(f12190,plain,(
  ( ! [X75] : (s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X75))))) ) | $spl2),
  inference(forward_demodulation,[],[f12189,f11969])).
fof(f12189,plain,(
  ( ! [X75] : (s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X75))))) ) | $spl2),
  inference(forward_demodulation,[],[f12057,f636])).
fof(f12057,plain,(
  ( ! [X75] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X75)))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X75))))) ) | $spl2),
  inference(superposition,[],[f704,f7717])).
fof(f12188,plain,(
  ( ! [X74] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK12(X74,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X74),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12056,f7717])).
fof(f12056,plain,(
  ( ! [X74] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X74),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK12(X74,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))))))) ) | $spl2),
  inference(superposition,[],[f704,f7717])).
fof(f12187,plain,(
  ( ! [X73] : (s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X73))))) ) | $spl2),
  inference(forward_demodulation,[],[f12186,f11969])).
fof(f12186,plain,(
  ( ! [X73] : (s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK12(sK2,sK1)),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X73))))) ) | $spl2),
  inference(forward_demodulation,[],[f12055,f636])).
fof(f12055,plain,(
  ( ! [X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X73)))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X73))))) ) | $spl2),
  inference(superposition,[],[f703,f7717])).
fof(f12185,plain,(
  ( ! [X72] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK11(X72,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12054,f7717])).
fof(f12054,plain,(
  ( ! [X72] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK11(X72,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))))))) ) | $spl2),
  inference(superposition,[],[f703,f7717])).
fof(f12168,plain,(
  ( ! [X45] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',sK1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X45)),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12028,f7717])).
fof(f12028,plain,(
  ( ! [X45] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))),X45)),s('type.num.num',sK1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))))))) ) | $spl2),
  inference(superposition,[],[f605,f7717])).
fof(f12167,plain,(
  ( ! [X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X44)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X44,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f12027,f7717])).
fof(f12027,plain,(
  ( ! [X44] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X44,'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))),s('type.num.num',sK1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))),s('type.num.num',X44))))) ) | $spl2),
  inference(superposition,[],[f604,f7717])).
fof(f12011,plain,(
  ( ! [X28] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | $spl2),
  inference(superposition,[],[f585,f7717])).
fof(f11964,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12(sK2,sK1)))))) | $spl2),
  inference(superposition,[],[f566,f7717])).
fof(f11922,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK16(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK16(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f635,f469])).
fof(f11921,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK16(X0,X1,X2,bool))) )),
  inference(superposition,[],[f635,f469])).
fof(f11879,plain,(
  ( ! [X528,X526,X529,X527] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X527),s('type.num.num',X528))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num',X527))),s('type.num.num',X528)),X529,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X529),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X527),s('type.num.num',X528))))))))) )),
  inference(forward_demodulation,[],[f11753,f636])).
fof(f11753,plain,(
  ( ! [X528,X526,X529,X527] : (p(s(bool,happ(s(fun('type.num.num',bool),X529),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X527),s('type.num.num',X528)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num',X527))),s('type.num.num',X528))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X526),s('type.num.num',X527))),s('type.num.num',X528)),X529,'type.num.num'))) )),
  inference(superposition,[],[f550,f636])).
fof(f11876,plain,(
  ( ! [X360,X362,X361,X363] : (s('type.num.num',X363) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X361),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num',X362)),X363)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X361),s('type.num.num',X362))))),s('type.num.num',X363))))) )),
  inference(forward_demodulation,[],[f11875,f636])).
fof(f11875,plain,(
  ( ! [X360,X362,X361,X363] : (s('type.num.num',X363) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num',X362)),X363)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X361),s('type.num.num',X362))))),s('type.num.num',X363))))) )),
  inference(forward_demodulation,[],[f11711,f636])).
fof(f11711,plain,(
  ( ! [X360,X362,X361,X363] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X361),s('type.num.num',X362))))),s('type.num.num',X363)))) | s('type.num.num',X363) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num',X362))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num',X362)),X363))))))) )),
  inference(superposition,[],[f705,f636])).
fof(f11874,plain,(
  ( ! [X356,X358,X357,X359] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X357),s('type.num.num',X358))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X359),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X359,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num',X357))),s('type.num.num',X358)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X359),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X357),s('type.num.num',X358))))))))) )),
  inference(forward_demodulation,[],[f11710,f636])).
fof(f11710,plain,(
  ( ! [X356,X358,X357,X359] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X359),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X357),s('type.num.num',X358)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num',X357))),s('type.num.num',X358))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X359),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X359,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X356),s('type.num.num',X357))),s('type.num.num',X358))))))))) )),
  inference(superposition,[],[f705,f636])).
fof(f11873,plain,(
  ( ! [X352,X354,X353,X355] : (s('type.num.num',X355) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X354),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num',X354)),X355)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',X354))))),s('type.num.num',X355))))) )),
  inference(forward_demodulation,[],[f11872,f636])).
fof(f11872,plain,(
  ( ! [X352,X354,X353,X355] : (s('type.num.num',X355) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X354),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num',X354)),X355)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',X354))))),s('type.num.num',X355))))) )),
  inference(forward_demodulation,[],[f11709,f636])).
fof(f11709,plain,(
  ( ! [X352,X354,X353,X355] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',X354))))),s('type.num.num',X355)))) | s('type.num.num',X355) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num',X354))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num',X354)),X355))))) )),
  inference(superposition,[],[f704,f636])).
fof(f11871,plain,(
  ( ! [X350,X349,X351,X348] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num',X350))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X351),s('type.num.num',sK12(X351,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num',X349))),s('type.num.num',X350)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X351),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num',X350))))))))) )),
  inference(forward_demodulation,[],[f11708,f636])).
fof(f11708,plain,(
  ( ! [X350,X349,X351,X348] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X351),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num',X350)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num',X349))),s('type.num.num',X350))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X351),s('type.num.num',sK12(X351,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num',X349))),s('type.num.num',X350))))))) )),
  inference(superposition,[],[f704,f636])).
fof(f11870,plain,(
  ( ! [X344,X346,X345,X347] : (s('type.num.num',X347) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X346),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',X345))),s('type.num.num',X346)),X347)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',X346))))),s('type.num.num',X347))))) )),
  inference(forward_demodulation,[],[f11869,f636])).
fof(f11869,plain,(
  ( ! [X344,X346,X345,X347] : (s('type.num.num',X347) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',X345))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X346),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',X345))),s('type.num.num',X346)),X347)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',X346))))),s('type.num.num',X347))))) )),
  inference(forward_demodulation,[],[f11707,f636])).
fof(f11707,plain,(
  ( ! [X344,X346,X345,X347] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',X346))))),s('type.num.num',X347)))) | s('type.num.num',X347) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',X345))),s('type.num.num',X346))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',X345))),s('type.num.num',X346)),X347))))) )),
  inference(superposition,[],[f703,f636])).
fof(f11868,plain,(
  ( ! [X341,X343,X340,X342] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num',X342))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X343),s('type.num.num',sK11(X343,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num',X341))),s('type.num.num',X342)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X343),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num',X342))))))))) )),
  inference(forward_demodulation,[],[f11706,f636])).
fof(f11706,plain,(
  ( ! [X341,X343,X340,X342] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X343),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num',X342)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num',X341))),s('type.num.num',X342))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X343),s('type.num.num',sK11(X343,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num',X341))),s('type.num.num',X342))))))) )),
  inference(superposition,[],[f703,f636])).
fof(f11867,plain,(
  ( ! [X337,X339,X336,X338] : (s('type.num.num',X339) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X339),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X338))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X338))))),s('type.num.num',X339))))) )),
  inference(forward_demodulation,[],[f11866,f636])).
fof(f11866,plain,(
  ( ! [X337,X339,X336,X338] : (s('type.num.num',X339) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X339),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num',X338))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X338))))),s('type.num.num',X339))))) )),
  inference(forward_demodulation,[],[f11865,f636])).
fof(f11865,plain,(
  ( ! [X337,X339,X336,X338] : (s('type.num.num',X339) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X339),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num',X338))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X338))))),s('type.num.num',X339))))) )),
  inference(forward_demodulation,[],[f11705,f636])).
fof(f11705,plain,(
  ( ! [X337,X339,X336,X338] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X338))))),s('type.num.num',X339)))) | s('type.num.num',X339) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num',X338))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X339),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num',X338)))))))) )),
  inference(superposition,[],[f702,f636])).
fof(f11851,plain,(
  ( ! [X253,X251,X252,X250] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X253),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X251),s('type.num.num',X252)))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num',X251))),s('type.num.num',X252)),X253)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X251),s('type.num.num',X252))))))))) )),
  inference(forward_demodulation,[],[f11683,f636])).
fof(f11683,plain,(
  ( ! [X253,X251,X252,X250] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num',X251))),s('type.num.num',X252)),X253)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X251),s('type.num.num',X252)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X253),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num',X251))),s('type.num.num',X252))))))) )),
  inference(superposition,[],[f605,f636])).
fof(f11850,plain,(
  ( ! [X249,X246,X248,X247] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X247),s('type.num.num',X248))))),s('type.num.num',X249)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X249,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num',X247))),s('type.num.num',X248)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X247),s('type.num.num',X248))))))))) )),
  inference(forward_demodulation,[],[f11682,f636])).
fof(f11682,plain,(
  ( ! [X249,X246,X248,X247] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X249,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num',X247))),s('type.num.num',X248)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X247),s('type.num.num',X248)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num',X247))),s('type.num.num',X248))),s('type.num.num',X249))))) )),
  inference(superposition,[],[f604,f636])).
fof(f11824,plain,(
  ( ! [X167,X169,X166,X168] : (s('type.num.num',X169) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num','const.num.SUC_1'(s('type.num.num',X168))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X168))))),s('type.num.num',X169))))) )),
  inference(forward_demodulation,[],[f11823,f636])).
fof(f11823,plain,(
  ( ! [X167,X169,X166,X168] : (s('type.num.num',X169) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X168))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X168))))),s('type.num.num',X169))))) )),
  inference(forward_demodulation,[],[f11662,f566])).
fof(f11662,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X168))))),s('type.num.num',X169)))) | s('type.num.num',X169) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167))),s('type.num.num',X168)))))) )),
  inference(superposition,[],[f575,f636])).
fof(f11621,plain,(
  ( ! [X26,X24,X27,X25] : (~sP0('F_0',X27,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X26)))))))) )),
  inference(superposition,[],[f1298,f636])).
fof(f11620,plain,(
  ( ! [X23,X21,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23)) )),
  inference(superposition,[],[f714,f636])).
fof(f11619,plain,(
  ( ! [X19,X20,X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X20)) )),
  inference(superposition,[],[f613,f636])).
fof(f11618,plain,(
  ( ! [X17,X15,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))) )),
  inference(superposition,[],[f612,f636])).
fof(f11617,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14)) )),
  inference(superposition,[],[f599,f636])).
fof(f11616,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(superposition,[],[f586,f636])).
fof(f11612,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num',X19)))))))) )),
  inference(superposition,[],[f636,f570])).
fof(f11808,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))))))) )),
  inference(forward_demodulation,[],[f11807,f566])).
fof(f11807,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))))))) )),
  inference(forward_demodulation,[],[f11611,f566])).
fof(f11611,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))))))))) )),
  inference(superposition,[],[f636,f6296])).
fof(f11806,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))))))) )),
  inference(forward_demodulation,[],[f11610,f566])).
fof(f11610,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14)))))))))) )),
  inference(superposition,[],[f636,f696])).
fof(f11606,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f636,f560])).
fof(f11804,plain,(
  ( ! [X212,X213,X214] : (s('type.num.num',X214) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X212))),s('type.num.num',X213))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X212),s('type.num.num',X213))),s('type.num.num',X213)),X214)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X212))),s('type.num.num',X213))),s('type.num.num',X214))))) )),
  inference(backward_demodulation,[],[f11578,f8828])).
fof(f11803,plain,(
  ( ! [X208,X206,X207] : (s('type.num.num',X208) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))),s('type.num.num',X207))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num',X207)),X208)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))),s('type.num.num',X207))),s('type.num.num',X208))))) )),
  inference(backward_demodulation,[],[f11578,f8825])).
fof(f11801,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)),X24)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))))) )),
  inference(backward_demodulation,[],[f11578,f9207])).
fof(f11578,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))),s('type.num.num',X27))),s('type.num.num',X28))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28)))))) )),
  inference(superposition,[],[f636,f569])).
fof(f11795,plain,(
  ( ! [X220,X219,X221] : (s('type.num.num',X221) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num',X220))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num',X220)))),X221)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num',X220))))),s('type.num.num',X221))))) )),
  inference(backward_demodulation,[],[f11574,f9102])).
fof(f11794,plain,(
  ( ! [X215,X213,X214] : (s('type.num.num',X215) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X214)))),X215)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))))),s('type.num.num',X215))))) )),
  inference(backward_demodulation,[],[f11574,f9100])).
fof(f11792,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))),X16)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))))) )),
  inference(backward_demodulation,[],[f11574,f9201])).
fof(f11574,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num',X16)))))) )),
  inference(superposition,[],[f636,f570])).
fof(f11791,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))))) )),
  inference(forward_demodulation,[],[f11790,f698])).
fof(f11790,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13)))))))) )),
  inference(forward_demodulation,[],[f11573,f698])).
fof(f11573,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num',X13)))))) )),
  inference(superposition,[],[f636,f6296])).
fof(f11789,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(backward_demodulation,[],[f11781,f7276])).
fof(f11788,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(backward_demodulation,[],[f11781,f7138])).
fof(f11786,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(backward_demodulation,[],[f11781,f9197])).
fof(f11785,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(backward_demodulation,[],[f11781,f7279])).
fof(f11784,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(backward_demodulation,[],[f11781,f7141])).
fof(f11783,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(backward_demodulation,[],[f11781,f10071])).
fof(f11782,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(backward_demodulation,[],[f11781,f9200])).
fof(f11781,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))))) )),
  inference(forward_demodulation,[],[f11572,f698])).
fof(f11572,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))))) )),
  inference(superposition,[],[f636,f696])).
fof(f11568,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f636,f560])).
fof(f11490,plain,(
  ( ! [X39,X38,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))) = s(bool,sK9(happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X38))),s('type.num.num',X39)),X40,bool)) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f11464,f571])).
fof(f11464,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X38))),s('type.num.num',X39))) = s(bool,sK9(happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X38))),s('type.num.num',X39)),X40,bool))) )),
  inference(superposition,[],[f550,f571])).
fof(f11462,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num',X32)))) | p(s(bool,X33)) | ~sP0(X33,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X31))),s('type.num.num',X32)),X34)) )),
  inference(superposition,[],[f652,f571])).
fof(f11461,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X28)))) | p(s(bool,X29)) | ~sP0(X29,X30,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X27))),s('type.num.num',X28)))) )),
  inference(superposition,[],[f651,f571])).
fof(f11481,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK9(X7,happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6)),'type.num.num')))))) )),
  inference(forward_demodulation,[],[f11452,f571])).
fof(f11452,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK9(X7,happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6)),'type.num.num'))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X6))),s('type.num.num',X7))))) )),
  inference(superposition,[],[f551,f571])).
fof(f11451,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num',X5) = s('type.num.num',sK9(X5,happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X4)),'type.num.num'))) )),
  inference(superposition,[],[f550,f571])).
fof(f11480,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num',X3)) )),
  inference(forward_demodulation,[],[f11450,f571])).
fof(f11450,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num',X3) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X1))),s('type.num.num',X3))))) )),
  inference(superposition,[],[f552,f571])).
fof(f11448,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X2))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f571,f469])).
fof(f11319,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,X5)) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X6) | p(s(bool,happ(s(fun('type.num.num',bool),sK10(X4,X5,bool)),s('type.num.num',X6))))) )),
  inference(superposition,[],[f552,f553])).
fof(f11298,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,happ(s(fun(bool,bool),X82),s(bool,X81)))) | s(bool,'F_0') != s(bool,X83) | p(s(bool,happ(s(fun(bool,bool),X82),s(bool,X83)))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f552,f469])).
fof(f11297,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,happ(s(fun(bool,bool),X79),s(bool,'F_0')))) | s(bool,X78) != s(bool,X80) | p(s(bool,happ(s(fun(bool,bool),X79),s(bool,X80)))) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f552,f469])).
fof(f11283,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X38)))) | s('type.num.num',X40) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X38)))) | p(s(bool,happ(s(fun('type.num.num',bool),X39),s('type.num.num',X40)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38)) )),
  inference(superposition,[],[f552,f471])).
fof(f11272,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) )),
  inference(superposition,[],[f552,f560])).
fof(f11199,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X14)) )),
  inference(superposition,[],[f714,f569])).
fof(f11264,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X12)) )),
  inference(subsumption_resolution,[],[f11198,f534])).
fof(f11198,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X12)) )),
  inference(superposition,[],[f714,f698])).
fof(f11196,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X8) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9)))) )),
  inference(superposition,[],[f714,f570])).
fof(f11263,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) )),
  inference(subsumption_resolution,[],[f11195,f534])).
fof(f11195,plain,(
  ( ! [X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f714,f6296])).
fof(f11262,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(subsumption_resolution,[],[f11194,f534])).
fof(f11194,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))) )),
  inference(superposition,[],[f714,f696])).
fof(f11189,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X54))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X55) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X53,X54,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f714,f553])).
fof(f11187,plain,(
  ( ! [X50,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X50))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X51) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))))) )),
  inference(superposition,[],[f714,f456])).
fof(f11183,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X46) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))) )),
  inference(superposition,[],[f714,f567])).
fof(f11181,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X40))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X41) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f714,f451])).
fof(f11180,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38)))) )),
  inference(superposition,[],[f714,f693])).
fof(f11179,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X37) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f714,f694])).
fof(f11173,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)))) )),
  inference(superposition,[],[f714,f569])).
fof(f11260,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(subsumption_resolution,[],[f11172,f4049])).
fof(f11172,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(superposition,[],[f714,f698])).
fof(f11171,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)))) )),
  inference(superposition,[],[f714,f450])).
fof(f11170,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))))) )),
  inference(superposition,[],[f714,f570])).
fof(f11259,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13)) )),
  inference(subsumption_resolution,[],[f11169,f4224])).
fof(f11169,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f714,f6296])).
fof(f11258,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(subsumption_resolution,[],[f11168,f4224])).
fof(f11168,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f714,f696])).
fof(f11257,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(subsumption_resolution,[],[f11167,f2779])).
fof(f11167,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f714,f695])).
fof(f11166,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f714,f449])).
fof(f11164,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f714,f560])).
fof(f11163,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X53,X54,'type.num.num')),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X55)) )),
  inference(superposition,[],[f714,f553])).
fof(f11161,plain,(
  ( ! [X50,X51] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X51)) )),
  inference(superposition,[],[f714,f456])).
fof(f11157,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num',X46))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X46)) )),
  inference(superposition,[],[f714,f567])).
fof(f11155,plain,(
  ( ! [X41,X40] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X41))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X41)) )),
  inference(superposition,[],[f714,f451])).
fof(f11154,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39)) )),
  inference(superposition,[],[f714,f693])).
fof(f11153,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X37)) )),
  inference(superposition,[],[f714,f694])).
fof(f11147,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24)) )),
  inference(superposition,[],[f714,f569])).
fof(f11255,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(subsumption_resolution,[],[f11146,f4049])).
fof(f11146,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f714,f698])).
fof(f11145,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18)) )),
  inference(superposition,[],[f714,f450])).
fof(f11144,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f714,f570])).
fof(f11254,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13)) )),
  inference(subsumption_resolution,[],[f11143,f4224])).
fof(f11143,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13)) )),
  inference(superposition,[],[f714,f6296])).
fof(f11253,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(subsumption_resolution,[],[f11142,f4224])).
fof(f11142,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(superposition,[],[f714,f696])).
fof(f11252,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(subsumption_resolution,[],[f11141,f2779])).
fof(f11141,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(superposition,[],[f714,f695])).
fof(f11140,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) )),
  inference(superposition,[],[f714,f449])).
fof(f11138,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(superposition,[],[f714,f560])).
fof(f11064,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f534,f534,f714])).
fof(f11066,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f534,f714])).
fof(f11068,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f6541,f534,f714])).
fof(f11236,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f11070,f2838])).
fof(f11070,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f3352,f534,f714])).
fof(f11071,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f6539,f534,f714])).
fof(f11082,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f534,f4280,f714])).
fof(f11084,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f4280,f714])).
fof(f11086,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f6541,f4280,f714])).
fof(f11231,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f11088,f2838])).
fof(f11088,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f3352,f4280,f714])).
fof(f11089,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f6539,f4280,f714])).
fof(f11100,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f534,f6541,f714])).
fof(f11102,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f6541,f714])).
fof(f11104,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f6541,f6541,f714])).
fof(f11216,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f11106,f2838])).
fof(f11106,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f3352,f6541,f714])).
fof(f11107,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f6539,f6541,f714])).
fof(f11127,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f534,f6539,f714])).
fof(f11129,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f6539,f714])).
fof(f11131,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f6541,f6539,f714])).
fof(f11200,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f11133,f2838])).
fof(f11133,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f3352,f6539,f714])).
fof(f11134,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f6539,f6539,f714])).
fof(f10995,plain,(
  ( ! [X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X15)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X15))))) ) | $spl2),
  inference(subsumption_resolution,[],[f10939,f436])).
fof(f10939,plain,(
  ( ! [X15] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X15)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',X15))))) ) | $spl2),
  inference(superposition,[],[f642,f7722])).
fof(f10937,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X13))))) )),
  inference(superposition,[],[f642,f564])).
fof(f10994,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))))) )),
  inference(subsumption_resolution,[],[f10936,f436])).
fof(f10936,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10))))) )),
  inference(superposition,[],[f642,f930])).
fof(f10993,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X6)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',X6))))) )),
  inference(subsumption_resolution,[],[f10933,f436])).
fof(f10933,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num',X6)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',X6))))) )),
  inference(superposition,[],[f642,f732])).
fof(f10915,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X38)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X38)))),s('type.num.num',X40)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X40)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38)) )),
  inference(superposition,[],[f642,f471])).
fof(f10967,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X13)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10966,f695])).
fof(f10966,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X11)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X13)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10907,f6018])).
fof(f10907,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X13)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X13))))) )),
  inference(superposition,[],[f642,f695])).
fof(f10904,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(superposition,[],[f642,f560])).
fof(f10889,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X40)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X38)))),s('type.num.num',X40)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X38)) )),
  inference(superposition,[],[f642,f471])).
fof(f10878,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X3))))) )),
  inference(superposition,[],[f642,f560])).
fof(f10871,plain,(
  ( ! [X98] : (s('type.num.num',sK1) = s('type.num.num',sK9(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X98,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10798,f10543])).
fof(f10798,plain,(
  ( ! [X98] : (p(s(bool,happ(s(fun('type.num.num',bool),X98),s('type.num.num',sK1)))) | s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) = s('type.num.num',sK9(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X98,'type.num.num'))) ) | $spl2),
  inference(superposition,[],[f550,f10543])).
fof(f10870,plain,(
  ( ! [X63] : (s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X63)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X63))))) ) | $spl2),
  inference(forward_demodulation,[],[f10757,f10543])).
fof(f10757,plain,(
  ( ! [X63] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X63)))) | s('type.num.num',X63) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X63))))))) ) | $spl2),
  inference(superposition,[],[f705,f10543])).
fof(f10869,plain,(
  ( ! [X62] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X62,sK9(sK1,sK14(sK1,sK2),'type.num.num'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10756,f10543])).
fof(f10756,plain,(
  ( ! [X62] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num',sK1)))) | s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X62,sK9(sK1,sK14(sK1,sK2),'type.num.num')))))))) ) | $spl2),
  inference(superposition,[],[f705,f10543])).
fof(f10868,plain,(
  ( ! [X61] : (s('type.num.num',X61) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK12(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X61)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X61))))) ) | $spl2),
  inference(forward_demodulation,[],[f10755,f10543])).
fof(f10755,plain,(
  ( ! [X61] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X61)))) | s('type.num.num',X61) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')),s('type.num.num',sK12(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X61))))) ) | $spl2),
  inference(superposition,[],[f704,f10543])).
fof(f10867,plain,(
  ( ! [X60] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',sK12(X60,sK9(sK1,sK14(sK1,sK2),'type.num.num'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10754,f10543])).
fof(f10754,plain,(
  ( ! [X60] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num',sK1)))) | s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',sK12(X60,sK9(sK1,sK14(sK1,sK2),'type.num.num')))))) ) | $spl2),
  inference(superposition,[],[f704,f10543])).
fof(f10866,plain,(
  ( ! [X59] : (s('type.num.num',X59) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X59))))) ) | $spl2),
  inference(forward_demodulation,[],[f10753,f10543])).
fof(f10753,plain,(
  ( ! [X59] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X59)))) | s('type.num.num',X59) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')),s('type.num.num',sK11(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X59))))) ) | $spl2),
  inference(superposition,[],[f703,f10543])).
fof(f10865,plain,(
  ( ! [X58] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK11(X58,sK9(sK1,sK14(sK1,sK2),'type.num.num'))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10752,f10543])).
fof(f10752,plain,(
  ( ! [X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num',sK1)))) | s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',sK11(X58,sK9(sK1,sK14(sK1,sK2),'type.num.num')))))) ) | $spl2),
  inference(superposition,[],[f703,f10543])).
fof(f10852,plain,(
  ( ! [X41] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',sK1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X41)),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10731,f10543])).
fof(f10731,plain,(
  ( ! [X41] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(sK9(sK1,sK14(sK1,sK2),'type.num.num'),X41)),s('type.num.num',sK1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')))))) ) | $spl2),
  inference(superposition,[],[f605,f10543])).
fof(f10851,plain,(
  ( ! [X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',X40)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X40,sK9(sK1,sK14(sK1,sK2),'type.num.num'))),s('type.num.num',sK1))))) ) | $spl2),
  inference(forward_demodulation,[],[f10730,f10543])).
fof(f10730,plain,(
  ( ! [X40] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X40,sK9(sK1,sK14(sK1,sK2),'type.num.num'))),s('type.num.num',sK1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')),s('type.num.num',X40))))) ) | $spl2),
  inference(superposition,[],[f604,f10543])).
fof(f10714,plain,(
  ( ! [X24] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num'))) ) | $spl2),
  inference(superposition,[],[f585,f10543])).
fof(f10543,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK9(sK1,sK14(sK1,sK2),'type.num.num')) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f550])).
fof(f10548,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7713,f595])).
fof(f10550,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),X0,'T_0')) ) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7713,f651])).
fof(f10560,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'T_0',X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7713,f652])).
fof(f10570,plain,(
  ( ! [X0] : (sP0(X0,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'F_0')) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7713,f653])).
fof(f10593,plain,(
  ( ! [X0] : (sP0(X0,'F_0',happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7713,f653])).
fof(f10594,plain,(
  ( ! [X0] : (sP0(X0,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f7713,f653])).
fof(f10613,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7713,f682])).
fof(f10615,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f811])).
fof(f10616,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f812])).
fof(f10617,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1030])).
fof(f10618,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1031])).
fof(f10619,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1671])).
fof(f10620,plain,(
  ( ! [X0,X1] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1672])).
fof(f10621,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1769])).
fof(f10622,plain,(
  ( ! [X0] : (~sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7713,f1770])).
fof(f10511,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) )),
  inference(forward_demodulation,[],[f10510,f698])).
fof(f10510,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) | s('type.num.num',X21) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))) )),
  inference(forward_demodulation,[],[f10509,f698])).
fof(f10509,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))) )),
  inference(subsumption_resolution,[],[f10508,f436])).
fof(f10508,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))) )),
  inference(forward_demodulation,[],[f10467,f6186])).
fof(f10467,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))) | s('type.num.num',X21) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))) )),
  inference(superposition,[],[f581,f698])).
fof(f10503,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))) )),
  inference(forward_demodulation,[],[f10502,f6296])).
fof(f10502,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))) | s('type.num.num',X13) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) )),
  inference(forward_demodulation,[],[f10501,f6296])).
fof(f10501,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) | s('type.num.num',X13) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) )),
  inference(subsumption_resolution,[],[f10464,f6542])).
fof(f10464,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) | s('type.num.num',X13) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) )),
  inference(superposition,[],[f581,f6296])).
fof(f10500,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))) )),
  inference(forward_demodulation,[],[f10499,f696])).
fof(f10499,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))) | s('type.num.num',X11) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(forward_demodulation,[],[f10498,f696])).
fof(f10498,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) | s('type.num.num',X11) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(subsumption_resolution,[],[f10497,f436])).
fof(f10497,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) | s('type.num.num',X11) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(forward_demodulation,[],[f10463,f4317])).
fof(f10463,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) | s('type.num.num',X11) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f581,f696])).
fof(f10459,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f581,f560])).
fof(f10391,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7712,f598])).
fof(f10393,plain,(
  ( ! [X0] : (~sP0('F_0',X0,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7712,f651])).
fof(f10408,plain,(
  ( ! [X0] : (~sP0('F_0',happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2)),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7712,f652])).
fof(f10423,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2))) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7712,f682])).
fof(f10425,plain,(
  ( ! [X0,X1] : (sP0(happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2)),X0,X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7712,f683])).
fof(f10371,plain,(
  ( ! [X2,X1] : (s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))) )),
  inference(subsumption_resolution,[],[f10299,f436])).
fof(f10299,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))) )),
  inference(superposition,[],[f580,f930])).
fof(f10361,plain,(
  ( ! [X47] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))) | s('type.num.num',X47) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f10360,f2838])).
fof(f10360,plain,(
  ( ! [X47] : (s('type.num.num',X47) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))) )),
  inference(forward_demodulation,[],[f10359,f2838])).
fof(f10359,plain,(
  ( ! [X47] : (s('type.num.num',X47) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))) )),
  inference(subsumption_resolution,[],[f10358,f436])).
fof(f10358,plain,(
  ( ! [X47] : (~p(s(bool,'T_0')) | s('type.num.num',X47) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))) )),
  inference(forward_demodulation,[],[f10293,f897])).
fof(f10293,plain,(
  ( ! [X47] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num',X47) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))) )),
  inference(superposition,[],[f580,f2838])).
fof(f10340,plain,(
  ( ! [X26,X25] : (s('type.num.num',X25) != s('type.num.num',X26) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(forward_demodulation,[],[f10339,f456])).
fof(f10339,plain,(
  ( ! [X26,X25] : (s('type.num.num',X26) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(forward_demodulation,[],[f10338,f462])).
fof(f10338,plain,(
  ( ! [X26,X25] : (s('type.num.num',X26) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(subsumption_resolution,[],[f10337,f436])).
fof(f10337,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | s('type.num.num',X26) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(forward_demodulation,[],[f10336,f733])).
fof(f10336,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25)))) | s('type.num.num',X26) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(forward_demodulation,[],[f10283,f6018])).
fof(f10283,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) | s('type.num.num',X26) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))) )),
  inference(superposition,[],[f580,f462])).
fof(f10331,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) | s('type.num.num',X21) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))))) )),
  inference(forward_demodulation,[],[f10330,f698])).
fof(f10330,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(forward_demodulation,[],[f10329,f698])).
fof(f10329,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(subsumption_resolution,[],[f10328,f436])).
fof(f10328,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X21) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(forward_demodulation,[],[f10281,f6186])).
fof(f10281,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))))) | s('type.num.num',X21) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(superposition,[],[f580,f698])).
fof(f10323,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) )),
  inference(forward_demodulation,[],[f10322,f6296])).
fof(f10322,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) )),
  inference(subsumption_resolution,[],[f10278,f6542])).
fof(f10278,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))) | s('type.num.num',X13) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f580,f6296])).
fof(f10321,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(forward_demodulation,[],[f10320,f696])).
fof(f10320,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(subsumption_resolution,[],[f10319,f436])).
fof(f10319,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(forward_demodulation,[],[f10277,f4317])).
fof(f10277,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num',X11) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f580,f696])).
fof(f10318,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) != s('type.num.num',X9) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f10317,f456])).
fof(f10317,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f10316,f695])).
fof(f10316,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(subsumption_resolution,[],[f10315,f436])).
fof(f10315,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f10314,f733])).
fof(f10314,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) | s('type.num.num',X9) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f10276,f6018])).
fof(f10276,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num',X9) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f580,f695])).
fof(f10273,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num',X2) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f580,f560])).
fof(f10258,plain,(
  ( ! [X8] : (s(bool,'F_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'F_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f10235,f8030])).
fof(f10235,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'F_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X8,bool))) ) | $spl2),
  inference(superposition,[],[f550,f8030])).
fof(f10205,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f10174,f7958])).
fof(f10174,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X8,bool))) ) | $spl2),
  inference(superposition,[],[f550,f7958])).
fof(f10202,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X6) | p(s(bool,X5))) ) | $spl2),
  inference(subsumption_resolution,[],[f10172,f436])).
fof(f10172,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X6)) ) | $spl2),
  inference(superposition,[],[f652,f7958])).
fof(f10201,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | p(s(bool,X3))) ) | $spl2),
  inference(subsumption_resolution,[],[f10171,f436])).
fof(f10171,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl2),
  inference(superposition,[],[f651,f7958])).
fof(f10195,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl2),
  inference(subsumption_resolution,[],[f10161,f436])).
fof(f10161,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl2),
  inference(superposition,[],[f702,f7958])).
fof(f10148,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X5),s('type.num.num',X4))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f10147,f567])).
fof(f10147,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f10053,f698])).
fof(f10053,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f702,f565])).
fof(f10146,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))))),
  inference(subsumption_resolution,[],[f10052,f436])).
fof(f10052,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))))),
  inference(superposition,[],[f702,f4932])).
fof(f10144,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) )),
  inference(subsumption_resolution,[],[f10050,f436])).
fof(f10050,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f702,f1378])).
fof(f10035,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',X27)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))),s('type.num.num',X28))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f702,f471])).
fof(f10024,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f702,f560])).
fof(f10088,plain,(
  ( ! [X28,X27] : (s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X27)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(forward_demodulation,[],[f10010,f698])).
fof(f10010,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28)))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f702,f471])).
fof(f10084,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f10083,f8597])).
fof(f10083,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f10082,f560])).
fof(f10082,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f10008,f636])).
fof(f10008,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24)))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)))))))) )),
  inference(superposition,[],[f702,f569])).
fof(f10081,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f10080,f698])).
fof(f10080,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f10079,f566])).
fof(f10079,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f10078,f698])).
fof(f10078,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f10077,f636])).
fof(f10077,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',X21)))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))))) )),
  inference(forward_demodulation,[],[f10007,f6172])).
fof(f10007,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21)))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))))) )),
  inference(superposition,[],[f702,f698])).
fof(f10073,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f10072,f570])).
fof(f10072,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f10005,f636])).
fof(f10005,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16)))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))))))))) )),
  inference(superposition,[],[f702,f570])).
fof(f10071,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10070,f6296])).
fof(f10070,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10069,f698])).
fof(f10069,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10068,f698])).
fof(f10068,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f10004,f636])).
fof(f10004,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))))) )),
  inference(superposition,[],[f702,f6296])).
fof(f10067,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f10066,f696])).
fof(f10066,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f10065,f698])).
fof(f10065,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f10003,f636])).
fof(f10003,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))))) )),
  inference(superposition,[],[f702,f696])).
fof(f10064,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f10063,f695])).
fof(f10063,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f10062,f450])).
fof(f10062,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f10061,f698])).
fof(f10061,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f10060,f636])).
fof(f10060,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f10002,f561])).
fof(f10002,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f702,f695])).
fof(f10055,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f9999,f636])).
fof(f9999,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f702,f560])).
fof(f9995,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2)))))) | $spl2),
  inference(unit_resulting_resolution,[],[f7789,f643])).
fof(f9997,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) | $spl2),
  inference(unit_resulting_resolution,[],[f7789,f585])).
fof(f9998,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) | $spl2),
  inference(unit_resulting_resolution,[],[f7789,f643])).
fof(f9986,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X8,bool)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f9958,f7722])).
fof(f9958,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),X8),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X8,bool))) ) | $spl2),
  inference(superposition,[],[f550,f7722])).
fof(f9983,plain,(
  ( ! [X6,X5] : (~sP0(X5,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X6) | p(s(bool,X5))) ) | $spl2),
  inference(subsumption_resolution,[],[f9956,f436])).
fof(f9956,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X6)) ) | $spl2),
  inference(superposition,[],[f652,f7722])).
fof(f9982,plain,(
  ( ! [X4,X3] : (~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | p(s(bool,X3))) ) | $spl2),
  inference(subsumption_resolution,[],[f9955,f436])).
fof(f9955,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl2),
  inference(superposition,[],[f651,f7722])).
fof(f9976,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK2,sK1)))))) | $spl2),
  inference(subsumption_resolution,[],[f9946,f436])).
fof(f9946,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK2,sK1)))))) | $spl2),
  inference(superposition,[],[f705,f7722])).
fof(f9932,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(subsumption_resolution,[],[f9703,f692])).
fof(f9703,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(superposition,[],[f644,f469])).
fof(f9686,plain,(
  ( ! [X54,X55] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X55))),s(bool,X54)))) | s(bool,'F_0') != s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f644,f469])).
fof(f9685,plain,(
  ( ! [X52,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X53))),s(bool,'F_0')))) | s(bool,X52) != s(bool,X53) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f644,f469])).
fof(f9672,plain,(
  ( ! [X28,X27] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X28))),s('type.num.num',X27)))) | s('type.num.num',X28) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f644,f471])).
fof(f9661,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f644,f560])).
fof(f9644,plain,(
  ( ! [X54,X55] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X54))),s(bool,X55)))) | s(bool,'F_0') != s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f644,f469])).
fof(f9643,plain,(
  ( ! [X52,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X53)))) | s(bool,X52) != s(bool,X53) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f644,f469])).
fof(f9630,plain,(
  ( ! [X28,X27] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X27))),s('type.num.num',X28)))) | s('type.num.num',X28) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f644,f471])).
fof(f9619,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f644,f560])).
fof(f9587,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f560,f644])).
fof(f9395,plain,(
  ( ! [X54,X55] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X55))),s(bool,X54)))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f643,f469])).
fof(f9394,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X53))),s(bool,'F_0')))) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f643,f469])).
fof(f9381,plain,(
  ( ! [X28,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X28))),s('type.num.num',X27)))) | s('type.num.num',X28) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f643,f471])).
fof(f9370,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f643,f560])).
fof(f9353,plain,(
  ( ! [X54,X55] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X54))),s(bool,X55)))) | s(bool,'F_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f643,f469])).
fof(f9352,plain,(
  ( ! [X52,X53] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X53)))) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f643,f469])).
fof(f9339,plain,(
  ( ! [X28,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X27))),s('type.num.num',X28)))) | s('type.num.num',X28) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f643,f471])).
fof(f9328,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(superposition,[],[f643,f560])).
fof(f9270,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f2682,f643])).
fof(f9271,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f3352,f643])).
fof(f9272,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f6539,f643])).
fof(f9455,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(forward_demodulation,[],[f9279,f566])).
fof(f9279,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(unit_resulting_resolution,[],[f5667,f643])).
fof(f9281,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f534,f643])).
fof(f9283,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4280,f643])).
fof(f9453,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(forward_demodulation,[],[f9284,f441])).
fof(f9284,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(unit_resulting_resolution,[],[f1734,f643])).
fof(f9285,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f6541,f643])).
fof(f9286,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f2809,f643])).
fof(f9287,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(unit_resulting_resolution,[],[f2812,f643])).
fof(f9288,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(unit_resulting_resolution,[],[f2991,f643])).
fof(f9289,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))),
  inference(unit_resulting_resolution,[],[f3234,f643])).
fof(f9290,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))))),
  inference(unit_resulting_resolution,[],[f3295,f643])).
fof(f9291,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))))))),
  inference(unit_resulting_resolution,[],[f3297,f643])).
fof(f9292,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK1))),s('type.num.num',sK2)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7710,f643])).
fof(f9293,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))),
  inference(unit_resulting_resolution,[],[f3213,f643])).
fof(f9298,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f726,f643])).
fof(f9448,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9299,f661])).
fof(f9299,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f2682,f643])).
fof(f9447,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9300,f661])).
fof(f9300,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f3352,f643])).
fof(f9446,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9301,f661])).
fof(f9301,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f6539,f643])).
fof(f9441,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(forward_demodulation,[],[f9440,f566])).
fof(f9440,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(forward_demodulation,[],[f9308,f661])).
fof(f9308,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f5667,f643])).
fof(f9437,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9310,f661])).
fof(f9310,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f534,f643])).
fof(f9435,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9312,f661])).
fof(f9312,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f4280,f643])).
fof(f9434,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(forward_demodulation,[],[f9433,f441])).
fof(f9433,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(forward_demodulation,[],[f9313,f661])).
fof(f9313,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'))))),
  inference(unit_resulting_resolution,[],[f1734,f643])).
fof(f9432,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f9314,f661])).
fof(f9314,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f6541,f643])).
fof(f9431,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f9315,f661])).
fof(f9315,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num',X0)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f2809,f643])).
fof(f9430,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f9316,f661])).
fof(f9316,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f2812,f643])).
fof(f9429,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f9317,f661])).
fof(f9317,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f2991,f643])).
fof(f9428,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))),
  inference(forward_demodulation,[],[f9318,f661])).
fof(f9318,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),
  inference(unit_resulting_resolution,[],[f3234,f643])).
fof(f9427,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))))),
  inference(forward_demodulation,[],[f9319,f661])).
fof(f9319,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),
  inference(unit_resulting_resolution,[],[f3295,f643])).
fof(f9426,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))))))),
  inference(forward_demodulation,[],[f9320,f661])).
fof(f9320,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))))),
  inference(unit_resulting_resolution,[],[f3297,f643])).
fof(f9321,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num',sK1)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7710,f643])).
fof(f9425,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',sK2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))),
  inference(forward_demodulation,[],[f9322,f661])).
fof(f9322,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))),s('type.num.num',sK2))))),
  inference(unit_resulting_resolution,[],[f3213,f643])).
fof(f9327,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))))),
  inference(unit_resulting_resolution,[],[f726,f643])).
fof(f9263,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f9186,f698])).
fof(f9186,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(superposition,[],[f705,f564])).
fof(f9262,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.|48|_0','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(subsumption_resolution,[],[f9185,f436])).
fof(f9185,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.|48|_0','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f705,f930])).
fof(f9260,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X2,'const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(subsumption_resolution,[],[f9181,f436])).
fof(f9181,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X2,'const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(superposition,[],[f705,f897])).
fof(f9259,plain,(
  ( ! [X54,X52,X53] : (s('type.num.num',X53) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X54,happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X54),s('type.num.num',X53))))) )),
  inference(forward_demodulation,[],[f9178,f553])).
fof(f9178,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X54),s('type.num.num',X53)))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X54,happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f705,f553])).
fof(f9258,plain,(
  ( ! [X50,X51] : (s('type.num.num',X50) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X51,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X50))))) )),
  inference(forward_demodulation,[],[f9177,f456])).
fof(f9177,plain,(
  ( ! [X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X50)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X51,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))))))))) )),
  inference(superposition,[],[f705,f456])).
fof(f9256,plain,(
  ( ! [X48] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X48,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f9255,f441])).
fof(f9255,plain,(
  ( ! [X48] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X48,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(forward_demodulation,[],[f9175,f6018])).
fof(f9175,plain,(
  ( ! [X48] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X48,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) )),
  inference(superposition,[],[f705,f441])).
fof(f9254,plain,(
  ( ! [X47] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X47,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f9253,f2838])).
fof(f9253,plain,(
  ( ! [X47] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X47,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f9174,f6018])).
fof(f9174,plain,(
  ( ! [X47] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X47,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f705,f2838])).
fof(f9252,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X46,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))))))) )),
  inference(forward_demodulation,[],[f9173,f567])).
fof(f9173,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X46,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))))))))) )),
  inference(superposition,[],[f705,f567])).
fof(f9250,plain,(
  ( ! [X41,X40] : (s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X41,'const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f9171,f451])).
fof(f9171,plain,(
  ( ! [X41,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X40)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X41,'const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f705,f451])).
fof(f9249,plain,(
  ( ! [X39,X38] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X39,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X38))))) )),
  inference(forward_demodulation,[],[f9170,f693])).
fof(f9170,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num',X38)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X39,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38))))))))) )),
  inference(superposition,[],[f705,f693])).
fof(f9248,plain,(
  ( ! [X37,X36] : (s('type.num.num',X36) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X37,'const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X36))))) )),
  inference(forward_demodulation,[],[f9169,f694])).
fof(f9169,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X36)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X37,'const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f705,f694])).
fof(f9245,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X31,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))))))) )),
  inference(forward_demodulation,[],[f9166,f566])).
fof(f9166,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X31,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))))))))))) )),
  inference(superposition,[],[f705,f566])).
fof(f9165,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X28),s('type.num.num',X27)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X28,'const.num.SUC_1'(s('type.num.num',sK4(X27))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f705,f471])).
fof(f9244,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X26,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f9243,f462])).
fof(f9243,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num',X25)))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X26,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))))))) )),
  inference(forward_demodulation,[],[f9164,f6018])).
fof(f9164,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',X25)))))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X26,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))))))))) )),
  inference(superposition,[],[f705,f462])).
fof(f9242,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X24,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))))))) )),
  inference(forward_demodulation,[],[f9241,f8597])).
fof(f9241,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X24,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))))))) )),
  inference(forward_demodulation,[],[f9163,f560])).
fof(f9163,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X24,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))))))))) )),
  inference(superposition,[],[f705,f569])).
fof(f9240,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X21,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))))))) )),
  inference(forward_demodulation,[],[f9162,f698])).
fof(f9162,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X21,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))))))) )),
  inference(superposition,[],[f705,f698])).
fof(f9239,plain,(
  ( ! [X17,X18] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f9161,f450])).
fof(f9161,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17))))))))) )),
  inference(superposition,[],[f705,f450])).
fof(f9238,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X16,'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))))))) )),
  inference(forward_demodulation,[],[f9160,f570])).
fof(f9160,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X16,'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))))))))) )),
  inference(superposition,[],[f705,f570])).
fof(f9237,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f9159,f6296])).
fof(f9159,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))))) )),
  inference(superposition,[],[f705,f6296])).
fof(f9236,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f9158,f696])).
fof(f9158,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))))) )),
  inference(superposition,[],[f705,f696])).
fof(f9235,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f9234,f695])).
fof(f9234,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(forward_demodulation,[],[f9157,f6018])).
fof(f9157,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f705,f695])).
fof(f9233,plain,(
  ( ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X7,'const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f9156,f449])).
fof(f9156,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X7,'const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f705,f449])).
fof(f9154,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) )),
  inference(superposition,[],[f705,f560])).
fof(f9232,plain,(
  ( ! [X54,X52,X53] : (s('type.num.num',X54) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0')),X54)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X54))))) )),
  inference(forward_demodulation,[],[f9153,f553])).
fof(f9153,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X54)))) | s('type.num.num',X54) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(happ(s(fun('type.num.num','type.num.num'),sK10(X52,X53,'type.num.num')),s('type.num.num','const.num.|48|_0')),X54))))))) )),
  inference(superposition,[],[f705,f553])).
fof(f9231,plain,(
  ( ! [X50,X51] : (s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))),X51)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X50),s('type.num.num',X51))))) )),
  inference(forward_demodulation,[],[f9152,f456])).
fof(f9152,plain,(
  ( ! [X50,X51] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X50),s('type.num.num',X51)))) | s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))),X51))))))) )),
  inference(superposition,[],[f705,f456])).
fof(f9230,plain,(
  ( ! [X49] : (s('type.num.num',X49) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X49)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))))) )),
  inference(forward_demodulation,[],[f9229,f450])).
fof(f9229,plain,(
  ( ! [X49] : (s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X49)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))))) )),
  inference(forward_demodulation,[],[f9151,f438])).
fof(f9151,plain,(
  ( ! [X49] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)))) | s('type.num.num',X49) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X49))))))) )),
  inference(superposition,[],[f705,f438])).
fof(f9228,plain,(
  ( ! [X48] : (s('type.num.num',X48) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X48)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X48))))) )),
  inference(forward_demodulation,[],[f9227,f450])).
fof(f9227,plain,(
  ( ! [X48] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X48)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X48))))) )),
  inference(forward_demodulation,[],[f9226,f698])).
fof(f9226,plain,(
  ( ! [X48] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X48)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X48))))) )),
  inference(forward_demodulation,[],[f9150,f441])).
fof(f9150,plain,(
  ( ! [X48] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X48)))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X48))))))) )),
  inference(superposition,[],[f705,f441])).
fof(f9225,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X47)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47))))) )),
  inference(forward_demodulation,[],[f9224,f450])).
fof(f9224,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X47)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47))))) )),
  inference(forward_demodulation,[],[f9223,f698])).
fof(f9223,plain,(
  ( ! [X47] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X47)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47))))) )),
  inference(forward_demodulation,[],[f9149,f2838])).
fof(f9149,plain,(
  ( ! [X47] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X47))))))) )),
  inference(superposition,[],[f705,f2838])).
fof(f9222,plain,(
  ( ! [X45,X46,X44] : (s('type.num.num',X46) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num',X46))))) )),
  inference(forward_demodulation,[],[f9148,f567])).
fof(f9148,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num',X45))),s('type.num.num',X46)))) | s('type.num.num',X46) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X45)))),X46))))))) )),
  inference(superposition,[],[f705,f567])).
fof(f9221,plain,(
  ( ! [X43,X42] : (s('type.num.num',X43) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)),X43)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))))) )),
  inference(forward_demodulation,[],[f9220,f450])).
fof(f9220,plain,(
  ( ! [X43,X42] : (s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)),X43)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))))) )),
  inference(forward_demodulation,[],[f9147,f452])).
fof(f9147,plain,(
  ( ! [X43,X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43)))) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)),X43))))))) )),
  inference(superposition,[],[f705,f452])).
fof(f9219,plain,(
  ( ! [X41,X40] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')),X41)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f9146,f451])).
fof(f9146,plain,(
  ( ! [X41,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num',X41)))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.-_2'(s('type.num.num',X40),s('type.num.num','const.num.|48|_0')),X41))))))) )),
  inference(superposition,[],[f705,f451])).
fof(f9218,plain,(
  ( ! [X39,X38] : (s('type.num.num',X39) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38)),X39)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39))))) )),
  inference(forward_demodulation,[],[f9145,f693])).
fof(f9145,plain,(
  ( ! [X39,X38] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))) | s('type.num.num',X39) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X38)),X39))))))) )),
  inference(superposition,[],[f705,f693])).
fof(f9217,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X37)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X37))))) )),
  inference(forward_demodulation,[],[f9144,f694])).
fof(f9144,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X37)))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X37))))))) )),
  inference(superposition,[],[f705,f694])).
fof(f9216,plain,(
  ( ! [X35,X34] : (s('type.num.num',X35) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X35))))) )),
  inference(forward_demodulation,[],[f9215,f450])).
fof(f9215,plain,(
  ( ! [X35,X34] : (s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X35))))) )),
  inference(forward_demodulation,[],[f9143,f457])).
fof(f9143,plain,(
  ( ! [X35,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X35)))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35))))))) )),
  inference(superposition,[],[f705,f457])).
fof(f9214,plain,(
  ( ! [X33,X32] : (s('type.num.num',X33) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)),X33)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f9213,f450])).
fof(f9213,plain,(
  ( ! [X33,X32] : (s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)),X33)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f9142,f454])).
fof(f9142,plain,(
  ( ! [X33,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33)))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)),X33))))))) )),
  inference(superposition,[],[f705,f454])).
fof(f9212,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30)))),X31)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))),s('type.num.num',X31))))) )),
  inference(forward_demodulation,[],[f9211,f636])).
fof(f9211,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30)))),X31)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))),s('type.num.num',X31))))) )),
  inference(forward_demodulation,[],[f9141,f698])).
fof(f9141,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))))),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30)))),X31))))))) )),
  inference(superposition,[],[f705,f566])).
fof(f9210,plain,(
  ( ! [X28,X27] : (s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X27)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num',sK4(X27))),X28)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X28)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(forward_demodulation,[],[f9140,f698])).
fof(f9140,plain,(
  ( ! [X28,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X28)))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X27)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.num.SUC_1'(s('type.num.num',sK4(X27))),X28)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27)) )),
  inference(superposition,[],[f705,f471])).
fof(f9209,plain,(
  ( ! [X26,X25] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)),X26)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f9208,f698])).
fof(f9208,plain,(
  ( ! [X26,X25] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)),X26)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f9139,f462])).
fof(f9139,plain,(
  ( ! [X26,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))),s('type.num.num',X26)))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X25)),X26))))))) )),
  inference(superposition,[],[f705,f462])).
fof(f9207,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)),X24)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f9138,f636])).
fof(f9138,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))),s('type.num.num',X24)))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23)),X24))))))) )),
  inference(superposition,[],[f705,f569])).
fof(f9206,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)),X21)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f9205,f566])).
fof(f9205,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)),X21)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f9204,f698])).
fof(f9204,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)),X21)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f9137,f636])).
fof(f9137,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))),s('type.num.num',X21)))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)),X21))))))) )),
  inference(superposition,[],[f705,f698])).
fof(f9203,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)),X18)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f9202,f450])).
fof(f9202,plain,(
  ( ! [X17,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)),X18)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f9136,f636])).
fof(f9136,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X17)),X18))))))) )),
  inference(superposition,[],[f705,f450])).
fof(f9201,plain,(
  ( ! [X14,X15,X16] : (s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))),X16)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16))))) )),
  inference(forward_demodulation,[],[f9135,f636])).
fof(f9135,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))))),s('type.num.num',X16)))) | s('type.num.num',X16) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15)))),X16))))))) )),
  inference(superposition,[],[f705,f570])).
fof(f9200,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f9199,f698])).
fof(f9199,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f9198,f698])).
fof(f9198,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f9134,f636])).
fof(f9134,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13))))))) )),
  inference(superposition,[],[f705,f6296])).
fof(f9197,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f9196,f698])).
fof(f9196,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f9133,f636])).
fof(f9133,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11))))))) )),
  inference(superposition,[],[f705,f696])).
fof(f9195,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f9194,f450])).
fof(f9194,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f9193,f698])).
fof(f9193,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f9132,f636])).
fof(f9132,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9))))))) )),
  inference(superposition,[],[f705,f695])).
fof(f9192,plain,(
  ( ! [X6,X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f9191,f450])).
fof(f9191,plain,(
  ( ! [X6,X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f9131,f636])).
fof(f9131,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')),X7))))))) )),
  inference(superposition,[],[f705,f449])).
fof(f9189,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)),X2)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))))) )),
  inference(forward_demodulation,[],[f9129,f636])).
fof(f9129,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)),X2))))))) )),
  inference(superposition,[],[f705,f560])).
fof(f9105,plain,(
  ( ! [X344,X346,X345] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num','const.num.SUC_1'(s('type.num.num',X345))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num',X345)))),X346,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X346),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num','const.num.SUC_1'(s('type.num.num',X345))))))))) )),
  inference(forward_demodulation,[],[f9044,f570])).
fof(f9044,plain,(
  ( ! [X344,X346,X345] : (p(s(bool,happ(s(fun('type.num.num',bool),X346),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num','const.num.SUC_1'(s('type.num.num',X345)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num',X345))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X344),s('type.num.num',X345)))),X346,'type.num.num'))) )),
  inference(superposition,[],[f550,f570])).
fof(f9102,plain,(
  ( ! [X220,X219,X221] : (s('type.num.num',X221) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num',X220))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num',X220)))),X221)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num',X220))))),s('type.num.num',X221))))) )),
  inference(forward_demodulation,[],[f9002,f636])).
fof(f9002,plain,(
  ( ! [X220,X219,X221] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num','const.num.SUC_1'(s('type.num.num',X220))))),s('type.num.num',X221)))) | s('type.num.num',X221) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num',X220))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X219),s('type.num.num',X220)))),X221))))) )),
  inference(superposition,[],[f704,f570])).
fof(f9101,plain,(
  ( ! [X218,X216,X217] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num','const.num.SUC_1'(s('type.num.num',X217))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',sK12(X218,'const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num',X217)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num','const.num.SUC_1'(s('type.num.num',X217))))))))) )),
  inference(forward_demodulation,[],[f9001,f570])).
fof(f9001,plain,(
  ( ! [X218,X216,X217] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num','const.num.SUC_1'(s('type.num.num',X217)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num',X217))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',sK12(X218,'const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X216),s('type.num.num',X217))))))))) )),
  inference(superposition,[],[f704,f570])).
fof(f9100,plain,(
  ( ! [X215,X213,X214] : (s('type.num.num',X215) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X214))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X214)))),X215)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))))),s('type.num.num',X215))))) )),
  inference(forward_demodulation,[],[f9000,f636])).
fof(f9000,plain,(
  ( ! [X215,X213,X214] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',X214))))),s('type.num.num',X215)))) | s('type.num.num',X215) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X214))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num',X214)))),X215))))) )),
  inference(superposition,[],[f703,f570])).
fof(f9099,plain,(
  ( ! [X212,X210,X211] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num','const.num.SUC_1'(s('type.num.num',X211))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num',sK11(X212,'const.arithmetic.+_2'(s('type.num.num',X210),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num',X211)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X212),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num','const.num.SUC_1'(s('type.num.num',X211))))))))) )),
  inference(forward_demodulation,[],[f8999,f570])).
fof(f8999,plain,(
  ( ! [X212,X210,X211] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X212),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num','const.num.SUC_1'(s('type.num.num',X211)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X210),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num',X211))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num',sK11(X212,'const.arithmetic.+_2'(s('type.num.num',X210),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X210),s('type.num.num',X211))))))))) )),
  inference(superposition,[],[f703,f570])).
fof(f8987,plain,(
  ( ! [X180,X178,X179] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X178),s('type.num.num','const.num.SUC_1'(s('type.num.num',X179))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X178),s('type.num.num',X179)))))) )),
  inference(superposition,[],[f613,f570])).
fof(f8984,plain,(
  ( ! [X171,X169,X170] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',X170))))),s('type.num.num',X171))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X169),s('type.num.num',X170)))))) )),
  inference(superposition,[],[f612,f570])).
fof(f9090,plain,(
  ( ! [X158,X159,X157] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num','const.num.SUC_1'(s('type.num.num',X158)))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num',X158)))),X159)),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num','const.num.SUC_1'(s('type.num.num',X158))))))))) )),
  inference(forward_demodulation,[],[f8980,f570])).
fof(f8980,plain,(
  ( ! [X158,X159,X157] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num',X158)))),X159)),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num','const.num.SUC_1'(s('type.num.num',X158)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X157),s('type.num.num',X158))))))))) )),
  inference(superposition,[],[f605,f570])).
fof(f9089,plain,(
  ( ! [X156,X154,X155] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num','const.num.SUC_1'(s('type.num.num',X155))))),s('type.num.num',X156)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X156,'const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num',X155)))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num','const.num.SUC_1'(s('type.num.num',X155))))))))) )),
  inference(forward_demodulation,[],[f8979,f570])).
fof(f8979,plain,(
  ( ! [X156,X154,X155] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X156,'const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num',X155)))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num','const.num.SUC_1'(s('type.num.num',X155)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X154),s('type.num.num',X155))))),s('type.num.num',X156))))) )),
  inference(superposition,[],[f604,f570])).
fof(f8966,plain,(
  ( ! [X116,X117,X115] : (s('type.num.num',X117) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X117),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X115),s('type.num.num','const.num.SUC_1'(s('type.num.num',X116))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X115),s('type.num.num',X116)))))) )),
  inference(superposition,[],[f586,f570])).
fof(f8963,plain,(
  ( ! [X107,X108,X106] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X108))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X106),s('type.num.num','const.num.SUC_1'(s('type.num.num',X107))))))) | s('type.num.num',X108) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X106),s('type.num.num',X107)))))) )),
  inference(superposition,[],[f585,f570])).
fof(f8928,plain,(
  ( ! [X17,X15,X16] : (~sP0('F_0',X17,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f1298,f570])).
fof(f8927,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14)))) )),
  inference(superposition,[],[f613,f570])).
fof(f8926,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(superposition,[],[f612,f570])).
fof(f8925,plain,(
  ( ! [X10,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10)))) )),
  inference(superposition,[],[f599,f570])).
fof(f8924,plain,(
  ( ! [X8,X7] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8)))) )),
  inference(superposition,[],[f586,f570])).
fof(f8923,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X6)))))))) )),
  inference(superposition,[],[f566,f570])).
fof(f8921,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num',X8)))))))) )),
  inference(superposition,[],[f570,f698])).
fof(f9057,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f8918,f6423])).
fof(f8918,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f570,f694])).
fof(f8834,plain,(
  ( ! [X337,X339,X338] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X337))),s('type.num.num',X338))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))),s('type.num.num',X338)),X339,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X339),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X337))),s('type.num.num',X338))))))) )),
  inference(forward_demodulation,[],[f8833,f8597])).
fof(f8833,plain,(
  ( ! [X337,X339,X338] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))),s('type.num.num',X338)),X339,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X339),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X337))),s('type.num.num',X338))))))) )),
  inference(forward_demodulation,[],[f8722,f560])).
fof(f8722,plain,(
  ( ! [X337,X339,X338] : (p(s(bool,happ(s(fun('type.num.num',bool),X339),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X337))),s('type.num.num',X338)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))),s('type.num.num',X338))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))),s('type.num.num',X338)),X339,'type.num.num'))) )),
  inference(superposition,[],[f550,f569])).
fof(f8828,plain,(
  ( ! [X212,X213,X214] : (s('type.num.num',X214) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X212),s('type.num.num',X213))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X212),s('type.num.num',X213))),s('type.num.num',X213)),X214)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X212))),s('type.num.num',X213))),s('type.num.num',X214))))) )),
  inference(forward_demodulation,[],[f8680,f636])).
fof(f8680,plain,(
  ( ! [X212,X213,X214] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X212))),s('type.num.num',X213))),s('type.num.num',X214)))) | s('type.num.num',X214) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X212),s('type.num.num',X213))),s('type.num.num',X213))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X212),s('type.num.num',X213))),s('type.num.num',X213)),X214))))) )),
  inference(superposition,[],[f704,f569])).
fof(f8827,plain,(
  ( ! [X210,X211,X209] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',X210))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X211),s('type.num.num',sK12(X211,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X211),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',X210))))))) )),
  inference(forward_demodulation,[],[f8826,f8597])).
fof(f8826,plain,(
  ( ! [X210,X211,X209] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X210),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X211),s('type.num.num',sK12(X211,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X211),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',X210))))))) )),
  inference(forward_demodulation,[],[f8679,f560])).
fof(f8679,plain,(
  ( ! [X210,X211,X209] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X211),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X209))),s('type.num.num',X210)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X211),s('type.num.num',sK12(X211,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210))))))) )),
  inference(superposition,[],[f704,f569])).
fof(f8825,plain,(
  ( ! [X208,X206,X207] : (s('type.num.num',X208) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num',X207)),X208)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))),s('type.num.num',X207))),s('type.num.num',X208))))) )),
  inference(forward_demodulation,[],[f8678,f636])).
fof(f8678,plain,(
  ( ! [X208,X206,X207] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X206))),s('type.num.num',X207))),s('type.num.num',X208)))) | s('type.num.num',X208) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num',X207))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num',X207)),X208))))) )),
  inference(superposition,[],[f703,f569])).
fof(f8824,plain,(
  ( ! [X204,X205,X203] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X203))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',sK11(X205,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X203),s('type.num.num',X204))),s('type.num.num',X204)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X205),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X203))),s('type.num.num',X204))))))) )),
  inference(forward_demodulation,[],[f8823,f8597])).
fof(f8823,plain,(
  ( ! [X204,X205,X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X203),s('type.num.num',X204))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',sK11(X205,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X203),s('type.num.num',X204))),s('type.num.num',X204)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X205),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X203))),s('type.num.num',X204))))))) )),
  inference(forward_demodulation,[],[f8677,f560])).
fof(f8677,plain,(
  ( ! [X204,X205,X203] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X205),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X203))),s('type.num.num',X204)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X203),s('type.num.num',X204))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',sK11(X205,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X203),s('type.num.num',X204))),s('type.num.num',X204))))))) )),
  inference(superposition,[],[f703,f569])).
fof(f8665,plain,(
  ( ! [X173,X171,X172] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X171))),s('type.num.num',X172))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num',X172)))) )),
  inference(superposition,[],[f613,f569])).
fof(f8662,plain,(
  ( ! [X163,X164,X162] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X162))),s('type.num.num',X163))),s('type.num.num',X164))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X162),s('type.num.num',X163))),s('type.num.num',X163)))) )),
  inference(superposition,[],[f612,f569])).
fof(f8806,plain,(
  ( ! [X152,X151,X150] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))),s('type.num.num',X151)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num',X151))),s('type.num.num',X151)),X152)),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))),s('type.num.num',X151))))))) )),
  inference(forward_demodulation,[],[f8805,f8597])).
fof(f8805,plain,(
  ( ! [X152,X151,X150] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num',X151)))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num',X151))),s('type.num.num',X151)),X152)),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))),s('type.num.num',X151))))))) )),
  inference(forward_demodulation,[],[f8658,f560])).
fof(f8658,plain,(
  ( ! [X152,X151,X150] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num',X151))),s('type.num.num',X151)),X152)),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X150))),s('type.num.num',X151)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X150),s('type.num.num',X151))),s('type.num.num',X151))))))) )),
  inference(superposition,[],[f605,f569])).
fof(f8804,plain,(
  ( ! [X149,X147,X148] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X147))),s('type.num.num',X148))),s('type.num.num',X149)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X149,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num',X148))),s('type.num.num',X148)))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X147))),s('type.num.num',X148))))))) )),
  inference(forward_demodulation,[],[f8803,f8597])).
fof(f8803,plain,(
  ( ! [X149,X147,X148] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num',X148))))),s('type.num.num',X149)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X149,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num',X148))),s('type.num.num',X148)))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X147))),s('type.num.num',X148))))))) )),
  inference(forward_demodulation,[],[f8657,f560])).
fof(f8657,plain,(
  ( ! [X149,X147,X148] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X149,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num',X148))),s('type.num.num',X148)))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X147))),s('type.num.num',X148)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num',X148))),s('type.num.num',X148))),s('type.num.num',X149))))) )),
  inference(superposition,[],[f604,f569])).
fof(f8644,plain,(
  ( ! [X109,X110,X108] : (s('type.num.num',X110) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X108))),s('type.num.num',X109))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X108),s('type.num.num',X109))),s('type.num.num',X109)))) )),
  inference(superposition,[],[f586,f569])).
fof(f8641,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X101))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X99))),s('type.num.num',X100))))) | s('type.num.num',X101) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num',X100)))) )),
  inference(superposition,[],[f585,f569])).
fof(f8766,plain,(
  ( ! [X94,X95,X93] : (s('type.num.num',X95) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X93),s('type.num.num',X94))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X93))),s('type.num.num',X94))),s('type.num.num',X95))))) )),
  inference(forward_demodulation,[],[f8765,f6896])).
fof(f8765,plain,(
  ( ! [X94,X95,X93] : (s('type.num.num',X95) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X93),s('type.num.num',X94))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X94))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X93))),s('type.num.num',X94))),s('type.num.num',X95))))) )),
  inference(forward_demodulation,[],[f8639,f566])).
fof(f8639,plain,(
  ( ! [X94,X95,X93] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X93))),s('type.num.num',X94))),s('type.num.num',X95)))) | s('type.num.num',X95) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X93),s('type.num.num',X94))),s('type.num.num',X94)))))) )),
  inference(superposition,[],[f575,f569])).
fof(f8607,plain,(
  ( ! [X14,X15,X16] : (~sP0('F_0',X16,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X15))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num',X15)))))) )),
  inference(superposition,[],[f1298,f569])).
fof(f8606,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13)) )),
  inference(superposition,[],[f613,f569])).
fof(f8605,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X11)))) )),
  inference(superposition,[],[f612,f569])).
fof(f8604,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(superposition,[],[f599,f569])).
fof(f8603,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) )),
  inference(superposition,[],[f586,f569])).
fof(f8602,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f566,f569])).
fof(f8597,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f569,f560])).
fof(f8734,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f8571,f6423])).
fof(f8571,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f569,f693])).
fof(f8729,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) )),
  inference(forward_demodulation,[],[f8537,f560])).
fof(f8537,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f569,f602])).
fof(f8728,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) )),
  inference(forward_demodulation,[],[f8538,f560])).
fof(f8538,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f569,f574])).
fof(f8727,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f8539,f560])).
fof(f8539,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X2))))))) )),
  inference(unit_resulting_resolution,[],[f569,f557])).
fof(f8726,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f8540,f560])).
fof(f8540,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f569,f611])).
fof(f8725,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))))) )),
  inference(forward_demodulation,[],[f8541,f560])).
fof(f8541,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f569,f602])).
fof(f8724,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))))) )),
  inference(forward_demodulation,[],[f8542,f560])).
fof(f8542,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f569,f574])).
fof(f8723,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))))))) )),
  inference(forward_demodulation,[],[f8543,f560])).
fof(f8543,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X2))))))) )),
  inference(unit_resulting_resolution,[],[f569,f557])).
fof(f8258,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f614,f560])).
fof(f8030,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7714,f595])).
fof(f8032,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,'T_0')) ) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7714,f651])).
fof(f8040,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'T_0',X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7714,f652])).
fof(f8048,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'F_0')) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7714,f653])).
fof(f8068,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7714,f653])).
fof(f8069,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f7714,f653])).
fof(f8085,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7714,f682])).
fof(f8088,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f811])).
fof(f8089,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f812])).
fof(f8090,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1030])).
fof(f8091,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1031])).
fof(f8092,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1671])).
fof(f8093,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1672])).
fof(f8094,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1769])).
fof(f8095,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7714,f1770])).
fof(f7952,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK11(sK2,sK1)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7711,f703])).
fof(f7958,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7711,f598])).
fof(f7960,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7711,f651])).
fof(f7973,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7711,f652])).
fof(f7986,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7711,f682])).
fof(f7989,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7711,f683])).
fof(f7950,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f7840,f564])).
fof(f7840,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))) )),
  inference(superposition,[],[f600,f565])).
fof(f7912,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))))) )),
  inference(forward_demodulation,[],[f7911,f566])).
fof(f7911,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) | s('type.num.num',X25) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) )),
  inference(forward_demodulation,[],[f7823,f6018])).
fof(f7823,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))))) | s('type.num.num',X25) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) )),
  inference(superposition,[],[f600,f566])).
fof(f7910,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',sK4(X21))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X21)))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(forward_demodulation,[],[f7822,f6018])).
fof(f7822,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21))))))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f600,f471])).
fof(f7898,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f7897,f695])).
fof(f7897,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f7896,f6018])).
fof(f7896,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f7816,f695])).
fof(f7816,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f600,f695])).
fof(f7814,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f600,f560])).
fof(f7799,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f600,f471])).
fof(f7855,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7854,f698])).
fof(f7854,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)))) )),
  inference(forward_demodulation,[],[f7853,f698])).
fof(f7853,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)))) )),
  inference(forward_demodulation,[],[f7797,f6172])).
fof(f7797,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)))) )),
  inference(superposition,[],[f600,f698])).
fof(f7791,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f600,f560])).
fof(f7789,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) | $spl2),
  inference(unit_resulting_resolution,[],[f7710,f585])).
fof(f7710,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK2) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f574])).
fof(f7711,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f601])).
fof(f7712,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK2)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f604])).
fof(f7713,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(sK1,sK2)),s('type.num.num',sK1)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f605])).
fof(f7714,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK2)))) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f629])).
fof(f7722,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f436,f7598,f598])).
fof(f7724,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7598,f651])).
fof(f7737,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7598,f652])).
fof(f7750,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1))) | $spl2),
  inference(unit_resulting_resolution,[],[f692,f7598,f682])).
fof(f7754,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)),X0,X1)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f7598,f683])).
fof(f7599,plain,(
  ( ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num',X7) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(subsumption_resolution,[],[f7428,f692])).
fof(f7428,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num',X7) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) )),
  inference(superposition,[],[f592,f469])).
fof(f7593,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X4)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))) )),
  inference(forward_demodulation,[],[f7426,f564])).
fof(f7426,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))) )),
  inference(superposition,[],[f592,f564])).
fof(f7405,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X21)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f592,f471])).
fof(f7397,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f592,f560])).
fof(f7503,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f7502,f566])).
fof(f7502,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25)))) | s('type.num.num',X25) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) )),
  inference(forward_demodulation,[],[f7383,f6018])).
fof(f7383,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))))) | s('type.num.num',X25) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))) )),
  inference(superposition,[],[f592,f566])).
fof(f7501,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',sK4(X21))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(forward_demodulation,[],[f7382,f6018])).
fof(f7382,plain,(
  ( ! [X21,X22] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21))))))) | s('type.num.num',X22) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f592,f471])).
fof(f7489,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7488,f695])).
fof(f7488,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f7487,f6018])).
fof(f7487,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f7376,f695])).
fof(f7376,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f592,f695])).
fof(f7374,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f592,f560])).
fof(f7345,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK9(X0,X1,bool))) )),
  inference(superposition,[],[f551,f469])).
fof(f7347,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK9(X3,happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X2,fun(X0,bool))),s('type.num.num','const.num.|48|_0')),X0)))))) )),
  inference(forward_demodulation,[],[f7344,f553])).
fof(f7344,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK9(X3,happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X2,fun(X0,bool))),s('type.num.num','const.num.|48|_0')),X0))))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X2,fun(X0,bool))),s('type.num.num','const.num.|48|_0'))),s(X0,X3))))) )),
  inference(superposition,[],[f551,f553])).
fof(f7337,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f7265,f698])).
fof(f7265,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5))))))) )),
  inference(superposition,[],[f704,f564])).
fof(f7336,plain,(
  ( ! [X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.num.|48|_0','const.num.SUC_1'(s('type.num.num',X3))))))) )),
  inference(subsumption_resolution,[],[f7264,f436])).
fof(f7264,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.num.|48|_0','const.num.SUC_1'(s('type.num.num',X3))))))) )),
  inference(superposition,[],[f704,f930])).
fof(f7335,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(subsumption_resolution,[],[f7261,f436])).
fof(f7261,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(superposition,[],[f704,f732])).
fof(f7334,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK12(X2,'const.num.SUC_1'(s('type.num.num',X2))))))) )),
  inference(subsumption_resolution,[],[f7260,f436])).
fof(f7260,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK12(X2,'const.num.SUC_1'(s('type.num.num',X2))))))) )),
  inference(superposition,[],[f704,f897])).
fof(f7333,plain,(
  ( ! [X47,X48,X46] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num',sK12(X48,happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num',X47))))) )),
  inference(forward_demodulation,[],[f7257,f553])).
fof(f7257,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X48),s('type.num.num',X47)))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num',sK12(X48,happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f704,f553])).
fof(f7332,plain,(
  ( ! [X45,X44] : (s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK12(X45,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X44))))) )),
  inference(forward_demodulation,[],[f7256,f456])).
fof(f7256,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num',X44)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK12(X45,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))))))) )),
  inference(superposition,[],[f704,f456])).
fof(f7330,plain,(
  ( ! [X42] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK12(X42,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7329,f441])).
fof(f7329,plain,(
  ( ! [X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK12(X42,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(forward_demodulation,[],[f7254,f6018])).
fof(f7254,plain,(
  ( ! [X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK12(X42,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(superposition,[],[f704,f441])).
fof(f7328,plain,(
  ( ! [X41] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK12(X41,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7327,f2838])).
fof(f7327,plain,(
  ( ! [X41] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK12(X41,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f7253,f6018])).
fof(f7253,plain,(
  ( ! [X41] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK12(X41,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f704,f2838])).
fof(f7326,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK12(X40,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f7252,f567])).
fof(f7252,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK12(X40,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))))))) )),
  inference(superposition,[],[f704,f567])).
fof(f7324,plain,(
  ( ! [X35,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK12(X35,'const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X35),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f7250,f451])).
fof(f7250,plain,(
  ( ! [X35,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X35),s('type.num.num',X34)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK12(X35,'const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f704,f451])).
fof(f7323,plain,(
  ( ! [X33,X32] : (s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK12(X33,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num',X32))))) )),
  inference(forward_demodulation,[],[f7249,f693])).
fof(f7249,plain,(
  ( ! [X33,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num',X32)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK12(X33,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))))))) )),
  inference(superposition,[],[f704,f693])).
fof(f7322,plain,(
  ( ! [X30,X31] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK12(X31,'const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num',X30))))) )),
  inference(forward_demodulation,[],[f7248,f694])).
fof(f7248,plain,(
  ( ! [X30,X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num',X30)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK12(X31,'const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f704,f694])).
fof(f7319,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK12(X25,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))))) )),
  inference(forward_demodulation,[],[f7245,f566])).
fof(f7245,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK12(X25,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))))))) )),
  inference(superposition,[],[f704,f566])).
fof(f7244,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X21)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK12(X22,'const.num.SUC_1'(s('type.num.num',sK4(X21))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f704,f471])).
fof(f7318,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK12(X20,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f7317,f462])).
fof(f7317,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X19)))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK12(X20,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))))))) )),
  inference(forward_demodulation,[],[f7243,f6018])).
fof(f7243,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK12(X20,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))))))) )),
  inference(superposition,[],[f704,f462])).
fof(f7316,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK12(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))))) )),
  inference(forward_demodulation,[],[f7242,f698])).
fof(f7242,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK12(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))))))) )),
  inference(superposition,[],[f704,f698])).
fof(f7315,plain,(
  ( ! [X14,X15] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK12(X15,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f7241,f450])).
fof(f7241,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',X14)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK12(X15,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))))))) )),
  inference(superposition,[],[f704,f450])).
fof(f7314,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK12(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f7240,f6296])).
fof(f7240,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK12(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))) )),
  inference(superposition,[],[f704,f6296])).
fof(f7313,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK12(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f7239,f696])).
fof(f7239,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK12(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))) )),
  inference(superposition,[],[f704,f696])).
fof(f7312,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK12(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f7311,f695])).
fof(f7311,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK12(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f7238,f6018])).
fof(f7238,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK12(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f704,f695])).
fof(f7236,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK12(X4,'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f704,f560])).
fof(f7310,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK12(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f7235,f449])).
fof(f7235,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK12(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f704,f449])).
fof(f7309,plain,(
  ( ! [X47,X48,X46] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num',sK12(happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')),X48)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num',X48))))) )),
  inference(forward_demodulation,[],[f7234,f553])).
fof(f7234,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num',X48)))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12(happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')),X48))))) )),
  inference(superposition,[],[f704,f553])).
fof(f7308,plain,(
  ( ! [X45,X44] : (s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',sK12('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))),X45)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num',X45))))) )),
  inference(forward_demodulation,[],[f7233,f456])).
fof(f7233,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num',X45)))) | s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))),s('type.num.num',sK12('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))),X45))))) )),
  inference(superposition,[],[f704,f456])).
fof(f7307,plain,(
  ( ! [X43] : (s('type.num.num',X43) = s('type.num.num',sK12('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))))) )),
  inference(forward_demodulation,[],[f7306,f450])).
fof(f7306,plain,(
  ( ! [X43] : (s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))))) )),
  inference(forward_demodulation,[],[f7232,f438])).
fof(f7232,plain,(
  ( ! [X43] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43)))) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43))))) )),
  inference(superposition,[],[f704,f438])).
fof(f7305,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7304,f450])).
fof(f7304,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7303,f698])).
fof(f7303,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7231,f441])).
fof(f7231,plain,(
  ( ! [X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42)))) | s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK12('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42))))) )),
  inference(superposition,[],[f704,f441])).
fof(f7302,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7301,f450])).
fof(f7301,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7300,f698])).
fof(f7300,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7230,f2838])).
fof(f7230,plain,(
  ( ! [X41] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X41)))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41))))) )),
  inference(superposition,[],[f704,f2838])).
fof(f7299,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))),X40)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f7229,f567])).
fof(f7229,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',X40)))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))),X40))))) )),
  inference(superposition,[],[f704,f567])).
fof(f7298,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37))))) )),
  inference(forward_demodulation,[],[f7297,f450])).
fof(f7297,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37))))) )),
  inference(forward_demodulation,[],[f7228,f452])).
fof(f7228,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37))))) )),
  inference(superposition,[],[f704,f452])).
fof(f7296,plain,(
  ( ! [X35,X34] : (s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X35))))) )),
  inference(forward_demodulation,[],[f7227,f451])).
fof(f7227,plain,(
  ( ! [X35,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X35)))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35))))) )),
  inference(superposition,[],[f704,f451])).
fof(f7295,plain,(
  ( ! [X33,X32] : (s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)),X33)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f7226,f693])).
fof(f7226,plain,(
  ( ! [X33,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33)))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)),X33))))) )),
  inference(superposition,[],[f704,f693])).
fof(f7294,plain,(
  ( ! [X30,X31] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X31)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(forward_demodulation,[],[f7225,f694])).
fof(f7225,plain,(
  ( ! [X30,X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X31))))) )),
  inference(superposition,[],[f704,f694])).
fof(f7293,plain,(
  ( ! [X28,X29] : (s('type.num.num',X29) = s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))))) )),
  inference(forward_demodulation,[],[f7292,f450])).
fof(f7292,plain,(
  ( ! [X28,X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))))) )),
  inference(forward_demodulation,[],[f7224,f457])).
fof(f7224,plain,(
  ( ! [X28,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29))))) )),
  inference(superposition,[],[f704,f457])).
fof(f7291,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) = s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27)) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27))))) )),
  inference(forward_demodulation,[],[f7290,f450])).
fof(f7290,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27))))) )),
  inference(forward_demodulation,[],[f7223,f454])).
fof(f7223,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))),s('type.num.num',sK12('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27))))) )),
  inference(superposition,[],[f704,f454])).
fof(f7289,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f7288,f636])).
fof(f7288,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f7222,f698])).
fof(f7222,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25)))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))),s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25))))) )),
  inference(superposition,[],[f704,f566])).
fof(f7287,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X21)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num',sK4(X21))),X22)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(forward_demodulation,[],[f7221,f698])).
fof(f7221,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))),s('type.num.num',sK12('const.num.SUC_1'(s('type.num.num',sK4(X21))),X22)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f704,f471])).
fof(f7286,plain,(
  ( ! [X19,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f7285,f698])).
fof(f7285,plain,(
  ( ! [X19,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',sK12(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f7220,f462])).
fof(f7220,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))),s('type.num.num',sK12(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20))))) )),
  inference(superposition,[],[f704,f462])).
fof(f7284,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7283,f566])).
fof(f7283,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7282,f698])).
fof(f7282,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7219,f636])).
fof(f7219,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18))))) )),
  inference(superposition,[],[f704,f698])).
fof(f7281,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f7280,f450])).
fof(f7280,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f7218,f636])).
fof(f7218,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num',X15)))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15))))) )),
  inference(superposition,[],[f704,f450])).
fof(f7279,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7278,f698])).
fof(f7278,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7277,f698])).
fof(f7277,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7217,f636])).
fof(f7217,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13))))) )),
  inference(superposition,[],[f704,f6296])).
fof(f7276,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f7275,f698])).
fof(f7275,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f7216,f636])).
fof(f7216,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11))))) )),
  inference(superposition,[],[f704,f696])).
fof(f7274,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7273,f450])).
fof(f7273,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7272,f698])).
fof(f7272,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7215,f636])).
fof(f7215,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9))))) )),
  inference(superposition,[],[f704,f695])).
fof(f7270,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f7213,f636])).
fof(f7213,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4))))) )),
  inference(superposition,[],[f704,f560])).
fof(f7269,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f7268,f450])).
fof(f7268,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f7212,f636])).
fof(f7212,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK12('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1))))) )),
  inference(superposition,[],[f704,f449])).
fof(f7205,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f7127,f698])).
fof(f7127,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',X4)),'const.num.SUC_1'(s('type.num.num',X5))))))) )),
  inference(superposition,[],[f703,f565])).
fof(f7204,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(subsumption_resolution,[],[f7126,f436])).
fof(f7126,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)),'const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(superposition,[],[f703,f4932])).
fof(f7203,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',X2)),X3)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f7125,f698])).
fof(f7125,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',X2)),X3))))) )),
  inference(superposition,[],[f703,f561])).
fof(f7202,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK11(X1,X1))))) )),
  inference(subsumption_resolution,[],[f7124,f436])).
fof(f7124,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK11(X1,X1))))) )),
  inference(superposition,[],[f703,f1378])).
fof(f7201,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.num.|48|_0',X0))))) )),
  inference(subsumption_resolution,[],[f7123,f436])).
fof(f7123,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.num.|48|_0',X0))))) )),
  inference(superposition,[],[f703,f733])).
fof(f7200,plain,(
  ( ! [X47,X48,X46] : (s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num',sK11(X48,happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num',X47))))) )),
  inference(forward_demodulation,[],[f7122,f553])).
fof(f7122,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num',X47)))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num',sK11(X48,happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f553])).
fof(f7199,plain,(
  ( ! [X45,X44] : (s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK11(X45,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X44))))) )),
  inference(forward_demodulation,[],[f7121,f456])).
fof(f7121,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num',X44)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK11(X45,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))))))) )),
  inference(superposition,[],[f703,f456])).
fof(f7198,plain,(
  ( ! [X43] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',sK11(X43,'const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7120,f438])).
fof(f7120,plain,(
  ( ! [X43] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',sK11(X43,'const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f438])).
fof(f7197,plain,(
  ( ! [X42] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK11(X42,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f7119,f441])).
fof(f7119,plain,(
  ( ! [X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK11(X42,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(superposition,[],[f703,f441])).
fof(f7196,plain,(
  ( ! [X41] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK11(X41,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f7118,f2838])).
fof(f7118,plain,(
  ( ! [X41] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK11(X41,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f2838])).
fof(f7195,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK11(X40,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))))))) )),
  inference(forward_demodulation,[],[f7117,f567])).
fof(f7117,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK11(X40,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))))))) )),
  inference(superposition,[],[f703,f567])).
fof(f7194,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',sK11(X37,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7116,f452])).
fof(f7116,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',sK11(X37,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))))))) )),
  inference(superposition,[],[f703,f452])).
fof(f7193,plain,(
  ( ! [X35,X34] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK11(X35,'const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f7115,f451])).
fof(f7115,plain,(
  ( ! [X35,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X34)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK11(X35,'const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f451])).
fof(f7192,plain,(
  ( ! [X33,X32] : (s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK11(X33,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X32))))) )),
  inference(forward_demodulation,[],[f7114,f693])).
fof(f7114,plain,(
  ( ! [X33,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X32)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK11(X33,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))))))) )),
  inference(superposition,[],[f703,f693])).
fof(f7191,plain,(
  ( ! [X30,X31] : (s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK11(X31,'const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X30))))) )),
  inference(forward_demodulation,[],[f7113,f694])).
fof(f7113,plain,(
  ( ! [X30,X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X30)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK11(X31,'const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f703,f694])).
fof(f7190,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK11(X29,'const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7112,f457])).
fof(f7112,plain,(
  ( ! [X28,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK11(X29,'const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f457])).
fof(f7189,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',sK11(X27,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7111,f454])).
fof(f7111,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',sK11(X27,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))))))) )),
  inference(superposition,[],[f703,f454])).
fof(f7188,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK11(X25,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))))))) )),
  inference(forward_demodulation,[],[f7110,f566])).
fof(f7110,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK11(X25,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))))))) )),
  inference(superposition,[],[f703,f566])).
fof(f7109,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X21)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK11(X22,'const.num.SUC_1'(s('type.num.num',sK4(X21))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f703,f471])).
fof(f7187,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK11(X20,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))))))) )),
  inference(forward_demodulation,[],[f7108,f462])).
fof(f7108,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK11(X20,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))))))) )),
  inference(superposition,[],[f703,f462])).
fof(f7186,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK11(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))))))) )),
  inference(forward_demodulation,[],[f7107,f698])).
fof(f7107,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK11(X18,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))))))) )),
  inference(superposition,[],[f703,f698])).
fof(f7185,plain,(
  ( ! [X14,X15] : (s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK11(X15,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X14))))) )),
  inference(forward_demodulation,[],[f7106,f450])).
fof(f7106,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X14)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',sK11(X15,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))))))) )),
  inference(superposition,[],[f703,f450])).
fof(f7184,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK11(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f7105,f6296])).
fof(f7105,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',sK11(X13,'const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))))) )),
  inference(superposition,[],[f703,f6296])).
fof(f7183,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK11(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f7104,f696])).
fof(f7104,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK11(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))) )),
  inference(superposition,[],[f703,f696])).
fof(f7182,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK11(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f7103,f695])).
fof(f7103,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK11(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f703,f695])).
fof(f7101,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK11(X4,'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f703,f560])).
fof(f7181,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK11(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f7100,f449])).
fof(f7100,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK11(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f703,f449])).
fof(f7180,plain,(
  ( ! [X47,X48,X46] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')),X48)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num',X48))))) )),
  inference(forward_demodulation,[],[f7099,f553])).
fof(f7099,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num',X48)))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),sK10(X46,X47,'type.num.num')),s('type.num.num','const.num.|48|_0')),X48))))) )),
  inference(superposition,[],[f703,f553])).
fof(f7179,plain,(
  ( ! [X45,X44] : (s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))),X45)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num',X45))))) )),
  inference(forward_demodulation,[],[f7098,f456])).
fof(f7098,plain,(
  ( ! [X45,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num',X45)))) | s('type.num.num',X45) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44))))),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X44)))),X45))))) )),
  inference(superposition,[],[f703,f456])).
fof(f7178,plain,(
  ( ! [X43] : (s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43))))) )),
  inference(forward_demodulation,[],[f7177,f438])).
fof(f7177,plain,(
  ( ! [X43] : (s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43))))) )),
  inference(subsumption_resolution,[],[f7176,f436])).
fof(f7176,plain,(
  ( ! [X43] : (~p(s(bool,'T_0')) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43))))) )),
  inference(forward_demodulation,[],[f7097,f733])).
fof(f7097,plain,(
  ( ! [X43] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43)))) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X43))))) )),
  inference(superposition,[],[f703,f438])).
fof(f7175,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7174,f450])).
fof(f7174,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7173,f698])).
fof(f7173,plain,(
  ( ! [X42] : (s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f7172,f441])).
fof(f7172,plain,(
  ( ! [X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)))) | s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42))))) )),
  inference(forward_demodulation,[],[f7096,f561])).
fof(f7096,plain,(
  ( ! [X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X42)))) | s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK11('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X42))))) )),
  inference(superposition,[],[f703,f441])).
fof(f7171,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7170,f450])).
fof(f7170,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7169,f698])).
fof(f7169,plain,(
  ( ! [X41] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))))) )),
  inference(forward_demodulation,[],[f7168,f2838])).
fof(f7168,plain,(
  ( ! [X41] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41)))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41))))) )),
  inference(forward_demodulation,[],[f7095,f561])).
fof(f7095,plain,(
  ( ! [X41] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X41)))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X41))))) )),
  inference(superposition,[],[f703,f2838])).
fof(f7167,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))),X40)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',X40))))) )),
  inference(forward_demodulation,[],[f7094,f567])).
fof(f7094,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X39))),s('type.num.num',X40)))) | s('type.num.num',X40) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39))))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X39)))),X40))))) )),
  inference(superposition,[],[f703,f567])).
fof(f7166,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37))))) )),
  inference(forward_demodulation,[],[f7165,f452])).
fof(f7165,plain,(
  ( ! [X37,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37))))) )),
  inference(subsumption_resolution,[],[f7164,f436])).
fof(f7164,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37))))) )),
  inference(forward_demodulation,[],[f7093,f733])).
fof(f7093,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X37)))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)),X37))))) )),
  inference(superposition,[],[f703,f452])).
fof(f7163,plain,(
  ( ! [X35,X34] : (s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num',X35))))) )),
  inference(forward_demodulation,[],[f7092,f451])).
fof(f7092,plain,(
  ( ! [X35,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num',X35)))) | s('type.num.num',X35) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.-_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')),X35))))) )),
  inference(superposition,[],[f703,f451])).
fof(f7162,plain,(
  ( ! [X33,X32] : (s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)),X33)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f7091,f693])).
fof(f7091,plain,(
  ( ! [X33,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X32),s('type.num.num',X33)))) | s('type.num.num',X33) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32)),X33))))) )),
  inference(superposition,[],[f703,f693])).
fof(f7161,plain,(
  ( ! [X30,X31] : (s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X31)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31))))) )),
  inference(forward_demodulation,[],[f7090,f694])).
fof(f7090,plain,(
  ( ! [X30,X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31)))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X31))))) )),
  inference(superposition,[],[f703,f694])).
fof(f7160,plain,(
  ( ! [X28,X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29))))) )),
  inference(forward_demodulation,[],[f7159,f457])).
fof(f7159,plain,(
  ( ! [X28,X29] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29))))) )),
  inference(subsumption_resolution,[],[f7158,f436])).
fof(f7158,plain,(
  ( ! [X28,X29] : (~p(s(bool,'T_0')) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29))))) )),
  inference(forward_demodulation,[],[f7089,f733])).
fof(f7089,plain,(
  ( ! [X28,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num',X28),s('type.num.num','const.num.|48|_0')),X29))))) )),
  inference(superposition,[],[f703,f457])).
fof(f7157,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27))))) )),
  inference(forward_demodulation,[],[f7156,f454])).
fof(f7156,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27))))) )),
  inference(subsumption_resolution,[],[f7155,f436])).
fof(f7155,plain,(
  ( ! [X26,X27] : (~p(s(bool,'T_0')) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27))))) )),
  inference(forward_demodulation,[],[f7088,f733])).
fof(f7088,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26))),s('type.num.num',sK11('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X26)),X27))))) )),
  inference(superposition,[],[f703,f454])).
fof(f7154,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f7153,f636])).
fof(f7153,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num',X25))))) )),
  inference(forward_demodulation,[],[f7152,f698])).
fof(f7152,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num',X25)))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))),s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25))))) )),
  inference(forward_demodulation,[],[f7087,f6172])).
fof(f7087,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))))),s('type.num.num',X25)))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))))),s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24)))),X25))))) )),
  inference(superposition,[],[f703,f566])).
fof(f7151,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X21)),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',sK4(X21))),X22)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(forward_demodulation,[],[f7086,f698])).
fof(f7086,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X21)))),s('type.num.num',sK11('const.num.SUC_1'(s('type.num.num',sK4(X21))),X22)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X21)) )),
  inference(superposition,[],[f703,f471])).
fof(f7150,plain,(
  ( ! [X19,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f7149,f698])).
fof(f7149,plain,(
  ( ! [X19,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f7148,f462])).
fof(f7148,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))),s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20))))) )),
  inference(forward_demodulation,[],[f7085,f561])).
fof(f7085,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19))),s('type.num.num',sK11(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X19)),X20))))) )),
  inference(superposition,[],[f703,f462])).
fof(f7147,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7146,f566])).
fof(f7146,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7145,f698])).
fof(f7145,plain,(
  ( ! [X17,X18,X16] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f7144,f636])).
fof(f7144,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18))))) )),
  inference(forward_demodulation,[],[f7084,f6172])).
fof(f7084,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))),s('type.num.num',X18)))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))),s('type.num.num',X17)),X18))))) )),
  inference(superposition,[],[f703,f698])).
fof(f7143,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f7142,f450])).
fof(f7142,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f7083,f636])).
fof(f7083,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15)))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15))))) )),
  inference(superposition,[],[f703,f450])).
fof(f7141,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7140,f698])).
fof(f7140,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7139,f698])).
fof(f7139,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f7082,f636])).
fof(f7082,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12))),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))),X13))))) )),
  inference(superposition,[],[f703,f6296])).
fof(f7138,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f7137,f698])).
fof(f7137,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f7081,f636])).
fof(f7081,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11))))) )),
  inference(superposition,[],[f703,f696])).
fof(f7136,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7135,f450])).
fof(f7135,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7134,f698])).
fof(f7134,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f7133,f636])).
fof(f7133,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9))))) )),
  inference(forward_demodulation,[],[f7080,f561])).
fof(f7080,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9))))) )),
  inference(superposition,[],[f703,f695])).
fof(f7131,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f7078,f636])).
fof(f7078,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4))))) )),
  inference(superposition,[],[f703,f560])).
fof(f7130,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f7129,f450])).
fof(f7129,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f7077,f636])).
fof(f7077,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK11('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1))))) )),
  inference(superposition,[],[f703,f449])).
fof(f7070,plain,(
  ( ! [X300,X302,X301] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.num.SUC_1'(s('type.num.num',X301))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X300))),s('type.num.num',X301)),X302,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X302),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.num.SUC_1'(s('type.num.num',X301))))))))) )),
  inference(forward_demodulation,[],[f7012,f698])).
fof(f7012,plain,(
  ( ! [X300,X302,X301] : (p(s(bool,happ(s(fun('type.num.num',bool),X302),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.num.SUC_1'(s('type.num.num',X301)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X300))),s('type.num.num',X301))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X300))),s('type.num.num',X301)),X302,'type.num.num'))) )),
  inference(superposition,[],[f550,f698])).
fof(f7065,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.num.SUC_1'(s('type.num.num',X162)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num',X162))),s('type.num.num',X163))))) )),
  inference(forward_demodulation,[],[f7064,f698])).
fof(f7064,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num',X162))),s('type.num.num',X163)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X161))),s('type.num.num',X162))))))) )),
  inference(forward_demodulation,[],[f6964,f6172])).
fof(f6964,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.num.SUC_1'(s('type.num.num',X162))))),s('type.num.num',X163)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X161))),s('type.num.num',X162))))))) )),
  inference(superposition,[],[f629,f698])).
fof(f7060,plain,(
  ( ! [X134,X136,X135] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',X135)))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X134))),s('type.num.num',X135)),X136)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',X135))))))))) )),
  inference(forward_demodulation,[],[f6955,f698])).
fof(f6955,plain,(
  ( ! [X134,X136,X135] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X134))),s('type.num.num',X135)),X136)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',X135)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X134))),s('type.num.num',X135))))))) )),
  inference(superposition,[],[f605,f698])).
fof(f7059,plain,(
  ( ! [X132,X133,X131] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))))),s('type.num.num',X133)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X133,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X131))),s('type.num.num',X132)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.num.SUC_1'(s('type.num.num',X132))))))))) )),
  inference(forward_demodulation,[],[f6954,f698])).
fof(f6954,plain,(
  ( ! [X132,X133,X131] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X133,'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X131))),s('type.num.num',X132)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.num.SUC_1'(s('type.num.num',X132)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X131))),s('type.num.num',X132))),s('type.num.num',X133))))) )),
  inference(superposition,[],[f604,f698])).
fof(f7057,plain,(
  ( ! [X127,X125,X126] : (s('type.num.num',X127) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.num.SUC_1'(s('type.num.num',X126))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X126))),s('type.num.num',X127))))) )),
  inference(forward_demodulation,[],[f7056,f698])).
fof(f7056,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X126))),s('type.num.num',X127)))) | s('type.num.num',X127) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X125))),s('type.num.num',X126)))) )),
  inference(forward_demodulation,[],[f6952,f6172])).
fof(f6952,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.num.SUC_1'(s('type.num.num',X126))))),s('type.num.num',X127)))) | s('type.num.num',X127) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X125))),s('type.num.num',X126)))) )),
  inference(superposition,[],[f602,f698])).
fof(f7054,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))))),s('type.num.num',X121)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X120))),s('type.num.num',X121))))) )),
  inference(forward_demodulation,[],[f7053,f698])).
fof(f7053,plain,(
  ( ! [X121,X120,X119] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X120))),s('type.num.num',X121)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X119))),s('type.num.num',X120))),s('type.num.num',X121))))) )),
  inference(forward_demodulation,[],[f6950,f6172])).
fof(f6950,plain,(
  ( ! [X121,X120,X119] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num','const.num.SUC_1'(s('type.num.num',X120))))),s('type.num.num',X121)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X119))),s('type.num.num',X120))),s('type.num.num',X121))))) )),
  inference(superposition,[],[f601,f698])).
fof(f7049,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num',X97) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X96))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num',X96))))),s('type.num.num',X97))))) )),
  inference(forward_demodulation,[],[f7048,f698])).
fof(f7048,plain,(
  ( ! [X97,X95,X96] : (s('type.num.num',X97) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X95))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X96))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num',X96))))),s('type.num.num',X97))))) )),
  inference(forward_demodulation,[],[f6942,f566])).
fof(f6942,plain,(
  ( ! [X97,X95,X96] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num','const.num.SUC_1'(s('type.num.num',X96))))),s('type.num.num',X97)))) | s('type.num.num',X97) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X95))),s('type.num.num',X96)))))) )),
  inference(superposition,[],[f575,f698])).
fof(f7045,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num',X87)))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))),s('type.num.num',X88))))) )),
  inference(forward_demodulation,[],[f7044,f698])).
fof(f7044,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))),s('type.num.num',X88)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X86))),s('type.num.num',X87))))))) )),
  inference(forward_demodulation,[],[f6939,f6172])).
fof(f6939,plain,(
  ( ! [X88,X87,X86] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num',X87))))),s('type.num.num',X88)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X88),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X86))),s('type.num.num',X87))))))) )),
  inference(superposition,[],[f573,f698])).
fof(f6908,plain,(
  ( ! [X14,X15,X16] : (~sP0('F_0',X16,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))))) )),
  inference(superposition,[],[f1298,f698])).
fof(f6904,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)) )),
  inference(superposition,[],[f586,f698])).
fof(f6900,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))))))))) )),
  inference(superposition,[],[f698,f6296])).
fof(f7033,plain,(
  ( ! [X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))) )),
  inference(forward_demodulation,[],[f7032,f6018])).
fof(f7032,plain,(
  ( ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))) )),
  inference(backward_demodulation,[],[f7031,f4692])).
fof(f7031,plain,(
  ( ! [X8] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f6899,f6425])).
fof(f6899,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))))) )),
  inference(superposition,[],[f698,f696])).
fof(f6896,plain,(
  ( ! [X4,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f698,f560])).
fof(f6870,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f698,f471])).
fof(f6832,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) )),
  inference(subsumption_resolution,[],[f6830,f692])).
fof(f6830,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) )),
  inference(superposition,[],[f691,f469])).
fof(f6831,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK5(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK10(X0,X1,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f6829,f553])).
fof(f6829,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK5(happ(s(fun('type.num.num',fun('type.num.num',bool)),sK10(X0,X1,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),sK10(X0,X1,fun('type.num.num',bool))),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(superposition,[],[f691,f553])).
fof(f6822,plain,(
  ( ! [X273,X275,X274] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))) = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X274)))),X275,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274))))))) )),
  inference(forward_demodulation,[],[f6785,f567])).
fof(f6785,plain,(
  ( ! [X273,X275,X274] : (p(s(bool,happ(s(fun('type.num.num',bool),X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X274)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X274))))) = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X274)))),X275,'type.num.num'))) )),
  inference(superposition,[],[f550,f567])).
fof(f6735,plain,(
  ( ! [X130,X128,X129] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X128),s('type.num.num',X129))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X128))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X129)))))) )),
  inference(superposition,[],[f613,f567])).
fof(f6732,plain,(
  ( ! [X121,X120,X119] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X119),s('type.num.num',X120))),s('type.num.num',X121))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X119))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X120)))))) )),
  inference(superposition,[],[f612,f567])).
fof(f6812,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X107))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X108)))),X109)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108))))))) )),
  inference(forward_demodulation,[],[f6728,f567])).
fof(f6728,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X107))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X108)))),X109)),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X107),s('type.num.num',X108)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X107))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X108))))))))) )),
  inference(superposition,[],[f605,f567])).
fof(f6811,plain,(
  ( ! [X105,X106,X104] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105))),s('type.num.num',X106)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X106,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105))))))) )),
  inference(forward_demodulation,[],[f6727,f567])).
fof(f6727,plain,(
  ( ! [X105,X106,X104] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X106,'const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X104),s('type.num.num',X105)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X104))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X105))))),s('type.num.num',X106))))) )),
  inference(superposition,[],[f604,f567])).
fof(f6720,plain,(
  ( ! [X85,X83,X84] : (s('type.num.num',X85) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X83),s('type.num.num',X84))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X83))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X84)))))) )),
  inference(superposition,[],[f586,f567])).
fof(f6717,plain,(
  ( ! [X76,X74,X75] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X74),s('type.num.num',X75))))) | s('type.num.num',X76) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X74))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X75)))))) )),
  inference(superposition,[],[f585,f567])).
fof(f6687,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f567,f566])).
fof(f6686,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',sK4(X0)))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f567,f471])).
fof(f6663,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f567,f566])).
fof(f6662,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK4(X0)),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f567,f471])).
fof(f6602,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f6541,f471])).
fof(f6608,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) != s('type.num.num',sK4('const.arithmetic.BIT2_1'(s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f6541,f2805])).
fof(f6610,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f6541,f585])).
fof(f6571,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f6539,f471])).
fof(f6577,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num',sK4('const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(unit_resulting_resolution,[],[f6539,f2805])).
fof(f6579,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f6539,f585])).
fof(f6569,plain,(
  ( ! [X182,X181] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X181))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X181)))))),X182,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X182),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X181))))))) )),
  inference(forward_demodulation,[],[f6525,f6296])).
fof(f6525,plain,(
  ( ! [X182,X181] : (p(s(bool,happ(s(fun('type.num.num',bool),X182),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X181)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X181))))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X181)))))),X182,'type.num.num'))) )),
  inference(superposition,[],[f550,f6296])).
fof(f6562,plain,(
  ( ! [X90,X91] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X90)))))) )),
  inference(subsumption_resolution,[],[f6478,f4224])).
fof(f6478,plain,(
  ( ! [X90,X91] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X90))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X90),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X90)))))))) )),
  inference(superposition,[],[f613,f6296])).
fof(f6561,plain,(
  ( ! [X85,X84] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X84))),s('type.num.num',X85)))) )),
  inference(subsumption_resolution,[],[f6475,f4224])).
fof(f6475,plain,(
  ( ! [X85,X84] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X84))),s('type.num.num',X85))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X84)))))))) )),
  inference(superposition,[],[f612,f6296])).
fof(f6558,plain,(
  ( ! [X76,X77] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X76)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))))),X77)),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X76))))))) )),
  inference(forward_demodulation,[],[f6471,f6296])).
fof(f6471,plain,(
  ( ! [X76,X77] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X76)))))),X77)),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X76)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X76))))))))))) )),
  inference(superposition,[],[f605,f6296])).
fof(f6557,plain,(
  ( ! [X74,X75] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74))),s('type.num.num',X75)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X75,'const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X74)))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74))))))) )),
  inference(forward_demodulation,[],[f6470,f6296])).
fof(f6470,plain,(
  ( ! [X74,X75] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X75,'const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X74)))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X74))))))),s('type.num.num',X75))))) )),
  inference(superposition,[],[f604,f6296])).
fof(f6552,plain,(
  ( ! [X64,X65] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X64))))))))) )),
  inference(subsumption_resolution,[],[f6465,f4224])).
fof(f6465,plain,(
  ( ! [X64,X65] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X64)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X64)))))))) )),
  inference(superposition,[],[f599,f6296])).
fof(f6551,plain,(
  ( ! [X61,X60] : (s('type.num.num',X61) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X60)))))) )),
  inference(subsumption_resolution,[],[f6463,f4224])).
fof(f6463,plain,(
  ( ! [X61,X60] : (s('type.num.num',X61) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X60))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X60)))))))) )),
  inference(superposition,[],[f586,f6296])).
fof(f6460,plain,(
  ( ! [X54,X55] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X55))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X54))))) | s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X54)))))))) )),
  inference(superposition,[],[f585,f6296])).
fof(f6543,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(subsumption_resolution,[],[f6440,f4224])).
fof(f6440,plain,(
  ( ! [X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X18))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))))) )),
  inference(superposition,[],[f483,f6296])).
fof(f6542,plain,(
  ( ! [X17] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X17))))))) )),
  inference(subsumption_resolution,[],[f6439,f4224])).
fof(f6439,plain,(
  ( ! [X17] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X17)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))) )),
  inference(superposition,[],[f470,f6296])).
fof(f6430,plain,(
  ( ! [X8,X7] : (~sP0('F_0',X8,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f1298,f6296])).
fof(f6541,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))) )),
  inference(subsumption_resolution,[],[f6429,f534])).
fof(f6429,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f613,f6296])).
fof(f6428,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5)) )),
  inference(superposition,[],[f612,f6296])).
fof(f6540,plain,(
  ( ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))) )),
  inference(subsumption_resolution,[],[f6427,f534])).
fof(f6427,plain,(
  ( ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f599,f6296])).
fof(f6539,plain,(
  ( ! [X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f6426,f534])).
fof(f6426,plain,(
  ( ! [X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f586,f6296])).
fof(f6425,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) )),
  inference(superposition,[],[f566,f6296])).
fof(f6538,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(backward_demodulation,[],[f6423,f3250])).
fof(f6537,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(backward_demodulation,[],[f6423,f6166])).
fof(f6423,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f6296,f450])).
fof(f6536,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) )),
  inference(forward_demodulation,[],[f6422,f566])).
fof(f6422,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))))) )),
  inference(superposition,[],[f6296,f566])).
fof(f6421,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK4(X0)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f6296,f471])).
fof(f6387,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(superposition,[],[f5667,f566])).
fof(f6389,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(forward_demodulation,[],[f6388,f566])).
fof(f6388,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(forward_demodulation,[],[f6386,f566])).
fof(f6386,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))))),
  inference(unit_resulting_resolution,[],[f5667,f585])).
fof(f6384,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f6365,f4932])).
fof(f6365,plain,(
  ( ! [X12] : (p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X12,bool))) )),
  inference(superposition,[],[f550,f4932])).
fof(f6379,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | ~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X6)) )),
  inference(subsumption_resolution,[],[f6361,f436])).
fof(f6361,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X6)) )),
  inference(superposition,[],[f652,f4932])).
fof(f6378,plain,(
  ( ! [X4,X3] : (p(s(bool,X3)) | ~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(subsumption_resolution,[],[f6360,f436])).
fof(f6360,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(superposition,[],[f651,f4932])).
fof(f6342,plain,(
  ( ! [X329,X331,X330] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num','const.num.SUC_1'(s('type.num.num',X330))))) = s('type.num.num',sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X330)))),X331,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X331),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num','const.num.SUC_1'(s('type.num.num',X330))))))))) )),
  inference(forward_demodulation,[],[f6285,f566])).
fof(f6285,plain,(
  ( ! [X329,X331,X330] : (p(s(bool,happ(s(fun('type.num.num',bool),X331),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num','const.num.SUC_1'(s('type.num.num',X330)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X330))))) = s('type.num.num',sK9('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X330)))),X331,'type.num.num'))) )),
  inference(superposition,[],[f550,f566])).
fof(f6338,plain,(
  ( ! [X200,X199,X201] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X201),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X200)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',X200))))),s('type.num.num',X201))))) )),
  inference(forward_demodulation,[],[f6241,f6018])).
fof(f6241,plain,(
  ( ! [X200,X199,X201] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',X200))))),s('type.num.num',X201)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X201),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X200))))))))) )),
  inference(superposition,[],[f632,f566])).
fof(f6334,plain,(
  ( ! [X191,X192,X190] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X192),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.num.SUC_1'(s('type.num.num',X191)))))))) )),
  inference(subsumption_resolution,[],[f6238,f534])).
fof(f6238,plain,(
  ( ! [X191,X192,X190] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X192),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.num.SUC_1'(s('type.num.num',X191))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num',X191)))))) )),
  inference(superposition,[],[f613,f566])).
fof(f6333,plain,(
  ( ! [X182,X183,X181] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num',X182))))),s('type.num.num',X183)))) )),
  inference(subsumption_resolution,[],[f6235,f534])).
fof(f6235,plain,(
  ( ! [X182,X183,X181] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num',X182))))),s('type.num.num',X183))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182)))))) )),
  inference(superposition,[],[f612,f566])).
fof(f6330,plain,(
  ( ! [X171,X169,X170] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X170)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X170)))),X171)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',X170))))))))) )),
  inference(forward_demodulation,[],[f6231,f6018])).
fof(f6231,plain,(
  ( ! [X171,X169,X170] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X170)))),X171)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',X170)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X170))))))))) )),
  inference(superposition,[],[f605,f566])).
fof(f6329,plain,(
  ( ! [X167,X166,X168] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.num.SUC_1'(s('type.num.num',X167))))),s('type.num.num',X168)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X168,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.num.SUC_1'(s('type.num.num',X167))))))))) )),
  inference(forward_demodulation,[],[f6230,f566])).
fof(f6230,plain,(
  ( ! [X167,X166,X168] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X168,'const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.num.SUC_1'(s('type.num.num',X167)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167))))),s('type.num.num',X168))))) )),
  inference(superposition,[],[f604,f566])).
fof(f6326,plain,(
  ( ! [X158,X159,X157] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X158)))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.num.SUC_1'(s('type.num.num',X158))))))))) )),
  inference(forward_demodulation,[],[f6227,f6018])).
fof(f6227,plain,(
  ( ! [X158,X159,X157] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.num.SUC_1'(s('type.num.num',X158)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X158))))))))) )),
  inference(superposition,[],[f601,f566])).
fof(f6324,plain,(
  ( ! [X152,X151,X153] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.num.SUC_1'(s('type.num.num',X152))))))))))) )),
  inference(subsumption_resolution,[],[f6225,f534])).
fof(f6225,plain,(
  ( ! [X152,X151,X153] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.num.SUC_1'(s('type.num.num',X152)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X152)))))) )),
  inference(superposition,[],[f599,f566])).
fof(f6323,plain,(
  ( ! [X146,X147,X145] : (s('type.num.num',X147) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.num.SUC_1'(s('type.num.num',X146)))))))) )),
  inference(subsumption_resolution,[],[f6223,f534])).
fof(f6223,plain,(
  ( ! [X146,X147,X145] : (s('type.num.num',X147) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.num.SUC_1'(s('type.num.num',X146))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X146)))))) )),
  inference(superposition,[],[f586,f566])).
fof(f6192,plain,(
  ( ! [X66,X67,X65] : (~sP0('F_0',X67,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num',X66)))))))) )),
  inference(superposition,[],[f4022,f566])).
fof(f6308,plain,(
  ( ! [X59,X57,X60,X58] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))))),X59,X60)) )),
  inference(forward_demodulation,[],[f6190,f566])).
fof(f6190,plain,(
  ( ! [X59,X57,X60,X58] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.num.SUC_1'(s('type.num.num',X58)))))))),X59,X60)) )),
  inference(superposition,[],[f1232,f566])).
fof(f6307,plain,(
  ( ! [X54,X56,X55] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X55)))))))),X56)) )),
  inference(forward_demodulation,[],[f6189,f566])).
fof(f6189,plain,(
  ( ! [X54,X56,X55] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',X55)))))))),X56)) )),
  inference(superposition,[],[f1224,f566])).
fof(f6306,plain,(
  ( ! [X52,X53,X51] : (~sP0('F_0',X53,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X52)))))))))) )),
  inference(forward_demodulation,[],[f6188,f566])).
fof(f6188,plain,(
  ( ! [X52,X53,X51] : (~sP0('F_0',X53,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.num.SUC_1'(s('type.num.num',X52)))))))))) )),
  inference(superposition,[],[f1217,f566])).
fof(f6187,plain,(
  ( ! [X47,X50,X48,X49] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',X48)))))),X49,X50)) )),
  inference(superposition,[],[f931,f566])).
fof(f6186,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.num.SUC_1'(s('type.num.num',X46)))))))) )),
  inference(superposition,[],[f930,f566])).
fof(f6185,plain,(
  ( ! [X43,X44,X42] : (~sP0('F_0',X44,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))))))) )),
  inference(superposition,[],[f924,f566])).
fof(f6184,plain,(
  ( ! [X39,X41,X40] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.num.SUC_1'(s('type.num.num',X40)))))),X41)) )),
  inference(superposition,[],[f919,f566])).
fof(f6183,plain,(
  ( ! [X37,X35,X38,X36] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36)))))),X37,X38)) )),
  inference(superposition,[],[f898,f566])).
fof(f6182,plain,(
  ( ! [X33,X34] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',X34)))))))) )),
  inference(superposition,[],[f897,f566])).
fof(f6181,plain,(
  ( ! [X30,X31,X32] : (~sP0('F_0',X32,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31)))))))) )),
  inference(superposition,[],[f891,f566])).
fof(f6180,plain,(
  ( ! [X28,X29,X27] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X28)))))),X29)) )),
  inference(superposition,[],[f886,f566])).
fof(f6179,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X26))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X26))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num','const.num.SUC_1'(s('type.num.num',X26)))))))) )),
  inference(superposition,[],[f696,f566])).
fof(f6177,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f585,f566])).
fof(f6176,plain,(
  ( ! [X17,X18,X16] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X18))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))) )),
  inference(superposition,[],[f565,f566])).
fof(f6175,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X15))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f565,f566])).
fof(f6174,plain,(
  ( ! [X12,X10,X11] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X11)))))))) )),
  inference(superposition,[],[f564,f566])).
fof(f6173,plain,(
  ( ! [X8,X7,X9] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num',X9))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f564,f566])).
fof(f6172,plain,(
  ( ! [X6,X4,X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f561,f566])).
fof(f6170,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f456,f566])).
fof(f6302,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(backward_demodulation,[],[f6301,f3239])).
fof(f6301,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f6167,f6296])).
fof(f6167,plain,(
  ( ! [X6] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))))) )),
  inference(superposition,[],[f566,f696])).
fof(f6300,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(backward_demodulation,[],[f6296,f3174])).
fof(f6299,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))) )),
  inference(backward_demodulation,[],[f6296,f3512])).
fof(f6298,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X10)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(backward_demodulation,[],[f6296,f5127])).
fof(f6296,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(backward_demodulation,[],[f6166,f467])).
fof(f6297,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f6294,f6018])).
fof(f6294,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8))))) )),
  inference(backward_demodulation,[],[f6166,f6050])).
fof(f6166,plain,(
  ( ! [X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f566,f695])).
fof(f6291,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(forward_demodulation,[],[f6117,f6018])).
fof(f6117,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f566,f574])).
fof(f6289,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))) )),
  inference(forward_demodulation,[],[f6120,f561])).
fof(f6120,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f566,f602])).
fof(f6090,plain,(
  ( ! [X50,X51,X49] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))),X51,bool)) | p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50))))))) )),
  inference(forward_demodulation,[],[f6089,f6018])).
fof(f6089,plain,(
  ( ! [X50,X51,X49] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))),X51,bool)) | p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50))))))) )),
  inference(forward_demodulation,[],[f6039,f561])).
fof(f6039,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50))))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X50)))),X51,bool))) )),
  inference(superposition,[],[f550,f565])).
fof(f6035,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num',X35)))) | p(s(bool,X36)) | ~sP0(X36,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X35)))),X37)) )),
  inference(superposition,[],[f652,f565])).
fof(f6034,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X31)))) | p(s(bool,X32)) | ~sP0(X32,X33,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X31)))))) )),
  inference(superposition,[],[f651,f565])).
fof(f6025,plain,(
  ( ! [X10,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))) )),
  inference(superposition,[],[f602,f565])).
fof(f6019,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f565,f469])).
fof(f6063,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK4(X16))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f2999])).
fof(f6062,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK4(X16))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f3617])).
fof(f6061,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK4(X16))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f4413])).
fof(f6060,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK4(X16))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f4716])).
fof(f6059,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',sK4(X16))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.num.SUC_1'(s('type.num.num',sK4(X16))),X17)),s('type.num.num',X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f5634])).
fof(f6058,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(backward_demodulation,[],[f6018,f5085])).
fof(f6057,plain,(
  ( ! [X30] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X30)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(backward_demodulation,[],[f6018,f5661])).
fof(f6056,plain,(
  ( ! [X31] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X31)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(backward_demodulation,[],[f6018,f5662])).
fof(f6052,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X14)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)),X15)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))))) )),
  inference(backward_demodulation,[],[f6018,f5651])).
fof(f6051,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(backward_demodulation,[],[f6018,f5648])).
fof(f6050,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(backward_demodulation,[],[f6018,f5126])).
fof(f6018,plain,(
  ( ! [X4,X3] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f565,f561])).
fof(f6042,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK4(X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f6016,f561])).
fof(f6016,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',sK4(X0)))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f565,f471])).
fof(f5996,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(X0)),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f565,f471])).
fof(f6041,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X0),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))),s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(forward_demodulation,[],[f5975,f561])).
fof(f5975,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X0),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))))) )),
  inference(unit_resulting_resolution,[],[f565,f557])).
fof(f6040,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X0),s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(forward_demodulation,[],[f5976,f561])).
fof(f5976,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X0),s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(unit_resulting_resolution,[],[f565,f557])).
fof(f5921,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f436,f5486,f598])).
fof(f5923,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) )),
  inference(unit_resulting_resolution,[],[f692,f5486,f651])).
fof(f5934,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f5486,f652])).
fof(f5945,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f692,f5486,f682])).
fof(f5947,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f5486,f683])).
fof(f5915,plain,(
  ( ! [X52,X53,X51] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X52))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X52)))),X53,bool)) | p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X52))))))) )),
  inference(forward_demodulation,[],[f5900,f564])).
fof(f5900,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'const.prim_rec.<_2'(s('type.num.num',X51),s('type.num.num',X52)))))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X52))))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X51))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X52)))),X53,bool))) )),
  inference(superposition,[],[f550,f564])).
fof(f5896,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X37)))) | p(s(bool,X38)) | ~sP0(X38,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37)))),X39)) )),
  inference(superposition,[],[f652,f564])).
fof(f5895,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X33)))) | p(s(bool,X34)) | ~sP0(X34,X35,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f651,f564])).
fof(f5886,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))) )),
  inference(superposition,[],[f574,f564])).
fof(f5885,plain,(
  ( ! [X10,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num',X10)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f575,f564])).
fof(f5878,plain,(
  ( ! [X4,X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f564,f469])).
fof(f5875,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',sK4(X0)))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f564,f471])).
fof(f5855,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f564,f471])).
fof(f5767,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f692,f5485,f653])).
fof(f5783,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f692,f5485,f653])).
fof(f5784,plain,(
  ( ! [X0] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f5485,f5485,f653])).
fof(f5667,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f5484,f575])).
fof(f5673,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f692,f5484,f595])).
fof(f5683,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f692,f5484,f653])).
fof(f5699,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f692,f5484,f653])).
fof(f5700,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f5484,f5484,f653])).
fof(f5712,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f436,f5484,f682])).
fof(f5666,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',X36)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')),X37)),s('type.num.num',X36))))) )),
  inference(forward_demodulation,[],[f5645,f553])).
fof(f5645,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')),X37)),s('type.num.num',X36)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X37),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f605,f553])).
fof(f5665,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X33)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34)),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f5644,f456])).
fof(f5644,plain,(
  ( ! [X33,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34)),s('type.num.num',X33)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))))))))) )),
  inference(superposition,[],[f605,f456])).
fof(f5662,plain,(
  ( ! [X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X31)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5642,f441])).
fof(f5642,plain,(
  ( ! [X31] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X31)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(superposition,[],[f605,f441])).
fof(f5661,plain,(
  ( ! [X30] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X30)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5641,f2838])).
fof(f5641,plain,(
  ( ! [X30] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X30)),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f605,f2838])).
fof(f5658,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num',X26)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')),X27)),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f5639,f451])).
fof(f5639,plain,(
  ( ! [X26,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')),X27)),s('type.num.num',X26)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f605,f451])).
fof(f5657,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num',X24)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)),X25)),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f5638,f693])).
fof(f5638,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)),X25)),s('type.num.num',X24)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24))))))) )),
  inference(superposition,[],[f605,f693])).
fof(f5656,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X22)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X23)),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f5637,f694])).
fof(f5637,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X23)),s('type.num.num',X22)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f605,f694])).
fof(f5634,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.num.SUC_1'(s('type.num.num',sK4(X16))),X17)),s('type.num.num',X16)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f605,f471])).
fof(f5651,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)),X15)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f5633,f462])).
fof(f5633,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)),X15)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14))))))) )),
  inference(superposition,[],[f605,f462])).
fof(f5650,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X12)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X13)),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5632,f450])).
fof(f5632,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X13)),s('type.num.num',X12)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12))))))) )),
  inference(superposition,[],[f605,f450])).
fof(f5649,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f5631,f696])).
fof(f5631,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11)),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))) )),
  inference(superposition,[],[f605,f696])).
fof(f5648,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f5630,f695])).
fof(f5630,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f605,f695])).
fof(f5628,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4)),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f605,f560])).
fof(f5647,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f5627,f449])).
fof(f5627,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1)),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f605,f449])).
fof(f5617,plain,(
  ( ! [X12] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X12,bool)) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f5606,f4797])).
fof(f5606,plain,(
  ( ! [X12] : (p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),X12,bool))) )),
  inference(superposition,[],[f550,f4797])).
fof(f5585,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK14(X0,X1)),s('type.num.num',X1)))) )),
  inference(subsumption_resolution,[],[f5568,f692])).
fof(f5568,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK14(X0,X1)),s('type.num.num',X1)))) )),
  inference(superposition,[],[f604,f469])).
fof(f5584,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X37)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X37,happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X36))))) )),
  inference(forward_demodulation,[],[f5567,f553])).
fof(f5567,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X37,happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X36)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X37))))) )),
  inference(superposition,[],[f604,f553])).
fof(f5583,plain,(
  ( ! [X33,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num',X34)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X34,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f5566,f456])).
fof(f5566,plain,(
  ( ! [X33,X34] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X34,'const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))),s('type.num.num',X33)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))))),s('type.num.num',X34))))) )),
  inference(superposition,[],[f604,f456])).
fof(f5582,plain,(
  ( ! [X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X32,'const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5565,f438])).
fof(f5565,plain,(
  ( ! [X32] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X32,'const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X32))))) )),
  inference(superposition,[],[f604,f438])).
fof(f5581,plain,(
  ( ! [X31] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X31)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X31,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5564,f441])).
fof(f5564,plain,(
  ( ! [X31] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X31,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))))) )),
  inference(superposition,[],[f604,f441])).
fof(f5580,plain,(
  ( ! [X30] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X30,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f5563,f2838])).
fof(f5563,plain,(
  ( ! [X30] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X30,'const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X30))))) )),
  inference(superposition,[],[f604,f2838])).
fof(f5579,plain,(
  ( ! [X28,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X29,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5562,f452])).
fof(f5562,plain,(
  ( ! [X28,X29] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X29,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))),s('type.num.num',X29))))) )),
  inference(superposition,[],[f604,f452])).
fof(f5578,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num',X27)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X27,'const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f5561,f451])).
fof(f5561,plain,(
  ( ! [X26,X27] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X27,'const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X26)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X27))))) )),
  inference(superposition,[],[f604,f451])).
fof(f5577,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X25)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X25,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f5560,f693])).
fof(f5560,plain,(
  ( ! [X24,X25] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X25,'const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))),s('type.num.num',X24)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24))),s('type.num.num',X25))))) )),
  inference(superposition,[],[f604,f693])).
fof(f5576,plain,(
  ( ! [X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X23,'const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f5559,f694])).
fof(f5559,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X23,'const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num',X22)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X23))))) )),
  inference(superposition,[],[f604,f694])).
fof(f5575,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X21)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X21,'const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5558,f457])).
fof(f5558,plain,(
  ( ! [X21,X20] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X21,'const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X21))))) )),
  inference(superposition,[],[f604,f457])).
fof(f5574,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X19,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5557,f454])).
fof(f5557,plain,(
  ( ! [X19,X18] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X19,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))),s('type.num.num','const.num.|48|_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))),s('type.num.num',X19))))) )),
  inference(superposition,[],[f604,f454])).
fof(f5556,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X17,'const.num.SUC_1'(s('type.num.num',sK4(X16))))),s('type.num.num',X16)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f604,f471])).
fof(f5573,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num',X15)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X15,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f5555,f462])).
fof(f5555,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X15,happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14))),s('type.num.num',X15))))) )),
  inference(superposition,[],[f604,f462])).
fof(f5572,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num',X13)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X13,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f5554,f450])).
fof(f5554,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X13,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),s('type.num.num',X12)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12))),s('type.num.num',X13))))) )),
  inference(superposition,[],[f604,f450])).
fof(f5571,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f5553,f696])).
fof(f5553,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X11,'const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num',X11))))) )),
  inference(superposition,[],[f604,f696])).
fof(f5570,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f5552,f695])).
fof(f5552,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X9,'const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X9))))) )),
  inference(superposition,[],[f604,f695])).
fof(f5550,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X4,'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))) )),
  inference(superposition,[],[f604,f560])).
fof(f5569,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f5549,f449])).
fof(f5549,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))))) )),
  inference(superposition,[],[f604,f449])).
fof(f5544,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(forward_demodulation,[],[f5482,f566])).
fof(f5482,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))))),
  inference(unit_resulting_resolution,[],[f5145,f577])).
fof(f5486,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3))))))))),
  inference(unit_resulting_resolution,[],[f5145,f601])).
fof(f5487,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f5145,f574])).
fof(f5494,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))) )),
  inference(unit_resulting_resolution,[],[f692,f5145,f651])).
fof(f5505,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f5145,f652])).
fof(f5516,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3)))))))),
  inference(unit_resulting_resolution,[],[f692,f5145,f682])).
fof(f5481,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) != s(X0,X3) | s(bool,'T_0') = s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) )),
  inference(subsumption_resolution,[],[f5372,f692])).
fof(f5372,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'F_0')) | s(X0,X2) != s(X0,X3) | s(bool,'T_0') = s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) )),
  inference(superposition,[],[f557,f469])).
fof(f5359,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X57),s(bool,X58),s(bool,X56)))) | s(bool,'F_0') != s(bool,X58) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f557,f469])).
fof(f5358,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X54),s(bool,X55),s(bool,'F_0')))) | s(bool,X53) != s(bool,X55) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f557,f469])).
fof(f5347,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X24),s('type.num.num',X25),s('type.num.num',X23)))) | s('type.num.num',X25) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X23)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23)) )),
  inference(superposition,[],[f557,f471])).
fof(f5341,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X5),s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f557,f560])).
fof(f5327,plain,(
  ( ! [X57,X58,X56] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X57),s(bool,X56),s(bool,X58)))) | s(bool,'F_0') != s(bool,X58) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f557,f469])).
fof(f5326,plain,(
  ( ! [X54,X55,X53] : (p(s(bool,'const.relation.RTC_3'(s(fun(bool,fun(bool,bool)),X54),s(bool,'F_0'),s(bool,X55)))) | s(bool,X53) != s(bool,X55) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f557,f469])).
fof(f5315,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X24),s('type.num.num',X23),s('type.num.num',X25)))) | s('type.num.num',X25) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X23)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X23)) )),
  inference(superposition,[],[f557,f471])).
fof(f5309,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X6)))) | s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f557,f560])).
fof(f5285,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))))) )),
  inference(unit_resulting_resolution,[],[f560,f557])).
fof(f5373,plain,(
  ( ! [X0,X3,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X3),s(X0,X3))))) )),
  inference(forward_demodulation,[],[f5306,f553])).
fof(f5306,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X3,X0)),s('type.num.num','const.num.|48|_0'))),s(X0,X3))))) )),
  inference(unit_resulting_resolution,[],[f553,f557])).
fof(f5227,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(subsumption_resolution,[],[f5207,f692])).
fof(f5207,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f599,f469])).
fof(f5226,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) )),
  inference(subsumption_resolution,[],[f5205,f534])).
fof(f5205,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))) )),
  inference(superposition,[],[f599,f696])).
fof(f5202,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(superposition,[],[f599,f560])).
fof(f5183,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f599,f560])).
fof(f5157,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f534,f599])).
fof(f5159,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) )),
  inference(unit_resulting_resolution,[],[f4280,f599])).
fof(f5085,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f577,f471])).
fof(f5127,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f5082,f566])).
fof(f5082,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))))) )),
  inference(superposition,[],[f577,f696])).
fof(f5126,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f5081,f566])).
fof(f5081,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))))) )),
  inference(superposition,[],[f577,f695])).
fof(f5124,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))))) )),
  inference(forward_demodulation,[],[f5079,f566])).
fof(f5079,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f577,f560])).
fof(f5110,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X16)),s('type.num.num',X17)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(forward_demodulation,[],[f5066,f564])).
fof(f5066,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f577,f471])).
fof(f5060,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))) )),
  inference(superposition,[],[f577,f560])).
fof(f5052,plain,(
  ( ! [X43,X41,X42] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X42))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X41))),s('type.num.num',X42)),X43,bool)) | p(s(bool,happ(s(fun(bool,bool),X43),s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X42))))))) )),
  inference(forward_demodulation,[],[f5041,f561])).
fof(f5041,plain,(
  ( ! [X43,X41,X42] : (p(s(bool,happ(s(fun(bool,bool),X43),s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X42)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X41))),s('type.num.num',X42))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X41))),s('type.num.num',X42)),X43,bool))) )),
  inference(superposition,[],[f550,f561])).
fof(f5039,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num',X35)))) | p(s(bool,X36)) | ~sP0(X36,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))),s('type.num.num',X35)),X37)) )),
  inference(superposition,[],[f652,f561])).
fof(f5038,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num',X31)))) | p(s(bool,X32)) | ~sP0(X32,X33,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))),s('type.num.num',X31)))) )),
  inference(superposition,[],[f651,f561])).
fof(f5022,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f561,f469])).
fof(f5001,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f561,f471])).
fof(f4932,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f436,f4792,f598])).
fof(f4934,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4792,f651])).
fof(f4944,plain,(
  ( ! [X0] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f4792,f652])).
fof(f4954,plain,(
  s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f692,f4792,f682])).
fof(f4956,plain,(
  ( ! [X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f4792,f683])).
fof(f4899,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.num.|48|_0',sK10(X3,X4,bool),'type.num.num'))) )),
  inference(superposition,[],[f550,f553])).
fof(f4926,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK9(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) )),
  inference(subsumption_resolution,[],[f4898,f692])).
fof(f4898,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK9(X2,X1,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) )),
  inference(superposition,[],[f550,f469])).
fof(f4925,plain,(
  ( ! [X57,X58,X56,X55] : (s(X55,X57) = s(X55,sK9(happ(s(fun('type.num.num',X55),sK10(X56,X57,X55)),s('type.num.num','const.num.|48|_0')),X58,X55)) | p(s(bool,happ(s(fun(X55,bool),X58),s(X55,X57))))) )),
  inference(forward_demodulation,[],[f4897,f553])).
fof(f4897,plain,(
  ( ! [X57,X58,X56,X55] : (p(s(bool,happ(s(fun(X55,bool),X58),s(X55,X57)))) | s(X55,happ(s(fun('type.num.num',X55),sK10(X56,X57,X55)),s('type.num.num','const.num.|48|_0'))) = s(X55,sK9(happ(s(fun('type.num.num',X55),sK10(X56,X57,X55)),s('type.num.num','const.num.|48|_0')),X58,X55))) )),
  inference(superposition,[],[f550,f553])).
fof(f4924,plain,(
  ( ! [X54] : (s(bool,'T_0') = s(bool,sK9('const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X54,bool)) | p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4896,f734])).
fof(f4896,plain,(
  ( ! [X54] : (p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'T_0')))) | s(bool,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'))) = s(bool,sK9('const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X54,bool))) )),
  inference(superposition,[],[f550,f734])).
fof(f4923,plain,(
  ( ! [X52,X53] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X52)),X53,bool)) | p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4895,f1378])).
fof(f4895,plain,(
  ( ! [X52,X53] : (p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X52))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num',X52)),X53,bool))) )),
  inference(superposition,[],[f550,f1378])).
fof(f4922,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50)),X51,bool)) | p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4894,f733])).
fof(f4894,plain,(
  ( ! [X50,X51] : (p(s(bool,happ(s(fun(bool,bool),X51),s(bool,'T_0')))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50))) = s(bool,sK9('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50)),X51,bool))) )),
  inference(superposition,[],[f550,f733])).
fof(f4921,plain,(
  ( ! [X49] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X49,bool)) | p(s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f4893,f742])).
fof(f4893,plain,(
  ( ! [X49] : (p(s(bool,happ(s(fun(bool,bool),X49),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)),X49,bool))) )),
  inference(superposition,[],[f550,f742])).
fof(f4920,plain,(
  ( ! [X47,X48] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X48,bool)) | p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4892,f930])).
fof(f4892,plain,(
  ( ! [X47,X48] : (p(s(bool,happ(s(fun(bool,bool),X48),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X48,bool))) )),
  inference(superposition,[],[f550,f930])).
fof(f4918,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X45,bool)) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4890,f732])).
fof(f4890,plain,(
  ( ! [X45] : (p(s(bool,happ(s(fun(bool,bool),X45),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X45,bool))) )),
  inference(superposition,[],[f550,f732])).
fof(f4917,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))),X44,bool)) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f4889,f897])).
fof(f4889,plain,(
  ( ! [X43,X44] : (p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43))))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',X43)))),X44,bool))) )),
  inference(superposition,[],[f550,f897])).
fof(f4916,plain,(
  ( ! [X41,X42] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X41)),X42,bool)) | p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f4888,f744])).
fof(f4888,plain,(
  ( ! [X41,X42] : (p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X41))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X41),s('type.num.num',X41)),X42,bool))) )),
  inference(superposition,[],[f550,f744])).
fof(f4915,plain,(
  ( ! [X39,X40] : (s(bool,'F_0') = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0')),X40,bool)) | p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f4887,f743])).
fof(f4887,plain,(
  ( ! [X39,X40] : (p(s(bool,happ(s(fun(bool,bool),X40),s(bool,'F_0')))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) = s(bool,sK9('const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0')),X40,bool))) )),
  inference(superposition,[],[f550,f743])).
fof(f4886,plain,(
  ( ! [X37,X38] : (p(s(bool,happ(s(fun(bool,bool),X38),s(bool,X37)))) | s(bool,'F_0') = s(bool,sK9('F_0',X38,bool)) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f550,f469])).
fof(f4885,plain,(
  ( ! [X35,X36] : (p(s(bool,happ(s(fun(bool,bool),X36),s(bool,'F_0')))) | s(bool,X35) = s(bool,sK9(X35,X36,bool)) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f550,f469])).
fof(f4914,plain,(
  ( ! [X33,X34] : (s('type.num.num',X33) = s('type.num.num',sK9('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',X33))))) )),
  inference(forward_demodulation,[],[f4884,f456])).
fof(f4884,plain,(
  ( ! [X33,X34] : (p(s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',X33)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))))) = s('type.num.num',sK9('const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))),X34,'type.num.num'))) )),
  inference(superposition,[],[f550,f456])).
fof(f4913,plain,(
  ( ! [X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X32,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4883,f438])).
fof(f4883,plain,(
  ( ! [X32] : (p(s(bool,happ(s(fun('type.num.num',bool),X32),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')),X32,'type.num.num'))) )),
  inference(superposition,[],[f550,f438])).
fof(f4912,plain,(
  ( ! [X31] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X31,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4882,f441])).
fof(f4882,plain,(
  ( ! [X31] : (p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK9('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X31,'type.num.num'))) )),
  inference(superposition,[],[f550,f441])).
fof(f4911,plain,(
  ( ! [X30] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X30,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4881,f2838])).
fof(f4881,plain,(
  ( ! [X30] : (p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')),X30,'type.num.num'))) )),
  inference(superposition,[],[f550,f2838])).
fof(f4910,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)),X29,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4880,f452])).
fof(f4880,plain,(
  ( ! [X28,X29] : (p(s(bool,happ(s(fun('type.num.num',bool),X29),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)),X29,'type.num.num'))) )),
  inference(superposition,[],[f550,f452])).
fof(f4909,plain,(
  ( ! [X26,X27] : (s('type.num.num',X26) = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')),X27,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f4879,f451])).
fof(f4879,plain,(
  ( ! [X26,X27] : (p(s(bool,happ(s(fun('type.num.num',bool),X27),s('type.num.num',X26)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')),X27,'type.num.num'))) )),
  inference(superposition,[],[f550,f451])).
fof(f4908,plain,(
  ( ! [X24,X25] : (s('type.num.num',X24) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)),X25,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num',X24))))) )),
  inference(forward_demodulation,[],[f4878,f693])).
fof(f4878,plain,(
  ( ! [X24,X25] : (p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num',X24)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24))) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)),X25,'type.num.num'))) )),
  inference(superposition,[],[f550,f693])).
fof(f4907,plain,(
  ( ! [X23,X22] : (s('type.num.num',X22) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X23,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f4877,f694])).
fof(f4877,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num',X22)))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X23,'type.num.num'))) )),
  inference(superposition,[],[f550,f694])).
fof(f4906,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4876,f457])).
fof(f4876,plain,(
  ( ! [X21,X20] : (p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num'))) )),
  inference(superposition,[],[f550,f457])).
fof(f4905,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)),X19,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4875,f454])).
fof(f4875,plain,(
  ( ! [X19,X18] : (p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) = s('type.num.num',sK9('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)),X19,'type.num.num'))) )),
  inference(superposition,[],[f550,f454])).
fof(f4874,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num',X16)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))) = s('type.num.num',sK9('const.num.SUC_1'(s('type.num.num',sK4(X16))),X17,'type.num.num')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f550,f471])).
fof(f4904,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))) = s('type.num.num',sK9(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)),X15,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f4873,f462])).
fof(f4873,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X14)))))) | s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14))) = s('type.num.num',sK9(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)),X15,'type.num.num'))) )),
  inference(superposition,[],[f550,f462])).
fof(f4903,plain,(
  ( ! [X12,X13] : (s('type.num.num',X12) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X13,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f4872,f450])).
fof(f4872,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num',X12)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)),X13,'type.num.num'))) )),
  inference(superposition,[],[f550,f450])).
fof(f4902,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))))) )),
  inference(forward_demodulation,[],[f4871,f696])).
fof(f4871,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.num.num',bool),X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))),X11,'type.num.num'))) )),
  inference(superposition,[],[f550,f696])).
fof(f4901,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) )),
  inference(forward_demodulation,[],[f4870,f695])).
fof(f4870,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X9,'type.num.num'))) )),
  inference(superposition,[],[f550,f695])).
fof(f4868,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)),X4,'type.num.num'))) )),
  inference(superposition,[],[f550,f560])).
fof(f4900,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1,'type.num.num')) | p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f4867,f449])).
fof(f4867,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK9('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')),X1,'type.num.num'))) )),
  inference(superposition,[],[f550,f449])).
fof(f4866,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | s(X0,X3) = s(X0,sK9(X3,happ(s(fun('type.num.num',fun(X0,bool)),sK10(X1,X2,fun(X0,bool))),s('type.num.num','const.num.|48|_0')),X0))) )),
  inference(superposition,[],[f550,f553])).
fof(f4792,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))))))),
  inference(unit_resulting_resolution,[],[f4788,f573])).
fof(f4797,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f692,f4788,f595])).
fof(f4803,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f692,f4788,f653])).
fof(f4817,plain,(
  ( ! [X0] : (sP0(X0,'F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4788,f653])).
fof(f4818,plain,(
  ( ! [X0] : (sP0(X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f4788,f4788,f653])).
fof(f4828,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3)))))),
  inference(unit_resulting_resolution,[],[f436,f4788,f682])).
fof(f4787,plain,(
  ( ! [X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) )),
  inference(subsumption_resolution,[],[f4749,f436])).
fof(f4749,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X2))))) )),
  inference(superposition,[],[f632,f897])).
fof(f4735,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f632,f471])).
fof(f4716,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f632,f471])).
fof(f4710,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f632,f560])).
fof(f4692,plain,(
  ( ! [X5] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(forward_demodulation,[],[f4648,f561])).
fof(f4648,plain,(
  ( ! [X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))))))) )),
  inference(superposition,[],[f4104,f695])).
fof(f4614,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f4104,f629])).
fof(f4619,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f436,f4104,f598])).
fof(f4620,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4104,f4104,f598])).
fof(f4631,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f4104,f652])).
fof(f4641,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4104,f682])).
fof(f4644,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f4104,f683])).
fof(f4507,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f692,f4283,f595])).
fof(f4508,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f4283,f4283,f595])).
fof(f4509,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f436,f4283,f651])).
fof(f4511,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f436,f4283,f652])).
fof(f4513,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f692,f4283,f653])).
fof(f4527,plain,(
  ( ! [X0,X1] : (sP0(X0,'F_0','const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f692,f4283,f653])).
fof(f4528,plain,(
  ( ! [X2,X0,X1] : (sP0(X0,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f4283,f4283,f653])).
fof(f4538,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f436,f4283,f682])).
fof(f4540,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X1)) )),
  inference(unit_resulting_resolution,[],[f4283,f811])).
fof(f4541,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f4283,f812])).
fof(f4542,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f4283,f1030])).
fof(f4543,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f4283,f1031])).
fof(f4544,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X2)))) )),
  inference(unit_resulting_resolution,[],[f4283,f1671])).
fof(f4545,plain,(
  ( ! [X2,X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f4283,f1672])).
fof(f4546,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),X1,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(unit_resulting_resolution,[],[f4283,f1769])).
fof(f4547,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f4283,f1770])).
fof(f4432,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f629,f471])).
fof(f4426,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))) )),
  inference(superposition,[],[f629,f560])).
fof(f4413,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f629,f471])).
fof(f4449,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f4448,f695])).
fof(f4448,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f4409,f561])).
fof(f4409,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f629,f695])).
fof(f4407,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f629,f560])).
fof(f4317,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f436,f4281,f598])).
fof(f4318,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4281,f4281,f598])).
fof(f4319,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4281,f651])).
fof(f4329,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f4281,f652])).
fof(f4339,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4281,f682])).
fof(f4341,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f4281,f683])).
fof(f4281,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4280,f470])).
fof(f4282,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4280,f471])).
fof(f4283,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(unit_resulting_resolution,[],[f4280,f483])).
fof(f4284,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f586])).
fof(f4285,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f4280,f612])).
fof(f4287,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f4280,f2805])).
fof(f4289,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f4280,f585])).
fof(f4280,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))) )),
  inference(subsumption_resolution,[],[f4273,f534])).
fof(f4273,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))) )),
  inference(superposition,[],[f613,f696])).
fof(f4268,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f613,f553])).
fof(f4267,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f613,f456])).
fof(f4262,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X26))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f613,f451])).
fof(f4261,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))) )),
  inference(superposition,[],[f613,f693])).
fof(f4260,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f613,f694])).
fof(f4255,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f613,f450])).
fof(f4279,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) )),
  inference(subsumption_resolution,[],[f4254,f4224])).
fof(f4254,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f613,f696])).
fof(f4251,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f613,f560])).
fof(f4250,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f613,f449])).
fof(f4224,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f534,f613])).
fof(f4175,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK4(X0)),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f4026,f471])).
fof(f4130,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f436,f4026,f598])).
fof(f4131,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f4026,f4026,f598])).
fof(f4142,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f4026,f652])).
fof(f4152,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f692,f4026,f682])).
fof(f4155,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f4026,f683])).
fof(f4104,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f692,f4023,f653])).
fof(f4098,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f612,f696])).
fof(f4074,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f612,f553])).
fof(f4073,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f612,f456])).
fof(f4068,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X27))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f612,f451])).
fof(f4067,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))) )),
  inference(superposition,[],[f612,f693])).
fof(f4066,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f612,f694])).
fof(f4061,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f612,f450])).
fof(f4060,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f612,f696])).
fof(f4057,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f612,f560])).
fof(f4056,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f612,f449])).
fof(f4049,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f534,f612])).
fof(f4100,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f4053,f2838])).
fof(f4053,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f3352,f612])).
fof(f4047,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X1,'const.arithmetic.<=_2'(s('type.num.num',sK4(X0)),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f4022,f471])).
fof(f4026,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f692,f4022,f653])).
fof(f4023,plain,(
  ( ! [X10,X11] : (~sP0('F_0',X11,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f1298,f696])).
fof(f4020,plain,(
  ( ! [X4,X2,X3] : (~sP0('F_0',X4,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f1298,f560])).
fof(f3913,plain,(
  ( ! [X17,X16] : (s('type.num.num',X16) != s('type.num.num',X17) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f611,f471])).
fof(f3907,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f611,f560])).
fof(f3945,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f3887,f566])).
fof(f3887,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f560,f611])).
fof(f3853,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f1232,f471])).
fof(f3822,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f1224,f471])).
fof(f3755,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f609,f560])).
fof(f3741,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X1,'const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f1217,f471])).
fof(f3717,plain,(
  ( ! [X21,X19,X20] : (p(s(bool,X20)) | ~sP0(X20,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))),X21)) )),
  inference(subsumption_resolution,[],[f3706,f436])).
fof(f3706,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | ~sP0(X20,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))),X21)) )),
  inference(superposition,[],[f652,f930])).
fof(f3716,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,X17)) | ~sP0(X17,X18,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) )),
  inference(subsumption_resolution,[],[f3705,f436])).
fof(f3705,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,X17)) | ~sP0(X17,X18,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) )),
  inference(superposition,[],[f651,f930])).
fof(f3668,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f3631,f692])).
fof(f3631,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f601,f469])).
fof(f3617,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f601,f471])).
fof(f3611,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f601,f560])).
fof(f3598,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f601,f471])).
fof(f3634,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f3633,f695])).
fof(f3633,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f3594,f561])).
fof(f3594,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X9))))) )),
  inference(superposition,[],[f601,f695])).
fof(f3592,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))) )),
  inference(superposition,[],[f601,f560])).
fof(f3584,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))))))),
  inference(unit_resulting_resolution,[],[f3297,f585])).
fof(f3582,plain,(
  ( ! [X2,X3] : (s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(subsumption_resolution,[],[f3470,f692])).
fof(f3470,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f593,f469])).
fof(f3466,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X1) != s('type.num.num',sK4(X0)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f593,f471])).
fof(f3454,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))) | s('type.num.num',X17) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f593,f471])).
fof(f3565,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(forward_demodulation,[],[f3448,f566])).
fof(f3448,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))))) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f593,f560])).
fof(f3435,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))) | s('type.num.num',X17) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f593,f471])).
fof(f3429,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))) | s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f593,f560])).
fof(f3512,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))))) )),
  inference(forward_demodulation,[],[f3409,f566])).
fof(f3409,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))))) )),
  inference(unit_resulting_resolution,[],[f696,f593])).
fof(f3497,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(forward_demodulation,[],[f3417,f566])).
fof(f3417,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f560,f593])).
fof(f3359,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f3352,f585])).
fof(f3352,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))) )),
  inference(subsumption_resolution,[],[f3347,f534])).
fof(f3347,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))) )),
  inference(superposition,[],[f586,f696])).
fof(f3344,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(superposition,[],[f586,f560])).
fof(f3342,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num',X37) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f586,f553])).
fof(f3341,plain,(
  ( ! [X33,X34] : (s('type.num.num',X34) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f586,f456])).
fof(f3336,plain,(
  ( ! [X26,X27] : (s('type.num.num',X27) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X26))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f586,f451])).
fof(f3335,plain,(
  ( ! [X24,X25] : (s('type.num.num',X25) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))) )),
  inference(superposition,[],[f586,f693])).
fof(f3334,plain,(
  ( ! [X23,X22] : (s('type.num.num',X23) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f586,f694])).
fof(f3329,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f586,f450])).
fof(f3328,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f586,f696])).
fof(f3325,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f586,f560])).
fof(f3324,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f586,f449])).
fof(f3302,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f2682,f586])).
fof(f3297,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))))),
  inference(unit_resulting_resolution,[],[f3295,f585])).
fof(f3295,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))))),
  inference(unit_resulting_resolution,[],[f3234,f585])).
fof(f3254,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num',sK4(X0)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f585,f471])).
fof(f3253,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X36))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),sK10(X35,X36,'type.num.num')),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f585,f553])).
fof(f3252,plain,(
  ( ! [X33,X34] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X33))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))) | s('type.num.num',X34) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))) )),
  inference(superposition,[],[f585,f456])).
fof(f3251,plain,(
  ( ! [X32] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))) | s('type.num.num',X32) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f585,f438])).
fof(f3250,plain,(
  ( ! [X31] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X31))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',X31) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f585,f441])).
fof(f3248,plain,(
  ( ! [X28,X29] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28)))) )),
  inference(superposition,[],[f585,f452])).
fof(f3247,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X26))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X27))) | s('type.num.num',X27) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f585,f451])).
fof(f3246,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X24))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X25))) | s('type.num.num',X25) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X24)))) )),
  inference(superposition,[],[f585,f693])).
fof(f3245,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))) | s('type.num.num',X23) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f585,f694])).
fof(f3244,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f585,f457])).
fof(f3243,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X19))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18)))) )),
  inference(superposition,[],[f585,f454])).
fof(f3242,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))) | s('type.num.num',X17) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f585,f471])).
fof(f3241,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))) | s('type.num.num',X15) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X14)))) )),
  inference(superposition,[],[f585,f462])).
fof(f3240,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(superposition,[],[f585,f450])).
fof(f3239,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))) )),
  inference(superposition,[],[f585,f696])).
fof(f3238,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f585,f695])).
fof(f3236,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f585,f560])).
fof(f3235,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f585,f449])).
fof(f3228,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f534,f585])).
fof(f3234,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))),
  inference(unit_resulting_resolution,[],[f3213,f585])).
fof(f3214,plain,(
  ( ! [X4,X3] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(subsumption_resolution,[],[f3144,f692])).
fof(f3144,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X4)))) )),
  inference(superposition,[],[f575,f469])).
fof(f3213,plain,(
  s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),
  inference(subsumption_resolution,[],[f3143,f692])).
fof(f3143,plain,(
  p(s(bool,'F_0')) | s('type.num.num',sK2) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))),
  inference(superposition,[],[f575,f742])).
fof(f3126,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X16)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f575,f471])).
fof(f3120,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f575,f560])).
fof(f3107,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X16),s('type.num.num',X17)))) | s('type.num.num',X17) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f575,f471])).
fof(f3174,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f3104,f566])).
fof(f3104,plain,(
  ( ! [X10,X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num',X11) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f575,f696])).
fof(f3173,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f3103,f566])).
fof(f3103,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | s('type.num.num',X9) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f575,f695])).
fof(f3171,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))))) )),
  inference(forward_demodulation,[],[f3101,f566])).
fof(f3101,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(superposition,[],[f575,f560])).
fof(f3069,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f3032,f692])).
fof(f3032,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f573,f469])).
fof(f3018,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16)))),s('type.num.num',X17)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f573,f471])).
fof(f3012,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))) )),
  inference(superposition,[],[f573,f560])).
fof(f2999,plain,(
  ( ! [X17,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X16))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16)) )),
  inference(superposition,[],[f573,f471])).
fof(f3035,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f3034,f695])).
fof(f3034,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X9)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f2995,f561])).
fof(f2995,plain,(
  ( ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.num.num',X9)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(superposition,[],[f573,f695])).
fof(f2993,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f573,f560])).
fof(f2991,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(forward_demodulation,[],[f2980,f2838])).
fof(f2980,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(unit_resulting_resolution,[],[f2974,f2805])).
fof(f2990,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(forward_demodulation,[],[f2981,f2838])).
fof(f2981,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(unit_resulting_resolution,[],[f2974,f471])).
fof(f2974,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),
  inference(subsumption_resolution,[],[f2973,f692])).
fof(f2973,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f2972,f744])).
fof(f2972,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f2919,f561])).
fof(f2919,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f484,f2838])).
fof(f2838,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f696,f695])).
fof(f2837,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK4(X0)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK4(X0)),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f696,f471])).
fof(f2809,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f534,f2805])).
fof(f2814,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num',sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(forward_demodulation,[],[f2810,f441])).
fof(f2810,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num',sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(unit_resulting_resolution,[],[f1734,f2805])).
fof(f2813,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num',sK4(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))))) )),
  inference(forward_demodulation,[],[f2811,f462])).
fof(f2811,plain,(
  ( ! [X0] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))) != s('type.num.num',sK4(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))))) )),
  inference(unit_resulting_resolution,[],[f2242,f2805])).
fof(f2812,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),
  inference(unit_resulting_resolution,[],[f2682,f2805])).
fof(f2805,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num',sK4(X0)) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f2682,f471])).
fof(f2779,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(subsumption_resolution,[],[f2778,f692])).
fof(f2778,plain,(
  ( ! [X12] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f2777,f743])).
fof(f2777,plain,(
  ( ! [X12] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f2727,f561])).
fof(f2727,plain,(
  ( ! [X12] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f484,f695])).
fof(f2689,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X16)) | ~sP0(X16,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))),X17)) )),
  inference(subsumption_resolution,[],[f2677,f436])).
fof(f2677,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X16)) | ~sP0(X16,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X15)))),X17)) )),
  inference(superposition,[],[f652,f897])).
fof(f2688,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X13)) | ~sP0(X13,X14,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))) )),
  inference(subsumption_resolution,[],[f2676,f436])).
fof(f2676,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,X13)) | ~sP0(X13,X14,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))) )),
  inference(superposition,[],[f651,f897])).
fof(f2663,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X0)),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f897,f471])).
fof(f2642,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | ~sP0(X5,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X6)) )),
  inference(subsumption_resolution,[],[f2631,f436])).
fof(f2631,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | ~sP0(X5,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X6)) )),
  inference(superposition,[],[f652,f792])).
fof(f2641,plain,(
  ( ! [X4,X3] : (p(s(bool,X3)) | ~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(subsumption_resolution,[],[f2630,f436])).
fof(f2630,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~sP0(X3,X4,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f651,f792])).
fof(f2546,plain,(
  ( ! [X39,X37,X38] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X37)))))) | s('type.num.num',X39) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38)))) )),
  inference(superposition,[],[f602,f560])).
fof(f2545,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X34))),s('type.num.num',X36)))) | s('type.num.num',X36) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35)))) )),
  inference(superposition,[],[f602,f560])).
fof(f2544,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)))))) | s('type.num.num',X33) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32)))) )),
  inference(superposition,[],[f574,f560])).
fof(f2543,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X28))),s('type.num.num',X30)))) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X29)))) )),
  inference(superposition,[],[f574,f560])).
fof(f2541,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25)))) )),
  inference(superposition,[],[f531,f560])).
fof(f2540,plain,(
  ( ! [X23,X22] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23)))) )),
  inference(superposition,[],[f484,f560])).
fof(f2539,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(superposition,[],[f483,f560])).
fof(f2538,plain,(
  ( ! [X19,X18] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))) )),
  inference(superposition,[],[f470,f560])).
fof(f2490,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f560,f602])).
fof(f2491,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f560,f574])).
fof(f2469,plain,(
  ( ! [X0] : (~sP0('F_0','const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f1770])).
fof(f2393,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,X24)) | p(s(bool,X25)) | ~sP0(X25,happ(s(fun('type.num.num',bool),sK10(X23,X24,bool)),s('type.num.num','const.num.|48|_0')),X26)) )),
  inference(superposition,[],[f652,f553])).
fof(f2392,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,X20)) | p(s(bool,X21)) | ~sP0(X21,X22,happ(s(fun('type.num.num',bool),sK10(X19,X20,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f651,f553])).
fof(f2383,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK10(X0,X1,bool)),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f553,f469])).
fof(f2354,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) )),
  inference(unit_resulting_resolution,[],[f692,f1769])).
fof(f2324,plain,(
  ( ! [X35,X36] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X36),s('type.num.num',X35)))) | s('type.num.num',X36) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X35)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X35)) )),
  inference(superposition,[],[f602,f471])).
fof(f2323,plain,(
  ( ! [X33,X34] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X34)))) | s('type.num.num',X34) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X33)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f602,f471])).
fof(f2322,plain,(
  ( ! [X31,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num',X31)))) | s('type.num.num',X32) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X31)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X31)) )),
  inference(superposition,[],[f574,f471])).
fof(f2321,plain,(
  ( ! [X30,X29] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X29),s('type.num.num',X30)))) | s('type.num.num',X30) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X29)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X29)) )),
  inference(superposition,[],[f574,f471])).
fof(f2307,plain,(
  ( ! [X14,X15,X13] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)),X14,X15) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13)) )),
  inference(superposition,[],[f931,f471])).
fof(f2306,plain,(
  ( ! [X12,X11] : (~sP0('F_0',X12,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11)) )),
  inference(superposition,[],[f924,f471])).
fof(f2305,plain,(
  ( ! [X10,X9] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)),X10) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9)) )),
  inference(superposition,[],[f919,f471])).
fof(f2304,plain,(
  ( ! [X6,X8,X7] : (sP0('const.prim_rec.<_2'(s('type.num.num',sK4(X6)),s('type.num.num',X6)),X7,X8) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f898,f471])).
fof(f2303,plain,(
  ( ! [X4,X5] : (~sP0('F_0',X5,'const.prim_rec.<_2'(s('type.num.num',sK4(X4)),s('type.num.num',X4))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(superposition,[],[f891,f471])).
fof(f2302,plain,(
  ( ! [X2,X3] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',sK4(X2)),s('type.num.num',X2)),X3) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(superposition,[],[f886,f471])).
fof(f2300,plain,(
  ( ! [X0] : (s('type.num.num',sK4(X0)) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f456,f471])).
fof(f2296,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f534,f471])).
fof(f2351,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(forward_demodulation,[],[f2297,f441])).
fof(f2297,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(unit_resulting_resolution,[],[f1734,f471])).
fof(f2350,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))))))) )),
  inference(forward_demodulation,[],[f2298,f462])).
fof(f2298,plain,(
  ( ! [X0] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f2242,f471])).
fof(f2242,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X9)))) )),
  inference(subsumption_resolution,[],[f2241,f692])).
fof(f2241,plain,(
  ( ! [X9] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f2240,f743])).
fof(f2240,plain,(
  ( ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X9)))) )),
  inference(forward_demodulation,[],[f2195,f561])).
fof(f2195,plain,(
  ( ! [X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X9)))) )),
  inference(superposition,[],[f484,f462])).
fof(f2128,plain,(
  ( ! [X2,X3] : (s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(subsumption_resolution,[],[f2062,f692])).
fof(f2062,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s('type.num.num',X2) != s('type.num.num',X3) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f602,f469])).
fof(f1989,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f1031])).
fof(f1833,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f692,f1030])).
fof(f1738,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f1698,f692])).
fof(f1698,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f484,f469])).
fof(f1734,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(subsumption_resolution,[],[f1733,f692])).
fof(f1733,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1732,f744])).
fof(f1732,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1693,f561])).
fof(f1693,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f484,f441])).
fof(f1594,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) )),
  inference(unit_resulting_resolution,[],[f692,f812])).
fof(f1590,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f1581,f692])).
fof(f1581,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(superposition,[],[f470,f469])).
fof(f1551,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f811])).
fof(f1379,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f1333,f1333,f598])).
fof(f1380,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) )),
  inference(unit_resulting_resolution,[],[f692,f1333,f651])).
fof(f1387,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f1333,f652])).
fof(f1394,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f692,f1333,f682])).
fof(f1296,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f436,f559,f598])).
fof(f1297,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))) )),
  inference(unit_resulting_resolution,[],[f559,f559,f598])).
fof(f1305,plain,(
  ( ! [X2,X0,X1] : (~sP0('F_0','const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))),X2)) )),
  inference(unit_resulting_resolution,[],[f692,f559,f652])).
fof(f1312,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f692,f559,f682])).
fof(f1314,plain,(
  ( ! [X2,X0,X3,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))),X2,X3)) )),
  inference(unit_resulting_resolution,[],[f559,f683])).
fof(f1215,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f436,f461,f598])).
fof(f1216,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f461,f461,f598])).
fof(f1217,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(unit_resulting_resolution,[],[f692,f461,f651])).
fof(f1224,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f461,f652])).
fof(f1231,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f692,f461,f682])).
fof(f1232,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f461,f683])).
fof(f1046,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f1036,f692])).
fof(f1036,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f595,f469])).
fof(f970,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f469,f469])).
fof(f919,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f460,f652])).
fof(f924,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f692,f460,f651])).
fof(f930,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f460,f476])).
fof(f931,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f460,f683])).
fof(f886,plain,(
  ( ! [X0,X1] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1)) )),
  inference(unit_resulting_resolution,[],[f692,f458,f652])).
fof(f891,plain,(
  ( ! [X0,X1] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f692,f458,f651])).
fof(f898,plain,(
  ( ! [X2,X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f458,f683])).
fof(f781,plain,(
  ( ! [X0] : (~sP0('F_0','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X0)) )),
  inference(unit_resulting_resolution,[],[f692,f440,f652])).
fof(f786,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f692,f440,f651])).
fof(f792,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(unit_resulting_resolution,[],[f440,f476])).
fof(f793,plain,(
  ( ! [X0,X1] : (sP0('const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f440,f683])).
fof(f774,plain,(
  ( ! [X0] : (sP0(X0,'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f692,f692,f653])).
fof(f764,plain,(
  ( ! [X0] : (~sP0('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f692,f436,f652])).
fof(f751,plain,(
  ( ! [X0] : (~sP0('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f692,f436,f651])).
fof(f742,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f435,f480])).
fof(f743,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f535,f480])).
fof(f727,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2)))),
  inference(unit_resulting_resolution,[],[f435,f475])).
fof(f728,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f535,f475])).
fof(f725,plain,(
  ( ! [X0,X1] : (sP0('const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0,X1)) )),
  inference(unit_resulting_resolution,[],[f439,f683])).
fof(f718,plain,(
  ( ! [X2,X0,X1] : (sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f448,f683])).
fof(f717,plain,(
  ( ! [X0,X1] : (sP0('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f436,f683])).
fof(f670,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X0,X1),'_dst_x1x0_2'(s(fun(X0,fun(X2,X1)),X4),s(X2,happ(s(fun(X3,X2),X5),s(X3,X6))))) = s(fun(X0,X1),happ(s(fun(X3,fun(X0,X1)),'_dst_x01x10_2'(s(fun(X0,fun(X2,X1)),X4),s(fun(X3,X2),X5))),s(X3,X6)))) )),
  inference(cnf_transformation,[],[f288])).
fof(f288,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X0,X1),'_dst_x1x0_2'(s(fun(X0,fun(X2,X1)),X4),s(X2,happ(s(fun(X3,X2),X5),s(X3,X6))))) = s(fun(X0,X1),happ(s(fun(X3,fun(X0,X1)),'_dst_x01x10_2'(s(fun(X0,fun(X2,X1)),X4),s(fun(X3,X2),X5))),s(X3,X6)))),
  inference(flattening,[],[f287])).
fof(f287,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X0,X1),'_dst_x1x0_2'(s(fun(X0,fun(X2,X1)),X4),s(X2,happ(s(fun(X3,X2),X5),s(X3,X6))))) = s(fun(X0,X1),happ(s(fun(X3,fun(X0,X1)),'_dst_x01x10_2'(s(fun(X0,fun(X2,X1)),X4),s(fun(X3,X2),X5))),s(X3,X6)))),
  inference(rectify,[],[f128])).
fof(f128,axiom,(
  ! [X35,X33,X40,X34] : ! [X36,X37,X38] : s(fun(X35,X33),'_dst_x1x0_2'(s(fun(X35,fun(X40,X33)),X36),s(X40,happ(s(fun(X34,X40),X37),s(X34,X38))))) = s(fun(X35,X33),happ(s(fun(X34,fun(X35,X33)),'_dst_x01x10_2'(s(fun(X35,fun(X40,X33)),X36),s(fun(X34,X40),X37))),s(X34,X38)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','_dst_x01x10_ax')).
fof(f642,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f334])).
fof(f334,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f333])).
fof(f333,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f280])).
fof(f280,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X2))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X8))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X8)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_TRANS')).
fof(f640,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f423])).
fof(f423,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | ((s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))) & (s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f332])).
fof(f332,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f279])).
fof(f279,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) => (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X8)))) => (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_EQ_SUB')).
fof(f641,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f423])).
fof(f638,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f277])).
fof(f277,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X6,X7,X8] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LEFT_ADD_DISTRIB')).
fof(f637,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f276])).
fof(f276,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X6,X7,X8] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X8)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.RIGHT_ADD_DISTRIB')).
fof(f635,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK16(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK16(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f422])).
fof(f422,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK16(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK16(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f330])).
fof(f330,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f273])).
fof(f273,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.arithmetic.LESS_MONO_ADD_INV',aHL_EXT)).
fof(f714,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(forward_demodulation,[],[f619,f441])).
fof(f619,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f713,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f712,f441])).
fof(f712,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f711,f441])).
fof(f711,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f620,f441])).
fof(f620,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f708,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f622,f441])).
fof(f622,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f417])).
fof(f707,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f623,f441])).
fof(f623,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f417])).
fof(f612,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f413])).
fof(f413,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f412])).
fof(f412,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_EQ_|48|')).
fof(f613,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f413])).
fof(f614,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f413])).
fof(f611,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f411])).
fof(f411,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f259])).
fof(f259,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.INV_SUC_EQ')).
fof(f609,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f410])).
fof(f410,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X6,X7] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X7))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.ADD_INV_|48|_EQ')).
fof(f603,plain,(
  ( ! [X0,X5,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X5)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f409,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | (! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X5))))) & p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X1)))))) & (! [X2] : ((p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X2,X1,X0))))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK15(X2,X1,X0)))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14,sK15])],[f408])).
fof(f408,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X4] : (! [X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X5))))) & p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X1)))))) & (! [X2] : (? [X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f407])).
fof(f407,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X2] : (! [X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) & p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1)))))) & (! [X2] : (? [X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f326])).
fof(f326,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> ? [X2] : (! [X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) & p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f257])).
fof(f257,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> ? [X2] : (! [X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) => p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) & p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))))),
  inference(flattening,[],[f256])).
fof(f256,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> ? [X2] : (! [X3] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) => p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X3))))) & p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) <=> ? [X9] : (! [X19] : (p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X19)))))) => p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X19))))) & p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X6)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X7))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_DEF')).
fof(f604,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f605,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK14(X1,X0)),s('type.num.num',X1)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f606,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X2,X1,X0))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f607,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK15(X2,X1,X0))))) | p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f600,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f406])).
fof(f602,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f406])).
fof(f599,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f325])).
fof(f325,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(ennf_transformation,[],[f254])).
fof(f254,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(flattening,[],[f253])).
fof(f253,plain,(
  ! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6,X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_ADD_NONZERO')).
fof(f593,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f322])).
fof(f322,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))),
  inference(ennf_transformation,[],[f251])).
fof(f251,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))),
  inference(rectify,[],[f102])).
fof(f102,axiom,(
  ! [X6,X7] : ((s('type.num.num',X6) = s('type.num.num',X7) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))))) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_LEMMA2')).
fof(f592,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f320])).
fof(f320,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(ennf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & s('type.num.num',X0) != s('type.num.num',X1)) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f249])).
fof(f249,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) & ~s('type.num.num',X0) = s('type.num.num',X1)) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X6,X7] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) & ~s('type.num.num',X6) = s('type.num.num',X7)) => p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_CASES_IMP')).
fof(f589,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f404])).
fof(f404,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | ((s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f316])).
fof(f316,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) | (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(ennf_transformation,[],[f246])).
fof(f246,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) => (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X6,X7] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))) => (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X6))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.INV_PRE_EQ')).
fof(f590,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f404])).
fof(f587,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X0) = s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f314])).
fof(f314,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f313])).
fof(f313,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) | (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f244])).
fof(f244,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) => (s('type.num.num',X0) = s('type.num.num',X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f75])).
fof(f75,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) => (s('type.num.num',X6) = s('type.num.num',X7) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_LEMMA|49|')).
fof(f703,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK11(X1,X0))))) )),
  inference(forward_demodulation,[],[f582,f560])).
fof(f582,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK11(X1,X0)),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f401])).
fof(f401,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK11(X1,X0)),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f308])).
fof(f308,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) => ? [X8] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_EQ_ADD_EXISTS')).
fof(f581,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f400])).
fof(f702,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f579,f560])).
fof(f579,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f306])).
fof(f306,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) => s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X7))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.SUB_ADD')).
fof(f573,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f107])).
fof(f107,axiom,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X7)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_CASES')).
fof(f699,plain,(
  ( ! [X0,X1] : (s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.relation.TC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f572,f462])).
fof(f572,plain,(
  ( ! [X0,X1] : (s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.relation.TC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  ! [X0,X1] : s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.relation.TC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X0),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X1)))))),
  inference(rectify,[],[f125])).
fof(f125,axiom,(
  ! [X6,X7] : s(bool,'const.relation.RTC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X6),s('type.num.num',X7))) = s(bool,'const.relation.TC_3'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0'))),s('type.num.num',X6),s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.TC_IM_RTC_SUC')).
fof(f571,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X21,X22] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X22))) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0'),s('type.num.num',X21))),s('type.num.num',X22)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','ARITY_0_2_const.prim_rec.<')).
fof(f570,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT_SUC')).
fof(f569,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X6,X7] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT|split|1')).
fof(f567,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f83])).
fof(f83,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.SUB_MONO_EQ')).
fof(f556,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) | s(X0,X2) = s(X0,X3) | p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f399])).
fof(f399,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) | s(X0,X2) = s(X0,X3) | p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))) & ((s(X0,X2) != s(X0,X3) & ~p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))) | p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))))),
  inference(flattening,[],[f398])).
fof(f398,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) | (s(X0,X2) = s(X0,X3) | p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))))) & ((s(X0,X2) != s(X0,X3) & ~p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))) | p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))))),
  inference(nnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) <=> (s(X0,X2) = s(X0,X3) | p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))))),
  inference(flattening,[],[f214])).
fof(f214,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) <=> (s(X0,X2) = s(X0,X3) | p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))))),
  inference(rectify,[],[f129])).
fof(f129,axiom,(
  ! [X11] : ! [X28,X16,X20] : (p(s(bool,'const.relation.RTC_3'(s(fun(X11,fun(X11,bool)),X28),s(X11,X16),s(X11,X20)))) <=> (s(X11,X16) = s(X11,X20) | p(s(bool,'const.relation.TC_3'(s(fun(X11,fun(X11,bool)),X28),s(X11,X16),s(X11,X20))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.relation.RTC_CASES_TC')).
fof(f557,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) | s(X0,X2) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f399])).
fof(f558,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3)))) | p(s(bool,'const.relation.RTC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f399])).
fof(f555,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))) = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'const.relation.TC_1'(s(fun(X0,fun(X0,bool)),X1))),s(X0,X2))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))) = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'const.relation.TC_1'(s(fun(X0,fun(X0,bool)),X1))),s(X0,X2))),s(X0,X3)))),
  inference(flattening,[],[f212])).
fof(f212,plain,(
  ! [X0] : ! [X1,X2,X3] : s(bool,'const.relation.TC_3'(s(fun(X0,fun(X0,bool)),X1),s(X0,X2),s(X0,X3))) = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'const.relation.TC_1'(s(fun(X0,fun(X0,bool)),X1))),s(X0,X2))),s(X0,X3)))),
  inference(rectify,[],[f127])).
fof(f127,axiom,(
  ! [X11] : ! [X21,X22,X39] : s(bool,'const.relation.TC_3'(s(fun(X11,fun(X11,bool)),X21),s(X11,X22),s(X11,X39))) = s(bool,happ(s(fun(X11,bool),happ(s(fun(X11,fun(X11,bool)),'const.relation.TC_1'(s(fun(X11,fun(X11,bool)),X21))),s(X11,X22))),s(X11,X39)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','ARITY_1_3_const.relation.TC')).
fof(f554,plain,(
  ( ! [X4,X2,X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun('type.num.num',fun(X0,X0)),X2),s('type.num.num',X4))),s(X0,happ(s(fun('type.num.num',X0),sK10(X2,X1,X0)),s('type.num.num',X4)))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f550,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK9(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f396])).
fof(f396,plain,(
  ! [X0,X1,X2] : (((s(X0,X2) = s(X0,sK9(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0)))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f395])).
fof(f395,plain,(
  ! [X0,X1,X2] : ((? [X4] : (s(X0,X2) = s(X0,X4) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f394])).
fof(f394,plain,(
  ! [X0,X1,X2] : ((? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f300])).
fof(f300,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(ennf_transformation,[],[f209])).
fof(f209,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f208])).
fof(f208,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f97])).
fof(f97,axiom,(
  ! [X11] : ! [X14,X23] : (! [X16] : (s(X11,X16) = s(X11,X23) => p(s(bool,happ(s(fun(X11,bool),X14),s(X11,X16))))) <=> p(s(bool,happ(s(fun(X11,bool),X14),s(X11,X23)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.bool.UNWIND_FORALL_THM2')).
fof(f551,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f396])).
fof(f552,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X3) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f396])).
fof(f540,plain,(
  ( ! [X6,X0,X7,X5,X1] : (~p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X6))),s(X0,X7)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X6)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X7))))) )),
  inference(cnf_transformation,[],[f388])).
fof(f388,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X5,X6,X7] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X6))),s(X0,X7)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X7)))))) & ((p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK6(X1,X0)))),s(X0,sK7(X1,X0))))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK7(X1,X0)))),s(X0,sK8(X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK6(X1,X0)))),s(X0,sK8(X1,X0)))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8])],[f387])).
fof(f387,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X5,X6,X7] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X6))),s(X0,X7)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X7)))))) & (? [X2,X3,X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4)))) & ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))))),
  inference(rectify,[],[f386])).
fof(f386,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2,X3,X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4)))))) & (? [X2,X3,X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4)))) & ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))))),
  inference(nnf_transformation,[],[f299])).
fof(f299,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) <=> ! [X2,X3,X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))))),
  inference(flattening,[],[f298])).
fof(f298,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) <=> ! [X2,X3,X4] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))))),
  inference(ennf_transformation,[],[f203])).
fof(f203,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) <=> ! [X2,X3,X4] : ((p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))))),
  inference(flattening,[],[f202])).
fof(f202,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1)))) <=> ! [X2,X3,X4] : ((p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X3))),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X2))),s(X0,X4))))))),
  inference(rectify,[],[f119])).
fof(f119,axiom,(
  ! [X11] : ! [X28] : (p(s(bool,'const.relation.transitive_1'(s(fun(X11,fun(X11,bool)),X28)))) <=> ! [X16,X20,X29] : ((p(s(bool,happ(s(fun(X11,bool),happ(s(fun(X11,fun(X11,bool)),X28),s(X11,X16))),s(X11,X20)))) & p(s(bool,happ(s(fun(X11,bool),happ(s(fun(X11,fun(X11,bool)),X28),s(X11,X20))),s(X11,X29))))) => p(s(bool,happ(s(fun(X11,bool),happ(s(fun(X11,fun(X11,bool)),X28),s(X11,X16))),s(X11,X29))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.relation.transitive_def')).
fof(f541,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK6(X1,X0)))),s(X0,sK7(X1,X0))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f388])).
fof(f542,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK7(X1,X0)))),s(X0,sK8(X1,X0))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f388])).
fof(f543,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,sK6(X1,X0)))),s(X0,sK8(X1,X0))))) | p(s(bool,'const.relation.transitive_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f388])).
fof(f537,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f199])).
fof(f199,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X7] : ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.NOT_SUC_LESS_EQ_|48|')).
fof(f535,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f195])).
fof(f195,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X7] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.NOT_LESS_|48|')).
fof(f531,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f383])).
fof(f383,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)))),
  inference(nnf_transformation,[],[f189])).
fof(f189,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(flattening,[],[f188])).
fof(f188,plain,(
  ! [X0] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f96])).
fof(f96,axiom,(
  ! [X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) <=> p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.NOT_ZERO_LT_ZERO')).
fof(f483,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f352])).
fof(f352,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))))),
  inference(nnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f94])).
fof(f94,axiom,(
  ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X7))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.LESS_EQ_|48|')).
fof(f484,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f352])).
fof(f479,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f350])).
fof(f691,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(condensation,[],[f473])).
fof(f473,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f347])).
fof(f347,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK5(X0))))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X0)))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f346])).
fof(f346,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))) | ! [X1] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))))),
  inference(rectify,[],[f292])).
fof(f292,plain,(
  ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(flattening,[],[f291])).
fof(f291,plain,(
  ! [X0] : ((~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) | ? [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(ennf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) & ! [X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) => p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) => ! [X2] : p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X2)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X9] : ((p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num','const.num.|48|_0')))) & ! [X7] : (p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X7)))) => p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))) => ! [X7] : p(s(bool,happ(s(fun('type.num.num',bool),X9),s('type.num.num',X7)))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.num.INDUCTION')).
fof(f474,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK5(X0))))))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X1)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f347])).
fof(f469,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.LESS_MONO_ADD_INV',aHL_BOOL_CASES)).
fof(f467,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.BIT2')).
fof(f696,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f466,f695])).
fof(f466,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.BIT|49|')).
fof(f694,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f464,f441])).
fof(f464,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f88])).
fof(f88,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT_RIGHT_|49|')).
fof(f693,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f463,f441])).
fof(f463,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f89])).
fof(f89,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT_LEFT_|49|')).
fof(f462,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f126])).
fof(f126,axiom,(
  ! [X21] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.num.SUC_0'),s('type.num.num',X21)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','ARITY_0_1_const.num.SUC')).
fof(f461,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))))),
  inference(rectify,[],[f114])).
fof(f114,axiom,(
  ! [X6] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_SUC_SUC|split|1')).
fof(f460,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X7] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_|48|')).
fof(f457,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT_|48|')).
fof(f454,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f109])).
fof(f109,axiom,(
  ! [X7] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.MULT|split|0')).
fof(f452,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.SUB|split|0')).
fof(f451,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.arithmetic.SUB_|48||split|1')).
fof(f442,plain,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0') = s(fun('type.num.num',fun('type.num.num',bool)),'const.relation.TC_1'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0')))))),
  inference(cnf_transformation,[],[f124])).
fof(f124,axiom,(
  s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0') = s(fun('type.num.num',fun('type.num.num',bool)),'const.relation.TC_1'(s(fun('type.num.num',fun('type.num.num',bool)),'_dst_x01x10_2'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'const.num.SUC_0')))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_ALT')).
fof(f440,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(cnf_transformation,[],[f130])).
fof(f130,axiom,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.LESS_|48|_|48|')).
fof(f438,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f116])).
fof(f116,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.LESS_MONO_ADD_INV','thm.prim_rec.PRE|split|0')).
fof(f435,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f342])).
fof(f12640,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619,f12623,f12628,f12633,f12639])).
fof(f12634,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619,f12623,f12628,f12633])).
fof(f12629,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619,f12623,f12628])).
fof(f12624,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619,f12623])).
fof(f12620,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386,f12619])).
fof(f12618,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616,f12386])).
fof(f12617,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384,f12616])).
fof(f12615,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383,f12384])).
fof(f12614,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612,f12383])).
fof(f12613,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610,f12612])).
fof(f12611,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608,f12610])).
fof(f12609,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602,f12608])).
fof(f12603,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597,f12602])).
fof(f12598,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592,f12597])).
fof(f12593,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588,f12592])).
fof(f12589,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372,f12588])).
fof(f12587,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371,f12372])).
fof(f12586,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370,f12371])).
fof(f12585,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369,f12370])).
fof(f12584,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368,f12369])).
fof(f12583,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367,f12368])).
fof(f12582,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366,f12367])).
fof(f12581,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579,f12366])).
fof(f12580,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577,f12579])).
fof(f12578,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363,f12577])).
fof(f12576,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362,f12363])).
fof(f12575,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361,f12362])).
fof(f12574,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360,f12361])).
fof(f12573,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359,f12360])).
fof(f12572,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358,f12359])).
fof(f12571,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357,f12358])).
fof(f12570,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356,f12357])).
fof(f12569,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355,f12356])).
fof(f12568,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354,f12355])).
fof(f12567,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353,f12354])).
fof(f12566,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352,f12353])).
fof(f12565,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563,f12352])).
fof(f12564,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561,f12563])).
fof(f12562,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349,f12561])).
fof(f12560,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558,f12349])).
fof(f12559,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347,f12558])).
fof(f12557,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346,f12347])).
fof(f12556,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345,f12346])).
fof(f12555,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344,f12345])).
fof(f12554,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551,f12344])).
fof(f12553,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12343,f4224])).
fof(f12343,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13(sK2,sK1)))))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f9976])).
fof(f12552,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549,f12551])).
fof(f12550,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547,f12549])).
fof(f12548,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545,f12547])).
fof(f12546,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543,f12545])).
fof(f12544,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540,f12543])).
fof(f12541,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537,f12540])).
fof(f12538,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335,f12537])).
fof(f12535,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334,f12335])).
fof(f12534,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532,f12334])).
fof(f12533,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529,f12532])).
fof(f12530,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526,f12529])).
fof(f12527,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330,f12526])).
fof(f12524,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329,f12330])).
fof(f12523,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521,f12329])).
fof(f12522,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519,f12521])).
fof(f12520,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517,f12519])).
fof(f12518,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515,f12517])).
fof(f12516,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513,f12515])).
fof(f12514,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511,f12513])).
fof(f12512,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509,f12511])).
fof(f12510,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312,f12509])).
fof(f12508,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12321,f718])).
fof(f12321,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8095])).
fof(f12507,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12320,f718])).
fof(f12320,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X0,'const.relation.transitive_1'(s(fun('type.num.num',fun('type.num.num',bool)),'const.prim_rec.<_0')))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8094])).
fof(f12506,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12319,f718])).
fof(f12319,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8093])).
fof(f12505,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12318,f718])).
fof(f12318,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8092])).
fof(f12504,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12317,f718])).
fof(f12317,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)),X1)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8091])).
fof(f12503,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12316,f718])).
fof(f12316,plain,(
  ( ! [X0,X1] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X0,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8090])).
fof(f12502,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12315,f718])).
fof(f12315,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X0,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8089])).
fof(f12501,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12314,f718])).
fof(f12314,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK3)))),X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8088])).
fof(f12500,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12313,f733])).
fof(f12313,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8085])).
fof(f12499,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311,f12312])).
fof(f12498,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310,f12311])).
fof(f12497,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306,f12310])).
fof(f12496,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12309,f718])).
fof(f12309,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),'T_0',X0)) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8040])).
fof(f12495,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12308,f718])).
fof(f12308,plain,(
  ( ! [X0] : (~sP0('const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)),X0,'T_0')) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8032])).
fof(f12494,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12493,f726])).
fof(f12493,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f12307,f733])).
fof(f12307,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f8030])).
fof(f12492,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305,f12306])).
fof(f12491,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304,f12305])).
fof(f12490,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303,f12304])).
fof(f12489,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302,f12303])).
fof(f12488,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301,f12302])).
fof(f12487,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300,f12301])).
fof(f12486,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299,f12300])).
fof(f12485,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298,f12299])).
fof(f12484,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296,f12298])).
fof(f12483,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f12297,f728])).
fof(f12297,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f12204,f7722])).
fof(f12482,plain,(
  $false | ($spl2 | $spl12)),
  inference(global_subsumption,[],[f435,f434,f436,f438,f439,f440,f441,f442,f692,f448,f449,f450,f451,f452,f454,f456,f457,f458,f460,f461,f462,f693,f694,f695,f696,f467,f469,f470,f471,f474,f691,f476,f475,f480,f479,f484,f483,f531,f534,f535,f536,f537,f543,f542,f541,f540,f552,f551,f550,f554,f553,f555,f558,f557,f556,f559,f560,f561,f562,f564,f565,f566,f698,f567,f569,f570,f571,f699,f573,f574,f575,f577,f702,f581,f580,f703,f704,f705,f585,f586,f587,f590,f589,f591,f592,f593,f598,f595,f599,f602,f601,f600,f607,f606,f605,f604,f603,f609,f611,f614,f613,f612,f707,f708,f710,f713,f714,f716,f629,f632,f635,f636,f637,f638,f639,f641,f640,f642,f644,f643,f683,f653,f652,f651,f661,f682,f670,f717,f718,f723,f725,f729,f728,f727,f726,f734,f733,f732,f744,f743,f742,f751,f764,f774,f793,f792,f786,f781,f811,f812,f898,f897,f891,f886,f931,f930,f924,f919,f970,f1030,f1031,f1046,f1232,f1231,f1224,f1217,f1216,f1215,f1314,f1312,f1305,f1298,f1297,f1296,f1333,f1396,f1394,f1387,f1380,f1379,f1378,f1551,f1590,f1594,f1671,f1672,f1734,f1738,f1769,f1770,f1833,f1988,f1989,f2128,f2242,f2350,f2351,f2296,f2300,f2302,f2303,f2304,f2305,f2306,f2307,f2321,f2322,f2323,f2324,f2354,f2383,f2392,f2393,f2469,f2491,f2490,f2538,f2539,f2540,f2541,f2543,f2544,f2545,f2546,f2641,f2642,f2663,f2682,f2688,f2689,f2713,f2779,f2805,f2812,f2813,f2814,f2809,f2837,f2838,f2974,f2990,f2991,f2993,f3035,f2999,f3012,f3018,f3069,f3171,f3173,f3174,f3107,f3120,f3126,f3213,f3214,f3234,f3228,f3283,f3235,f3236,f3238,f3239,f3240,f3241,f3242,f3243,f3244,f3245,f3246,f3247,f3248,f3250,f3251,f3252,f3253,f3254,f3295,f3297,f3302,f3299,f3324,f3325,f3328,f3329,f3334,f3335,f3336,f3341,f3342,f3344,f3352,f3359,f3391,f3497,f3512,f3429,f3435,f3565,f3454,f3466,f3582,f3584,f3588,f3592,f3634,f3598,f3611,f3617,f3668,f3716,f3717,f3741,f3755,f3822,f3853,f3945,f3907,f3913,f4020,f4022,f4023,f4026,f4047,f4100,f4049,f4056,f4057,f4060,f4061,f4066,f4067,f4068,f4073,f4074,f4098,f4104,f4155,f4152,f4142,f4131,f4130,f4175,f4224,f4250,f4251,f4279,f4255,f4260,f4261,f4262,f4267,f4268,f4280,f4289,f4287,f4285,f4284,f4283,f4282,f4281,f4341,f4339,f4329,f4319,f4318,f4317,f4407,f4449,f4413,f4426,f4432,f4547,f4546,f4545,f4544,f4543,f4542,f4541,f4540,f4538,f4528,f4527,f4513,f4511,f4509,f4508,f4507,f4644,f4641,f4631,f4620,f4619,f4614,f4692,f4710,f4716,f4735,f4787,f4788,f4837,f4836,f4835,f4834,f4833,f4832,f4831,f4830,f4828,f4818,f4817,f4803,f4801,f4799,f4797,f4792,f4791,f4863,f4866,f4900,f4868,f4901,f4902,f4903,f4904,f4874,f4905,f4906,f4907,f4908,f4909,f4910,f4911,f4912,f4913,f4914,f4885,f4886,f4915,f4916,f4917,f4918,f4920,f4921,f4922,f4923,f4924,f4925,f4926,f4899,f4956,f4954,f4944,f4934,f4932,f5001,f5022,f5038,f5039,f5052,f5060,f5110,f5124,f5126,f5127,f5085,f5145,f5159,f5157,f5183,f5202,f5226,f5227,f5373,f5285,f5309,f5315,f5326,f5327,f5341,f5347,f5358,f5359,f5481,f5519,f5516,f5505,f5494,f5492,f5487,f5486,f5485,f5484,f5544,f5569,f5550,f5570,f5571,f5572,f5573,f5556,f5574,f5575,f5576,f5577,f5578,f5579,f5580,f5581,f5582,f5583,f5584,f5585,f5617,f5647,f5628,f5648,f5649,f5650,f5651,f5634,f5656,f5657,f5658,f5661,f5662,f5665,f5666,f5722,f5721,f5720,f5719,f5718,f5717,f5716,f5715,f5712,f5700,f5699,f5683,f5679,f5675,f5673,f5667,f5805,f5804,f5803,f5802,f5801,f5800,f5799,f5798,f5796,f5784,f5783,f5767,f5763,f5759,f5757,f5855,f5875,f5878,f5885,f5886,f5895,f5896,f5915,f5947,f5945,f5934,f5923,f5921,f6040,f6041,f5996,f6042,f6018,f6050,f6051,f6052,f6056,f6057,f6058,f6059,f6060,f6061,f6062,f6063,f6019,f6025,f6034,f6035,f6090,f6289,f6291,f6166,f6297,f6296,f6298,f6299,f6300,f6301,f6302,f6170,f6172,f6173,f6174,f6175,f6176,f6177,f6179,f6180,f6181,f6182,f6183,f6184,f6185,f6186,f6187,f6306,f6307,f6308,f6191,f6192,f6323,f6324,f6326,f6329,f6330,f6333,f6334,f6338,f6342,f6378,f6379,f6384,f6389,f6387,f6421,f6536,f6423,f6537,f6538,f6425,f6539,f6540,f6428,f6541,f6430,f6542,f6543,f6460,f6551,f6552,f6557,f6558,f6561,f6562,f6569,f6579,f6577,f6571,f6610,f6608,f6602,f6662,f6663,f6686,f6687,f6717,f6720,f6811,f6812,f6732,f6735,f6822,f6831,f6832,f6870,f6896,f7031,f7033,f6900,f6904,f6908,f7045,f7049,f7054,f7057,f7059,f7060,f7065,f7070,f7130,f7131,f7136,f7138,f7141,f7143,f7147,f7150,f7151,f7154,f7157,f7160,f7161,f7162,f7163,f7166,f7167,f7171,f7175,f7178,f7179,f7180,f7181,f7101,f7182,f7183,f7184,f7185,f7186,f7187,f7109,f7188,f7189,f7190,f7191,f7192,f7193,f7194,f7195,f7196,f7197,f7198,f7199,f7200,f7201,f7202,f7203,f7204,f7205,f7269,f7270,f7274,f7276,f7279,f7281,f7284,f7286,f7287,f7289,f7291,f7293,f7294,f7295,f7296,f7298,f7299,f7302,f7305,f7307,f7308,f7309,f7310,f7236,f7312,f7313,f7314,f7315,f7316,f7318,f7244,f7319,f7322,f7323,f7324,f7326,f7328,f7330,f7332,f7333,f7334,f7335,f7336,f7337,f7347,f7345,f7374,f7489,f7501,f7503,f7397,f7405,f7593,f7594,f7599,f7709,f7598,f7754,f7750,f7737,f7724,f7722,f7717,f7714,f7713,f7712,f7711,f7710,f7789,f7791,f7855,f7799,f7814,f7898,f7910,f7912,f7950,f7989,f7986,f7973,f7960,f7958,f7952,f8095,f8094,f8093,f8092,f8091,f8090,f8089,f8088,f8085,f8069,f8068,f8048,f8040,f8032,f8030,f8258,f8723,f8724,f8725,f8726,f8727,f8728,f8729,f8734,f8597,f8602,f8603,f8604,f8605,f8606,f8607,f8766,f8641,f8644,f8804,f8806,f8662,f8665,f8824,f8825,f8827,f8828,f8834,f9057,f8921,f8923,f8924,f8925,f8926,f8927,f8928,f8963,f8966,f9089,f9090,f8984,f8987,f9099,f9100,f9101,f9102,f9105,f9189,f9192,f9195,f9197,f9200,f9201,f9203,f9206,f9207,f9209,f9210,f9212,f9214,f9216,f9217,f9218,f9219,f9221,f9222,f9225,f9228,f9230,f9231,f9232,f9154,f9233,f9235,f9236,f9237,f9238,f9239,f9240,f9242,f9244,f9165,f9245,f9248,f9249,f9250,f9252,f9254,f9256,f9258,f9259,f9260,f9261,f9262,f9263,f9327,f9425,f9321,f9426,f9427,f9428,f9429,f9430,f9431,f9432,f9434,f9435,f9437,f9441,f9443,f9306,f9305,f9302,f9446,f9447,f9448,f9298,f9293,f9292,f9291,f9290,f9289,f9288,f9287,f9286,f9285,f9453,f9283,f9281,f9455,f9456,f9277,f9276,f9273,f9272,f9271,f9270,f9328,f9339,f9352,f9353,f9370,f9381,f9394,f9395,f9706,f9587,f9619,f9630,f9643,f9644,f9661,f9672,f9685,f9686,f9932,f9976,f9982,f9983,f9986,f9998,f9997,f9995,f10055,f10064,f10067,f10071,f10073,f10081,f10084,f10088,f10024,f10035,f10144,f10146,f10148,f10195,f10201,f10202,f10205,f10258,f10273,f10318,f10321,f10323,f10331,f10340,f10361,f10371,f10425,f10423,f10408,f10393,f10391,f10459,f10500,f10503,f10511,f10622,f10621,f10620,f10619,f10618,f10617,f10616,f10615,f10613,f10594,f10593,f10570,f10560,f10550,f10548,f10543,f10714,f10851,f10852,f10865,f10866,f10867,f10868,f10869,f10870,f10871,f10878,f10889,f10904,f10967,f10915,f10993,f10994,f10937,f10995,f11134,f11200,f11131,f11129,f11127,f11107,f11216,f11104,f11102,f11100,f11089,f11231,f11086,f11084,f11082,f11071,f11236,f11068,f11066,f11064,f11138,f11140,f11252,f11253,f11254,f11144,f11145,f11255,f11147,f11153,f11154,f11155,f11157,f11161,f11163,f11164,f11166,f11257,f11258,f11259,f11170,f11171,f11260,f11173,f11179,f11180,f11181,f11183,f11187,f11189,f11262,f11263,f11196,f11264,f11199,f11272,f11283,f11297,f11298,f11319,f11448,f11480,f11451,f11481,f11461,f11462,f11490,f11568,f11781,f11782,f11783,f11784,f11785,f11786,f11788,f11789,f11791,f11574,f11792,f11794,f11795,f11578,f11801,f11803,f11804,f11606,f11806,f11808,f11612,f11616,f11617,f11618,f11619,f11620,f11621,f11824,f11850,f11851,f11867,f11868,f11870,f11871,f11873,f11874,f11876,f11879,f11921,f11922,f11964,f11967,f11968,f11969,f11970,f12011,f12014,f12167,f12168,f12032,f12035,f12185,f12187,f12188,f12190,f12191,f12193,f12060,f12061,f12196,f12148,f12204,f12396,f12206,f12397,f12208,f12398,f12399,f12400,f12401,f12402,f12214,f12215,f12403,f12404,f12405,f12406,f12407,f12408,f12409,f12410,f12411,f12412,f12413,f12414,f12415,f12416,f12417,f12418,f12419,f12420,f12421,f12422,f12423,f12424,f12425,f12426,f12427,f12428,f12242,f12429,f12431,f12432,f12433,f12434,f12435,f12436,f12437,f12438,f12439,f12440,f12441,f12442,f12443,f12444,f12445,f12446,f12447,f12448,f12449,f12450,f12451,f12452,f12453,f12454,f12455,f12456,f12457,f12458,f12459,f12460,f12461,f12462,f12463,f12464,f12465,f12466,f12467,f12468,f12469,f12470,f12471,f12472,f12473,f12474,f12475,f12476,f12477,f12478,f12479,f12480,f12481,f12296])).
fof(f12148,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) | $spl12),
  inference(cnf_transformation,[],[f12148_D])).
fof(f12148_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f12195,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X79)) ) | $spl22),
  inference(cnf_transformation,[],[f12195_D])).
fof(f12195_D,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X79)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f12061,plain,(
  ( ! [X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X79) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | $spl2),
  inference(superposition,[],[f714,f7717])).
fof(f12194,plain,(
  ( ! [X78] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl20),
  inference(cnf_transformation,[],[f12194_D])).
fof(f12194_D,plain,(
  ( ! [X78] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f12060,plain,(
  ( ! [X78] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X78)) ) | $spl2),
  inference(superposition,[],[f714,f7717])).
fof(f12173,plain,(
  ( ! [X52] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK1)))) ) | $spl18),
  inference(cnf_transformation,[],[f12173_D])).
fof(f12173_D,plain,(
  ( ! [X52] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK1)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f12035,plain,(
  ( ! [X52] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | $spl2),
  inference(superposition,[],[f613,f7717])).
fof(f12172,plain,(
  ( ! [X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X49)))) ) | $spl16),
  inference(cnf_transformation,[],[f12172_D])).
fof(f12172_D,plain,(
  ( ! [X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X49)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f12032,plain,(
  ( ! [X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X49))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | $spl2),
  inference(superposition,[],[f612,f7717])).
fof(f12149,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK1)))) ) | $spl14),
  inference(cnf_transformation,[],[f12149_D])).
fof(f12149_D,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK1)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f12014,plain,(
  ( ! [X31] : (s('type.num.num',X31) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',sK12(sK2,sK1))))) ) | $spl2),
  inference(superposition,[],[f586,f7717])).
fof(f12129,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK12(sK2,sK1)) | $spl8),
  inference(cnf_transformation,[],[f12129_D])).
fof(f12129_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK12(sK2,sK1)) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f12125,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl4),
  inference(cnf_transformation,[],[f12125_D])).
fof(f12125_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f12131,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl11),
  inference(cnf_transformation,[],[f12131_D])).
fof(f12131_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f11970,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK12(sK2,sK1)) | $spl2),
  inference(superposition,[],[f714,f7717])).
fof(f12127,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl7),
  inference(cnf_transformation,[],[f12127_D])).
fof(f12127_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f11968,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK12(sK2,sK1)) | $spl2),
  inference(superposition,[],[f613,f7717])).
fof(f11967,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl2),
  inference(superposition,[],[f612,f7717])).
fof(f7596,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) | $spl0),
  inference(cnf_transformation,[],[f7596_D])).
fof(f7596_D,plain,(
  s('type.num.num',sK1) = s('type.num.num',sK2) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f7598,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | $spl2),
  inference(cnf_transformation,[],[f7598_D])).
fof(f7598_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f7709,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(subsumption_resolution,[],[f7483,f692])).
fof(f7483,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(superposition,[],[f592,f742])).
fof(f7594,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(subsumption_resolution,[],[f7427,f692])).
fof(f7427,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK2)),
  inference(superposition,[],[f592,f742])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 362
% Passive clauses: 3765
% Generated clauses: 25790
% Final active clauses: 174
% Final passive clauses: 1486
% Input formulas: 133
% Initial clauses: 237
% 
% Duplicate literals: 5
% Trivial inequalities: 41
% Fw subsumption resolutions: 464
% Fw demodulations: 9256
% Bw demodulations: 1357
% Condensations: 17
% Global subsumptions: 82
% 
% Simple tautologies: 77
% Equational tautologies: 88
% Forward subsumptions: 11692
% Fw demodulations to eq. taut.: 89
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 3765
% Factoring: 2
% Forward superposition: 4749
% Backward superposition: 4883
% Self superposition: 61
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 16
% Split components: 33
% SAT solver clauses: 4079
% SAT solver unit clauses: 923
% SAT solver binary clauses: 1757
% 
% Sat splits: 16
% Sat splitting refutations: 198
% 
% Memory used [KB]: 18166
% Time elapsed: 0.996 s
% ------------------------------
% ------------------------------
% Success in time 2.32 s
