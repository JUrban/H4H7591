Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quotient_option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quotient_option
% SZS output start Proof for thm.quotient_option
fof(f6690,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6687,f527,f480,f64,f83,f504,f6629,f577,f468,f477,f475])).
fof(f475,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))) | $spl8),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f477,plain,(
  s(bool,'F_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | $spl11),
  inference(cnf_transformation,[],[f477_D])).
fof(f477_D,plain,(
  s(bool,'F_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f468,plain,(
  s(bool,'F_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5)))),
  inference(superposition,[],[f57,f405])).
fof(f405,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X2),X3))) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) )),
  inference(superposition,[],[f77,f78])).
fof(f78,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X13] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X13) | ? [X11] : s('type.option.option'(X6),X13) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))))),
  file('thm.quotient_option.IS_NONE_PRS','thm.option.option_nchotomy')).
fof(f77,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X11] : s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11)))))),
  file('thm.quotient_option.IS_NONE_PRS','thm.option.IS_NONE_DEF|split|0')).
fof(f57,plain,(
  s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5)))))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(sK0,fun(sK0,bool)),sK2),s(fun(sK0,sK1),sK3),s(fun(sK1,sK0),sK4)))) & s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) & ? [X5] : s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),X5))) != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),X5))) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X1),X5))) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X7),X11))) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X10),s('type.option.option'(X7),X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X7),X11))) = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X10),s('type.option.option'(X7),X11))))))),
  file('thm.quotient_option.IS_NONE_PRS','thm.quotient_option.IS_NONE_PRS')).
fof(f577,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl20),
  inference(cnf_transformation,[],[f577_D])).
fof(f577_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f6629,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | ($spl1 | $spl8)),
  inference(subsumption_resolution,[],[f6628,f86])).
fof(f86,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl1),
  inference(resolution,[],[f67,f83])).
fof(f67,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.quotient_option.IS_NONE_PRS','thm.bool.EQ_CLAUSES|split|0')).
fof(f6628,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl8),
  inference(forward_demodulation,[],[f6537,f65])).
fof(f65,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.quotient_option.IS_NONE_PRS','thm.option.IS_NONE_DEF|split|1')).
fof(f6537,plain,(
  s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl8),
  inference(superposition,[],[f1106,f475])).
fof(f1106,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X2),'const.option.OPTION_MAP_2'(s(fun(X0,X2),X3),s('type.option.option'(X0),X1))))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f699,f78])).
fof(f699,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(X4),'const.option.OPTION_MAP_2'(s(fun(X5,X4),X6),s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X7)))))))) )),
  inference(superposition,[],[f77,f80])).
fof(f80,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X14,X11] : s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X6,X7),X14),s(X6,X11))))) = s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X6,X7),X14),s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11)))))),
  file('thm.quotient_option.IS_NONE_PRS','thm.option.OPTION_MAP_DEF|split|0')).
fof(f504,plain,(
  $false | $spl11),
  inference(subsumption_resolution,[],[f503,f65])).
fof(f503,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | $spl11),
  inference(forward_demodulation,[],[f502,f65])).
fof(f502,plain,(
  s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | $spl11),
  inference(forward_demodulation,[],[f495,f79])).
fof(f79,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X14] : s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X6,X7),X14),s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.quotient_option.IS_NONE_PRS','thm.option.OPTION_MAP_DEF|split|1')).
fof(f495,plain,(
  s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),'const.option.NONE_0'))))) | $spl11),
  inference(backward_demodulation,[],[f491,f57])).
fof(f491,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl11),
  inference(trivial_inequality_removal,[],[f484])).
fof(f484,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl11),
  inference(superposition,[],[f477,f405])).
fof(f83,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f64,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quotient_option.IS_NONE_PRS',aHL_FALSITY)).
fof(f480,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | $spl15),
  inference(cnf_transformation,[],[f480_D])).
fof(f480_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f527,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f511,f83])).
fof(f511,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | $spl10),
  inference(superposition,[],[f67,f476])).
fof(f476,plain,(
  s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) | $spl10),
  inference(cnf_transformation,[],[f476_D])).
fof(f476_D,plain,(
  s(bool,'F_0') = s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),sK5))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f6687,plain,(
  $false | ($spl15 | $spl20)),
  inference(subsumption_resolution,[],[f6666,f65])).
fof(f6666,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_NONE_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl15 | $spl20)),
  inference(backward_demodulation,[],[f577,f480])).
% SZS output end Proof for thm.quotient_option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 104
% Passive clauses: 664
% Generated clauses: 6495
% Final active clauses: 90
% Final passive clauses: 450
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 418
% Trivial inequalities: 88
% Fw subsumption resolutions: 839
% Fw demodulations: 715
% Bw demodulations: 11
% 
% Simple tautologies: 175
% Equational tautologies: 21
% Forward subsumptions: 3278
% 
% Binary resolution: 114
% Forward superposition: 2416
% Backward superposition: 1671
% Self superposition: 57
% Equality factoring: 38
% Equality resolution: 14
% 
% Split clauses: 192
% Split components: 391
% SAT solver clauses: 401
% SAT solver unit clauses: 5
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 1
% 
% Sat splits: 192
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 395
% TWLsolver calls for satisfiability: 92
% 
% Memory used [KB]: 4605
% Time elapsed: 0.137 s
% ------------------------------
% ------------------------------
% Success in time 0.139 s
