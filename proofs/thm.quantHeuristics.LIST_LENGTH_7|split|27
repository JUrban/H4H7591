Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (47932)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 195
% Passive clauses: 2589
% Generated clauses: 28689
% Final active clauses: 189
% Final passive clauses: 2286
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 89
% Trivial inequalities: 7
% Fw subsumption resolutions: 92
% Fw demodulations: 4426
% Bw demodulations: 3
% 
% Simple tautologies: 23
% Equational tautologies: 17
% Forward subsumptions: 21414
% Fw demodulations to eq. taut.: 30
% 
% Binary resolution: 45
% Forward superposition: 11326
% Backward superposition: 12490
% Self superposition: 171
% Equality factoring: 34
% Equality resolution: 3
% 
% Split clauses: 44
% Split components: 88
% SAT solver clauses: 57
% SAT solver unit clauses: 4
% SAT solver binary clauses: 15
% 
% Sat splits: 44
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 57
% TWLsolver calls for satisfiability: 12
% 
% Memory used [KB]: 30063
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (47958)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 129
% Passive clauses: 801
% Generated clauses: 18034
% Final active clauses: 124
% Final passive clauses: 656
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 981
% Trivial inequalities: 142
% Fw subsumption resolutions: 1022
% Fw demodulations: 1845
% Bw demodulations: 16
% Condensations: 1849
% 
% Simple tautologies: 171
% Equational tautologies: 20
% Forward subsumptions: 9413
% Fw demodulations to eq. taut.: 3
% 
% Binary resolution: 14
% Forward superposition: 6923
% Backward superposition: 4385
% Self superposition: 211
% Equality factoring: 40
% Equality resolution: 13
% 
% Split clauses: 150
% Split components: 300
% SAT solver clauses: 1322
% SAT solver unit clauses: 70
% SAT solver binary clauses: 40
% 
% Sat splits: 150
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1322
% TWLsolver calls for satisfiability: 276
% 
% Memory used [KB]: 17782
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f5081,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f105,f156,f155,f104,f158,f103,f160,f154,f230,f233,f231,f677,f681,f679,f1072,f1074,f1067,f1061,f1075,f1138,f1717,f1725,f1723,f1747,f1749,f1748,f1918,f1889,f1936,f1937,f2625,f2628,f2626,f2841,f2844,f1073,f2842,f3875,f3921,f3919,f3876,f3925,f3923,f4120,f4127,f4121,f4133,f4131,f4122,f4129,f4135,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5079])).
fof(f5079,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f5073,f155])).
fof(f5073,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ($spl4 | $spl6)),
  inference(backward_demodulation,[],[f160,f4795])).
fof(f4795,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl4),
  inference(forward_demodulation,[],[f4703,f127])).
fof(f127,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6] : ! [X28,X29] : s(X6,X29) = s(X6,'const.bool.COND_3'(s(bool,'F_0'),s(X6,X28),s(X6,X29)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.bool.COND_CLAUSES|split|1')).
fof(f4703,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f127,f158,f132])).
fof(f132,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15,sK16])],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X10))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),X10))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(rectify,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X9)))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.quantHeuristics.LIST_LENGTH_7|split|26')).
fof(f5072,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f155,f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332,f160])).
fof(f2332,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f158,f156])).
fof(f5063,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,happ(s(fun('type.list.list'(X71),bool),X74),s('type.list.list'(X71),X72)))) | s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK11(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK12(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK13(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK14(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK15(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK16(X72,X73,X71)),s('type.list.list'(X71),sK10(X72,X73,X71)))))))))))))) = s('type.list.list'(X71),sK17('const.list.CONS_2'(s(X71,sK11(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK12(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK13(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK14(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK15(X72,X73,X71)),s('type.list.list'(X71),'const.list.CONS_2'(s(X71,sK16(X72,X73,X71)),s('type.list.list'(X71),sK10(X72,X73,X71))))))))))))),X74,'type.list.list'(X71))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X71),X72))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f134,f131])).
fof(f5062,plain,(
  ( ! [X70,X68,X66,X69,X67] : (~p(s(bool,happ(s(fun('type.list.list'(X66),bool),X69),s('type.list.list'(X66),X67)))) | p(s(bool,happ(s(fun('type.list.list'(X66),bool),X69),s('type.list.list'(X66),X70)))) | s('type.list.list'(X66),X70) != s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK11(X67,X68,X66)),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK12(X67,X68,X66)),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK13(X67,X68,X66)),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK14(X67,X68,X66)),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK15(X67,X68,X66)),s('type.list.list'(X66),'const.list.CONS_2'(s(X66,sK16(X67,X68,X66)),s('type.list.list'(X66),sK10(X67,X68,X66)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X66),X67))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f133,f131])).
fof(f5058,plain,(
  ( ! [X52,X50,X51] : (s('type.list.list'(X50),'const.list.NIL_0') = s('type.list.list'(X50),sK20('const.list.LENGTH_1'(s('type.list.list'(X50),X51)),'const.num.|48|_0','const.list.CONS_2'(s(X50,sK11(X51,X52,X50)),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK12(X51,X52,X50)),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK13(X51,X52,X50)),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK14(X51,X52,X50)),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK15(X51,X52,X50)),s('type.list.list'(X50),'const.list.CONS_2'(s(X50,sK16(X51,X52,X50)),s('type.list.list'(X50),sK10(X51,X52,X50))))))))))))),X50)) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X50),X51))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f3774,f131])).
fof(f5057,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X49] : (s('type.list.list'(X43),X46) != s('type.list.list'(X43),'const.list.APPEND_2'(s('type.list.list'(X43),X47),s('type.list.list'(X43),X44))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X48),s('type.num.num',X49))) | s('type.num.num',X49) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK11(X44,X45,X43)),s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK12(X44,X45,X43)),s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK13(X44,X45,X43)),s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK14(X44,X45,X43)),s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK15(X44,X45,X43)),s('type.list.list'(X43),'const.list.CONS_2'(s(X43,sK16(X44,X45,X43)),s('type.list.list'(X43),sK10(X44,X45,X43)))))))))))))))) | s('type.num.num',X48) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X47))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f143,f131])).
fof(f5056,plain,(
  ( ! [X39,X37,X41,X38,X36,X42,X40] : (s('type.list.list'(X36),X39) != s('type.list.list'(X36),'const.list.APPEND_2'(s('type.list.list'(X36),X37),s('type.list.list'(X36),X40))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))) | s('type.num.num',X42) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X40))) | s('type.num.num',X41) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK11(X37,X38,X36)),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK12(X37,X38,X36)),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK13(X37,X38,X36)),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK14(X37,X38,X36)),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK15(X37,X38,X36)),s('type.list.list'(X36),'const.list.CONS_2'(s(X36,sK16(X37,X38,X36)),s('type.list.list'(X36),sK10(X37,X38,X36)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f143,f131])).
fof(f5055,plain,(
  ( ! [X30,X35,X33,X31,X29,X34,X32] : (s('type.list.list'(X29),X30) != s('type.list.list'(X29),'const.list.APPEND_2'(s('type.list.list'(X29),X32),s('type.list.list'(X29),X33))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK11(X30,X31,X29)),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK12(X30,X31,X29)),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK13(X30,X31,X29)),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK14(X30,X31,X29)),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK15(X30,X31,X29)),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,sK16(X30,X31,X29)),s('type.list.list'(X29),sK10(X30,X31,X29)))))))))))))))) | s('type.num.num',X35) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X33))) | s('type.num.num',X34) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X32))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f143,f131])).
fof(f5054,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s('type.num.num',X21) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))) | s('type.list.list'(X18),X22) != s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X23),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X24),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X25),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X26),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X27),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X28),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK11(X19,X20,X18)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK12(X19,X20,X18)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK13(X19,X20,X18)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK14(X19,X20,X18)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK15(X19,X20,X18)),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,sK16(X19,X20,X18)),s('type.list.list'(X18),sK10(X19,X20,X18)))))))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X22))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f131])).
fof(f5053,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X17) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),sK10('const.list.CONS_2'(s(X14,sK11(X15,X16,X14)),s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK12(X15,X16,X14)),s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK13(X15,X16,X14)),s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK14(X15,X16,X14)),s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK15(X15,X16,X14)),s('type.list.list'(X14),'const.list.CONS_2'(s(X14,sK16(X15,X16,X14)),s('type.list.list'(X14),sK10(X15,X16,X14))))))))))))),X17,X14)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f130,f131])).
fof(f5052,plain,(
  ( ! [X12,X13,X11] : (s('type.list.list'(X11),'const.list.NIL_0') != s('type.list.list'(X11),X12) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK11(X12,X13,X11)),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK12(X12,X13,X11)),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK13(X12,X13,X11)),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK14(X12,X13,X11)),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK15(X12,X13,X11)),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,sK16(X12,X13,X11)),s('type.list.list'(X11),sK10(X12,X13,X11)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f126,f131])).
fof(f5051,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) | s('type.list.list'(X8),'const.list.NIL_0') = s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK11(X9,X10,X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK12(X9,X10,X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK13(X9,X10,X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK14(X9,X10,X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK15(X9,X10,X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK16(X9,X10,X8)),s('type.list.list'(X8),sK10(X9,X10,X8)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f125,f131])).
fof(f5050,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK11(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16(X0,X1,sK0)),s('type.list.list'(sK0),sK10(X0,X1,sK0)))))))))))))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl2),
  inference(superposition,[],[f156,f131])).
fof(f5049,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK16(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5047,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK16(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5045,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK16(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5044,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X12,X13,bool)),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK15(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5042,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X6,X7,bool)),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK15(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5040,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X0,X1,bool)),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK15(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5039,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X12,X13,bool)),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK14(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5037,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X6,X7,bool)),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK14(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5035,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X0,X1,bool)),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK14(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5034,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X12,X13,bool)),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK13(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5032,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X6,X7,bool)),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK13(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5030,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X0,X1,bool)),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK13(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5029,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X12,X13,bool)),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK12(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5027,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X6,X7,bool)),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK12(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5025,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK11(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X0,X1,bool)),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK12(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5024,plain,(
  ( ! [X12,X13] : (s('type.list.list'(bool),X12) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X12,X13,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X12,X13,bool)),s('type.list.list'(bool),sK10(X12,X13,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK11(X12,X13,bool))) )),
  inference(superposition,[],[f131,f124])).
fof(f5022,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'(bool),X6) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X8),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X6,X7,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X6,X7,bool)),s('type.list.list'(bool),sK10(X6,X7,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,sK11(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f131,f225])).
fof(f5020,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK12(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK13(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK14(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK15(X0,X1,bool)),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,sK16(X0,X1,bool)),s('type.list.list'(bool),sK10(X0,X1,bool)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(bool),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,X2) = s(bool,sK11(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f131,f225])).
fof(f5019,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK11(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)),s('type.list.list'(sK0),sK10(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))))))))))))) | $spl4),
  inference(unit_resulting_resolution,[],[f4795,f131])).
fof(f5017,plain,(
  ( ! [X37] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) ) | $spl4),
  inference(forward_demodulation,[],[f4943,f4795])).
fof(f4943,plain,(
  ( ! [X37] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X37,'type.num.num'))) ) | $spl4),
  inference(superposition,[],[f134,f4795])).
fof(f5012,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK10(X3,'const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f4915,f4795])).
fof(f4915,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK10(X3,'const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X2))))) ) | $spl4),
  inference(superposition,[],[f130,f4795])).
fof(f4901,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X1,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0))))) ) | $spl4),
  inference(superposition,[],[f130,f4795])).
fof(f4872,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK2,'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK0)))) | $spl4),
  inference(unit_resulting_resolution,[],[f4795,f130])).
fof(f4873,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK2,sK0)),s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK2,sK0)))) | $spl4),
  inference(unit_resulting_resolution,[],[f4795,f142])).
fof(f4874,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK2,sK0)))) | $spl4),
  inference(unit_resulting_resolution,[],[f4795,f141])).
fof(f4875,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),sK2,sK0)))) | $spl4),
  inference(unit_resulting_resolution,[],[f4795,f140])).
fof(f4772,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(equality_resolution,[],[f132])).
fof(f4766,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X31,X29,X27,X25,X32,X22] : (s('type.num.num',X22) != s('type.num.num',X25) | s('type.list.list'(X21),X26) != s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X27),s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X28),s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X29),s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X30),s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X31),s('type.list.list'(X21),'const.list.CONS_2'(s(X21,X32),s('type.list.list'(X21),sK21(X22,X23,X24,X21)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),X26))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X21),X24))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22)))) )),
  inference(superposition,[],[f132,f141])).
fof(f4765,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X20,X18,X16] : (s('type.num.num',X11) != s('type.num.num',X13) | s('type.list.list'(X9),X14) != s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X15),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X16),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X17),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X18),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X19),s('type.list.list'(X9),'const.list.CONS_2'(s(X9,X20),s('type.list.list'(X9),sK20(X10,X11,X12,X9)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10)))) )),
  inference(superposition,[],[f132,f140])).
fof(f4763,plain,(
  ( ! [X47,X45,X43,X41,X52,X50,X48,X46,X44,X42,X51,X49] : (s('type.num.num',X45) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X41),X44))) | s('type.list.list'(X41),X46) != s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X47),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X48),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X49),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X50),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X51),s('type.list.list'(X41),'const.list.CONS_2'(s(X41,X52),s('type.list.list'(X41),'const.bool.COND_3'(s(bool,X42),s('type.list.list'(X41),X43),s('type.list.list'(X41),X44))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X41),X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f132,f268])).
fof(f4761,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X29,X27,X25,X22,X20,X18] : (s('type.num.num',X22) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X21))) | s('type.list.list'(X18),X23) != s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X24),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X25),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X26),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X27),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X28),s('type.list.list'(X18),'const.list.CONS_2'(s(X18,X29),s('type.list.list'(X18),'const.list.APPEND_2'(s('type.list.list'(X18),sK20(X19,X20,X21,X18)),s('type.list.list'(X18),sK21(X19,X20,X21,X18)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X23))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)))) )),
  inference(superposition,[],[f132,f142])).
fof(f4862,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X16] : (s('type.list.list'(X8),X11) != s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X12),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X13),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X14),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X15),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X16),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X17),s('type.list.list'(X8),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4861,f3774])).
fof(f4861,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.list.list'(X8),X11) != s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X12),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X13),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X14),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X15),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X16),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X17),s('type.list.list'(X8),sK20('const.list.LENGTH_1'(s('type.list.list'(X8),X9)),'const.num.|48|_0',X9,X8)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4760,f707])).
fof(f4760,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s('type.num.num',X10) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),'const.list.NIL_0'))) | s('type.list.list'(X8),X11) != s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X12),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X13),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X14),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X15),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X16),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X17),s('type.list.list'(X8),sK20('const.list.LENGTH_1'(s('type.list.list'(X8),X9)),'const.num.|48|_0',X9,X8)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f3774])).
fof(f4758,plain,(
  ( ! [X441,X436,X438,X432,X434,X440,X442,X431,X437,X439,X433,X435] : (s('type.num.num',X433) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X434),X435))) | s('type.list.list'(X434),X436) != s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X437),s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X438),s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X439),s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X440),s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X441),s('type.list.list'(X434),'const.list.CONS_2'(s(X434,X442),s('type.list.list'(X434),X435))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X434),X436))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,X431),s('type.num.num',X432),s('type.num.num',X433))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s(bool,'T_0') = s(bool,X431)) )),
  inference(superposition,[],[f132,f268])).
fof(f4849,plain,(
  ( ! [X325,X321,X323,X318,X324,X326,X320,X322,X319] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X320))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X319))) | s('type.list.list'(X318),X320) != s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X321),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X322),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X323),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X324),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X325),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X326),s('type.list.list'(X318),X319)))))))))))))) )),
  inference(forward_demodulation,[],[f4848,f115])).
fof(f4848,plain,(
  ( ! [X325,X321,X323,X318,X324,X326,X320,X322,X319] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X320))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X319))) | s('type.list.list'(X318),X320) != s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X321),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X322),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X323),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X324),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X325),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X326),s('type.list.list'(X318),X319)))))))))))))) )),
  inference(forward_demodulation,[],[f4847,f347])).
fof(f4847,plain,(
  ( ! [X325,X321,X323,X318,X324,X326,X320,X322,X319] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X320))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X319))) | s('type.list.list'(X318),X320) != s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X321),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X322),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X323),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X324),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X325),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X326),s('type.list.list'(X318),X319)))))))))))))) )),
  inference(forward_demodulation,[],[f4747,f146])).
fof(f4747,plain,(
  ( ! [X325,X321,X323,X318,X324,X326,X320,X322,X319] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X319))) | s('type.list.list'(X318),X320) != s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X321),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X322),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X323),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X324),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X325),s('type.list.list'(X318),'const.list.CONS_2'(s(X318,X326),s('type.list.list'(X318),X319))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X318),X320))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f347])).
fof(f4734,plain,(
  ( ! [X191,X189,X198,X196,X194,X192,X200,X190,X199,X197,X195,X193,X201] : (s('type.num.num',X190) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),X194))) | s('type.list.list'(X193),X195) != s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X196),s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X197),s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X198),s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X199),s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X200),s('type.list.list'(X193),'const.list.CONS_2'(s(X193,X201),s('type.list.list'(X193),X194))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X189),sK21(X190,X191,X192,X189)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X189),X192))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',X190)))) )),
  inference(superposition,[],[f132,f141])).
fof(f4733,plain,(
  ( ! [X177,X187,X185,X182,X180,X178,X176,X188,X186,X184,X183,X181,X179] : (s('type.num.num',X178) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X180),X181))) | s('type.list.list'(X180),X182) != s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X183),s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X184),s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X185),s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X186),s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X187),s('type.list.list'(X180),'const.list.CONS_2'(s(X180,X188),s('type.list.list'(X180),X181))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X180),X182))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X176),sK20(X177,X178,X179,X176)))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X176),X179))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num',X177)))) )),
  inference(superposition,[],[f132,f140])).
fof(f4727,plain,(
  ( ! [X123,X121,X118,X116,X114,X124,X122,X120,X119,X117,X115] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X116),X117))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114))) | s('type.list.list'(X116),X118) != s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X119),s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X120),s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X121),s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X122),s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X123),s('type.list.list'(X116),'const.list.CONS_2'(s(X116,X124),s('type.list.list'(X116),X117))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X116),X118))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f146])).
fof(f4818,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X97))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X96))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X95),X97) != s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X98),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X99),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X100),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X101),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X102),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X103),s('type.list.list'(X95),X96)))))))))))))) )),
  inference(forward_demodulation,[],[f4817,f3161])).
fof(f4817,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X97))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X96))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X95),X97) != s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X98),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X99),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X100),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X101),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X102),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X103),s('type.list.list'(X95),X96)))))))))))))) )),
  inference(forward_demodulation,[],[f4725,f146])).
fof(f4725,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X96))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X95),X97) != s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X98),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X99),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X100),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X101),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X102),s('type.list.list'(X95),'const.list.CONS_2'(s(X95,X103),s('type.list.list'(X95),X96))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X97))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f2244])).
fof(f4812,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X69))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X67),X69) != s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X70),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X71),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X72),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X73),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X74),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X75),s('type.list.list'(X67),X68)))))))))))))) )),
  inference(forward_demodulation,[],[f4811,f3161])).
fof(f4811,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X69))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X67),X69) != s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X70),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X71),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X72),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X73),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X74),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X75),s('type.list.list'(X67),X68)))))))))))))) )),
  inference(forward_demodulation,[],[f4722,f146])).
fof(f4722,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X67),X69) != s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X70),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X71),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X72),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X73),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X74),s('type.list.list'(X67),'const.list.CONS_2'(s(X67,X75),s('type.list.list'(X67),X68))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X69))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f387])).
fof(f4810,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X58,X65,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X60))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) | s('type.list.list'(X58),X60) != s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X61),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X62),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X63),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X64),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X65),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X66),s('type.list.list'(X58),X59)))))))))))))) )),
  inference(forward_demodulation,[],[f4721,f3161])).
fof(f4721,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X58,X65,X63] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X59))) | s('type.list.list'(X58),X60) != s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X61),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X62),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X63),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X64),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X65),s('type.list.list'(X58),'const.list.CONS_2'(s(X58,X66),s('type.list.list'(X58),X59))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),X60))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f2065])).
fof(f4807,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X36,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X31))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X29),X31) != s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X32),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X33),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X34),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X35),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X36),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X37),s('type.list.list'(X29),X30)))))))))))))) )),
  inference(forward_demodulation,[],[f4806,f3161])).
fof(f4806,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X36,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X29),X31) != s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X32),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X33),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X34),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X35),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X36),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X37),s('type.list.list'(X29),X30)))))))))))))) )),
  inference(forward_demodulation,[],[f4718,f146])).
fof(f4718,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X36,X34,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X30))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X29),X31) != s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X32),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X33),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X34),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X35),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X36),s('type.list.list'(X29),'const.list.CONS_2'(s(X29,X37),s('type.list.list'(X29),X30))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X29),X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f2245])).
fof(f4803,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X11,X18,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X13))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) | s('type.list.list'(X11),X13) != s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X14),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X15),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X16),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X17),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X18),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X19),s('type.list.list'(X11),X12)))))))))))))) )),
  inference(forward_demodulation,[],[f4716,f3161])).
fof(f4716,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X11,X18,X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) | s('type.list.list'(X11),X13) != s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X14),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X15),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X16),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X17),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X18),s('type.list.list'(X11),'const.list.CONS_2'(s(X11,X19),s('type.list.list'(X11),X12))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f108])).
fof(f4802,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X1)))))))))))))) )),
  inference(forward_demodulation,[],[f4801,f146])).
fof(f4801,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X1)))))))))))))) )),
  inference(forward_demodulation,[],[f4800,f3210])).
fof(f4800,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X1)))))))))))))) )),
  inference(forward_demodulation,[],[f4799,f3161])).
fof(f4799,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X1)))))))))))))) )),
  inference(forward_demodulation,[],[f4715,f146])).
fof(f4715,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X1))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f132,f2142])).
fof(f4792,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))) )),
  inference(forward_demodulation,[],[f4791,f110])).
fof(f4791,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))) )),
  inference(forward_demodulation,[],[f4705,f127])).
fof(f4705,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.NIL_0')))))))))))))))))) )),
  inference(unit_resulting_resolution,[],[f707,f127,f132])).
fof(f4774,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X1,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X7),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X8),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X9),s('type.list.list'(X1),X2)))))))))))))))) )),
  inference(forward_demodulation,[],[f4773,f127])).
fof(f4773,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X1,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X7),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X8),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X9),s('type.list.list'(X1),X2)))))))))))))))) )),
  inference(forward_demodulation,[],[f4714,f127])).
fof(f4714,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X1),X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X6),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X7),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X8),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X9),s('type.list.list'(X1),X2)))))))))))))))))) )),
  inference(unit_resulting_resolution,[],[f127,f127,f132])).
fof(f4250,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))))) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(equality_resolution,[],[f143])).
fof(f4249,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X3) != s('type.list.list'(X0),X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X1,X2,X3,X0)))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X1,X2,X3,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))) )),
  inference(superposition,[],[f143,f142])).
fof(f4248,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (s('type.list.list'(X25),X29) != s('type.list.list'(X25),'const.list.APPEND_2'(s('type.list.list'(X25),X30),s('type.list.list'(X25),X28))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X29))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))) | s('type.num.num',X32) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.bool.COND_3'(s(bool,X26),s('type.list.list'(X25),X27),s('type.list.list'(X25),X28))))) | s('type.num.num',X31) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X30))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f143,f268])).
fof(f4246,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s('type.list.list'(X10),X14) != s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),X15),s('type.list.list'(X10),X13))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s('type.num.num',X17) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),sK20(X11,X12,X13,X10)),s('type.list.list'(X10),sK21(X11,X12,X13,X10)))))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X15))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) )),
  inference(superposition,[],[f143,f142])).
fof(f4243,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (s('type.list.list'(X25),X29) != s('type.list.list'(X25),'const.list.APPEND_2'(s('type.list.list'(X25),X28),s('type.list.list'(X25),X30))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X29))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))) | s('type.num.num',X32) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X30))) | s('type.num.num',X31) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.bool.COND_3'(s(bool,X26),s('type.list.list'(X25),X27),s('type.list.list'(X25),X28))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f143,f268])).
fof(f4241,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s('type.list.list'(X10),X14) != s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),X13),s('type.list.list'(X10),X15))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s('type.num.num',X17) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X15))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),sK20(X11,X12,X13,X10)),s('type.list.list'(X10),sK21(X11,X12,X13,X10)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) )),
  inference(superposition,[],[f143,f142])).
fof(f4238,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (s('type.list.list'(X25),X28) != s('type.list.list'(X25),'const.list.APPEND_2'(s('type.list.list'(X25),X29),s('type.list.list'(X25),X30))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),'const.bool.COND_3'(s(bool,X26),s('type.list.list'(X25),X27),s('type.list.list'(X25),X28))))) | s('type.num.num',X32) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X30))) | s('type.num.num',X31) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X29))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f143,f268])).
fof(f4236,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s('type.list.list'(X10),X13) != s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),X14),s('type.list.list'(X10),X15))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),sK20(X11,X12,X13,X10)),s('type.list.list'(X10),sK21(X11,X12,X13,X10)))))) | s('type.num.num',X17) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X15))) | s('type.num.num',X16) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X14))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) )),
  inference(superposition,[],[f143,f142])).
fof(f4434,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f4433,f110])).
fof(f4433,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f4163,f127])).
fof(f4163,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.NIL_0')))))))) )),
  inference(unit_resulting_resolution,[],[f707,f707,f127,f143])).
fof(f4416,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f4415,f115])).
fof(f4415,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),'const.list.NIL_0')))))) )),
  inference(forward_demodulation,[],[f4414,f127])).
fof(f4414,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),'const.list.NIL_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f4170,f127])).
fof(f4170,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X1),X3),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X2),s('type.list.list'(X1),'const.list.NIL_0')))))))) )),
  inference(unit_resulting_resolution,[],[f127,f707,f127,f143])).
fof(f4272,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'(X1),X2)))))) )),
  inference(forward_demodulation,[],[f4271,f110])).
fof(f4271,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'(X1),X2)))))) )),
  inference(forward_demodulation,[],[f4270,f127])).
fof(f4270,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'(X1),X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2)))))))) )),
  inference(forward_demodulation,[],[f4226,f127])).
fof(f4226,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X1),X3),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s('type.list.list'(X1),X2)))))))) )),
  inference(unit_resulting_resolution,[],[f707,f127,f127,f143])).
fof(f4253,plain,(
  ( ! [X2,X0,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) )),
  inference(forward_demodulation,[],[f4252,f127])).
fof(f4252,plain,(
  ( ! [X4,X2,X0,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))) )),
  inference(forward_demodulation,[],[f4251,f127])).
fof(f4251,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3)))))))) )),
  inference(forward_demodulation,[],[f4233,f127])).
fof(f4233,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))))))) )),
  inference(unit_resulting_resolution,[],[f127,f127,f127,f143])).
fof(f4149,plain,(
  ( ! [X52,X50,X48,X51,X49] : (~p(s(bool,happ(s(fun('type.list.list'(X48),bool),X52),s('type.list.list'(X48),X51)))) | s('type.list.list'(X48),'const.list.APPEND_2'(s('type.list.list'(X48),sK20(X49,X50,X51,X48)),s('type.list.list'(X48),sK21(X49,X50,X51,X48)))) = s('type.list.list'(X48),sK17('const.list.APPEND_2'(s('type.list.list'(X48),sK20(X49,X50,X51,X48)),s('type.list.list'(X48),sK21(X49,X50,X51,X48))),X52,'type.list.list'(X48))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X51))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X49)))) )),
  inference(superposition,[],[f134,f142])).
fof(f4148,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,happ(s(fun('type.list.list'(X42),bool),X46),s('type.list.list'(X42),X45)))) | p(s(bool,happ(s(fun('type.list.list'(X42),bool),X46),s('type.list.list'(X42),X47)))) | s('type.list.list'(X42),X47) != s('type.list.list'(X42),'const.list.APPEND_2'(s('type.list.list'(X42),sK20(X43,X44,X45,X42)),s('type.list.list'(X42),sK21(X43,X44,X45,X42)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X42),X45))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43)))) )),
  inference(superposition,[],[f133,f142])).
fof(f4145,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X26),X29))) | s('type.list.list'(X26),'const.list.NIL_0') = s('type.list.list'(X26),'const.list.APPEND_2'(s('type.list.list'(X26),sK20(X27,X28,X29,X26)),s('type.list.list'(X26),sK21(X27,X28,X29,X26)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X26),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)))) )),
  inference(superposition,[],[f125,f142])).
fof(f4144,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.list.list'(X22),'const.list.NIL_0') != s('type.list.list'(X22),X25) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),'const.list.APPEND_2'(s('type.list.list'(X22),sK20(X23,X24,X25,X22)),s('type.list.list'(X22),sK21(X23,X24,X25,X22)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X22),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23)))) )),
  inference(superposition,[],[f126,f142])).
fof(f4143,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.list.list'(X18),'const.list.NIL_0') = s('type.list.list'(X18),sK20('const.list.LENGTH_1'(s('type.list.list'(X18),X21)),'const.num.|48|_0','const.list.APPEND_2'(s('type.list.list'(X18),sK20(X19,X20,X21,X18)),s('type.list.list'(X18),sK21(X19,X20,X21,X18))),X18)) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)))) )),
  inference(superposition,[],[f3774,f142])).
fof(f4142,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X17) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),sK10('const.list.APPEND_2'(s('type.list.list'(X13),sK20(X14,X15,X16,X13)),s('type.list.list'(X13),sK21(X14,X15,X16,X13))),X17,X13)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X13),X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X14)))) )),
  inference(superposition,[],[f130,f142])).
fof(f4140,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK20(X0,X1,X2,sK0)),s('type.list.list'(sK0),sK21(X0,X1,X2,sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl2),
  inference(superposition,[],[f156,f142])).
fof(f4152,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),sK21('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))))) )),
  inference(forward_demodulation,[],[f4137,f3774])).
fof(f4137,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0)),s('type.list.list'(X0),sK21('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f110,f142])).
fof(f4138,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0)),s('type.list.list'(X0),sK21('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f115,f142])).
fof(f4017,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),X10))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),sK10(X10,'const.num.|48|_0',X9))))) )),
  inference(superposition,[],[f130,f110])).
fof(f4016,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK10(X8,'const.arithmetic.NUMERAL_1'(s('type.num.num',X6)),X7))))) )),
  inference(superposition,[],[f130,f3161])).
fof(f4014,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK10(X2,X0,X1))))) )),
  inference(superposition,[],[f130,f146])).
fof(f4013,plain,(
  ( ! [X127,X125,X128,X126,X124] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X127),X128))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.bool.COND_3'(s(bool,X124),s('type.num.num',X125),s('type.num.num',X126))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X127),sK10(X128,'const.bool.COND_3'(s(bool,X124),s('type.num.num',X125),s('type.num.num',X126)),X127)))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f130,f268])).
fof(f4062,plain,(
  ( ! [X123,X121,X122,X120] : (s('type.num.num',X121) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X122),sK10(X123,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X120),s('type.num.num',X121)),X122)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X122),X123))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4012,f127])).
fof(f4012,plain,(
  ( ! [X123,X121,X122,X120] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X122),X123))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X120),s('type.num.num',X121))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X122),sK10(X123,'const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X120),s('type.num.num',X121)),X122))))) )),
  inference(superposition,[],[f130,f127])).
fof(f4061,plain,(
  ( ! [X118,X119,X117] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X117))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),sK10(X119,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X117)))),X118)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),X119))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X117))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4011,f119])).
fof(f4011,plain,(
  ( ! [X118,X119,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),X119))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X117))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X117))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),sK10(X119,'const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X117)))),X118))))) )),
  inference(superposition,[],[f130,f119])).
fof(f4060,plain,(
  ( ! [X116,X115] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X115),sK10(X116,'const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X115)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X115),X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4010,f431])).
fof(f4010,plain,(
  ( ! [X116,X115] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X115),X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X115),sK10(X116,'const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X115))))) )),
  inference(superposition,[],[f130,f431])).
fof(f4059,plain,(
  ( ! [X114,X112,X113] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X112))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),sK10(X114,'const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X112)))),X113)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X112))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4009,f117])).
fof(f4009,plain,(
  ( ! [X114,X112,X113] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X112))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X112))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X113),sK10(X114,'const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X112)))),X113))))) )),
  inference(superposition,[],[f130,f117])).
fof(f4058,plain,(
  ( ! [X111,X109,X110] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X109))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),sK10(X111,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X109)))),X110)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),X111))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X109))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4008,f120])).
fof(f4008,plain,(
  ( ! [X111,X109,X110] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),X111))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X109))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X109))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X110),sK10(X111,'const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X109)))),X110))))) )),
  inference(superposition,[],[f130,f120])).
fof(f4057,plain,(
  ( ! [X107,X108,X106] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X106))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),sK10(X108,'const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X106)))),X107)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),X108))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X106))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4007,f122])).
fof(f4007,plain,(
  ( ! [X107,X108,X106] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),X108))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X106))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X106))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),sK10(X108,'const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X106)))),X107))))) )),
  inference(superposition,[],[f130,f122])).
fof(f4056,plain,(
  ( ! [X105,X104] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK10(X105,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X104)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4006,f107])).
fof(f4006,plain,(
  ( ! [X105,X104] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),X105))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X104),sK10(X105,'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X104))))) )),
  inference(superposition,[],[f130,f107])).
fof(f4055,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),sK10(X103,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101)))),X102)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),X103))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4005,f148])).
fof(f4005,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),X103))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),sK10(X103,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X100))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X101)))),X102))))) )),
  inference(superposition,[],[f130,f148])).
fof(f4054,plain,(
  ( ! [X99,X97,X98] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X98),sK10(X99,'const.arithmetic.*_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')),X98)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X98),X99))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4004,f112])).
fof(f4004,plain,(
  ( ! [X99,X97,X98] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X98),X99))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X98),sK10(X99,'const.arithmetic.*_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')),X98))))) )),
  inference(superposition,[],[f130,f112])).
fof(f4053,plain,(
  ( ! [X94,X95,X96] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),sK10(X96,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94)),X95)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X96))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4003,f111])).
fof(f4003,plain,(
  ( ! [X94,X95,X96] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),X96))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),sK10(X96,'const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94)),X95))))) )),
  inference(superposition,[],[f130,f111])).
fof(f4052,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X90),s('type.num.num',X91))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X92),sK10(X93,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X90))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X91)))),X92)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X92),X93))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X90),s('type.num.num',X91))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f4002,f150])).
fof(f4002,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X92),X93))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X90),s('type.num.num',X91))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X90))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X91))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X92),sK10(X93,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X90))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X91)))),X92))))) )),
  inference(superposition,[],[f130,f150])).
fof(f4051,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),sK10(X89,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X88)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X89))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f4050,f347])).
fof(f4050,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X89))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),sK10(X89,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X88))))) )),
  inference(forward_demodulation,[],[f4001,f110])).
fof(f4001,plain,(
  ( ! [X88,X89] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X89))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),sK10(X89,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X88))))) )),
  inference(superposition,[],[f130,f347])).
fof(f4049,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),sK10(X87,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X85)))))),X86)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),X87))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f4048,f121])).
fof(f4048,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),X87))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X85))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),sK10(X87,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X85)))))),X86))))) )),
  inference(forward_demodulation,[],[f4000,f110])).
fof(f4000,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),X87))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X85))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X86),sK10(X87,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X85)))))),X86))))) )),
  inference(superposition,[],[f130,f121])).
fof(f4047,plain,(
  ( ! [X83,X84,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),sK10(X84,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X82)))))),X83)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X84))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f4046,f118])).
fof(f4046,plain,(
  ( ! [X83,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X84))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X82))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),sK10(X84,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X82)))))),X83))))) )),
  inference(forward_demodulation,[],[f3999,f110])).
fof(f3999,plain,(
  ( ! [X83,X84,X82] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X84))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X82))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),sK10(X84,'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X82)))))),X83))))) )),
  inference(superposition,[],[f130,f118])).
fof(f4045,plain,(
  ( ! [X80,X81,X79] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X80),sK10(X81,'const.arithmetic.EXP_2'(s('type.num.num',X79),s('type.num.num','const.num.|48|_0')),X80)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X80),X81))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3998,f161])).
fof(f3998,plain,(
  ( ! [X80,X81,X79] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X80),X81))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X79),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X80),sK10(X81,'const.arithmetic.EXP_2'(s('type.num.num',X79),s('type.num.num','const.num.|48|_0')),X80))))) )),
  inference(superposition,[],[f130,f161])).
fof(f4044,plain,(
  ( ! [X78,X76,X77,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK10(X78,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76)))),X77)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),X78))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3997,f149])).
fof(f3997,plain,(
  ( ! [X78,X76,X77,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),X78))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X75),s('type.num.num',X76))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X77),sK10(X78,'const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X76)))),X77))))) )),
  inference(superposition,[],[f130,f149])).
fof(f4043,plain,(
  ( ! [X74,X72,X73] : (s('type.num.num',X72) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),sK10(X74,'const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0')),X73)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3996,f116])).
fof(f3996,plain,(
  ( ! [X74,X72,X73] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),X74))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X73),sK10(X74,'const.arithmetic.-_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0')),X73))))) )),
  inference(superposition,[],[f130,f116])).
fof(f4042,plain,(
  ( ! [X70,X71,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X70),sK10(X71,'const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X69)),X70)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X70),X71))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3995,f114])).
fof(f3995,plain,(
  ( ! [X70,X71,X69] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X70),X71))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X69))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X70),sK10(X71,'const.arithmetic.-_2'(s('type.num.num',X69),s('type.num.num',X69)),X70))))) )),
  inference(superposition,[],[f130,f114])).
fof(f4041,plain,(
  ( ! [X68,X66,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK10(X68,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)),X67)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3994,f113])).
fof(f3994,plain,(
  ( ! [X68,X66,X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),X68))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X67),sK10(X68,'const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)),X67))))) )),
  inference(superposition,[],[f130,f113])).
fof(f3991,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),X61))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),sK21(X57,X58,X59,X56)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),sK10(X61,'const.list.LENGTH_1'(s('type.list.list'(X56),sK21(X57,X58,X59,X56))),X60)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X57)))) )),
  inference(superposition,[],[f130,f141])).
fof(f3990,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),X55))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X50),sK20(X51,X52,X53,X50)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),sK10(X55,'const.list.LENGTH_1'(s('type.list.list'(X50),sK20(X51,X52,X53,X50))),X54)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X50),X53))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',X51)))) )),
  inference(superposition,[],[f130,f140])).
fof(f4036,plain,(
  ( ! [X47,X48,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),sK10(X49,'const.list.LENGTH_1'(s('type.list.list'(X47),'const.list.NIL_0')),X48)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X49))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3989,f707])).
fof(f3989,plain,(
  ( ! [X47,X48,X49] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),X49))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X47),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X48),sK10(X49,'const.list.LENGTH_1'(s('type.list.list'(X47),'const.list.NIL_0')),X48))))) )),
  inference(superposition,[],[f130,f707])).
fof(f4034,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num',X42) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),sK10(X44,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)),X43)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3987,f110])).
fof(f3987,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),X44))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X43),sK10(X44,'const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)),X43))))) )),
  inference(superposition,[],[f130,f110])).
fof(f4033,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),sK10(X41,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),X41))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3986,f3161])).
fof(f3986,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),X41))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X40),sK10(X41,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40))))) )),
  inference(superposition,[],[f130,f3161])).
fof(f3984,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X30))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),sK10(X33,'const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31)),X32))))) )),
  inference(superposition,[],[f130,f146])).
fof(f4032,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num',X27) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK10(X29,'const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3983,f115])).
fof(f3983,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X28),sK10(X29,'const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')),X28))))) )),
  inference(superposition,[],[f130,f115])).
fof(f4031,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK10(X26,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X25)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X26))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3982,f2244])).
fof(f3982,plain,(
  ( ! [X26,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),X26))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X25),sK10(X26,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X25))))) )),
  inference(superposition,[],[f130,f2244])).
fof(f4030,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X22))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),sK10(X24,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X22)))))),X23)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),X24))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X22))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3981,f3311])).
fof(f3981,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),X24))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X22))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X22))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X23),sK10(X24,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X22)))))),X23))))) )),
  inference(superposition,[],[f130,f3311])).
fof(f4029,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK10(X21,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),X20)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3980,f2108])).
fof(f3980,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),X21))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X20),sK10(X21,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),X20))))) )),
  inference(superposition,[],[f130,f2108])).
fof(f4028,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),sK10(X19,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3979,f387])).
fof(f3979,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),X19))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X18),sK10(X19,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X18))))) )),
  inference(superposition,[],[f130,f387])).
fof(f4027,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),sK10(X17,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),X16)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X17))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3978,f2065])).
fof(f3978,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),X17))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X16),sK10(X17,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),X16))))) )),
  inference(superposition,[],[f130,f2065])).
fof(f4026,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),sK10(X15,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X13)))),X14)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3977,f3160])).
fof(f3977,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X13))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),sK10(X15,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X13)))),X14))))) )),
  inference(superposition,[],[f130,f3160])).
fof(f4025,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),sK10(X12,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10)))))),X11)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3976,f3312])).
fof(f3976,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),sK10(X12,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10)))))),X11))))) )),
  inference(superposition,[],[f130,f3312])).
fof(f4024,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK10(X9,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X8)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3975,f2245])).
fof(f3975,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK10(X9,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X8))))) )),
  inference(superposition,[],[f130,f2245])).
fof(f4023,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK10(X7,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X6)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3974,f2064])).
fof(f3974,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK10(X7,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X6))))) )),
  inference(superposition,[],[f130,f2064])).
fof(f4022,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK10(X5,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3973,f108])).
fof(f3973,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK10(X5,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X4))))) )),
  inference(superposition,[],[f130,f108])).
fof(f4021,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK10(X3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3972,f2057])).
fof(f3972,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK10(X3,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X2))))) )),
  inference(superposition,[],[f130,f2057])).
fof(f4020,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3971,f2142])).
fof(f3971,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X0))))) )),
  inference(superposition,[],[f130,f2142])).
fof(f3968,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.num.num',X8) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X11) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),sK10(sK21(X8,X9,X10,X7),X11,X7)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X10))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))) )),
  inference(superposition,[],[f130,f141])).
fof(f3967,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s('type.num.num',X4) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X6) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK10(sK20(X3,X4,X5,X2),X6,X2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X5))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))) )),
  inference(superposition,[],[f130,f140])).
fof(f3966,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10('const.list.NIL_0',X1,X0))))) )),
  inference(superposition,[],[f130,f707])).
fof(f3965,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK10('const.bool.COND_3'(s(bool,X9),s('type.list.list'(X8),X10),s('type.list.list'(X8),X11)),X12,X8)))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f130,f268])).
fof(f3964,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X4),sK10('const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X4),X5),s('type.list.list'(X4),X6)),X7,X4))))) )),
  inference(superposition,[],[f130,f127])).
fof(f4019,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK10(sK20('const.list.LENGTH_1'(s('type.list.list'(X1),X2)),'const.num.|48|_0',X2,X1),X3,X1))))) )),
  inference(forward_demodulation,[],[f3963,f707])).
fof(f3963,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),sK10(sK20('const.list.LENGTH_1'(s('type.list.list'(X1),X2)),'const.num.|48|_0',X2,X1),X3,X1))))) )),
  inference(superposition,[],[f130,f3774])).
fof(f3962,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3)))))))))))),X0,sK0))))) ) | $spl4),
  inference(superposition,[],[f130,f158])).
fof(f3960,plain,(
  ( ! [X26,X27,X25] : (s('type.list.list'(X25),'const.list.NIL_0') = s('type.list.list'(X25),sK17(sK20('const.list.LENGTH_1'(s('type.list.list'(X25),X26)),'const.num.|48|_0',X26,X25),X27,'type.list.list'(X25))) | ~p(s(bool,happ(s(fun('type.list.list'(X25),bool),X27),s('type.list.list'(X25),'const.list.NIL_0'))))) )),
  inference(forward_demodulation,[],[f3950,f3774])).
fof(f3950,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun('type.list.list'(X25),bool),X27),s('type.list.list'(X25),'const.list.NIL_0')))) | s('type.list.list'(X25),sK20('const.list.LENGTH_1'(s('type.list.list'(X25),X26)),'const.num.|48|_0',X26,X25)) = s('type.list.list'(X25),sK17(sK20('const.list.LENGTH_1'(s('type.list.list'(X25),X26)),'const.num.|48|_0',X26,X25),X27,'type.list.list'(X25)))) )),
  inference(superposition,[],[f134,f3774])).
fof(f3942,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.list.list'(X5),'const.list.NIL_0') = s('type.list.list'(X5),sK20('const.list.LENGTH_1'(s('type.list.list'(X5),X8)),'const.num.|48|_0','const.bool.COND_3'(s(bool,X6),s('type.list.list'(X5),X7),s('type.list.list'(X5),X8)),X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3774,f268])).
fof(f3941,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'(X2),'const.list.NIL_0') = s('type.list.list'(X2),sK20('const.list.LENGTH_1'(s('type.list.list'(X2),X4)),'const.num.|48|_0','const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X2),X3),s('type.list.list'(X2),X4)),X2))) )),
  inference(superposition,[],[f3774,f127])).
fof(f3940,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK20('const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')),'const.num.|48|_0',sK20('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0),X0))) )),
  inference(superposition,[],[f3774,f3774])).
fof(f3939,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK20('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3)))))))))))),sK0)) | $spl4),
  inference(superposition,[],[f3774,f158])).
fof(f3937,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK22(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK22(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f153,f124])).
fof(f3935,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK22(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK22(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f153,f225])).
fof(f3933,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK22(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK22(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f153,f225])).
fof(f3932,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK22(X16,X17,X18,bool))) )),
  inference(superposition,[],[f153,f124])).
fof(f3930,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK22(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f153,f225])).
fof(f3928,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK22(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f153,f225])).
fof(f3872,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,happ(s(fun('type.num.num',bool),X197),s('type.num.num',X194)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),sK21(X194,X195,X196,X193)))) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(X193),sK21(X194,X195,X196,X193))),X197,'type.num.num')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),X196))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num',X194)))) )),
  inference(superposition,[],[f134,f141])).
fof(f3871,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (~p(s(bool,happ(s(fun('type.num.num',bool),X191),s('type.num.num',X188)))) | p(s(bool,happ(s(fun('type.num.num',bool),X191),s('type.num.num',X192)))) | s('type.num.num',X192) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X187),sK21(X188,X189,X190,X187)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X187),X190))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num',X188)))) )),
  inference(superposition,[],[f133,f141])).
fof(f3832,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X10) | s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),sK21(X10,X11,X12,X9)) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10)))) )),
  inference(superposition,[],[f125,f141])).
fof(f3831,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK21(X0,X1,X2,sK0)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl2),
  inference(superposition,[],[f156,f141])).
fof(f3829,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f110,f141])).
fof(f3830,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f115,f141])).
fof(f3777,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),sK20('const.list.LENGTH_1'(s('type.list.list'(X3),X6)),'const.num.|48|_0','const.bool.COND_3'(s(bool,X4),s('type.list.list'(X3),X5),s('type.list.list'(X3),X6)),X3)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f3680,f268])).
fof(f3776,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20('const.list.LENGTH_1'(s('type.list.list'(X0),X2)),'const.num.|48|_0','const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)),X0))))) )),
  inference(superposition,[],[f3680,f127])).
fof(f3775,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)),'const.num.|48|_0','const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3)))))))))))),sK0)))) | $spl4),
  inference(superposition,[],[f3680,f158])).
fof(f3774,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),sK20('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))) )),
  inference(unit_resulting_resolution,[],[f3680,f125])).
fof(f3723,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,happ(s(fun('type.num.num',bool),X197),s('type.num.num',X195)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),sK20(X194,X195,X196,X193)))) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(X193),sK20(X194,X195,X196,X193))),X197,'type.num.num')) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X193),X196))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num',X194)))) )),
  inference(superposition,[],[f134,f140])).
fof(f3722,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (~p(s(bool,happ(s(fun('type.num.num',bool),X191),s('type.num.num',X189)))) | p(s(bool,happ(s(fun('type.num.num',bool),X191),s('type.num.num',X192)))) | s('type.num.num',X192) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X187),sK20(X188,X189,X190,X187)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X187),X190))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num',X188)))) )),
  inference(superposition,[],[f133,f140])).
fof(f3683,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X11) | s('type.list.list'(X9),'const.list.NIL_0') = s('type.list.list'(X9),sK20(X10,X11,X12,X9)) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X9),X12))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10)))) )),
  inference(superposition,[],[f125,f140])).
fof(f3682,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num',X1) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),sK20(X0,X1,X2,sK0)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl2),
  inference(superposition,[],[f156,f140])).
fof(f3680,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20('const.list.LENGTH_1'(s('type.list.list'(X0),X1)),'const.num.|48|_0',X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f110,f140])).
fof(f3681,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20('const.num.|48|_0','const.list.LENGTH_1'(s('type.list.list'(X0),X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f115,f140])).
fof(f3678,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.num.num')) | s(bool,X1) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f3673,f106])).
fof(f3673,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X0,'type.num.num')) | s(bool,X1) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f2102,f225])).
fof(f3672,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),'const.bool.COND_3'(s(bool,X2),s(fun('type.num.num',bool),X3),s(fun('type.num.num',bool),X4)),'type.num.num')) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f2102,f268])).
fof(f3671,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)),'type.num.num'))) )),
  inference(superposition,[],[f2102,f127])).
fof(f3670,plain,(
  ( ! [X80,X81] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X80))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X80)))))),X81,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X80))))))))) )),
  inference(forward_demodulation,[],[f3656,f3312])).
fof(f3656,plain,(
  ( ! [X80,X81] : (~p(s(bool,happ(s(fun('type.num.num',bool),X81),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X80)))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X80))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X80)))))),X81,'type.num.num'))) )),
  inference(superposition,[],[f134,f3312])).
fof(f3668,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X16))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X16)))))))))) )),
  inference(forward_demodulation,[],[f3617,f3161])).
fof(f3617,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X16))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X16)))))))) )),
  inference(superposition,[],[f3161,f3312])).
fof(f3667,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X14))))),s('type.num.num',X15)))))) )),
  inference(forward_demodulation,[],[f3616,f3161])).
fof(f3616,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X14))))),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X14))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15)))))) )),
  inference(superposition,[],[f3161,f3312])).
fof(f3666,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12)))))))))) )),
  inference(forward_demodulation,[],[f3615,f150])).
fof(f3615,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f150,f3312])).
fof(f3665,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f3614,f150])).
fof(f3614,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f150,f3312])).
fof(f3664,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8)))))))))) )),
  inference(forward_demodulation,[],[f3613,f149])).
fof(f3613,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))))) )),
  inference(superposition,[],[f149,f3312])).
fof(f3663,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))))),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3612,f149])).
fof(f3612,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f149,f3312])).
fof(f3662,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4)))))))))) )),
  inference(forward_demodulation,[],[f3611,f148])).
fof(f3611,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f148,f3312])).
fof(f3661,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))))),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3610,f148])).
fof(f3610,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f148,f3312])).
fof(f3660,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))))) )),
  inference(forward_demodulation,[],[f3609,f120])).
fof(f3609,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))))) )),
  inference(superposition,[],[f120,f3312])).
fof(f3659,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f3608,f119])).
fof(f3608,plain,(
  ( ! [X0] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))))) )),
  inference(superposition,[],[f119,f3312])).
fof(f3512,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f3161,f146])).
fof(f3566,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10)))))))))) )),
  inference(forward_demodulation,[],[f3510,f3161])).
fof(f3510,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10)))))))) )),
  inference(superposition,[],[f3161,f3311])).
fof(f3564,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X5)))))))) )),
  inference(forward_demodulation,[],[f3506,f3161])).
fof(f3506,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X5))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(superposition,[],[f3161,f3160])).
fof(f3560,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f3461,f3161])).
fof(f3461,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f3161,f3311])).
fof(f3558,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X5))),s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f3457,f3161])).
fof(f3457,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X5))),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) )),
  inference(superposition,[],[f3161,f3160])).
fof(f3413,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X71))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X71)))))),X72,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X72),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X71))))))))) )),
  inference(forward_demodulation,[],[f3401,f3311])).
fof(f3401,plain,(
  ( ! [X72,X71] : (~p(s(bool,happ(s(fun('type.num.num',bool),X72),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X71)))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X71))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X71)))))),X72,'type.num.num'))) )),
  inference(superposition,[],[f134,f3311])).
fof(f3411,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12)))))))))) )),
  inference(forward_demodulation,[],[f3365,f150])).
fof(f3365,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X12)))))))) )),
  inference(superposition,[],[f150,f3311])).
fof(f3410,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f3364,f150])).
fof(f3364,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X10))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f150,f3311])).
fof(f3409,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X8))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8)))))))))) )),
  inference(forward_demodulation,[],[f3363,f149])).
fof(f3363,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X8)))))))) )),
  inference(superposition,[],[f149,f3311])).
fof(f3408,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X6))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))))),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3362,f149])).
fof(f3362,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f149,f3311])).
fof(f3407,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4)))))))))) )),
  inference(forward_demodulation,[],[f3361,f148])).
fof(f3361,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f148,f3311])).
fof(f3406,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))))),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3360,f148])).
fof(f3360,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f148,f3311])).
fof(f3405,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))))) )),
  inference(forward_demodulation,[],[f3359,f120])).
fof(f3359,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))))) )),
  inference(superposition,[],[f120,f3311])).
fof(f3404,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))))) )),
  inference(forward_demodulation,[],[f3358,f119])).
fof(f3358,plain,(
  ( ! [X0] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))))) )),
  inference(superposition,[],[f119,f3311])).
fof(f3320,plain,(
  ( ! [X70,X71] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X70))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X70)))),X71,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X71),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X70))))))) )),
  inference(forward_demodulation,[],[f3308,f3160])).
fof(f3308,plain,(
  ( ! [X70,X71] : (~p(s(bool,happ(s(fun('type.num.num',bool),X71),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X70)))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X70))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X70)))),X71,'type.num.num'))) )),
  inference(superposition,[],[f134,f3160])).
fof(f3318,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X12))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12)))))))) )),
  inference(forward_demodulation,[],[f3273,f150])).
fof(f3273,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X12))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))))) )),
  inference(superposition,[],[f150,f3160])).
fof(f3317,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f3272,f150])).
fof(f3272,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X10))),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11)))))) )),
  inference(superposition,[],[f150,f3160])).
fof(f3316,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8)))))))) )),
  inference(forward_demodulation,[],[f3271,f149])).
fof(f3271,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X8))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) )),
  inference(superposition,[],[f149,f3160])).
fof(f3315,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3270,f149])).
fof(f3270,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X6))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(superposition,[],[f149,f3160])).
fof(f3314,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4)))))))) )),
  inference(forward_demodulation,[],[f3269,f148])).
fof(f3269,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X4))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f148,f3160])).
fof(f3313,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3268,f148])).
fof(f3268,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X2))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f148,f3160])).
fof(f3312,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f3267,f120])).
fof(f3267,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f120,f3160])).
fof(f3311,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f3266,f119])).
fof(f3266,plain,(
  ( ! [X0] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f119,f3160])).
fof(f3229,plain,(
  ( ! [X94,X95,X96] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X95))))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95)))),X96,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X96),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X95))))))))) )),
  inference(forward_demodulation,[],[f3228,f3161])).
fof(f3228,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,happ(s(fun('type.num.num',bool),X96),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X95)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95)))),X96,'type.num.num'))) )),
  inference(forward_demodulation,[],[f3155,f3160])).
fof(f3155,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,happ(s(fun('type.num.num',bool),X96),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X95)))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95))))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X94))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X95)))),X96,'type.num.num'))) )),
  inference(superposition,[],[f134,f151])).
fof(f3222,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))))) )),
  inference(forward_demodulation,[],[f3117,f3161])).
fof(f3117,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f151,f146])).
fof(f3221,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3116,f3160])).
fof(f3116,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(superposition,[],[f151,f2244])).
fof(f3220,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f3219,f3218])).
fof(f3219,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3115,f3160])).
fof(f3115,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(superposition,[],[f151,f2108])).
fof(f3218,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3114,f3160])).
fof(f3114,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(superposition,[],[f151,f387])).
fof(f3217,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f3113,f3160])).
fof(f3113,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f151,f2065])).
fof(f3216,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3112,f3160])).
fof(f3112,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))))) )),
  inference(superposition,[],[f151,f2245])).
fof(f3215,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f3214,f3213])).
fof(f3214,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f3111,f3160])).
fof(f3111,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(superposition,[],[f151,f2064])).
fof(f3213,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f3110,f3160])).
fof(f3110,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(superposition,[],[f151,f108])).
fof(f3210,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f3209,f3161])).
fof(f3209,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f3108,f3160])).
fof(f3108,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) )),
  inference(superposition,[],[f151,f2142])).
fof(f3172,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) )),
  inference(forward_demodulation,[],[f3071,f3160])).
fof(f3071,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X8)))))))) )),
  inference(superposition,[],[f151,f2244])).
fof(f3171,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3170,f3169])).
fof(f3170,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) )),
  inference(forward_demodulation,[],[f3070,f3160])).
fof(f3070,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X7)))))))) )),
  inference(superposition,[],[f151,f2108])).
fof(f3169,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) )),
  inference(forward_demodulation,[],[f3069,f3160])).
fof(f3069,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6)))))))) )),
  inference(superposition,[],[f151,f387])).
fof(f3168,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f3068,f3160])).
fof(f3068,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f151,f2065])).
fof(f3167,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f3067,f3160])).
fof(f3067,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f151,f2245])).
fof(f3166,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3165,f3164])).
fof(f3165,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f3066,f3160])).
fof(f3066,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f151,f2064])).
fof(f3164,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f3065,f3160])).
fof(f3065,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2)))))))) )),
  inference(superposition,[],[f151,f108])).
fof(f3163,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f3162,f3160])).
fof(f3162,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))))))) )),
  inference(backward_demodulation,[],[f3160,f3158])).
fof(f3161,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(backward_demodulation,[],[f3160,f151])).
fof(f3160,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f3159,f110])).
fof(f3159,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f3064,f110])).
fof(f3064,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f151,f2057])).
fof(f3158,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f3063,f151])).
fof(f3063,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))))) )),
  inference(superposition,[],[f151,f2142])).
fof(f3026,plain,(
  ( ! [X54,X52,X53] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num',X53))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num',X53)),X54,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num',X53))))))) )),
  inference(forward_demodulation,[],[f3018,f1670])).
fof(f3018,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X52))),s('type.num.num',X53)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num',X53))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X52))),s('type.num.num',X53)),X54,bool))) )),
  inference(superposition,[],[f134,f1670])).
fof(f3005,plain,(
  ( ! [X10,X8,X7,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))),s('type.num.num',X8)))) | p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK19('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))),s('type.num.num',X8)),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11))))) )),
  inference(superposition,[],[f138,f1670])).
fof(f3004,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num',X3)))) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK18('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))),s('type.num.num',X3)),X5,X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))))) )),
  inference(superposition,[],[f136,f1670])).
fof(f3002,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14))),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X14))),s('type.num.num',X15)))) )),
  inference(superposition,[],[f1670,f124])).
fof(f3000,plain,(
  ( ! [X10,X8,X9] : (s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f1670,f225])).
fof(f2998,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num',X3))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1670,f225])).
fof(f2927,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,sK17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X48),s(bool,X49)),X50,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X49)) )),
  inference(forward_demodulation,[],[f2900,f127])).
fof(f2900,plain,(
  ( ! [X50,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,'T_0')))) | s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X48),s(bool,X49))) = s(bool,sK17('const.bool.COND_3'(s(bool,'F_0'),s(bool,X48),s(bool,X49)),X50,bool)) | s(bool,'F_0') = s(bool,X49)) )),
  inference(superposition,[],[f134,f298])).
fof(f2926,plain,(
  ( ! [X47,X45,X46] : (s(bool,X45) != s(bool,X47) | ~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X47)))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(forward_demodulation,[],[f2899,f127])).
fof(f2899,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X47)))) | s(bool,X47) != s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X44),s(bool,X45))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f133,f298])).
fof(f2925,plain,(
  ( ! [X10,X8,X7,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11)))) | s(bool,'F_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f2889,f106])).
fof(f2889,plain,(
  ( ! [X10,X8,X7,X11,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X9,bool),X10),s(X9,sK19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X7),s(bool,X8)),X10,X9))))) | ~p(s(bool,happ(s(fun(X9,bool),X10),s(X9,X11)))) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f138,f298])).
fof(f2924,plain,(
  ( ! [X6,X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK18('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X3)),X5,X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X6)))) | s(bool,'F_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f2888,f106])).
fof(f2888,plain,(
  ( ! [X6,X4,X2,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,sK18('const.bool.COND_3'(s(bool,'F_0'),s(bool,X2),s(bool,X3)),X5,X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X6)))) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f136,f298])).
fof(f2881,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X42),s(bool,X41))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,X39),s(bool,X40),s(bool,X41))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f298,f268])).
fof(f2880,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X38),s(bool,X37))) | s(bool,'F_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X36),s(bool,X37)))) )),
  inference(superposition,[],[f298,f127])).
fof(f2857,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X14),s(bool,X15))) | s(bool,'F_0') = s(bool,X15) | s(bool,X14) = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f298,f225])).
fof(f2838,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (~p(s(bool,X64)) | p(s(bool,happ(s(fun(X65,bool),X66),s(X65,sK19('const.bool.COND_3'(s(bool,X62),s(bool,X63),s(bool,X64)),X66,X65))))) | ~p(s(bool,happ(s(fun(X65,bool),X66),s(X65,X67)))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f138,f268])).
fof(f2837,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,X58)) | p(s(bool,happ(s(fun(X59,bool),X60),s(X59,sK19('const.bool.COND_3'(s(bool,'F_0'),s(bool,X57),s(bool,X58)),X60,X59))))) | ~p(s(bool,happ(s(fun(X59,bool),X60),s(X59,X61))))) )),
  inference(superposition,[],[f138,f127])).
fof(f2836,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X52)))) | p(s(bool,happ(s(fun(X54,bool),X55),s(X54,sK19('const.arithmetic.>_2'(s('type.num.num',X52),s('type.num.num',X53)),X55,X54))))) | ~p(s(bool,happ(s(fun(X54,bool),X55),s(X54,X56))))) )),
  inference(superposition,[],[f138,f144])).
fof(f2835,plain,(
  ( ! [X47,X50,X48,X51,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num',X47)))) | p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK19('const.arithmetic.>=_2'(s('type.num.num',X47),s('type.num.num',X48)),X50,X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,X51))))) )),
  inference(superposition,[],[f138,f145])).
fof(f2834,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X43)))) | p(s(bool,happ(s(fun(X44,bool),X45),s(X44,sK19('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X43)),X45,X44))))) | ~p(s(bool,happ(s(fun(X44,bool),X45),s(X44,X46))))) )),
  inference(superposition,[],[f138,f1667])).
fof(f2833,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK19('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num',X39)),X41,X40))))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42))))) )),
  inference(superposition,[],[f138,f147])).
fof(f2839,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19(X0,X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2825,f106])).
fof(f2825,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19(X0,X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f138,f225])).
fof(f2799,plain,(
  ( ! [X191,X189,X192,X190] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X189),X192))) | s('type.list.list'(X189),'const.list.NIL_0') = s('type.list.list'(X189),'const.bool.COND_3'(s(bool,X190),s('type.list.list'(X189),X191),s('type.list.list'(X189),X192))) | s(bool,'T_0') = s(bool,X190)) )),
  inference(superposition,[],[f125,f268])).
fof(f2798,plain,(
  ( ! [X187,X185,X188,X186] : (s('type.list.list'(X185),'const.list.NIL_0') != s('type.list.list'(X185),X188) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X185),'const.bool.COND_3'(s(bool,X186),s('type.list.list'(X185),X187),s('type.list.list'(X185),X188))))) | s(bool,'T_0') = s(bool,X186)) )),
  inference(superposition,[],[f126,f268])).
fof(f2797,plain,(
  ( ! [X177,X182,X180,X178,X176,X184,X183,X181,X179] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X178))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X179),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X180),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X181),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X182),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X183),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X184),s('type.list.list'(sK0),'const.bool.COND_3'(s(bool,X176),s('type.list.list'(sK0),X177),s('type.list.list'(sK0),X178))))))))))))))) | s(bool,'T_0') = s(bool,X176)) ) | $spl2),
  inference(superposition,[],[f156,f268])).
fof(f2766,plain,(
  ( ! [X70,X68,X71,X69,X67] : (~p(s(bool,happ(s(fun(X67,bool),X70),s(X67,X71)))) | s(X67,X71) = s(X67,sK17(X71,'const.bool.COND_3'(s(bool,X68),s(fun(X67,bool),X69),s(fun(X67,bool),X70)),X67)) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f134,f268])).
fof(f2765,plain,(
  ( ! [X66,X64,X62,X65,X63] : (p(s(bool,happ(s(fun(X62,bool),X65),s(X62,sK17(X66,'const.bool.COND_3'(s(bool,X63),s(fun(X62,bool),X64),s(fun(X62,bool),X65)),X62))))) | ~p(s(bool,happ(s(fun(X62,bool),'const.bool.COND_3'(s(bool,X63),s(fun(X62,bool),X64),s(fun(X62,bool),X65))),s(X62,X66)))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f135,f268])).
fof(f2764,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (~p(s(bool,happ(s(fun(X56,bool),X59),s(X56,X60)))) | p(s(bool,happ(s(fun(X56,bool),'const.bool.COND_3'(s(bool,X57),s(fun(X56,bool),X58),s(fun(X56,bool),X59))),s(X56,X61)))) | s(X56,X60) != s(X56,X61) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f133,f268])).
fof(f2763,plain,(
  ( ! [X54,X52,X55,X53] : (p(s(bool,X54)) | s(bool,X55) = s(bool,'const.bool.COND_3'(s(bool,X52),s(bool,X53),s(bool,X54))) | s(bool,'T_0') = s(bool,X55) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f808,f268])).
fof(f2762,plain,(
  ( ! [X50,X51,X49] : (~p(s(bool,X51)) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X49),s(bool,X50),s(bool,X51))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f227,f268])).
fof(f2757,plain,(
  ( ! [X30,X28,X31,X29,X27,X32] : (~p(s(bool,X29)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK18('const.bool.COND_3'(s(bool,X27),s(bool,X28),s(bool,X29)),X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f136,f268])).
fof(f2753,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),X13),s(X9,X12)))) | s(X9,'const.bool.COND_3'(s(bool,X10),s(X9,X11),s(X9,X12))) = s(X9,sK17('const.bool.COND_3'(s(bool,X10),s(X9,X11),s(X9,X12)),X13,X9)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f134,f268])).
fof(f2752,plain,(
  ( ! [X6,X4,X8,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X7),s(X3,X6)))) | p(s(bool,happ(s(fun(X3,bool),X7),s(X3,X8)))) | s(X3,X8) != s(X3,'const.bool.COND_3'(s(bool,X4),s(X3,X5),s(X3,X6))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f133,f268])).
fof(f2751,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X23),s(bool,X24),s(bool,X25)))) )),
  inference(superposition,[],[f268,f124])).
fof(f2749,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X15),s(bool,X16),s(bool,X17))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f268,f225])).
fof(f2747,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X7) | s(bool,X10) = s(bool,'const.bool.COND_3'(s(bool,X7),s(bool,X8),s(bool,X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f268,f225])).
fof(f2650,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(X63,X64) = s(X63,'const.bool.COND_3'(s(bool,X62),s(X63,X65),s(X63,X64))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,X60),s(bool,X61),s(bool,X62))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f268,f268])).
fof(f2649,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s(X57,X58) = s(X57,'const.bool.COND_3'(s(bool,X56),s(X57,X59),s(X57,X58))) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X55),s(bool,X56)))) )),
  inference(superposition,[],[f268,f127])).
fof(f2622,plain,(
  ( ! [X61,X59,X57,X60,X58] : (~p(s(bool,X58)) | p(s(bool,happ(s(fun(X59,bool),X60),s(X59,sK18('const.bool.COND_3'(s(bool,'F_0'),s(bool,X57),s(bool,X58)),X60,X59))))) | ~p(s(bool,happ(s(fun(X59,bool),X60),s(X59,X61))))) )),
  inference(superposition,[],[f136,f127])).
fof(f2621,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num',X52)))) | p(s(bool,happ(s(fun(X54,bool),X55),s(X54,sK18('const.arithmetic.>_2'(s('type.num.num',X52),s('type.num.num',X53)),X55,X54))))) | ~p(s(bool,happ(s(fun(X54,bool),X55),s(X54,X56))))) )),
  inference(superposition,[],[f136,f144])).
fof(f2620,plain,(
  ( ! [X47,X50,X48,X51,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X48),s('type.num.num',X47)))) | p(s(bool,happ(s(fun(X49,bool),X50),s(X49,sK18('const.arithmetic.>=_2'(s('type.num.num',X47),s('type.num.num',X48)),X50,X49))))) | ~p(s(bool,happ(s(fun(X49,bool),X50),s(X49,X51))))) )),
  inference(superposition,[],[f136,f145])).
fof(f2619,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X43)))) | p(s(bool,happ(s(fun(X44,bool),X45),s(X44,sK18('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X43)),X45,X44))))) | ~p(s(bool,happ(s(fun(X44,bool),X45),s(X44,X46))))) )),
  inference(superposition,[],[f136,f1667])).
fof(f2618,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X38),s('type.num.num',X39)))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK18('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X38))),s('type.num.num',X39)),X41,X40))))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42))))) )),
  inference(superposition,[],[f136,f147])).
fof(f2623,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18(X0,X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2610,f106])).
fof(f2610,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18(X0,X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f136,f225])).
fof(f2609,plain,(
  ( ! [X22] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X22,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f2605,f2245])).
fof(f2605,plain,(
  ( ! [X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X22,'type.num.num'))) )),
  inference(superposition,[],[f134,f2245])).
fof(f2574,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f150,f2245])).
fof(f2573,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f150,f2245])).
fof(f2572,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f149,f2245])).
fof(f2571,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f2245])).
fof(f2570,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f148,f2245])).
fof(f2569,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f2245])).
fof(f2568,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f120,f2245])).
fof(f2567,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f119,f2245])).
fof(f2566,plain,(
  ( ! [X22] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X22,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f2562,f2244])).
fof(f2562,plain,(
  ( ! [X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X22),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),X22,'type.num.num'))) )),
  inference(superposition,[],[f134,f2244])).
fof(f2531,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f150,f2244])).
fof(f2530,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f150,f2244])).
fof(f2529,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f149,f2244])).
fof(f2528,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f2244])).
fof(f2527,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f148,f2244])).
fof(f2526,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f2244])).
fof(f2525,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f120,f2244])).
fof(f2524,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f119,f2244])).
fof(f2523,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2482,f106])).
fof(f2482,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f133,f225])).
fof(f2459,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,happ(s(fun('type.num.num',bool),X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X70)))))) | p(s(bool,happ(s(fun('type.num.num',bool),X72),s('type.num.num',X73)))) | s('type.num.num',X73) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X71)))) )),
  inference(superposition,[],[f133,f146])).
fof(f2445,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X32)))) | p(s(bool,happ(s(fun(bool,bool),X33),s(bool,X34)))) | s(bool,'F_0') != s(bool,X34) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f133,f124])).
fof(f2443,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X25),s(bool,X24)))) | p(s(bool,happ(s(fun(bool,bool),X25),s(bool,X26)))) | s(bool,'T_0') != s(bool,X26) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f133,f225])).
fof(f2442,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) | s(bool,X21) != s(bool,X23) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f133,f124])).
fof(f2440,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X14)))) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X16)))) | s(bool,X13) != s(bool,X16) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f133,f225])).
fof(f2438,plain,(
  ( ! [X6,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X6),s(bool,X7)))) | s(bool,X5) != s(bool,X7) | s(bool,X5) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f133,f225])).
fof(f2435,plain,(
  ( ! [X20] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(forward_demodulation,[],[f2422,f2142])).
fof(f2422,plain,(
  ( ! [X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X20,'type.num.num'))) )),
  inference(superposition,[],[f134,f2142])).
fof(f2434,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f2392,f150])).
fof(f2392,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(superposition,[],[f150,f2142])).
fof(f2433,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f2391,f150])).
fof(f2391,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f150,f2142])).
fof(f2432,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f2390,f149])).
fof(f2390,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(superposition,[],[f149,f2142])).
fof(f2431,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f2389,f149])).
fof(f2389,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f2142])).
fof(f2430,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(forward_demodulation,[],[f2388,f148])).
fof(f2388,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(superposition,[],[f148,f2142])).
fof(f2429,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2387,f148])).
fof(f2387,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f2142])).
fof(f2428,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f2427,f107])).
fof(f2427,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f2426,f122])).
fof(f2426,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f2386,f120])).
fof(f2386,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f120,f2142])).
fof(f2425,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(forward_demodulation,[],[f2385,f119])).
fof(f2385,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f119,f2142])).
fof(f2384,plain,(
  ( ! [X20] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),X20,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f2375,f2108])).
fof(f2375,plain,(
  ( ! [X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),X20,'type.num.num'))) )),
  inference(superposition,[],[f134,f2108])).
fof(f2383,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f2345,f2209])).
fof(f2345,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f150,f2108])).
fof(f2382,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f2344,f2176])).
fof(f2344,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f150,f2108])).
fof(f2381,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f2343,f2027])).
fof(f2343,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f149,f2108])).
fof(f2380,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f2342,f1999])).
fof(f2342,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f2108])).
fof(f2379,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f2341,f1940])).
fof(f2341,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f148,f2108])).
fof(f2378,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f2340,f1941])).
fof(f2340,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f2108])).
fof(f2339,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f120,f2108])).
fof(f2338,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(superposition,[],[f119,f2108])).
fof(f2331,plain,(
  ( ! [X12,X13] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X12)),X13,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f2326,f1667])).
fof(f2326,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X12)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X12))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X12)),X13,bool))) )),
  inference(superposition,[],[f134,f1667])).
fof(f2318,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X9)))) )),
  inference(superposition,[],[f1667,f124])).
fof(f2316,plain,(
  ( ! [X6,X5] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1667,f225])).
fof(f2314,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1667,f225])).
fof(f2283,plain,(
  ( ! [X20] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),X20,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2280,f2065])).
fof(f2280,plain,(
  ( ! [X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),X20,'type.num.num'))) )),
  inference(superposition,[],[f134,f2065])).
fof(f2251,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f150,f2065])).
fof(f2250,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4)))))) )),
  inference(superposition,[],[f150,f2065])).
fof(f2249,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f149,f2065])).
fof(f2248,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f2065])).
fof(f2247,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f148,f2065])).
fof(f2246,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f2065])).
fof(f2245,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f120,f2065])).
fof(f2244,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f119,f2065])).
fof(f2243,plain,(
  ( ! [X66,X64,X65] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X64),s('type.num.num',X65))))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65)))),X66,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X64),s('type.num.num',X65))))))))) )),
  inference(forward_demodulation,[],[f2236,f150])).
fof(f2236,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),X66),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X64),s('type.num.num',X65)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65))))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X64))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X65)))),X66,'type.num.num'))) )),
  inference(superposition,[],[f134,f150])).
fof(f2209,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f150,f387])).
fof(f2242,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f2208,f2207])).
fof(f2208,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f150,f2064])).
fof(f2207,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f150,f108])).
fof(f2176,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f150,f387])).
fof(f2239,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X2)))))) )),
  inference(forward_demodulation,[],[f2175,f2174])).
fof(f2175,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f150,f2064])).
fof(f2174,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f150,f108])).
fof(f2173,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f150,f2057])).
fof(f2143,plain,(
  ( ! [X16] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X16,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f2135,f2064])).
fof(f2135,plain,(
  ( ! [X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X16,'type.num.num'))) )),
  inference(superposition,[],[f134,f2064])).
fof(f2108,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f119,f2064])).
fof(f2142,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(forward_demodulation,[],[f2107,f431])).
fof(f2107,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(superposition,[],[f120,f2064])).
fof(f2141,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))) )),
  inference(forward_demodulation,[],[f2106,f1807])).
fof(f2106,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) )),
  inference(superposition,[],[f148,f2064])).
fof(f2140,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f2105,f1833])).
fof(f2105,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f148,f2064])).
fof(f2139,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f2104,f1998])).
fof(f2104,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f149,f2064])).
fof(f2138,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f2103,f2026])).
fof(f2103,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f149,f2064])).
fof(f2102,plain,(
  ( ! [X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X16,'type.num.num'))) )),
  inference(forward_demodulation,[],[f2092,f2057])).
fof(f2092,plain,(
  ( ! [X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')),X16,'type.num.num'))) )),
  inference(superposition,[],[f134,f2057])).
fof(f2065,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f119,f2057])).
fof(f2064,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f120,f2057])).
fof(f2059,plain,(
  ( ! [X61,X59,X60] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num',X60))))) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X60)))),X61,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X61),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num',X60))))))))) )),
  inference(forward_demodulation,[],[f2054,f149])).
fof(f2054,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun('type.num.num',bool),X61),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num',X60)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X60))))) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X59))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X60)))),X61,'type.num.num'))) )),
  inference(superposition,[],[f134,f149])).
fof(f2057,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(forward_demodulation,[],[f2028,f114])).
fof(f2028,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f149,f114])).
fof(f2027,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f149,f387])).
fof(f2026,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f149,f108])).
fof(f1999,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f149,f387])).
fof(f1998,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f149,f108])).
fof(f1971,plain,(
  ( ! [X12] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X12,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) )),
  inference(forward_demodulation,[],[f1968,f387])).
fof(f1968,plain,(
  ( ! [X12] : (~p(s(bool,happ(s(fun('type.num.num',bool),X12),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),X12,'type.num.num'))) )),
  inference(superposition,[],[f134,f387])).
fof(f1943,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f119,f387])).
fof(f1942,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f120,f387])).
fof(f1941,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f148,f387])).
fof(f1940,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f148,f387])).
fof(f1859,plain,(
  ( ! [X54,X52,X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num',X53))))) = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num',X53))))))))) )),
  inference(forward_demodulation,[],[f1856,f148])).
fof(f1856,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,happ(s(fun('type.num.num',bool),X54),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num',X53)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))))) = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53)))),X54,'type.num.num'))) )),
  inference(superposition,[],[f134,f148])).
fof(f1833,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f148,f108])).
fof(f1807,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f148,f108])).
fof(f1751,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(condensation,[],[f1750])).
fof(f1750,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK17(X14,X13,X12)))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f1740,f227])).
fof(f1740,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X15)) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK17(X14,X13,X12)))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f135,f225])).
fof(f1735,plain,(
  ( ! [X15,X16] : (p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X15)))) | s(bool,'T_0') = s(bool,sK17(X15,X16,bool))) )),
  inference(superposition,[],[f135,f124])).
fof(f1733,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),X10),s(bool,X11)))) | ~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,X9)))) | s(bool,'T_0') = s(bool,sK17(X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f135,f225])).
fof(f1731,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X3)))) | s(bool,X5) = s(bool,sK17(X3,X4,bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f135,f225])).
fof(f1730,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1)))))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,sK17(X0,X1,bool))) ) | $spl6),
  inference(superposition,[],[f135,f1005])).
fof(f1743,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK17(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0)))))) )),
  inference(forward_demodulation,[],[f1729,f127])).
fof(f1729,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK17(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2))),s(X0,X3))))) )),
  inference(superposition,[],[f135,f127])).
fof(f1726,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3)))))))))))),X0,'type.list.list'(sK0))) | ~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X0),s('type.list.list'(sK0),sK2))))) ) | $spl4),
  inference(forward_demodulation,[],[f1718,f158])).
fof(f1718,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X0),s('type.list.list'(sK0),sK2)))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) = s('type.list.list'(sK0),sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3)))))))))))),X0,'type.list.list'(sK0)))) ) | $spl4),
  inference(superposition,[],[f134,f158])).
fof(f1715,plain,(
  ( ! [X24,X23,X22] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23))))))) )),
  inference(forward_demodulation,[],[f1710,f147])).
fof(f1710,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X24),s(bool,'const.prim_rec.<_2'(s('type.num.num',X22),s('type.num.num',X23)))))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23))) = s(bool,sK17('const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X22))),s('type.num.num',X23)),X24,bool))) )),
  inference(superposition,[],[f134,f147])).
fof(f1701,plain,(
  ( ! [X17,X18] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X17),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))),s('type.num.num',X18)))) )),
  inference(superposition,[],[f147,f124])).
fof(f1699,plain,(
  ( ! [X12,X13,X11] : (s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X11))),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f147,f225])).
fof(f1697,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num',X6))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f147,f225])).
fof(f1696,plain,(
  ( ! [X4,X2,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X3))) = s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X4,'type.num.num')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num',X3)))) ) | $spl6),
  inference(superposition,[],[f147,f1005])).
fof(f1671,plain,(
  ( ! [X7] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7)))) )),
  inference(superposition,[],[f147,f431])).
fof(f1670,plain,(
  ( ! [X6,X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f147,f117])).
fof(f1669,plain,(
  ( ! [X4,X3] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))),s('type.num.num',X4))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s('type.num.num',X4)))) )),
  inference(superposition,[],[f147,f120])).
fof(f1668,plain,(
  ( ! [X2,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))),s('type.num.num',X2))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),s('type.num.num',X2)))) )),
  inference(superposition,[],[f147,f122])).
fof(f1667,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f147,f107])).
fof(f109,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27',aHL_FALSITY)).
fof(f298,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X0),s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f127,f124])).
fof(f536,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f144,f124])).
fof(f580,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f145,f124])).
fof(f676,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),X2)))) )),
  inference(superposition,[],[f125,f127])).
fof(f746,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X26),s(bool,X27)))) )),
  inference(superposition,[],[f225,f127])).
fof(f770,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X20),s(bool,X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f225,f127])).
fof(f936,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | s(X0,X3) = s(X0,sK17(X3,'const.bool.COND_3'(s(bool,'F_0'),s(fun(X0,bool),X1),s(fun(X0,bool),X2)),X0))) )),
  inference(superposition,[],[f134,f127])).
fof(f963,plain,(
  ( ! [X54,X53] : (~p(s(bool,happ(s(fun(bool,bool),X54),s(bool,'F_0')))) | s(bool,X53) = s(bool,sK17(X53,X54,bool)) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f134,f124])).
fof(f966,plain,(
  ( ! [X61,X62] : (~p(s(bool,happ(s(fun(bool,bool),X62),s(bool,X61)))) | s(bool,'F_0') = s(bool,sK17('F_0',X62,bool)) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f134,f124])).
fof(f997,plain,(
  ( ! [X70,X72,X71,X69] : (s(X69,X71) = s(X69,sK17('const.bool.COND_3'(s(bool,'F_0'),s(X69,X70),s(X69,X71)),X72,X69)) | ~p(s(bool,happ(s(fun(X69,bool),X72),s(X69,X71))))) )),
  inference(forward_demodulation,[],[f969,f127])).
fof(f969,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,happ(s(fun(X69,bool),X72),s(X69,X71)))) | s(X69,'const.bool.COND_3'(s(bool,'F_0'),s(X69,X70),s(X69,X71))) = s(X69,sK17('const.bool.COND_3'(s(bool,'F_0'),s(X69,X70),s(X69,X71)),X72,X69))) )),
  inference(superposition,[],[f134,f127])).
fof(f999,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)),'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f978,f127])).
fof(f1015,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,happ(s(fun('type.num.num',bool),X34),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X34,'type.num.num')) | s(bool,'T_0') = s(bool,'const.bool.COND_3'(s(bool,'F_0'),s(bool,X32),s(bool,X33)))) ) | $spl6),
  inference(superposition,[],[f1005,f127])).
fof(f1016,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),'const.bool.COND_3'(s(bool,'F_0'),s(fun('type.num.num',bool),X0),s(fun('type.num.num',bool),X1)),'type.num.num')) | s(bool,'T_0') = s(bool,X2)) ) | $spl6),
  inference(superposition,[],[f1005,f127])).
fof(f133,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK17(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17])],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X25,X27] : (? [X7] : (s(X6,X7) = s(X6,X27) & p(s(bool,happ(s(fun(X6,bool),X25),s(X6,X7))))) <=> p(s(bool,happ(s(fun(X6,bool),X25),s(X6,X27)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.bool.UNWIND_THM2')).
fof(f134,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK17(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f94])).
fof(f135,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f136,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0))))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19])],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : ((! [X6] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2))) | (? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2)) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : ((! [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & ((! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | ? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> (? [X4] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X25,X26] : (? [X7] : (p(s(bool,happ(s(fun(X6,bool),X25),s(X6,X7)))) & p(s(bool,X26))) <=> (? [X7] : p(s(bool,happ(s(fun(X6,bool),X25),s(X6,X7)))) & p(s(bool,X26))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.bool.LEFT_EXISTS_AND_THM')).
fof(f138,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f982,plain,(
  ( ! [X19,X18] : (s('type.num.num',X18) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),X19,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',X18))))) )),
  inference(forward_demodulation,[],[f946,f116])).
fof(f946,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.num.num',bool),X19),s('type.num.num',X18)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num',X18),s('type.num.num','const.num.|48|_0')),X19,'type.num.num'))) )),
  inference(superposition,[],[f134,f116])).
fof(f977,plain,(
  ( ! [X4,X3] : (s('type.num.num',X3) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f939,f115])).
fof(f939,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X3)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')),X4,'type.num.num'))) )),
  inference(superposition,[],[f134,f115])).
fof(f976,plain,(
  ( ! [X2,X1] : (s('type.num.num',X1) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1))))) )),
  inference(forward_demodulation,[],[f938,f110])).
fof(f938,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)),X2,'type.num.num'))) )),
  inference(superposition,[],[f134,f110])).
fof(f992,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))),X37,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36))))))) )),
  inference(forward_demodulation,[],[f956,f117])).
fof(f956,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X36)))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36)))),X37,'type.num.num'))) )),
  inference(superposition,[],[f134,f117])).
fof(f991,plain,(
  ( ! [X35,X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34))))))))) )),
  inference(forward_demodulation,[],[f955,f120])).
fof(f955,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun('type.num.num',bool),X35),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X34)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34)))),X35,'type.num.num'))) )),
  inference(superposition,[],[f134,f120])).
fof(f993,plain,(
  ( ! [X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X38,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(forward_demodulation,[],[f957,f431])).
fof(f957,plain,(
  ( ! [X38] : (~p(s(bool,happ(s(fun('type.num.num',bool),X38),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X38,'type.num.num'))) )),
  inference(superposition,[],[f134,f431])).
fof(f994,plain,(
  ( ! [X39,X40] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X39))))) = s('type.num.num',sK17('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X39))))))))) )),
  inference(forward_demodulation,[],[f958,f119])).
fof(f958,plain,(
  ( ! [X39,X40] : (~p(s(bool,happ(s(fun('type.num.num',bool),X40),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X39)))))))) | s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39))))) = s('type.num.num',sK17('const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X39)))),X40,'type.num.num'))) )),
  inference(superposition,[],[f134,f119])).
fof(f940,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun('type.num.num',bool),X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) = s('type.num.num',sK17('const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6)),X7,'type.num.num'))) )),
  inference(superposition,[],[f134,f146])).
fof(f979,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(X12),'const.list.NIL_0')),X13,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f943,f707])).
fof(f943,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun('type.num.num',bool),X13),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),'const.list.NIL_0'))) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(X12),'const.list.NIL_0')),X13,'type.num.num'))) )),
  inference(superposition,[],[f134,f707])).
fof(f980,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f944,f113])).
fof(f944,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14)),X15,'type.num.num'))) )),
  inference(superposition,[],[f134,f113])).
fof(f981,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),X17,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f945,f114])).
fof(f945,plain,(
  ( ! [X17,X16] : (~p(s(bool,happ(s(fun('type.num.num',bool),X17),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16))) = s('type.num.num',sK17('const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num',X16)),X17,'type.num.num'))) )),
  inference(superposition,[],[f134,f114])).
fof(f984,plain,(
  ( ! [X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))),X23,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f948,f118])).
fof(f948,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun('type.num.num',bool),X23),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22))))))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X22)))))),X23,'type.num.num'))) )),
  inference(superposition,[],[f134,f118])).
fof(f985,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24)))))),X25,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f949,f121])).
fof(f949,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun('type.num.num',bool),X25),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24))))))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X24)))))),X25,'type.num.num'))) )),
  inference(superposition,[],[f134,f121])).
fof(f986,plain,(
  ( ! [X26] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X26,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X26),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f950,f347])).
fof(f950,plain,(
  ( ! [X26] : (~p(s(bool,happ(s(fun('type.num.num',bool),X26),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),X26,'type.num.num'))) )),
  inference(superposition,[],[f134,f347])).
fof(f987,plain,(
  ( ! [X28,X27] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f951,f111])).
fof(f951,plain,(
  ( ! [X28,X27] : (~p(s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27))) = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)),X28,'type.num.num'))) )),
  inference(superposition,[],[f134,f111])).
fof(f988,plain,(
  ( ! [X30,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0')),X30,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f952,f112])).
fof(f952,plain,(
  ( ! [X30,X29] : (~p(s(bool,happ(s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.num.|48|_0')),X30,'type.num.num'))) )),
  inference(superposition,[],[f134,f112])).
fof(f989,plain,(
  ( ! [X31] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X31,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f953,f107])).
fof(f953,plain,(
  ( ! [X31] : (~p(s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),X31,'type.num.num'))) )),
  inference(superposition,[],[f134,f107])).
fof(f990,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X32)))),X33,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32))))))))) )),
  inference(forward_demodulation,[],[f954,f122])).
fof(f954,plain,(
  ( ! [X33,X32] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X32)))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X32))))) = s('type.num.num',sK17('const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X32)))),X33,'type.num.num'))) )),
  inference(superposition,[],[f134,f122])).
fof(f983,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f947,f161])).
fof(f947,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.num.num',bool),X21),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')),X21,'type.num.num'))) )),
  inference(superposition,[],[f134,f161])).
fof(f975,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num')) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f937,f108])).
fof(f937,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num',sK17('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),X0,'type.num.num'))) )),
  inference(superposition,[],[f134,f108])).
fof(f978,plain,(
  ( ! [X11] : (~p(s(bool,happ(s(fun('type.num.num',bool),X11),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X11,'type.num.num'))) ) | $spl6),
  inference(forward_demodulation,[],[f942,f160])).
fof(f942,plain,(
  ( ! [X11] : (~p(s(bool,happ(s(fun('type.num.num',bool),X11),s('type.num.num',sK1)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X11,'type.num.num'))) ) | $spl6),
  inference(superposition,[],[f134,f160])).
fof(f1013,plain,(
  ( ! [X28,X26,X27] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X26))) = s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num')) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X26),s('type.num.num',X27)))) ) | $spl6),
  inference(superposition,[],[f1005,f145])).
fof(f1014,plain,(
  ( ! [X30,X31,X29] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X30),s('type.num.num',X29))) = s(bool,happ(s(fun('type.num.num',bool),X31),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X31,'type.num.num')) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X29),s('type.num.num',X30)))) ) | $spl6),
  inference(superposition,[],[f1005,f144])).
fof(f1034,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X38),s(bool,happ(s(fun('type.num.num',bool),X37),s('type.num.num',sK1)))))) | s(bool,X36) = s(bool,sK17(X36,X38,bool)) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X37,'type.num.num')) | s(bool,'T_0') = s(bool,X36)) ) | $spl6),
  inference(superposition,[],[f134,f1005])).
fof(f1046,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | s(bool,happ(s(fun('type.num.num',bool),X20),s('type.num.num',sK1))) = s(bool,sK17(happ(s(fun('type.num.num',bool),X20),s('type.num.num',sK1)),X22,bool)) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X20,'type.num.num')) | s(bool,'T_0') = s(bool,X21)) ) | $spl6),
  inference(superposition,[],[f134,f1005])).
fof(f964,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,X55)))) | s(bool,'T_0') = s(bool,sK17('T_0',X56,bool)) | s(bool,X55) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f134,f225])).
fof(f961,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X48)))) | s(bool,X47) = s(bool,sK17(X47,X49,bool)) | s(bool,'T_0') = s(bool,X47) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f134,f225])).
fof(f959,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,happ(s(fun(bool,bool),X42),s(bool,'T_0')))) | s(bool,X41) = s(bool,sK17(X41,X42,bool)) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f134,f225])).
fof(f996,plain,(
  ( ! [X68,X66,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X67),s('type.num.num',X66))) = s(bool,sK17('const.arithmetic.>_2'(s('type.num.num',X66),s('type.num.num',X67)),X68,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.prim_rec.<_2'(s('type.num.num',X67),s('type.num.num',X66))))))) )),
  inference(forward_demodulation,[],[f968,f144])).
fof(f968,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.prim_rec.<_2'(s('type.num.num',X67),s('type.num.num',X66)))))) | s(bool,'const.arithmetic.>_2'(s('type.num.num',X66),s('type.num.num',X67))) = s(bool,sK17('const.arithmetic.>_2'(s('type.num.num',X66),s('type.num.num',X67)),X68,bool))) )),
  inference(superposition,[],[f134,f144])).
fof(f995,plain,(
  ( ! [X64,X65,X63] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) = s(bool,sK17('const.arithmetic.>=_2'(s('type.num.num',X63),s('type.num.num',X64)),X65,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))))))) )),
  inference(forward_demodulation,[],[f967,f145])).
fof(f967,plain,(
  ( ! [X64,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63)))))) | s(bool,'const.arithmetic.>=_2'(s('type.num.num',X63),s('type.num.num',X64))) = s(bool,sK17('const.arithmetic.>=_2'(s('type.num.num',X63),s('type.num.num',X64)),X65,bool))) )),
  inference(superposition,[],[f134,f145])).
fof(f144,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X21,X20] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num',X21))) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X21),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.GREATER_DEF')).
fof(f147,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X21,X20] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X21),s('type.num.num',X20))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X21))),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.LESS_EQ')).
fof(f745,plain,(
  ( ! [X24,X23,X25] : (s(bool,X25) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X24),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X23),s('type.num.num',X24)))) )),
  inference(superposition,[],[f225,f144])).
fof(f769,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num',X17))) | s(bool,X19) = s(bool,'const.arithmetic.>_2'(s('type.num.num',X17),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f225,f144])).
fof(f145,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X20,X21] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X20))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X21)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.GREATER_EQ')).
fof(f744,plain,(
  ( ! [X21,X22,X20] : (s(bool,X22) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X20),s('type.num.num',X21)))) )),
  inference(superposition,[],[f225,f145])).
fof(f768,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X14))) | s(bool,X16) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f225,f145])).
fof(f998,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK17(X2,X1,X0)) | s(bool,X3) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f970,f106])).
fof(f970,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK17(X2,X1,X0)) | s(bool,X3) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f134,f225])).
fof(f1005,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num')) | s(bool,'T_0') = s(bool,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f1000,f106])).
fof(f1000,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X0,'type.num.num')) | s(bool,X1) = s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl6),
  inference(superposition,[],[f978,f225])).
fof(f1049,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,X0) = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(equality_factoring,[],[f1005])).
fof(f808,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f106,f225])).
fof(f758,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f225,f225])).
fof(f707,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f704,f127])).
fof(f704,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.bool.COND_3'(s(bool,'F_0'),s('type.list.list'(X0),X1),s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(unit_resulting_resolution,[],[f127,f126])).
fof(f431,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(forward_demodulation,[],[f417,f117])).
fof(f417,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f120,f108])).
fof(f387,plain,(
  s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f119,f108])).
fof(f347,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f118,f108])).
fof(f268,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.bool.COND_3'(s(bool,X0),s(X1,X3),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f127,f124])).
fof(f227,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f109,f124])).
fof(f225,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f124,f124])).
fof(f153,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK22(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK22(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22])],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27',aHL_EXT)).
fof(f151,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X20,X21] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iZ_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|2')).
fof(f150,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X20,X21] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|12')).
fof(f149,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X20,X21] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num',X21))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|8')).
fof(f148,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X20,X21] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num',X21))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X21)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|5')).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X21,X20] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.ADD_SYM')).
fof(f140,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)),s('type.list.list'(X0),sK21(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK20,sK21])],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X16,X17] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) <=> ? [X18,X19] : (s('type.num.num',X16) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X18))) & s('type.num.num',X17) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X18),s('type.list.list'(X6),X19)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.list.LENGTH_EQ_SUM')).
fof(f141,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f142,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)),s('type.list.list'(X0),sK21(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f143,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f101])).
fof(f130,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK10(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f131,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK11(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),sK10(X2,X1,X0)))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f125,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.list.LENGTH_NIL')).
fof(f126,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f87])).
fof(f124,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27',aHL_BOOL_CASES)).
fof(f161,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f123,f108])).
fof(f123,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|11')).
fof(f122,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_suc|split|2')).
fof(f121,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X20)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|10')).
fof(f120,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X20))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|14')).
fof(f119,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X20))))) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|16')).
fof(f118,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X20)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|9')).
fof(f117,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X20] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X20))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_suc|split|1')).
fof(f116,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X20] : s('type.num.num',X20) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|7')).
fof(f115,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X20] : s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|1')).
fof(f114,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X24] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',X24)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f113,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|6')).
fof(f112,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|4')).
fof(f111,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X20] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.MULT|split|0')).
fof(f110,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X20] : s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.arithmetic.ADD|split|0')).
fof(f108,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f21])).
fof(f21,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_distrib|split|13')).
fof(f107,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f38])).
fof(f38,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.numeral.numeral_suc|split|0')).
fof(f106,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27',aHL_TRUTH)).
fof(f5071,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332,f160])).
fof(f5070,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl20)),
  inference(global_subsumption,[],[f1075,f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f160,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332])).
fof(f5069,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl26)),
  inference(global_subsumption,[],[f1748,f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f160,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332])).
fof(f5068,plain,(
  $false | ($spl2 | $spl4 | $spl6 | $spl30)),
  inference(global_subsumption,[],[f1936,f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f160,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332])).
fof(f5067,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f105,f104,f103,f106,f107,f108,f110,f111,f112,f113,f114,f115,f116,f117,f118,f119,f120,f121,f122,f161,f124,f126,f125,f132,f131,f130,f143,f142,f141,f140,f146,f148,f149,f150,f151,f153,f160,f158,f225,f227,f230,f268,f347,f387,f431,f677,f707,f758,f808,f1072,f1067,f1061,f1049,f1005,f998,f768,f744,f145,f769,f745,f147,f144,f995,f996,f959,f961,f964,f1046,f1034,f1014,f1013,f978,f975,f983,f990,f989,f988,f987,f986,f985,f984,f981,f980,f979,f940,f994,f993,f991,f992,f976,f977,f982,f138,f136,f135,f134,f133,f1016,f1015,f999,f997,f966,f963,f936,f770,f746,f676,f580,f536,f298,f127,f109,f1667,f1668,f1669,f1670,f1671,f1696,f1697,f1699,f1701,f1715,f1717,f1726,f1743,f1730,f1731,f1733,f1735,f1747,f1751,f156,f1807,f1833,f1859,f1940,f1941,f1942,f1943,f1971,f1998,f1999,f2026,f2027,f2057,f2059,f2064,f2065,f2102,f2138,f2139,f2140,f2141,f2142,f2108,f2143,f2173,f2174,f2239,f2176,f2207,f2242,f2209,f2243,f2244,f2245,f2246,f2247,f2248,f2249,f2250,f2251,f2283,f2314,f2316,f2318,f2331,f2338,f2339,f2378,f2379,f2380,f2381,f2382,f2383,f2384,f2425,f2428,f2429,f2430,f2431,f2432,f2433,f2434,f2435,f2438,f2440,f2442,f2443,f2445,f2459,f2523,f2524,f2525,f2526,f2527,f2528,f2529,f2530,f2531,f2566,f2567,f2568,f2569,f2570,f2571,f2572,f2573,f2574,f2609,f2623,f2625,f2628,f2618,f2619,f2620,f2621,f2622,f2649,f2650,f2747,f2749,f2751,f2752,f2753,f2757,f2762,f2763,f2764,f2765,f2766,f2797,f2798,f2799,f2839,f2841,f2844,f2833,f2834,f2835,f2836,f2837,f2838,f2857,f2880,f2881,f2924,f2925,f2926,f2927,f2998,f3000,f3002,f3004,f3005,f3026,f3158,f3160,f3161,f3163,f3164,f3166,f3167,f3168,f3169,f3171,f3172,f3210,f3213,f3215,f3216,f3217,f3218,f3220,f3221,f3222,f3229,f3311,f3312,f3313,f3314,f3315,f3316,f3317,f3318,f3320,f3404,f3405,f3406,f3407,f3408,f3409,f3410,f3411,f3413,f3558,f3560,f3564,f3566,f3512,f3659,f3660,f3661,f3662,f3663,f3664,f3665,f3666,f3667,f3668,f3670,f3671,f3672,f3678,f3681,f3680,f3682,f3683,f3722,f3723,f3774,f3775,f3776,f3777,f3830,f3829,f3831,f3832,f3871,f3872,f3928,f3930,f3932,f3933,f3935,f3937,f3939,f3940,f3941,f3942,f3960,f3962,f4019,f3964,f3965,f3966,f3967,f3968,f4020,f4021,f4022,f4023,f4024,f4025,f4026,f4027,f4028,f4029,f4030,f4031,f4032,f3984,f4033,f4034,f4036,f3990,f3991,f4041,f4042,f4043,f4044,f4045,f4047,f4049,f4051,f4052,f4053,f4054,f4055,f4056,f4057,f4058,f4059,f4060,f4061,f4062,f4013,f4014,f4016,f4017,f4138,f4152,f4140,f4142,f4143,f4144,f4145,f4148,f4149,f4253,f4272,f4416,f4434,f4236,f4238,f4241,f4243,f4246,f4248,f4249,f4250,f4774,f4792,f4795,f4802,f4803,f4807,f4810,f4812,f4818,f4727,f4733,f4734,f4849,f4758,f4862,f4761,f4763,f4765,f4766,f4772,f4875,f4874,f4873,f4872,f4901,f5012,f5017,f5019,f5020,f5022,f5024,f5025,f5027,f5029,f5030,f5032,f5034,f5035,f5037,f5039,f5040,f5042,f5044,f5045,f5047,f5049,f5050,f5051,f5052,f5053,f5054,f5055,f5056,f5057,f5058,f5062,f5063,f2332])).
fof(f5066,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f5018,f4063])).
fof(f4063,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK10(sK2,sK1,sK0))))))))))))))) ) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f3961,f156])).
fof(f3961,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK2,sK1,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f130])).
fof(f5018,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK11(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15(sK2,sK1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16(sK2,sK1,sK0)),s('type.list.list'(sK0),sK10(sK2,sK1,sK0)))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f131])).
fof(f4135,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK10(sK2,sK1,sK0),sK1,sK0)))) | $spl54),
  inference(cnf_transformation,[],[f4135_D])).
fof(f4135_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK10(sK2,sK1,sK0),sK1,sK0)))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f4129,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl49),
  inference(cnf_transformation,[],[f4129_D])).
fof(f4129_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f4122,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK10(sK2,sK1,sK0),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f4018,f3961])).
fof(f4018,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),X12))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X11),sK10(X12,sK1,X11))))) ) | $spl0),
  inference(superposition,[],[f130,f154])).
fof(f4131,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) | $spl50),
  inference(cnf_transformation,[],[f4131_D])).
fof(f4131_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4133,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl53),
  inference(cnf_transformation,[],[f4133_D])).
fof(f4133_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f4121,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f4018,f3828])).
fof(f3828,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f141])).
fof(f4127,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) | $spl46),
  inference(cnf_transformation,[],[f4127_D])).
fof(f4127_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f4120,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK10(sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0),sK1,sK0)))) | $spl0),
  inference(superposition,[],[f4018,f3679])).
fof(f3679,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0)))) | $spl0),
  inference(unit_resulting_resolution,[],[f154,f140])).
fof(f3923,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0)) | $spl42),
  inference(cnf_transformation,[],[f3923_D])).
fof(f3923_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0)) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f3925,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl45),
  inference(cnf_transformation,[],[f3925_D])).
fof(f3925_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f3876,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0)) | $spl0),
  inference(superposition,[],[f125,f3828])).
fof(f3919,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0))))))))))))))) ) | $spl38),
  inference(cnf_transformation,[],[f3919_D])).
fof(f3919_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0))))))))))))))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f3921,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl41),
  inference(cnf_transformation,[],[f3921_D])).
fof(f3921_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f3875,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK21('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),sK1,sK2,sK0))))))))))))))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f156,f3828])).
fof(f2842,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl36),
  inference(cnf_transformation,[],[f2842_D])).
fof(f2842_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1073,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f1073_D])).
fof(f1073_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2844,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2843])).
fof(f2843,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK19('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f2831,f808])).
fof(f2831,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK19('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f138,f225])).
fof(f2841,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK19('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2840])).
fof(f2840,plain,(
  ( ! [X28,X26,X24,X27,X25] : (p(s(bool,happ(s(fun(X25,bool),X26),s(X25,sK19('T_0',X26,X25))))) | ~p(s(bool,happ(s(fun(X25,bool),X26),s(X25,X27)))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f2830,f808])).
fof(f2830,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(X25,bool),X26),s(X25,sK19('T_0',X26,X25))))) | ~p(s(bool,happ(s(fun(X25,bool),X26),s(X25,X27)))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f138,f225])).
fof(f2626,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl34),
  inference(cnf_transformation,[],[f2626_D])).
fof(f2626_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2628,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2627])).
fof(f2627,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK18('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f2616,f808])).
fof(f2616,plain,(
  ( ! [X30,X33,X31,X29,X32] : (~p(s(bool,X29)) | p(s(bool,happ(s(fun(X30,bool),X31),s(X30,sK18('T_0',X31,X30))))) | ~p(s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) | s(bool,X29) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f136,f225])).
fof(f2625,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1))))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f2624])).
fof(f2624,plain,(
  ( ! [X28,X26,X24,X27,X25] : (p(s(bool,happ(s(fun(X25,bool),X26),s(X25,sK18('T_0',X26,X25))))) | ~p(s(bool,happ(s(fun(X25,bool),X26),s(X25,X27)))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f2615,f808])).
fof(f2615,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | p(s(bool,happ(s(fun(X25,bool),X26),s(X25,sK18('T_0',X26,X25))))) | ~p(s(bool,happ(s(fun(X25,bool),X26),s(X25,X27)))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f136,f225])).
fof(f1937,plain,(
  ( ! [X30,X31,X32] : (s(X30,X32) = s(X30,sK17(X32,X31,X30)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) | $spl32),
  inference(cnf_transformation,[],[f1937_D])).
fof(f1937_D,plain,(
  ( ! [X30,X31,X32] : (s(X30,X32) = s(X30,sK17(X32,X31,X30)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1936,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num'))) ) | $spl30),
  inference(cnf_transformation,[],[f1936_D])).
fof(f1936_D,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num'))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1889,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,happ(s(fun('type.num.num',bool),X33),s('type.num.num',sK1)))) | s(X30,X32) = s(X30,sK17(X32,X31,X30)) | s(bool,'T_0') = s(bool,happ(s(fun(X30,bool),X31),s(X30,X32))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X33,'type.num.num'))) ) | $spl20),
  inference(superposition,[],[f134,f1755])).
fof(f1755,plain,(
  ( ! [X28,X29] : (s(bool,X29) = s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X29) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num'))) ) | $spl20),
  inference(subsumption_resolution,[],[f1392,f109])).
fof(f1392,plain,(
  ( ! [X28,X29] : (p(s(bool,'F_0')) | s(bool,X29) = s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X29) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X28,'type.num.num'))) ) | $spl20),
  inference(superposition,[],[f808,f1075])).
fof(f1918,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X14) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num'))) ) | $spl20),
  inference(duplicate_literal_removal,[],[f1886])).
fof(f1886,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun('type.num.num',bool),X15),s('type.num.num',sK1)))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X15,'type.num.num'))) ) | $spl20),
  inference(superposition,[],[f227,f1755])).
fof(f1748,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'))) ) | $spl26),
  inference(cnf_transformation,[],[f1748_D])).
fof(f1748_D,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num'))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f1749,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) ) | $spl28),
  inference(cnf_transformation,[],[f1749_D])).
fof(f1749_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1747,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1737,f978])).
fof(f1737,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),X3),s('type.num.num',sK1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X3,'type.num.num')) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) ) | $spl6),
  inference(superposition,[],[f135,f1005])).
fof(f1723,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) | $spl22),
  inference(cnf_transformation,[],[f1723_D])).
fof(f1723_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1725,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl25),
  inference(cnf_transformation,[],[f1725_D])).
fof(f1725_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f1717,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) | $spl4),
  inference(superposition,[],[f125,f158])).
fof(f1138,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f1076,f106])).
fof(f1076,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(backward_demodulation,[],[f1073,f109])).
fof(f1075,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) | $spl20),
  inference(cnf_transformation,[],[f1075_D])).
fof(f1075_D,plain,(
  ( ! [X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num'))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1061,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1024])).
fof(f1024,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f124,f1005])).
fof(f1067,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1011])).
fof(f1011,plain,(
  ( ! [X15,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X16),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X16,'type.num.num')) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) ) | $spl6),
  inference(superposition,[],[f1005,f124])).
fof(f1074,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) | $spl18),
  inference(cnf_transformation,[],[f1074_D])).
fof(f1074_D,plain,(
  ( ! [X2,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num'))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1072,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num'))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1006])).
fof(f1006,plain,(
  ( ! [X2,X0,X1] : (s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',sK1))) = s(bool,happ(s(fun('type.num.num',bool),X2),s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X2,'type.num.num')) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num',sK17('const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)),X1,'type.num.num')) | s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(superposition,[],[f1005,f1005])).
fof(f679,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl12),
  inference(cnf_transformation,[],[f679_D])).
fof(f679_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f681,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl15),
  inference(cnf_transformation,[],[f681_D])).
fof(f681_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f677,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK3) | $spl6),
  inference(superposition,[],[f125,f160])).
fof(f231,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f233,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f230,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f124])).
fof(f154,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl0),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f160,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f103,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),X3)))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9])],[f85])).
fof(f85,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X10))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X11),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),X10))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3))))))))))))))))),
  inference(rectify,[],[f84])).
fof(f84,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ! [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3))))))))))))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <~> ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X3,X4,X5,X6,X7,X8,X9] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),X3)))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X9)))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ? [X9,X10,X11,X12,X13,X14,X15] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),X9)))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|27','thm.quantHeuristics.LIST_LENGTH_7|split|27')).
fof(f158,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) | $spl4),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f104,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(cnf_transformation,[],[f86])).
fof(f155,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(cnf_transformation,[],[f155_D])).
fof(f155_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f156,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),X3)))))))))))))) ) | $spl2),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),X3)))))))))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f105,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),X3))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f86])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 104
% Passive clauses: 680
% Generated clauses: 5013
% Final active clauses: 75
% Final passive clauses: 377
% Input formulas: 37
% Initial clauses: 51
% 
% Duplicate literals: 105
% Trivial inequalities: 9
% Fw subsumption resolutions: 50
% Fw demodulations: 836
% Bw demodulations: 68
% Condensations: 108
% Global subsumptions: 7
% 
% Simple tautologies: 21
% Equational tautologies: 26
% Forward subsumptions: 3113
% Fw demodulations to eq. taut.: 28
% Bw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 203
% Forward superposition: 1756
% Backward superposition: 1614
% Self superposition: 75
% Equality factoring: 32
% Equality resolution: 4
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 740
% SAT solver unit clauses: 175
% SAT solver binary clauses: 260
% 
% Sat splits: 21
% Sat splitting refutations: 9
% 
% Memory used [KB]: 7419
% Time elapsed: 0.194 s
% ------------------------------
% ------------------------------
% Success in time 1.516 s
