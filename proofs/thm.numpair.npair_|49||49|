Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.numpair
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.numpair
% SZS output start Proof for thm.numpair
fof(f317,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f314,f281,f93,f162,f94,f164,f160,f306,f95,f165,f163,f161])).
fof(f161,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f163,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK3) | $spl3),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK3) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f165,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | $spl5),
  inference(cnf_transformation,[],[f165_D])).
fof(f165_D,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f95,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK1) | s('type.num.num',sK2) != s('type.num.num',sK3) | s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  (s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) | (s('type.num.num',sK2) = s('type.num.num',sK3) & s('type.num.num',sK0) = s('type.num.num',sK1))) & (s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) | s('type.num.num',sK2) != s('type.num.num',sK3) | s('type.num.num',sK0) != s('type.num.num',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f62])).
fof(f62,plain,(
  ? [X0,X1,X2,X3] : ((s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) | (s('type.num.num',X2) = s('type.num.num',X3) & s('type.num.num',X0) = s('type.num.num',X1))) & (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) | s('type.num.num',X2) != s('type.num.num',X3) | s('type.num.num',X0) != s('type.num.num',X1)))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2,X3] : ((s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) | (s('type.num.num',X2) = s('type.num.num',X3) & s('type.num.num',X0) = s('type.num.num',X1))) & (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) | (s('type.num.num',X2) != s('type.num.num',X3) | s('type.num.num',X0) != s('type.num.num',X1))))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2,X3] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) <~> (s('type.num.num',X2) = s('type.num.num',X3) & s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1,X2,X3] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X3),s('type.num.num',X1))) <=> (s('type.num.num',X2) = s('type.num.num',X3) & s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X9),s('type.num.num',X7))) <=> (s('type.num.num',X8) = s('type.num.num',X9) & s('type.num.num',X6) = s('type.num.num',X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (s('type.num.num','const.numpair.npair_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',X9),s('type.num.num',X7))) <=> (s('type.num.num',X8) = s('type.num.num',X9) & s('type.num.num',X6) = s('type.num.num',X7)))),
  file('thm.numpair.npair_|49||49|','thm.numpair.npair_|49||49|')).
fof(f306,plain,(
  $false | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f305,f163])).
fof(f305,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK3) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f300,f134])).
fof(f134,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.numpair.nfst_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : s('type.num.num',X1) = s('type.num.num','const.numpair.nfst_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X13,X12] : s('type.num.num',X12) = s('type.num.num','const.numpair.nfst_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X12),s('type.num.num',X13)))))),
  file('thm.numpair.npair_|49||49|','thm.numpair.nfst_npair')).
fof(f300,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.numpair.nfst_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f134,f282])).
fof(f282,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK0))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f160,f164])).
fof(f160,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f164,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl4),
  inference(cnf_transformation,[],[f164_D])).
fof(f164_D,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f94,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f63])).
fof(f162,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK3) | $spl2),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK3) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f93,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK3) | s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) = s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f63])).
fof(f281,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f280])).
fof(f280,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f279,f162])).
fof(f279,plain,(
  s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK3),s('type.num.num',sK0))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f161,f164])).
fof(f314,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f313,f165])).
fof(f313,plain,(
  s('type.num.num',sK0) = s('type.num.num',sK1) | $spl0),
  inference(forward_demodulation,[],[f307,f135])).
fof(f135,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.numpair.nsnd_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : s('type.num.num',X0) = s('type.num.num','const.numpair.nsnd_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X13,X12] : s('type.num.num',X13) = s('type.num.num','const.numpair.nsnd_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',X12),s('type.num.num',X13)))))),
  file('thm.numpair.npair_|49||49|','thm.numpair.nsnd_npair')).
fof(f307,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.numpair.nsnd_1'(s('type.num.num','const.numpair.npair_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | $spl0),
  inference(superposition,[],[f135,f160])).
% SZS output end Proof for thm.numpair
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 24
% Passive clauses: 58
% Generated clauses: 217
% Final active clauses: 18
% Final passive clauses: 19
% Input formulas: 23
% Initial clauses: 64
% 
% Duplicate literals: 6
% Trivial inequalities: 3
% Fw subsumption resolutions: 10
% Fw demodulations: 6
% Bw demodulations: 1
% 
% Simple tautologies: 35
% Equational tautologies: 5
% Forward subsumptions: 63
% 
% Binary resolution: 31
% Factoring: 1
% Forward superposition: 37
% Backward superposition: 30
% Self superposition: 10
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 24
% Split components: 51
% SAT solver clauses: 45
% SAT solver unit clauses: 8
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 24
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 41
% TWLsolver calls for satisfiability: 15
% 
% Memory used [KB]: 767
% Time elapsed: 0.035 s
% ------------------------------
% ------------------------------
% Success in time 0.051 s
