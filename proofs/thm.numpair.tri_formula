Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.numpair
% (100754)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 329
% Passive clauses: 4793
% Generated clauses: 29638
% Final active clauses: 245
% Final passive clauses: 3877
% Input formulas: 75
% Initial clauses: 114
% 
% Duplicate literals: 337
% Trivial inequalities: 746
% Fw subsumption resolutions: 1484
% Fw demodulations: 8458
% Bw demodulations: 59
% 
% Simple tautologies: 172
% Equational tautologies: 36
% Forward subsumptions: 13820
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 13
% 
% Binary resolution: 35
% Forward superposition: 9535
% Backward superposition: 8552
% Self superposition: 128
% Equality factoring: 46
% Equality resolution: 47
% 
% Split clauses: 151
% Split components: 302
% SAT solver clauses: 299
% SAT solver unit clauses: 4
% SAT solver binary clauses: 34
% 
% Sat splits: 151
% Sat splitting refutations: 26
% 
% TWLsolver clauses: 299
% TWLsolver calls for satisfiability: 70
% 
% Memory used [KB]: 15479
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.numpair
% (100776)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 300
% Passive clauses: 1564
% Generated clauses: 25703
% Final active clauses: 217
% Final passive clauses: 807
% Input formulas: 75
% Initial clauses: 114
% 
% Duplicate literals: 261
% Trivial inequalities: 456
% Fw subsumption resolutions: 895
% Fw demodulations: 6767
% Bw demodulations: 463
% Condensations: 206
% Global subsumptions: 20
% 
% Simple tautologies: 130
% Equational tautologies: 31
% Forward subsumptions: 12331
% Fw demodulations to eq. taut.: 32
% Bw demodulations to eq. taut.: 70
% 
% Binary resolution: 32
% Forward superposition: 8665
% Backward superposition: 5915
% Self superposition: 93
% Equality factoring: 40
% Equality resolution: 46
% 
% Split clauses: 59
% Split components: 118
% SAT solver clauses: 2990
% SAT solver unit clauses: 195
% SAT solver binary clauses: 50
% SAT solver learnt clauses: 40
% 
% Sat splits: 59
% Sat splitting refutations: 17
% 
% TWLsolver clauses: 2910
% TWLsolver calls for satisfiability: 480
% 
% Memory used [KB]: 17910
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.numpair
% (100804)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 810
% Passive clauses: 11530
% Generated clauses: 259377
% Final active clauses: 479
% Final passive clauses: 1764
% Input formulas: 75
% Initial clauses: 114
% Discarded non-redundant clauses: 164997
% 
% Duplicate literals: 404
% Trivial inequalities: 460
% Fw subsumption resolutions: 2072
% Fw demodulations: 27480
% Bw demodulations: 4179
% Condensations: 257
% 
% Simple tautologies: 200
% Equational tautologies: 853
% Forward subsumptions: 66477
% Fw demodulations to eq. taut.: 679
% Bw demodulations to eq. taut.: 21
% 
% Unit resulting resolution: 173792
% Forward superposition: 29744
% Backward superposition: 17345
% Self superposition: 134
% Equality factoring: 54
% Equality resolution: 55
% 
% Split clauses: 48
% Split components: 96
% SAT solver clauses: 13072
% SAT solver unit clauses: 296
% SAT solver binary clauses: 6610
% 
% Sat splits: 48
% Sat splitting refutations: 1444
% 
% Memory used [KB]: 179101
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.numpair
% (101095)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1470
% Passive clauses: 53834
% Generated clauses: 163689
% Final active clauses: 586
% Final passive clauses: 35115
% Input formulas: 75
% Initial clauses: 77
% 
% Selected by SInE selection: 47
% SInE iterations: 1
% 
% Duplicate literals: 31
% Trivial inequalities: 5019
% Fw subsumption resolutions: 6570
% Fw demodulations: 28105
% Bw demodulations: 458
% 
% Simple tautologies: 172
% Equational tautologies: 26
% Forward subsumptions: 66800
% Fw demodulations to eq. taut.: 250
% 
% Binary resolution: 200
% Forward superposition: 87099
% Backward superposition: 28873
% Self superposition: 107
% Equality resolution: 431
% 
% Split clauses: 1212
% Split components: 2510
% SAT solver clauses: 2115
% SAT solver unit clauses: 16
% SAT solver binary clauses: 451
% 
% Sat splits: 1212
% Sat splitting refutations: 902
% 
% Memory used [KB]: 72024
% Time elapsed: 4.0000 s
% ------------------------------
% ------------------------------
% remaining time: 142 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.numpair
% (101214)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 227
% Passive clauses: 3197
% Generated clauses: 26814
% Final active clauses: 113
% Final passive clauses: 2047
% Input formulas: 75
% Initial clauses: 114
% 
% Duplicate literals: 131
% Trivial inequalities: 125
% Fw subsumption resolutions: 486
% Fw demodulations: 5664
% Bw demodulations: 959
% Global subsumptions: 2
% 
% Simple tautologies: 133
% Equational tautologies: 89
% Forward subsumptions: 16185
% Fw demodulations to eq. taut.: 398
% Bw demodulations to eq. taut.: 56
% 
% Unit resulting resolution: 4440
% Forward superposition: 8160
% Backward superposition: 5987
% Self superposition: 131
% Equality factoring: 16
% Equality resolution: 8
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 3281
% SAT solver unit clauses: 1663
% SAT solver binary clauses: 951
% 
% Sat splits: 3
% Sat splitting refutations: 76
% 
% Memory used [KB]: 15991
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.numpair
% (101229)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 378
% Passive clauses: 7001
% Generated clauses: 33948
% Final active clauses: 339
% Final passive clauses: 6251
% Input formulas: 75
% Initial clauses: 114
% 
% Duplicate literals: 48
% Trivial inequalities: 1218
% Fw subsumption resolutions: 97
% Fw demodulations: 3056
% Bw demodulations: 39
% Condensations: 546
% 
% Simple tautologies: 116
% Equational tautologies: 1
% Forward subsumptions: 21787
% Backward subsumptions: 449
% 
% Binary resolution: 245
% Forward superposition: 28311
% Backward superposition: 301
% Equality resolution: 78
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 7014
% SAT solver unit clauses: 1
% SAT solver binary clauses: 444
% 
% Sat splits: 11
% 
% Memory used [KB]: 27121
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 119 next slice time: 9
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.numpair
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.numpair
% SZS output start Proof for thm.numpair
fof(f351,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f312,f314,f322,f321,f320,f319,f324,f318,f326,f317,f328,f330,f334,f332,f350,f349,f348,f335,f337,f339,f341,f343])).
fof(f343,plain,(
  $false | $spl9),
  inference(unit_resulting_resolution,[],[f310,f332,f243])).
fof(f243,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'T_0')) & p(s(bool,X0)))))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0] : (((~p(s(bool,'T_0')) | ~p(s(bool,X0))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,'T_0')) & p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0] : ((p(s(bool,'T_0')) & p(s(bool,X0))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X12] : ((p(s(bool,'T_0')) & p(s(bool,X12))) <=> p(s(bool,X12)))),
  file('thm.numpair.tri_formula','thm.bool.AND_CLAUSES|split|0')).
fof(f310,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f272])).
fof(f272,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X13] : ! [X14] : (s(X13,X14) = s(X13,X14) <=> p(s(bool,'T_0')))),
  file('thm.numpair.tri_formula','thm.bool.REFL_CLAUSE')).
fof(f341,plain,(
  $false | $spl9),
  inference(unit_resulting_resolution,[],[f310,f332,f247])).
fof(f247,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : ((~p(s(bool,X0)) | ~p(s(bool,'T_0')) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,X0)) & p(s(bool,'T_0')))))),
  inference(flattening,[],[f163])).
fof(f163,plain,(
  ! [X0] : (((~p(s(bool,X0)) | ~p(s(bool,'T_0'))) | p(s(bool,X0))) & (~p(s(bool,X0)) | (p(s(bool,X0)) & p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0] : ((p(s(bool,X0)) & p(s(bool,'T_0'))) <=> p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X12] : ((p(s(bool,X12)) & p(s(bool,'T_0'))) <=> p(s(bool,X12)))),
  file('thm.numpair.tri_formula','thm.bool.AND_CLAUSES|split|1')).
fof(f339,plain,(
  $false | $spl9),
  inference(unit_resulting_resolution,[],[f310,f332,f257])).
fof(f257,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,'T_0'))))),
  inference(flattening,[],[f171])).
fof(f171,plain,(
  ! [X0] : (((~p(s(bool,X0)) & ~p(s(bool,'T_0'))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (p(s(bool,X0)) | p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0] : ((p(s(bool,X0)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X12] : ((p(s(bool,X12)) | p(s(bool,'T_0'))) <=> p(s(bool,'T_0')))),
  file('thm.numpair.tri_formula','thm.bool.OR_CLAUSES|split|1')).
fof(f337,plain,(
  $false | $spl9),
  inference(unit_resulting_resolution,[],[f310,f332,f264])).
fof(f264,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'T_0'))) )),
  inference(cnf_transformation,[],[f176])).
fof(f176,plain,(
  ! [X0] : (((~p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | p(s(bool,'T_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f175])).
fof(f175,plain,(
  ! [X0] : (((~p(s(bool,'T_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (p(s(bool,'T_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0] : ((p(s(bool,'T_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12] : ((p(s(bool,'T_0')) | p(s(bool,X12))) <=> p(s(bool,'T_0')))),
  file('thm.numpair.tri_formula','thm.bool.OR_CLAUSES|split|0')).
fof(f335,plain,(
  $false | $spl9),
  inference(unit_resulting_resolution,[],[f310,f332])).
fof(f348,plain,(
  $false | $spl9),
  inference(resolution,[],[f332,f310])).
fof(f349,plain,(
  $false | $spl9),
  inference(resolution,[],[f332,f196])).
fof(f196,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f12])).
fof(f12,axiom,(
  p(s(bool,'T_0'))),
  file('thm.numpair.tri_formula','thm.bool.TRUTH')).
fof(f350,plain,(
  $false | $spl9),
  inference(resolution,[],[f332,f195])).
fof(f195,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.numpair.tri_formula',aHL_TRUTH)).
fof(f332,plain,(
  ~p(s(bool,'T_0')) | $spl9),
  inference(cnf_transformation,[],[f332_D])).
fof(f332_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f334,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f333,f217])).
fof(f217,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6)))))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_lt|split|1')).
fof(f333,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl1),
  inference(forward_demodulation,[],[f315,f224])).
fof(f224,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_distrib|split|21')).
fof(f315,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f208,f314,f304])).
fof(f304,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2] : (! [X3] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : (? [X3] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0))))) => s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X9,X10] : (? [X11] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num',X6))),s('type.num.num',X11))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X6))))) => s('type.num.num',X10) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X9),s('type.num.num',X6))))),
  file('thm.numpair.tri_formula','thm.arithmetic.DIV_UNIQUE')).
fof(f208,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_distrib|split|1')).
fof(f330,plain,(
  ~p(s(bool,'T_0')) | $spl1),
  inference(forward_demodulation,[],[f329,f217])).
fof(f329,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl1),
  inference(forward_demodulation,[],[f316,f224])).
fof(f316,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f204,f314,f304])).
fof(f204,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))),
  file('thm.numpair.tri_formula','thm.arithmetic.ADD_|48|')).
fof(f328,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl7),
  inference(cnf_transformation,[],[f328_D])).
fof(f328_D,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f317,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f296])).
fof(f296,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f187])).
fof(f187,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X6,X7] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_eq|split|7')).
fof(f326,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl5),
  inference(cnf_transformation,[],[f326_D])).
fof(f326_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f318,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f294])).
fof(f294,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X6,X7] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_eq|split|6')).
fof(f324,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl3),
  inference(cnf_transformation,[],[f324_D])).
fof(f324_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f319,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f292])).
fof(f292,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6,X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) <=> s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.numpair.tri_formula','thm.numeral.numeral_distrib|split|19')).
fof(f320,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f296])).
fof(f321,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f294])).
fof(f322,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f314,f292])).
fof(f314,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1),
  inference(cnf_transformation,[],[f314_D])).
fof(f314_D,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f312,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(forward_demodulation,[],[f311,f276])).
fof(f276,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7,X6] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6)))),
  file('thm.numpair.tri_formula','thm.arithmetic.MULT_SYM')).
fof(f311,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(forward_demodulation,[],[f194,f226])).
fof(f226,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  file('thm.numpair.tri_formula','thm.numpair.twotri_formula')).
fof(f194,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  s('type.num.num','const.numpair.tri_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f150])).
fof(f150,plain,(
  ? [X0] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(ennf_transformation,[],[f77])).
fof(f77,plain,(
  ~! [X0] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s('type.num.num','const.numpair.tri_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.numpair.tri_formula','thm.numpair.tri_formula')).
% SZS output end Proof for thm.numpair
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 90
% Passive clauses: 5
% Generated clauses: 36
% Final active clauses: 90
% Final passive clauses: 3
% Input formulas: 75
% Initial clauses: 114
% 
% Duplicate literals: 2
% Trivial inequalities: 1
% Fw demodulations: 6
% 
% Simple tautologies: 24
% Equational tautologies: 1
% Forward subsumptions: 4
% 
% Binary resolution: 3
% Unit resulting resolution: 21
% 
% SAT solver clauses: 37
% SAT solver unit clauses: 10
% SAT solver binary clauses: 25
% 
% Sat splitting refutations: 8
% 
% Memory used [KB]: 1151
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% Success in time 18.047 s
