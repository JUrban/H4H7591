Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quotient_option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quotient_option
% SZS output start Proof for thm.quotient_option
fof(f4335,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4334,f4297,f491,f459,f64,f83])).
fof(f83,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f64,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quotient_option.IS_SOME_PRS',aHL_FALSITY)).
fof(f459,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))))) | $spl9),
  inference(cnf_transformation,[],[f459_D])).
fof(f459_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f491,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))))) | $spl14),
  inference(backward_demodulation,[],[f464,f57])).
fof(f57,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5)))))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(sK0,fun(sK0,bool)),sK2),s(fun(sK0,sK1),sK3),s(fun(sK1,sK0),sK4)))) & s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) & ? [X5] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X0,fun(X0,bool)),X2),s(fun(X0,X1),X3),s(fun(X1,X0),X4)))) => ! [X5] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X5))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X4),s('type.option.option'(X1),X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X11))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X10),s('type.option.option'(X7),X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (p(s(bool,'const.quotient.QUOTIENT_3'(s(fun(X6,fun(X6,bool)),X8),s(fun(X6,X7),X9),s(fun(X7,X6),X10)))) => ! [X11] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X11))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X10),s('type.option.option'(X7),X11))))))),
  file('thm.quotient_option.IS_SOME_PRS','thm.quotient_option.IS_SOME_PRS')).
fof(f464,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) | $spl14),
  inference(cnf_transformation,[],[f464_D])).
fof(f464_D,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4297,plain,(
  $false | ($spl1 | $spl9 | $spl14)),
  inference(subsumption_resolution,[],[f4288,f88])).
fof(f88,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) | $spl1),
  inference(subsumption_resolution,[],[f87,f83])).
fof(f87,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(superposition,[],[f67,f65])).
fof(f65,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.quotient_option.IS_SOME_PRS','thm.option.IS_SOME_DEF|split|1')).
fof(f67,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.quotient_option.IS_SOME_PRS','thm.bool.EQ_CLAUSES|split|0')).
fof(f4288,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl1 | $spl9 | $spl14)),
  inference(backward_demodulation,[],[f4282,f464])).
fof(f4282,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | ($spl1 | $spl9)),
  inference(subsumption_resolution,[],[f4219,f88])).
fof(f4219,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl9),
  inference(superposition,[],[f700,f631])).
fof(f631,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))) | $spl9),
  inference(trivial_inequality_removal,[],[f622])).
fof(f622,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),sK5))) | $spl9),
  inference(superposition,[],[f459,f449])).
fof(f449,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f77,f78])).
fof(f78,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X13] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X13) | ? [X11] : s('type.option.option'(X6),X13) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))))),
  file('thm.quotient_option.IS_SOME_PRS','thm.option.option_nchotomy')).
fof(f77,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X11] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11)))))),
  file('thm.quotient_option.IS_SOME_PRS','thm.option.IS_SOME_DEF|split|0')).
fof(f700,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X2),'const.option.OPTION_MAP_2'(s(fun(X0,X2),X3),s('type.option.option'(X0),X1))))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f566,f78])).
fof(f566,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))))) )),
  inference(superposition,[],[f77,f80])).
fof(f80,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X14,X11] : s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X6,X7),X14),s(X6,X11))))) = s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X6,X7),X14),s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11)))))),
  file('thm.quotient_option.IS_SOME_PRS','thm.option.OPTION_MAP_DEF|split|0')).
fof(f4334,plain,(
  $false | $spl15),
  inference(subsumption_resolution,[],[f4333,f65])).
fof(f4333,plain,(
  s(bool,'F_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | $spl15),
  inference(forward_demodulation,[],[f4332,f65])).
fof(f4332,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | $spl15),
  inference(forward_demodulation,[],[f4331,f79])).
fof(f79,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X14] : s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X6,X7),X14),s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.quotient_option.IS_SOME_PRS','thm.option.OPTION_MAP_DEF|split|1')).
fof(f4331,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),'const.option.NONE_0'))))) | $spl15),
  inference(forward_demodulation,[],[f57,f4317])).
fof(f4317,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl15),
  inference(trivial_inequality_removal,[],[f4302])).
fof(f4302,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK5) | $spl15),
  inference(superposition,[],[f465,f449])).
fof(f465,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) | $spl15),
  inference(cnf_transformation,[],[f465_D])).
fof(f465_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK5))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
% SZS output end Proof for thm.quotient_option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 85
% Passive clauses: 509
% Generated clauses: 4153
% Final active clauses: 69
% Final passive clauses: 344
% Input formulas: 18
% Initial clauses: 26
% 
% Duplicate literals: 335
% Trivial inequalities: 112
% Fw subsumption resolutions: 445
% Fw demodulations: 331
% Bw demodulations: 13
% 
% Simple tautologies: 97
% Equational tautologies: 21
% Forward subsumptions: 2028
% 
% Binary resolution: 42
% Forward superposition: 1455
% Backward superposition: 1170
% Self superposition: 68
% Equality factoring: 48
% Equality resolution: 11
% 
% Split clauses: 211
% Split components: 431
% SAT solver clauses: 349
% SAT solver unit clauses: 10
% SAT solver binary clauses: 82
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 211
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 344
% TWLsolver calls for satisfiability: 67
% 
% Memory used [KB]: 2942
% Time elapsed: 0.108 s
% ------------------------------
% ------------------------------
% Success in time 0.11 s
