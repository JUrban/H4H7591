Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% (71060)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 54
% Passive clauses: 1728
% Generated clauses: 9732
% Final active clauses: 52
% Final passive clauses: 1613
% Input formulas: 14
% Initial clauses: 17
% 
% Duplicate literals: 742
% Trivial inequalities: 120
% Fw subsumption resolutions: 1228
% Fw demodulations: 98
% 
% Simple tautologies: 226
% Equational tautologies: 114
% Forward subsumptions: 3780
% 
% Binary resolution: 25
% Forward superposition: 3795
% Backward superposition: 2923
% Self superposition: 380
% Equality factoring: 330
% Equality resolution: 12
% 
% Split clauses: 526
% Split components: 1058
% SAT solver clauses: 1513
% SAT solver unit clauses: 251
% SAT solver binary clauses: 514
% 
% Sat splits: 526
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1508
% TWLsolver calls for satisfiability: 46
% 
% Memory used [KB]: 5756
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (71072)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 37
% Passive clauses: 313
% Generated clauses: 5114
% Final active clauses: 34
% Final passive clauses: 274
% Input formulas: 14
% Initial clauses: 17
% 
% Duplicate literals: 793
% Trivial inequalities: 25
% Fw subsumption resolutions: 143
% Fw demodulations: 84
% Bw demodulations: 1
% Condensations: 1254
% 
% Simple tautologies: 83
% Equational tautologies: 61
% Forward subsumptions: 1646
% 
% Binary resolution: 12
% Forward superposition: 1132
% Backward superposition: 1021
% Self superposition: 200
% Equality factoring: 176
% Equality resolution: 4
% 
% Split clauses: 55
% Split components: 111
% SAT solver clauses: 749
% SAT solver unit clauses: 24
% SAT solver binary clauses: 71
% 
% Sat splits: 55
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 749
% TWLsolver calls for satisfiability: 53
% 
% Memory used [KB]: 5117
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 287 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f38280,plain,(
  $false),
  inference(subsumption_resolution,[],[f38279,f50])).
fof(f50,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X13] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X13)))))),
  file('thm.list.LENGTH_o_REVERSE|split|0','thm.list.LENGTH_REVERSE')).
fof(f38279,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num')))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num'))))))),
  inference(forward_demodulation,[],[f38277,f52])).
fof(f52,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.list.REVERSE_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.list.REVERSE_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.list.REVERSE_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X14] : s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X14))) = s('type.list.list'(X6),happ(s(fun('type.list.list'(X6),'type.list.list'(X6)),'const.list.REVERSE_0'),s('type.list.list'(X6),X14)))),
  file('thm.list.LENGTH_o_REVERSE|split|0','ARITY_0_1_const.list.REVERSE')).
fof(f38277,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num')))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),happ(s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0'),s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num'))))))),
  inference(superposition,[],[f2009,f320])).
fof(f320,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X39),happ(s(fun(X40,'type.list.list'(X39)),X41),s(X40,X42))))) = s('type.num.num','const.combin.o_3'(s(fun('type.list.list'(X39),'type.num.num'),'const.list.LENGTH_0'),s(fun(X40,'type.list.list'(X39)),X41),s(X40,X42)))) )),
  inference(superposition,[],[f60,f51])).
fof(f51,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num',happ(s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num',happ(s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num',happ(s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X14] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X14))) = s('type.num.num',happ(s(fun('type.list.list'(X6),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'(X6),X14)))),
  file('thm.list.LENGTH_o_REVERSE|split|0','ARITY_0_1_const.list.LENGTH')).
fof(f60,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9,X6,X12] : ! [X10,X11,X8] : s(X9,'const.combin.o_3'(s(fun(X6,X9),X10),s(fun(X12,X6),X11),s(X12,X8))) = s(X9,happ(s(fun(X6,X9),X10),s(X6,happ(s(fun(X12,X6),X11),s(X12,X8)))))),
  file('thm.list.LENGTH_o_REVERSE|split|0','thm.combin.o_THM')).
fof(f2009,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num')))) != s('type.num.num','const.combin.o_3'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0'),s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num'))))),
  inference(superposition,[],[f1819,f61])).
fof(f61,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.o_3'(s(fun(X1,X0),X3),s(fun(X2,X1),X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X9,X12,X6] : ! [X14,X15,X16] : s(X9,'const.combin.o_3'(s(fun(X12,X9),X14),s(fun(X6,X12),X15),s(X6,X16))) = s(X9,happ(s(fun(X6,X9),'const.combin.o_2'(s(fun(X12,X9),X14),s(fun(X6,X12),X15))),s(X6,X16)))),
  file('thm.list.LENGTH_o_REVERSE|split|0','ARITY_2_3_const.combin.o')).
fof(f1819,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num')))) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0'))),s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num'))))),
  inference(forward_demodulation,[],[f1766,f51])).
fof(f1766,plain,(
  s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num')))) != s('type.num.num',happ(s(fun('type.list.list'(sK0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0'))),s('type.list.list'(sK0),sK2('const.list.LENGTH_0','const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')),'type.list.list'(sK0),'type.num.num'))))),
  inference(unit_resulting_resolution,[],[f45,f59])).
fof(f59,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK2(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (s(X0,happ(s(fun(X1,X0),X2),s(X1,sK2(X3,X2,X1,X0)))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,sK2(X3,X2,X1,X0)))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X5] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X5)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(rectify,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X1,X0),X2) != s(fun(X1,X0),X3) | ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4)))) & (? [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) != s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))) | s(fun(X1,X0),X2) = s(fun(X1,X0),X3)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ! [X2,X3] : (s(fun(X1,X0),X2) = s(fun(X1,X0),X3) <=> ! [X4] : s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))) = s(X0,happ(s(fun(X1,X0),X3),s(X1,X4))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X9,X6] : ! [X10,X11] : (s(fun(X6,X9),X10) = s(fun(X6,X9),X11) <=> ! [X8] : s(X9,happ(s(fun(X6,X9),X10),s(X6,X8))) = s(X9,happ(s(fun(X6,X9),X11),s(X6,X8))))),
  file('thm.list.LENGTH_o_REVERSE|split|0','thm.bool.FUN_EQ_THM')).
fof(f45,plain,(
  s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0') != s(fun('type.list.list'(sK0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0') != s(fun('type.list.list'(sK0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(sK0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(sK0),'type.list.list'(sK0)),'const.list.REVERSE_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f35])).
fof(f35,plain,(
  ? [X0] : s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0') != s(fun('type.list.list'(X0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.list.REVERSE_0')))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0] : s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0') = s(fun('type.list.list'(X0),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(X0),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(X0),'type.list.list'(X0)),'const.list.REVERSE_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : s(fun('type.list.list'(X6),'type.num.num'),'const.list.LENGTH_0') = s(fun('type.list.list'(X6),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(X6),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(X6),'type.list.list'(X6)),'const.list.REVERSE_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : s(fun('type.list.list'(X6),'type.num.num'),'const.list.LENGTH_0') = s(fun('type.list.list'(X6),'type.num.num'),'const.combin.o_2'(s(fun('type.list.list'(X6),'type.num.num'),'const.list.LENGTH_0'),s(fun('type.list.list'(X6),'type.list.list'(X6)),'const.list.REVERSE_0')))),
  file('thm.list.LENGTH_o_REVERSE|split|0','thm.list.LENGTH_o_REVERSE|split|0')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 146
% Passive clauses: 4219
% Generated clauses: 44753
% Final active clauses: 69
% Final passive clauses: 768
% Input formulas: 14
% Initial clauses: 17
% Discarded non-redundant clauses: 180
% 
% Duplicate literals: 3832
% Trivial inequalities: 385
% Fw subsumption resolutions: 2074
% Fw demodulations: 2262
% Bw demodulations: 2474
% Condensations: 6871
% Global subsumptions: 25
% 
% Simple tautologies: 502
% Equational tautologies: 793
% Forward subsumptions: 23762
% Fw demodulations to eq. taut.: 32
% Bw demodulations to eq. taut.: 189
% 
% Unit resulting resolution: 1426
% Forward superposition: 10366
% Backward superposition: 7293
% Self superposition: 415
% Equality factoring: 298
% Equality resolution: 20
% 
% Split clauses: 132
% Split components: 265
% SAT solver clauses: 4590
% SAT solver unit clauses: 34
% SAT solver binary clauses: 375
% 
% Sat splits: 132
% Sat splitting refutations: 80
% 
% Memory used [KB]: 19829
% Time elapsed: 5.136 s
% ------------------------------
% ------------------------------
% Success in time 6.415 s
