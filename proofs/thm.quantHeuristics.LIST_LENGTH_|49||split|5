Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (26125)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1363
% Passive clauses: 7820
% Generated clauses: 44352
% Final active clauses: 1316
% Final passive clauses: 5700
% Input formulas: 261
% Initial clauses: 557
% 
% Duplicate literals: 261
% Trivial inequalities: 75
% Fw subsumption resolutions: 2336
% Fw demodulations: 4814
% Bw demodulations: 41
% 
% Simple tautologies: 290
% Equational tautologies: 40
% Forward subsumptions: 28710
% Fw demodulations to eq. taut.: 19
% 
% Binary resolution: 8506
% Factoring: 1406
% Forward superposition: 14582
% Backward superposition: 11540
% Self superposition: 55
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 365
% Split components: 732
% SAT solver clauses: 653
% SAT solver unit clauses: 27
% SAT solver binary clauses: 132
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 365
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 652
% TWLsolver calls for satisfiability: 546
% 
% Memory used [KB]: 23666
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (26138)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 635
% Passive clauses: 3776
% Generated clauses: 29365
% Final active clauses: 508
% Final passive clauses: 1823
% Input formulas: 261
% Initial clauses: 557
% 
% Duplicate literals: 155
% Trivial inequalities: 54
% Fw subsumption resolutions: 762
% Fw demodulations: 4228
% Bw demodulations: 1415
% Condensations: 69
% Global subsumptions: 37
% 
% Simple tautologies: 362
% Equational tautologies: 13
% Forward subsumptions: 13793
% Fw demodulations to eq. taut.: 23
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 3093
% Factoring: 110
% Forward superposition: 6930
% Backward superposition: 5798
% Self superposition: 78
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 567
% Split components: 1135
% SAT solver clauses: 4508
% SAT solver unit clauses: 697
% SAT solver binary clauses: 183
% SAT solver learnt clauses: 77
% SAT solver learnt literals: 18
% 
% Sat splits: 567
% Sat splitting refutations: 25
% 
% TWLsolver clauses: 4357
% TWLsolver calls for satisfiability: 3265
% 
% Memory used [KB]: 21748
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f34597,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f918,f1505,f1504,f917,f1507,f1503,f7656,f7663,f10538,f10557,f10555,f12790,f12791,f12787,f12798,f7665,f18198,f18221,f18225,f18227,f18230,f18232,f18233,f18235,f18237,f18228,f18239,f21390,f21394,f21403,f21405,f21392,f27413,f27460,f27464,f27465,f27467,f27462,f27527,f27486,f34555])).
fof(f34555,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f34554,f919])).
fof(f919,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5',aHL_TRUTH)).
fof(f34554,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f34526,f28025])).
fof(f28025,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl0),
  inference(unit_resulting_resolution,[],[f919,f27469,f1238])).
fof(f1238,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f651])).
fof(f651,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f650])).
fof(f650,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f548])).
fof(f548,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X17,X18] : ((p(s(bool,X17)) => p(s(bool,X18))) => ((p(s(bool,X18)) => p(s(bool,X17))) => s(bool,X17) = s(bool,X18)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.IMP_ANTISYM_AX')).
fof(f27469,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl0),
  inference(forward_demodulation,[],[f1503,f1514])).
fof(f1514,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f1513,f926])).
fof(f926,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f258])).
fof(f258,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.numeral.numeral_suc|split|0')).
fof(f1513,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f927,f921])).
fof(f921,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f97])).
fof(f97,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.ALT_ZERO')).
fof(f927,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f140])).
fof(f140,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.numeral.numeral_distrib|split|13')).
fof(f34526,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl2),
  inference(unit_resulting_resolution,[],[f1505,f1666])).
fof(f1666,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),sK26(X1,X0))))) )),
  inference(backward_demodulation,[],[f1204,f1612])).
fof(f1612,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),sK26(X1,X0))))) )),
  inference(forward_demodulation,[],[f1116,f1514])).
fof(f1116,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),sK26(X1,X0)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f769])).
fof(f769,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK27(X1,X0)),s('type.list.list'(X0),sK26(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26,sK27])],[f768])).
fof(f768,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f767])).
fof(f767,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f422])).
fof(f422,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f421])).
fof(f421,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f110])).
fof(f110,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.quantHeuristics.LIST_LENGTH_|49||split|4')).
fof(f1204,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f517])).
fof(f517,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X11,X10] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X11),s('type.num.num',X10))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.GREATER_EQ')).
fof(f27486,plain,(
  $false | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f1507,f1505])).
fof(f27527,plain,(
  $false | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f27525])).
fof(f27525,plain,(
  s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),sK14) | ($spl2 | $spl4)),
  inference(superposition,[],[f1505,f1507])).
fof(f27462,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | $spl35),
  inference(cnf_transformation,[],[f27462_D])).
fof(f27462_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f27467,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK24('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl38),
  inference(cnf_transformation,[],[f27467_D])).
fof(f27467_D,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK24('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f27465,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK24('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | $spl4),
  inference(forward_demodulation,[],[f26051,f1507])).
fof(f26051,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK24('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl4),
  inference(superposition,[],[f1604,f1507])).
fof(f1604,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f1108,f1514])).
fof(f1108,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f761])).
fof(f761,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK24(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24])],[f760])).
fof(f760,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f759])).
fof(f759,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(nnf_transformation,[],[f414])).
fof(f414,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f413])).
fof(f413,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f113])).
fof(f113,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.quantHeuristics.LIST_LENGTH_|49||split|0')).
fof(f27464,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl36),
  inference(cnf_transformation,[],[f27464_D])).
fof(f27464_D,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f27460,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | $spl4),
  inference(forward_demodulation,[],[f26104,f1507])).
fof(f26104,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK25('const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)),sK13)),s('type.list.list'(sK13),'const.list.NIL_0'))) | $spl4),
  inference(superposition,[],[f1606,f1507])).
fof(f1606,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(forward_demodulation,[],[f1110,f1514])).
fof(f1110,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f764])).
fof(f764,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X1,X0)),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25])],[f763])).
fof(f763,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f762])).
fof(f762,plain,(
  ! [X0,X1] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))) & (! [X2] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(nnf_transformation,[],[f416])).
fof(f416,plain,(
  ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(flattening,[],[f415])).
fof(f415,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X2] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0'))))),
  inference(rectify,[],[f112])).
fof(f112,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ? [X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),'const.list.NIL_0'))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.quantHeuristics.LIST_LENGTH_|49||split|1')).
fof(f27413,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f27412,f1517])).
fof(f1517,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f930,f919])).
fof(f930,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f697])).
fof(f697,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f49])).
fof(f49,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.NOT_CLAUSES|split|1')).
fof(f27412,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f27358,f1828])).
fof(f1828,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1),
  inference(unit_resulting_resolution,[],[f1753,f1006])).
fof(f1006,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f703])).
fof(f703,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f337])).
fof(f337,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f336])).
fof(f336,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.EQ_CLAUSES|split|2')).
fof(f1753,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl1),
  inference(forward_demodulation,[],[f1504,f1514])).
fof(f27358,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl4),
  inference(unit_resulting_resolution,[],[f1507,f1667])).
fof(f1667,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(backward_demodulation,[],[f1204,f1611])).
fof(f1611,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(forward_demodulation,[],[f1117,f1514])).
fof(f1117,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f769])).
fof(f21392,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0')))) | $spl29),
  inference(cnf_transformation,[],[f21392_D])).
fof(f21392_D,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0')))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f21405,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.HD_0',bool))))) | $spl32),
  inference(cnf_transformation,[],[f21405_D])).
fof(f21405_D,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.HD_0',bool))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f21403,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.HD_0',bool))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f21386,f1088])).
fof(f1088,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0,X1] : s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f389])).
fof(f389,plain,(
  ! [X0] : ! [X1] : s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f225])).
fof(f225,axiom,(
  ! [X6] : ! [X41] : s(X6,'const.list.HD_1'(s('type.list.list'(X6),X41))) = s(X6,happ(s(fun('type.list.list'(X6),X6),'const.list.HD_0'),s('type.list.list'(X6),X41)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','ARITY_0_1_const.list.HD')).
fof(f21386,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK22('const.list.HD_0',bool)))))),
  inference(superposition,[],[f1491,f1088])).
fof(f1491,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK22(X1,X0)))))) )),
  inference(condensation,[],[f1095])).
fof(f1095,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) | p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK22(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f753])).
fof(f753,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),sK22(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK23(X1,X0)),s('type.list.list'(X0),sK22(X1,X0)))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23])],[f752])).
fof(f752,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X3] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X3)))) & ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))) | ! [X2] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f641])).
fof(f641,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f640])).
fof(f640,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) | ? [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) & ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) | ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(ennf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f399])).
fof(f399,plain,(
  ! [X0] : ! [X1] : ((p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.NIL_0')))) & ! [X2] : (p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X2)))) => ! [X3] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))))) => ! [X4] : p(s(bool,happ(s(fun('type.list.list'(X0),bool),X1),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f204])).
fof(f204,axiom,(
  ! [X6] : ! [X20] : ((p(s(bool,happ(s(fun('type.list.list'(X6),bool),X20),s('type.list.list'(X6),'const.list.NIL_0')))) & ! [X7] : (p(s(bool,happ(s(fun('type.list.list'(X6),bool),X20),s('type.list.list'(X6),X7)))) => ! [X14] : p(s(bool,happ(s(fun('type.list.list'(X6),bool),X20),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X7)))))))) => ! [X7] : p(s(bool,happ(s(fun('type.list.list'(X6),bool),X20),s('type.list.list'(X6),X7)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.rich_list.rich_list_|48|_prove_ltb')).
fof(f21394,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool))))) | $spl30),
  inference(cnf_transformation,[],[f21394_D])).
fof(f21394_D,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f21390,plain,(
  p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f21389,f15859])).
fof(f15859,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X0),X1)))) )),
  inference(forward_demodulation,[],[f15641,f1088])).
fof(f15641,plain,(
  ( ! [X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(X0),X1))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.HD_0'),s('type.list.list'(X0),X1)))) )),
  inference(superposition,[],[f1130,f1541])).
fof(f1541,plain,(
  ( ! [X0] : (s(fun('type.list.list'(X0),X0),'const.list.HD_0') = s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f961,f921])).
fof(f961,plain,(
  ( ! [X0] : (s(fun('type.list.list'(X0),X0),'const.list.HD_0') = s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f295])).
fof(f295,plain,(
  ! [X0] : s(fun('type.list.list'(X0),X0),'const.list.HD_0') = s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f224])).
fof(f224,axiom,(
  ! [X6] : s(fun('type.list.list'(X6),X6),'const.list.HD_0') = s(fun('type.list.list'(X6),X6),'const.list.EL_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.list.EL_restricted|split|0')).
fof(f1130,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f443])).
fof(f443,plain,(
  ! [X0,X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f442])).
fof(f442,plain,(
  ! [X0] : ! [X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s(X0,happ(s(fun('type.list.list'(X0),X0),'const.list.EL_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f226])).
fof(f226,axiom,(
  ! [X6] : ! [X41,X42] : s(X6,'const.list.EL_2'(s('type.num.num',X41),s('type.list.list'(X6),X42))) = s(X6,happ(s(fun('type.list.list'(X6),X6),'const.list.EL_1'(s('type.num.num',X41))),s('type.list.list'(X6),X42)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','ARITY_1_2_const.list.EL')).
fof(f21389,plain,(
  p(s(bool,'const.list.EL_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool))))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0'))))),
  inference(forward_demodulation,[],[f21388,f1130])).
fof(f21388,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool)))))),
  inference(forward_demodulation,[],[f21376,f1088])).
fof(f21376,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),sK22('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),bool)))))),
  inference(superposition,[],[f1491,f1541])).
fof(f18239,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | $spl27),
  inference(cnf_transformation,[],[f18239_D])).
fof(f18239_D,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f18228,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X3))))) ) | $spl20),
  inference(cnf_transformation,[],[f18228_D])).
fof(f18228_D,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X3))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f18237,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f18236,f15859])).
fof(f18236,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(bool),X0)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14852,f1130])).
fof(f14852,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f14842,f1088])).
fof(f14842,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK28('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),X0))))) )),
  inference(superposition,[],[f1118,f1541])).
fof(f1118,plain,(
  ( ! [X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK28(X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f772])).
fof(f772,plain,(
  ! [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK28(X1,X0)))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK29(X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28,sK29])],[f771])).
fof(f771,plain,(
  ! [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(rectify,[],[f770])).
fof(f770,plain,(
  ! [X0,X1] : ((! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))))),
  inference(nnf_transformation,[],[f643])).
fof(f643,plain,(
  ! [X0,X1] : (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(ennf_transformation,[],[f424])).
fof(f424,plain,(
  ! [X0,X1] : (~! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(flattening,[],[f423])).
fof(f423,plain,(
  ! [X0] : ! [X1] : (~! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) <=> ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f93])).
fof(f93,axiom,(
  ! [X6] : ! [X20] : (~! [X14] : p(s(bool,happ(s(fun(X6,bool),X20),s(X6,X14)))) <=> ? [X14] : ~p(s(bool,happ(s(fun(X6,bool),X20),s(X6,X14)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.NOT_FORALL_THM')).
fof(f18235,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.HD_0','type.list.list'(bool)))))) | $spl25),
  inference(cnf_transformation,[],[f18235_D])).
fof(f18235_D,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.HD_0','type.list.list'(bool)))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f18233,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X3)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.HD_0','type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14851,f1088])).
fof(f14851,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK28('const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X3))))) )),
  inference(superposition,[],[f1118,f1088])).
fof(f18232,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | $spl23),
  inference(cnf_transformation,[],[f18232_D])).
fof(f18232_D,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f18230,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f18229,f15859])).
fof(f18229,plain,(
  ( ! [X0] : (p(s(bool,'const.list.EL_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.list.list'(bool),X0)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14887,f1130])).
fof(f14887,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),X0))))) )),
  inference(forward_demodulation,[],[f14877,f1088])).
fof(f14877,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK29('const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),X0))))) )),
  inference(superposition,[],[f1119,f1541])).
fof(f1119,plain,(
  ( ! [X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK29(X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f772])).
fof(f18227,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.HD_0','type.list.list'(bool)))))) | $spl19),
  inference(cnf_transformation,[],[f18227_D])).
fof(f18227_D,plain,(
  ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.HD_0','type.list.list'(bool)))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f18225,plain,(
  ( ! [X3] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X3)))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.HD_0','type.list.list'(bool))))))) )),
  inference(forward_demodulation,[],[f14886,f1088])).
fof(f14886,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK29('const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),X3))))) )),
  inference(superposition,[],[f1119,f1088])).
fof(f18221,plain,(
  $false | ($spl4 | $spl10)),
  inference(subsumption_resolution,[],[f18220,f18219])).
fof(f18219,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK14) | $spl4),
  inference(subsumption_resolution,[],[f18218,f1517])).
fof(f18218,plain,(
  p(s(bool,'F_0')) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK14) | $spl4),
  inference(forward_demodulation,[],[f18217,f1539])).
fof(f1539,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f957,f921])).
fof(f957,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f291])).
fof(f291,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f134])).
fof(f134,axiom,(
  ! [X11] : s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.numeral.numeral_distrib|split|23')).
fof(f18217,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK14) | $spl4),
  inference(forward_demodulation,[],[f18216,f12122])).
fof(f12122,plain,(
  ( ! [X2,X3] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X3),s('type.num.num',X2))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f1673,f1204])).
fof(f1673,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(forward_demodulation,[],[f1205,f1202])).
fof(f1202,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f515])).
fof(f515,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X10,X11] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.GREATER_DEF')).
fof(f1205,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f518])).
fof(f518,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1)))),
  inference(rectify,[],[f169])).
fof(f169,axiom,(
  ! [X10,X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.LESS_EQ')).
fof(f18216,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK15)))))))) | s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK14) | $spl4),
  inference(forward_demodulation,[],[f12626,f1129])).
fof(f1129,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f441])).
fof(f441,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f440])).
fof(f440,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f167])).
fof(f167,axiom,(
  ! [X6] : ! [X27,X15] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X27),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.list.LENGTH|split|1')).
fof(f12626,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') != s('type.list.list'(sK13),sK14) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)))))))) | $spl4),
  inference(superposition,[],[f1599,f1507])).
fof(f1599,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(forward_demodulation,[],[f1105,f921])).
fof(f1105,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f757])).
fof(f757,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f410])).
fof(f410,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f409])).
fof(f409,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f18220,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),sK14) | ($spl4 | $spl10)),
  inference(backward_demodulation,[],[f10555,f1507])).
fof(f18198,plain,(
  $false | ($spl13 | $spl14)),
  inference(subsumption_resolution,[],[f17810,f12791])).
fof(f17810,plain,(
  ( ! [X0] : (p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'(bool),X0))))))) ) | $spl13),
  inference(unit_resulting_resolution,[],[f1125,f10561,f1243])).
fof(f1243,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f821])).
fof(f821,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(flattening,[],[f820])).
fof(f820,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & (((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0)))) | s(bool,X0) = s(bool,X1)))),
  inference(nnf_transformation,[],[f652])).
fof(f652,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0)))))),
  inference(ennf_transformation,[],[f550])).
fof(f550,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) => p(s(bool,X1))) & (p(s(bool,X1)) => p(s(bool,X0)))))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X17,X18] : (s(bool,X17) = s(bool,X18) <=> ((p(s(bool,X17)) => p(s(bool,X18))) & (p(s(bool,X18)) => p(s(bool,X17)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.EQ_IMP_THM')).
fof(f10561,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.ZERO_0')))) | $spl13),
  inference(unit_resulting_resolution,[],[f10557,f1568])).
fof(f1568,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1567,f921])).
fof(f1567,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1566,f1560])).
fof(f1560,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f1559,f936])).
fof(f936,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f105])).
fof(f105,axiom,(
  ! [X14] : s('type.num.num',X14) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.NUMERAL_DEF')).
fof(f1559,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(forward_demodulation,[],[f983,f921])).
fof(f983,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f132])).
fof(f132,axiom,(
  ! [X11] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X11))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X11))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.numeral.numeral_distrib|split|24')).
fof(f1566,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f989,f921])).
fof(f989,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f323])).
fof(f323,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f101])).
fof(f101,axiom,(
  ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.arithmetic.LESS_|48|_CASES')).
fof(f1125,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f432])).
fof(f432,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.list.HD_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f228])).
fof(f228,axiom,(
  ! [X6] : ! [X27,X15] : s(X6,X27) = s(X6,'const.list.HD_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X27),s('type.list.list'(X6),X15)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.list.HD')).
fof(f7665,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.HD_0')))) | $spl8),
  inference(cnf_transformation,[],[f7665_D])).
fof(f7665_D,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.HD_0')))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f12798,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK30(X3,'const.list.HD_0','type.list.list'(bool))))))) ) | $spl16),
  inference(cnf_transformation,[],[f12798_D])).
fof(f12798_D,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK30(X3,'const.list.HD_0','type.list.list'(bool))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f12787,plain,(
  ( ! [X3] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK30(X3,'const.list.HD_0','type.list.list'(bool)))))) | p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.HD_0'))))) )),
  inference(superposition,[],[f1136,f1088])).
fof(f1136,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK30(X2,X1,X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f775])).
fof(f775,plain,(
  ! [X0,X1,X2] : ((s(X0,X2) = s(X0,sK30(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK30(X2,X1,X0)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK30])],[f645])).
fof(f645,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(ennf_transformation,[],[f453])).
fof(f453,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(flattening,[],[f452])).
fof(f452,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(rectify,[],[f199])).
fof(f199,axiom,(
  ! [X6] : ! [X20,X15] : (! [X14] : (s(X6,X14) = s(X6,X15) => p(s(bool,happ(s(fun(X6,bool),X20),s(X6,X14))))) => p(s(bool,'|dollar|exists_1'(s(fun(X6,bool),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.bool.JRH_INDUCT_UTIL')).
fof(f12791,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl14),
  inference(cnf_transformation,[],[f12791_D])).
fof(f12791_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f12790,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.HD_0')))) | ~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f12789,f1541])).
fof(f12789,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),X0)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) ) | $spl6),
  inference(forward_demodulation,[],[f12788,f7663])).
fof(f12788,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.HD_1'(s('type.list.list'(bool),sK30(X0,'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(forward_demodulation,[],[f12778,f1088])).
fof(f12778,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.list.list'(bool),bool),'const.list.HD_0'),s('type.list.list'(bool),sK30(X0,'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))))) | p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) )),
  inference(superposition,[],[f1136,f1541])).
fof(f10555,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) | $spl10),
  inference(cnf_transformation,[],[f10555_D])).
fof(f10555_D,plain,(
  s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f10557,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | $spl13),
  inference(cnf_transformation,[],[f10557_D])).
fof(f10557_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f10538,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))) | s('type.list.list'(sK13),'const.list.NIL_0') = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(superposition,[],[f1596,f1507])).
fof(f1596,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f1100,f921])).
fof(f1100,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f755])).
fof(f755,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f406])).
fof(f406,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f405])).
fof(f405,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f210])).
fof(f210,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.list.LENGTH_NIL_SYM')).
fof(f7663,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK30(X0,'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))) ) | $spl6),
  inference(cnf_transformation,[],[f7663_D])).
fof(f7663_D,plain,(
  ( ! [X0] : (s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK30(X0,'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f7656,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun('type.list.list'(bool),bool),'const.list.HD_0')))) | s('type.list.list'(bool),X0) = s('type.list.list'(bool),sK30(X0,'const.list.EL_1'(s('type.num.num','const.arithmetic.ZERO_0')),'type.list.list'(bool)))) )),
  inference(superposition,[],[f1135,f1541])).
fof(f1135,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK30(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f775])).
fof(f1503,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl0),
  inference(cnf_transformation,[],[f1503_D])).
fof(f1503_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1507,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) | $spl4),
  inference(cnf_transformation,[],[f1507_D])).
fof(f1507_D,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f917,plain,(
  s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15))) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f696])).
fof(f696,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(sK13),sK14) = s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,sK16),s('type.list.list'(sK13),sK15)))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ! [X2,X3] : s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),X2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15,sK16])],[f695])).
fof(f695,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f694])).
fof(f694,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | ! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f618])).
fof(f618,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <~> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|5','thm.quantHeuristics.LIST_LENGTH_|49||split|5')).
fof(f1504,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(cnf_transformation,[],[f1504_D])).
fof(f1504_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1505,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),X2)))) ) | $spl2),
  inference(cnf_transformation,[],[f1505_D])).
fof(f1505_D,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),X2)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f918,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK13),sK14) != s('type.list.list'(sK13),'const.list.CONS_2'(s(sK13,X3),s('type.list.list'(sK13),X2))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK13),sK14))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f696])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 686
% Passive clauses: 4888
% Generated clauses: 33678
% Final active clauses: 562
% Final passive clauses: 3345
% Input formulas: 261
% Initial clauses: 557
% 
% Duplicate literals: 9
% Trivial inequalities: 38
% Fw subsumption resolutions: 307
% Fw demodulations: 8751
% Bw demodulations: 246
% Condensations: 21
% Global subsumptions: 1
% 
% Simple tautologies: 144
% Equational tautologies: 45
% Forward subsumptions: 19129
% Fw demodulations to eq. taut.: 325
% Bw demodulations to eq. taut.: 7
% 
% Unit resulting resolution: 6636
% Factoring: 2
% Forward superposition: 10161
% Backward superposition: 6791
% Self superposition: 103
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 4925
% SAT solver unit clauses: 1218
% SAT solver binary clauses: 3188
% 
% Sat splits: 14
% Sat splitting refutations: 6
% 
% Memory used [KB]: 28016
% Time elapsed: 1.163 s
% ------------------------------
% ------------------------------
% Success in time 2.5 s
