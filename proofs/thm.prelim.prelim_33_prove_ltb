Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.prelim
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.prelim
% SZS output start Proof for thm.prelim
fof(f4755,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4754,f224,f404,f402,f400,f4691,f4725])).
fof(f4725,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f402,f226])).
fof(f226,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X7),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X8),s('type.list.list'(sK12),X9)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK14),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))) | s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK17),s('type.list.list'(sK12),sK18))))))) | s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK19),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK22),s('type.list.list'(sK12),sK23))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK20),s('type.list.list'(sK12),sK21)))))))) & ! [X10,X11] : s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X10),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),X11),s('type.list.list'(sK12),'const.list.NIL_0'))))) & ! [X7,X8,X9] : s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X7),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X8),s('type.list.list'(sK12),X9))))))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X2),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X3),s('type.list.list'(sK12),X4))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X5),s('type.list.list'(sK12),X6)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X20,X21] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X21),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X17),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X19))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X16))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14)))))))) & ! [X10,X11] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X11),s('type.list.list'(X0),'const.list.NIL_0'))))) & ! [X7,X8,X9] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X7),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))) & ! [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X10,X11] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X11),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X7,X8,X9] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X7),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) & ! [X20,X21] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X21),s('type.list.list'(X0),'const.list.NIL_0'))))) & ! [X17,X18,X19] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X17),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X19))))))) & ! [X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X16))))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X10,X11] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X11),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X7,X8,X9] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X7),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) & (! [X20,X21] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X21),s('type.list.list'(X0),'const.list.NIL_0'))))) & ! [X17,X18,X19] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X17),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X19))))))) & ! [X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) != s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X16)))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X10,X11] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X11),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X7,X8,X9] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X7),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) => (? [X20,X21] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X21),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X17),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X19))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X16)))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X10,X11] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X10),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X11),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X7,X8,X9] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X7),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))) | ? [X2,X3,X4,X5,X6] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X2),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))))) => (? [X20,X21] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X20),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),X21),s('type.list.list'(X0),'const.list.NIL_0'))))) | ? [X17,X18,X19] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X17),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X19))))))) | ? [X12,X13,X14,X15,X16] : s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),X1) = s('type.pair.prod'(fun(X0,fun(X0,bool)),'type.pair.prod'('type.list.list'(X0),'type.list.list'(X0))),'const.pair.,_2'(s(fun(X0,fun(X0,bool)),X12),s('type.pair.prod'('type.list.list'(X0),'type.list.list'(X0)),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),X16)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0'))))) | ? [X8,X10,X11] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X11))))))) | ? [X8,X12,X13,X14,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X9))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13)))))))) => (? [X8,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0'))))) | ? [X8,X10,X11] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X11))))))) | ? [X8,X14,X9,X12,X13] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X9))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0'))))) | ? [X8,X10,X11] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X11))))))) | ? [X8,X12,X13,X14,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X9))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13)))))))) => (? [X8,X9] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),'const.list.NIL_0'))))) | ? [X8,X10,X11] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.NIL_0'),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X11))))))) | ? [X8,X14,X9,X12,X13] : s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),X7) = s('type.pair.prod'(fun(X6,fun(X6,bool)),'type.pair.prod'('type.list.list'(X6),'type.list.list'(X6))),'const.pair.,_2'(s(fun(X6,fun(X6,bool)),X8),s('type.pair.prod'('type.list.list'(X6),'type.list.list'(X6)),'const.pair.,_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),X9))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X13)))))))))),
  file('thm.prelim.prelim_33_prove_ltb','thm.prelim.prelim_33_prove_ltb')).
fof(f4691,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f400,f225])).
fof(f225,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X10),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),X11),s('type.list.list'(sK12),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f400,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK14),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))) | $spl0),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK14),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),sK15),s('type.list.list'(sK12),'const.list.NIL_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f402,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK17),s('type.list.list'(sK12),sK18))))))) | $spl2),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK17),s('type.list.list'(sK12),sK18))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f404,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK19),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK22),s('type.list.list'(sK12),sK23))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK20),s('type.list.list'(sK12),sK21))))))) | $spl4),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK19),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK22),s('type.list.list'(sK12),sK23))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK20),s('type.list.list'(sK12),sK21))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f224,plain,(
  s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK19),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK22),s('type.list.list'(sK12),sK23))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK20),s('type.list.list'(sK12),sK21))))))) | s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK16),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.NIL_0'),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK17),s('type.list.list'(sK12),sK18))))))) | s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) = s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),sK14),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),sK15),s('type.list.list'(sK12),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f139])).
fof(f4754,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f404,f227])).
fof(f227,plain,(
  ( ! [X6,X4,X2,X5,X3] : (s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),sK13) != s('type.pair.prod'(fun(sK12,fun(sK12,bool)),'type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12))),'const.pair.,_2'(s(fun(sK12,fun(sK12,bool)),X2),s('type.pair.prod'('type.list.list'(sK12),'type.list.list'(sK12)),'const.pair.,_2'(s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X3),s('type.list.list'(sK12),X4))),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X5),s('type.list.list'(sK12),X6)))))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.prelim
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 374
% Passive clauses: 1551
% Generated clauses: 4524
% Final active clauses: 374
% Final passive clauses: 989
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 153
% Trivial inequalities: 29
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2328
% 
% Binary resolution: 2810
% Factoring: 772
% Forward superposition: 174
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 101
% Split components: 204
% SAT solver clauses: 193
% SAT solver unit clauses: 9
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 1
% 
% Sat splits: 101
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 192
% TWLsolver calls for satisfiability: 164
% 
% Memory used [KB]: 2430
% Time elapsed: 0.116 s
% ------------------------------
% ------------------------------
% Success in time 0.119 s
