Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.int_arith
% (72284)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 101
% Passive clauses: 2408
% Generated clauses: 15319
% Final active clauses: 89
% Final passive clauses: 2081
% Input formulas: 16
% Initial clauses: 36
% 
% Duplicate literals: 763
% Trivial inequalities: 180
% Fw subsumption resolutions: 2939
% Fw demodulations: 1081
% Bw demodulations: 9
% 
% Simple tautologies: 276
% Equational tautologies: 96
% Forward subsumptions: 6161
% 
% Binary resolution: 234
% Factoring: 2
% Forward superposition: 4707
% Backward superposition: 4687
% Self superposition: 324
% Equality factoring: 242
% Equality resolution: 24
% 
% Split clauses: 598
% Split components: 1200
% SAT solver clauses: 1616
% SAT solver unit clauses: 8
% SAT solver binary clauses: 166
% 
% Sat splits: 598
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1614
% TWLsolver calls for satisfiability: 209
% 
% Memory used [KB]: 7931
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f6009,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5987,f62,f106,f107,f109,f820,f801,f137,f139,f70,f114,f787,f99,f695,f59,f100,f791,f140,f142,f60,f98,f143,f145,f58,f102,f94,f737,f748,f84,f123,f785,f57,f104,f69,f113,f83,f118,f211,f219,f76,f117,f3784,f3832,f2874,f2872,f487,f497,f79,f116,f82,f119,f4031,f4081,f3060,f3058,f543,f551,f80,f121,f4166,f4167,f61,f96,f95,f595,f607,f81,f120])).
fof(f120,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,X0)),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl28),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,X0)),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f81,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,X0)),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ((p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X1,X0))))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,X0)),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',sK3(X1,X0))))))))) & (! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ((p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ? [X3] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X3)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X3)))))))) & (! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))),
  inference(rectify,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ((p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) & (! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : (~s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) <=> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X15,X7] : (~s('type.integer.int',X15) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X15),s('type.integer.int',X7)))) <=> ? [X8] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X15))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X15),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8)))))))))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.int_arith.NOT_INT_DIVIDES')).
fof(f607,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,'const.integer.int_of_num_1'(s('type.num.num',X0)))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))) ) | $spl152),
  inference(cnf_transformation,[],[f607_D])).
fof(f607_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,'const.integer.int_of_num_1'(s('type.num.num',X0)))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f595,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK3(X1,'const.integer.int_of_num_1'(s('type.num.num',X0)))),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))) ) | ($spl16 | $spl28)),
  inference(superposition,[],[f120,f113])).
fof(f95,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | $spl0),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f96,plain,(
  ( ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X2))))))) ) | $spl2),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ( ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X2))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f61,plain,(
  ( ! [X2] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X2)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))))))) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',X2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f44])).
fof(f44,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ? [X3] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X3)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X3),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X3)))))))) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(rectify,[],[f43])).
fof(f43,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & ((~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))) & (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) | ! [X2] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))))))))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ? [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) <~> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) <=> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X1)))) <=> ? [X2] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X7)))) <=> ? [X8] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) => (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int',X7)))) <=> ? [X8] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X8)))) & p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X8),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) & p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8)))))))))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.int_arith.NOT_INT_DIVIDES_POS')).
fof(f4167,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))))) ) | $spl486),
  inference(cnf_transformation,[],[f4167_D])).
fof(f4167_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))))) ) <=> ~$spl486),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl486])])).
fof(f4166,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',X0)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))))) ) | ($spl2 | $spl152 | $spl177)),
  inference(subsumption_resolution,[],[f4149,f694])).
fof(f694,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | $spl177),
  inference(cnf_transformation,[],[f694_D])).
fof(f694_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) <=> ~$spl177),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl177])])).
fof(f4149,plain,(
  ( ! [X0] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',X0)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(X0,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))))) ) | ($spl2 | $spl152)),
  inference(resolution,[],[f607,f96])).
fof(f121,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X1,X0))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X1,X0))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f80,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X1,X0))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f551,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X6,X5))))) ) | $spl130),
  inference(cnf_transformation,[],[f551_D])).
fof(f551_D,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X6,X5))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f543,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(X6,X5))))) ) | ($spl20 | $spl30)),
  inference(resolution,[],[f121,f116])).
fof(f3058,plain,(
  ( ! [X6] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) ) | $spl376),
  inference(cnf_transformation,[],[f3058_D])).
fof(f3058_D,plain,(
  ( ! [X6] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) ) <=> ~$spl376),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl376])])).
fof(f3060,plain,(
  ( ! [X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) ) | ($spl15 | $spl130 | $spl177 | $spl206)),
  inference(subsumption_resolution,[],[f3059,f694])).
fof(f3059,plain,(
  ( ! [X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) ) | ($spl15 | $spl130 | $spl206)),
  inference(subsumption_resolution,[],[f3035,f109])).
fof(f3035,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))) ) | ($spl130 | $spl206)),
  inference(superposition,[],[f551,f801])).
fof(f4081,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))) | $spl466),
  inference(cnf_transformation,[],[f4081_D])).
fof(f4081_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))) <=> ~$spl466),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl466])])).
fof(f4031,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))) | ($spl12 | $spl376)),
  inference(resolution,[],[f3058,f106])).
fof(f119,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',sK3(X1,X0))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',sK3(X1,X0))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f82,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',sK3(X1,X0))))))) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f116,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(cnf_transformation,[],[f116_D])).
fof(f116_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f79,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10] : ((p(s(bool,X9)) => p(s(bool,X10))) => ((p(s(bool,X10)) => p(s(bool,X9))) => s(bool,X9) = s(bool,X10)))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.bool.IMP_ANTISYM_AX')).
fof(f497,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',sK3(X6,X5))))))) ) | $spl108),
  inference(cnf_transformation,[],[f497_D])).
fof(f497_D,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',sK3(X6,X5))))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f487,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int',X6)))) | s('type.integer.int',X5) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int',X5),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',sK3(X6,X5))))))) ) | ($spl20 | $spl26)),
  inference(resolution,[],[f119,f116])).
fof(f2872,plain,(
  ( ! [X6] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) ) | $spl362),
  inference(cnf_transformation,[],[f2872_D])).
fof(f2872_D,plain,(
  ( ! [X6] : (~p(s(bool,X6)) | s(bool,X6) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f2874,plain,(
  ( ! [X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) ) | ($spl15 | $spl108 | $spl177 | $spl206)),
  inference(subsumption_resolution,[],[f2873,f694])).
fof(f2873,plain,(
  ( ! [X7] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) ) | ($spl15 | $spl108 | $spl206)),
  inference(subsumption_resolution,[],[f2847,f109])).
fof(f2847,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) ) | ($spl108 | $spl206)),
  inference(superposition,[],[f497,f801])).
fof(f3832,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))) | $spl422),
  inference(cnf_transformation,[],[f3832_D])).
fof(f3832_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))) <=> ~$spl422),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl422])])).
fof(f3784,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0)))))))) | ($spl12 | $spl362)),
  inference(resolution,[],[f2872,f106])).
fof(f117,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) | $spl22),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f76,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f39])).
fof(f219,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl56),
  inference(cnf_transformation,[],[f219_D])).
fof(f219_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f211,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl15 | $spl22)),
  inference(resolution,[],[f117,f109])).
fof(f118,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl24),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f83,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2)))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',X2)))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f52])).
fof(f113,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | $spl16),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f69,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6)))))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.integer.INT_ABS_NUM')).
fof(f104,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) | $spl11),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f57,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0)),
  inference(cnf_transformation,[],[f45])).
fof(f785,plain,(
  $false | ($spl11 | $spl190)),
  inference(subsumption_resolution,[],[f784,f104])).
fof(f784,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | $spl190),
  inference(equality_resolution,[],[f748])).
fof(f123,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) | $spl34),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f84,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : ((s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X16,X6] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X16))) <=> s('type.num.num',X6) = s('type.num.num',X16))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.integer.INT_INJ')).
fof(f748,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) | s('type.num.num',sK0) = s('type.num.num',X0)) ) | $spl190),
  inference(cnf_transformation,[],[f748_D])).
fof(f748_D,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) | s('type.num.num',sK0) = s('type.num.num',X0)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f737,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))) | s('type.num.num',sK0) = s('type.num.num',X0)) ) | ($spl34 | $spl176)),
  inference(superposition,[],[f123,f695])).
fof(f94,plain,(
  ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | $spl1),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f102,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) | $spl8),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f58,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f45])).
fof(f145,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2))) | $spl46),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f143,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2))) | ($spl8 | $spl15 | $spl18)),
  inference(subsumption_resolution,[],[f131,f109])).
fof(f131,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2))) | ($spl8 | $spl18)),
  inference(superposition,[],[f102,f114])).
fof(f98,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))))) | $spl4),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f60,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f45])).
fof(f142,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))))) | $spl44),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f140,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))))) | ($spl4 | $spl15 | $spl18)),
  inference(subsumption_resolution,[],[f130,f109])).
fof(f130,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))))) | ($spl4 | $spl18)),
  inference(superposition,[],[f98,f114])).
fof(f791,plain,(
  $false | ($spl1 | $spl12 | $spl42)),
  inference(subsumption_resolution,[],[f790,f106])).
fof(f790,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl42)),
  inference(forward_demodulation,[],[f94,f139])).
fof(f100,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl6),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f59,plain,(
  p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))))),
  inference(cnf_transformation,[],[f45])).
fof(f695,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | $spl176),
  inference(cnf_transformation,[],[f695_D])).
fof(f695_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f99,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | $spl7),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f787,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl12 | $spl16 | $spl24 | $spl44 | $spl46)),
  inference(subsumption_resolution,[],[f786,f106])).
fof(f786,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl12 | $spl16 | $spl24 | $spl44 | $spl46)),
  inference(forward_demodulation,[],[f697,f145])).
fof(f697,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl12 | $spl16 | $spl24 | $spl44)),
  inference(forward_demodulation,[],[f696,f113])).
fof(f696,plain,(
  ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl12 | $spl24 | $spl44)),
  inference(subsumption_resolution,[],[f656,f106])).
fof(f656,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int',sK2),s('type.integer.int','const.integer.int_sub_2'(s('type.integer.int','const.integer.ABS_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.integer.int',sK2)))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))) | ($spl24 | $spl44)),
  inference(superposition,[],[f118,f142])).
fof(f114,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f70,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS',aHL_BOOL_CASES)).
fof(f139,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) | $spl42),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f137,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) | ($spl0 | $spl15 | $spl18)),
  inference(subsumption_resolution,[],[f129,f109])).
fof(f129,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) | ($spl0 | $spl18)),
  inference(superposition,[],[f95,f114])).
fof(f801,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) | $spl206),
  inference(cnf_transformation,[],[f801_D])).
fof(f801_D,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f820,plain,(
  s(bool,'F_0') = s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1))) | ($spl1 | $spl56)),
  inference(resolution,[],[f94,f219])).
fof(f109,plain,(
  ~p(s(bool,'F_0')) | $spl15),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f107,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f65,f62])).
fof(f65,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f12])).
fof(f12,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS','thm.bool.NOT_CLAUSES|split|1')).
fof(f106,plain,(
  p(s(bool,'T_0')) | $spl12),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f62,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.int_arith.NOT_INT_DIVIDES_POS',aHL_TRUTH)).
fof(f5987,plain,(
  $false | ($spl12 | $spl15 | $spl206 | $spl422 | $spl466 | $spl486)),
  inference(subsumption_resolution,[],[f5986,f106])).
fof(f5986,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl15 | $spl206 | $spl422 | $spl466 | $spl486)),
  inference(forward_demodulation,[],[f5985,f3832])).
fof(f5985,plain,(
  ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) | ($spl12 | $spl15 | $spl206 | $spl466 | $spl486)),
  inference(subsumption_resolution,[],[f5984,f109])).
fof(f5984,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) | ($spl12 | $spl206 | $spl466 | $spl486)),
  inference(forward_demodulation,[],[f5983,f801])).
fof(f5983,plain,(
  p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) | ($spl12 | $spl466 | $spl486)),
  inference(subsumption_resolution,[],[f5951,f106])).
fof(f5951,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int',sK1)))) | ~p(s(bool,'const.integer.int_divides_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK3(sK1,'const.integer.int_of_num_1'(s('type.num.num',sK0))))))))) | ($spl466 | $spl486)),
  inference(superposition,[],[f4167,f4081])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 110
% Passive clauses: 279
% Generated clauses: 5942
% Final active clauses: 90
% Final passive clauses: 125
% Input formulas: 16
% Initial clauses: 36
% 
% Duplicate literals: 383
% Trivial inequalities: 48
% Fw subsumption resolutions: 602
% Fw demodulations: 694
% Bw demodulations: 51
% Condensations: 379
% Global subsumptions: 5
% 
% Simple tautologies: 108
% Equational tautologies: 32
% Forward subsumptions: 2861
% 
% Binary resolution: 196
% Factoring: 1
% Forward superposition: 1728
% Backward superposition: 1320
% Self superposition: 80
% Equality factoring: 52
% Equality resolution: 18
% 
% Split clauses: 59
% Split components: 122
% SAT solver clauses: 584
% SAT solver unit clauses: 43
% SAT solver binary clauses: 22
% SAT solver learnt clauses: 12
% SAT solver learnt literals: 1
% 
% Sat splits: 59
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 562
% TWLsolver calls for satisfiability: 267
% 
% Memory used [KB]: 4733
% Time elapsed: 0.194 s
% ------------------------------
% ------------------------------
% Success in time 0.794 s
