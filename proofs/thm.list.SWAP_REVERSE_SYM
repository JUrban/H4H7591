Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3988,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3985,f206,f366,f364,f3978,f205,f365,f363])).
fof(f363,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) | $spl0),
  inference(cnf_transformation,[],[f363_D])).
fof(f363_D,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f365,plain,(
  s('type.list.list'(sK12),sK13) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) | $spl2),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  s('type.list.list'(sK12),sK13) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f205,plain,(
  s('type.list.list'(sK12),sK13) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) | s('type.list.list'(sK12),sK13) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14)))) & (s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) | s('type.list.list'(sK12),sK13) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f138])).
fof(f138,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))) & (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f93])).
fof(f93,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <~> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))))),
  file('thm.list.SWAP_REVERSE_SYM','thm.list.SWAP_REVERSE_SYM')).
fof(f3978,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f3974,f366])).
fof(f3974,plain,(
  s('type.list.list'(sK12),sK13) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) | $spl0),
  inference(superposition,[],[f3926,f363])).
fof(f3926,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(equality_resolution,[],[f249])).
fof(f249,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))) & (s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : ! [X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))))),
  file('thm.list.SWAP_REVERSE_SYM','thm.list.SWAP_REVERSE')).
fof(f364,plain,(
  s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) | $spl1),
  inference(cnf_transformation,[],[f364_D])).
fof(f364_D,plain,(
  s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f366,plain,(
  s('type.list.list'(sK12),sK13) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) | $spl3),
  inference(cnf_transformation,[],[f366_D])).
fof(f366_D,plain,(
  s('type.list.list'(sK12),sK13) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f206,plain,(
  s('type.list.list'(sK12),sK13) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13)))),
  inference(cnf_transformation,[],[f139])).
fof(f3985,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f3980,f364])).
fof(f3980,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.REVERSE_1'(s('type.list.list'(sK12),sK13))) | $spl2),
  inference(superposition,[],[f3926,f365])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 313
% Passive clauses: 1164
% Generated clauses: 3777
% Final active clauses: 311
% Final passive clauses: 703
% Input formulas: 36
% Initial clauses: 154
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 254
% Fw demodulations: 5
% 
% Simple tautologies: 136
% Equational tautologies: 21
% Forward subsumptions: 2042
% 
% Binary resolution: 2281
% Factoring: 706
% Forward superposition: 109
% Backward superposition: 67
% Self superposition: 3
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 78
% Split components: 157
% SAT solver clauses: 155
% SAT solver unit clauses: 7
% SAT solver binary clauses: 32
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 78
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 153
% TWLsolver calls for satisfiability: 133
% 
% Memory used [KB]: 1791
% Time elapsed: 0.087 s
% ------------------------------
% ------------------------------
% Success in time 0.089 s
