Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f5207,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5206,f69,f120,f112,f1482,f72,f115,f71,f117,f70,f119,f113,f110,f123,f75,f125,f1716,f1713,f2168,f2162,f2107,f2106])).
fof(f2106,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl44),
  inference(cnf_transformation,[],[f2106_D])).
fof(f2106_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2107,plain,(
  ( ! [X4,X3] : (~p(s(bool,X3)) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f2092,f123])).
fof(f2092,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X3)) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',sK2))),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f307,f129])).
fof(f129,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))),
  inference(resolution,[],[f80,f68])).
fof(f68,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | ! [X5,X6] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',sK2))),s('type.num.num',X6))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK2)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X6)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f50])).
fof(f50,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X5,X6] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X2))),s('type.num.num',X6))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X2)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X6)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))))),
  inference(rectify,[],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4))))))))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) <~> ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) <~> ! [X3,X4] : ((s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2))))) | p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X2)))))) <=> ! [X3,X4] : ((s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2))))) => p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X4)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8)))))) <=> ! [X9,X10] : ((s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X8))))) => p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num',X8)))))) <=> ! [X9,X10] : ((s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X8))))) => p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X10)))))))),
  file('thm.arithmetic.MOD_P_UNIV','thm.arithmetic.MOD_P_UNIV')).
fof(f80,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.arithmetic.MOD_P_UNIV','thm.bool.EQ_CLAUSES|split|1')).
fof(f307,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) | ~p(s(bool,X7)) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X8),s('type.num.num',X6))),s('type.num.num',X6)))) )),
  inference(resolution,[],[f78,f107])).
fof(f107,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.arithmetic.MOD_P_UNIV','thm.bool.IMP_ANTISYM_AX')).
fof(f78,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => ! [X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num',X8))),s('type.num.num',X8))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X8))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X8))),s('type.num.num',X8))))))),
  file('thm.arithmetic.MOD_P_UNIV','thm.arithmetic.DIVISION')).
fof(f2162,plain,(
  ( ! [X33] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X33),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl50),
  inference(cnf_transformation,[],[f2162_D])).
fof(f2162_D,plain,(
  ( ! [X33] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X33),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2168,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | ($spl12 | $spl44)),
  inference(forward_demodulation,[],[f2167,f129])).
fof(f2167,plain,(
  ( ! [X48] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | ($spl12 | $spl44)),
  inference(subsumption_resolution,[],[f2145,f123])).
fof(f2145,plain,(
  ( ! [X48] : (~p(s(bool,'T_0')) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl44),
  inference(superposition,[],[f2106,f129])).
fof(f1713,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl32),
  inference(cnf_transformation,[],[f1713_D])).
fof(f1713_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1716,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | ($spl1 | $spl12)),
  inference(subsumption_resolution,[],[f1715,f123])).
fof(f1715,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | ($spl1 | $spl12)),
  inference(forward_demodulation,[],[f1706,f129])).
fof(f1706,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | ($spl1 | $spl12)),
  inference(superposition,[],[f113,f266])).
fof(f266,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f262,f123])).
fof(f262,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f197,f129])).
fof(f197,plain,(
  ( ! [X8,X7] : (~p(s(bool,X7)) | s(bool,X7) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) )),
  inference(resolution,[],[f107,f84])).
fof(f84,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.arithmetic.MOD_P_UNIV','thm.bool.EQ_CLAUSES|split|3')).
fof(f125,plain,(
  ~p(s(bool,'F_0')) | $spl15),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f75,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.MOD_P_UNIV',aHL_FALSITY)).
fof(f123,plain,(
  p(s(bool,'T_0')) | $spl12),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f110,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f102])).
fof(f102,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X15] : ! [X16] : (s(X15,X16) = s(X15,X16) <=> p(s(bool,'T_0')))),
  file('thm.arithmetic.MOD_P_UNIV','thm.bool.REFL_CLAUSE')).
fof(f113,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f119,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) | $spl6),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f70,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f51])).
fof(f117,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | $spl4),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f71,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f51])).
fof(f115,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4)))) | $spl3),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f72,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f51])).
fof(f1482,plain,(
  $false | ($spl0 | $spl3 | $spl4 | $spl6 | $spl12)),
  inference(subsumption_resolution,[],[f1473,f136])).
fof(f136,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4))) | $spl3),
  inference(resolution,[],[f115,f79])).
fof(f79,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f52])).
fof(f1473,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK4))) | ($spl0 | $spl4 | $spl6 | $spl12)),
  inference(backward_demodulation,[],[f1470,f208])).
fof(f208,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl0),
  inference(resolution,[],[f112,f80])).
fof(f1470,plain,(
  s('type.num.num',sK4) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | ($spl4 | $spl6 | $spl12)),
  inference(equality_resolution,[],[f1468])).
fof(f1468,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num',sK4) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | ($spl4 | $spl6 | $spl12)),
  inference(subsumption_resolution,[],[f1467,f123])).
fof(f1467,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num',sK4) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1460,f130])).
fof(f130,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2))) | $spl4),
  inference(resolution,[],[f80,f117])).
fof(f1460,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | s('type.num.num',sK4) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | $spl6),
  inference(superposition,[],[f109,f119])).
fof(f109,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X0)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2] : (! [X3] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X0))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : (? [X3] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num',X0))))) => s('type.num.num',X2) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8,X11,X10] : (? [X9] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X8))))) => s('type.num.num',X10) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X8))))),
  file('thm.arithmetic.MOD_P_UNIV','thm.arithmetic.MOD_UNIQUE')).
fof(f112,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | $spl0),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f120,plain,(
  ( ! [X6,X5] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',sK2))),s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X6)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK2))))) ) | $spl8),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ( ! [X6,X5] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',sK2))),s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X6)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK2))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f69,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X6)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',sK2)))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',sK2))),s('type.num.num',X6))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f5206,plain,(
  $false | ($spl8 | $spl12 | $spl15 | $spl32 | $spl50)),
  inference(subsumption_resolution,[],[f5205,f125])).
fof(f5205,plain,(
  p(s(bool,'F_0')) | ($spl8 | $spl12 | $spl32 | $spl50)),
  inference(forward_demodulation,[],[f5204,f1713])).
fof(f5204,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | ($spl8 | $spl12 | $spl50)),
  inference(equality_resolution,[],[f3802])).
fof(f3802,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))))))) ) | ($spl8 | $spl12 | $spl50)),
  inference(subsumption_resolution,[],[f3801,f123])).
fof(f3801,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) != s('type.num.num',X3) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))))))) ) | ($spl8 | $spl50)),
  inference(forward_demodulation,[],[f3800,f2162])).
fof(f3800,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',sK2))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3786,f129])).
fof(f3786,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',sK2)))) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) ) | $spl8),
  inference(superposition,[],[f120,f1383])).
fof(f1383,plain,(
  ( ! [X12,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X12))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X12))))) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(resolution,[],[f77,f79])).
fof(f77,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f43])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 84
% Passive clauses: 679
% Generated clauses: 5001
% Final active clauses: 72
% Final passive clauses: 468
% Input formulas: 19
% Initial clauses: 42
% 
% Duplicate literals: 364
% Trivial inequalities: 87
% Fw subsumption resolutions: 800
% Fw demodulations: 438
% Bw demodulations: 8
% 
% Simple tautologies: 164
% Equational tautologies: 36
% Forward subsumptions: 2246
% 
% Binary resolution: 197
% Factoring: 1
% Forward superposition: 1498
% Backward superposition: 1382
% Self superposition: 63
% Equality factoring: 64
% Equality resolution: 13
% 
% Split clauses: 108
% Split components: 227
% SAT solver clauses: 279
% SAT solver unit clauses: 11
% SAT solver binary clauses: 71
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 108
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 273
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 2686
% Time elapsed: 0.105 s
% ------------------------------
% ------------------------------
% Success in time 0.106 s
