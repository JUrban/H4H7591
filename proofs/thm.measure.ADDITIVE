Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% (64026)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 145
% Passive clauses: 1791
% Generated clauses: 17325
% Final active clauses: 137
% Final passive clauses: 1499
% Input formulas: 26
% Initial clauses: 73
% 
% Duplicate literals: 835
% Trivial inequalities: 400
% Fw subsumption resolutions: 3291
% Fw demodulations: 1652
% Bw demodulations: 8
% 
% Simple tautologies: 442
% Equational tautologies: 55
% Forward subsumptions: 6891
% 
% Binary resolution: 430
% Forward superposition: 4029
% Backward superposition: 6012
% Self superposition: 179
% Equality factoring: 155
% Equality resolution: 42
% 
% Split clauses: 1433
% Split components: 3013
% SAT solver clauses: 2116
% SAT solver unit clauses: 29
% SAT solver binary clauses: 201
% 
% Sat splits: 1433
% 
% TWLsolver clauses: 2115
% TWLsolver calls for satisfiability: 203
% 
% Memory used [KB]: 8827
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.measure
% (64039)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 382
% Generated clauses: 8060
% Final active clauses: 92
% Final passive clauses: 280
% Input formulas: 26
% Initial clauses: 73
% 
% Duplicate literals: 865
% Trivial inequalities: 91
% Fw subsumption resolutions: 869
% Fw demodulations: 363
% Bw demodulations: 10
% Condensations: 1367
% Global subsumptions: 8
% 
% Simple tautologies: 234
% Equational tautologies: 37
% Forward subsumptions: 2630
% 
% Binary resolution: 338
% Factoring: 2
% Forward superposition: 1577
% Backward superposition: 1915
% Self superposition: 118
% Equality factoring: 108
% Equality resolution: 20
% 
% Split clauses: 177
% Split components: 359
% SAT solver clauses: 977
% SAT solver unit clauses: 83
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 16
% 
% Sat splits: 177
% 
% TWLsolver clauses: 945
% TWLsolver calls for satisfiability: 307
% 
% Memory used [KB]: 6908
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.measure
% (64044)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 272
% Passive clauses: 2204
% Generated clauses: 80942
% Final active clauses: 136
% Final passive clauses: 902
% Input formulas: 26
% Initial clauses: 73
% 
% Duplicate literals: 7533
% Trivial inequalities: 575
% Fw subsumption resolutions: 8412
% Fw demodulations: 8503
% Bw demodulations: 972
% Condensations: 14620
% Global subsumptions: 162
% 
% Simple tautologies: 915
% Equational tautologies: 293
% Forward subsumptions: 34285
% Bw demodulations to eq. taut.: 60
% 
% Unit resulting resolution: 709
% Forward superposition: 22669
% Backward superposition: 16322
% Self superposition: 671
% Equality factoring: 525
% Equality resolution: 50
% 
% Split clauses: 416
% Split components: 840
% SAT solver clauses: 3331
% SAT solver unit clauses: 27
% SAT solver binary clauses: 148
% 
% Sat splits: 416
% Sat splitting refutations: 131
% 
% Memory used [KB]: 34157
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 181 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f919,plain,(
  $false),
  inference(subsumption_resolution,[],[f918,f180])).
fof(f180,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.measure.ADDITIVE',aHL_TRUTH)).
fof(f918,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f917,f196])).
fof(f196,plain,(
  s(bool,'T_0') = s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))),
  inference(resolution,[],[f112,f138])).
fof(f138,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.measure.ADDITIVE','thm.bool.EQ_CLAUSES|split|1')).
fof(f112,plain,(
  p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))) & p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) & s(fun(sK0,bool),sK4) = s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s(fun(X0,bool),X4) = s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & s(fun(X6,bool),X10) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X10))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ((p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) & s(fun(X6,bool),X10) = s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9)))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X10))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9))))))),
  file('thm.measure.ADDITIVE','thm.measure.ADDITIVE')).
fof(f917,plain,(
  ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))),
  inference(trivial_inequality_removal,[],[f916])).
fof(f916,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))),
  inference(forward_demodulation,[],[f915,f113])).
fof(f113,plain,(
  s(fun(sK0,bool),sK4) = s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))),
  inference(cnf_transformation,[],[f74])).
fof(f915,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))),
  inference(subsumption_resolution,[],[f914,f109])).
fof(f109,plain,(
  p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(cnf_transformation,[],[f74])).
fof(f914,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(subsumption_resolution,[],[f913,f110])).
fof(f110,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))))),
  inference(cnf_transformation,[],[f74])).
fof(f913,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(subsumption_resolution,[],[f912,f111])).
fof(f111,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))))),
  inference(cnf_transformation,[],[f74])).
fof(f912,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),'const.pred_set.UNION_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(sK0,bool),sK2),s(fun(sK0,bool),sK3)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK3),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(sK0,bool),sK2),s(fun(fun(sK0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1))))),
  inference(superposition,[],[f114,f115])).
fof(f115,plain,(
  ( ! [X4,X0,X5,X1] : (s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X4,X5] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5))))))) & ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK5(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),sK6(X1,X0)),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),sK5(X1,X0)),s(fun(X0,bool),sK6(X1,X0))))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),sK5(X1,X0)),s(fun(X0,bool),sK6(X1,X0)))))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),sK5(X1,X0)))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),sK6(X1,X0))))))) | p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X4,X5] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X4),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X5),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5)))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X4),s(fun(X0,bool),X5))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X4))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X5))))))) & (? [X2,X3] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))) | p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(rectify,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3))))))) & (? [X2,X3] : (p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) & s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))) | p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : (~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3)))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) | ~p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) | s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) <=> ! [X2,X3] : ((p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X2),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X0,bool),X3),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),'const.pred_set.UNION_2'(s(fun(X0,bool),X2),s(fun(X0,bool),X3))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1),s(fun(X0,bool),X3)))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.measure.additive_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) <=> ! [X8,X9] : ((p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X8),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.bool.IN_2'(s(fun(X6,bool),X9),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))) & p(s(bool,'const.pred_set.DISJOINT_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9))))) => s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),'const.pred_set.UNION_2'(s(fun(X6,bool),X8),s(fun(X6,bool),X9))))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X8))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7),s(fun(X6,bool),X9)))))))),
  file('thm.measure.ADDITIVE','thm.measure.additive_def')).
fof(f114,plain,(
  s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK4))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK2))),s('type.realax.real','const.measure.measure_2'(s('type.pair.prod'(fun(sK0,bool),'type.pair.prod'(fun(fun(sK0,bool),bool),fun(fun(sK0,bool),'type.realax.real'))),sK1),s(fun(sK0,bool),sK3)))))),
  inference(cnf_transformation,[],[f74])).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 57
% Passive clauses: 99
% Generated clauses: 726
% Final active clauses: 50
% Final passive clauses: 69
% Input formulas: 26
% Initial clauses: 73
% 
% Selected by SInE selection: 26
% SInE iterations: 1
% 
% Duplicate literals: 24
% Trivial inequalities: 13
% Fw subsumption resolutions: 113
% Fw demodulations: 41
% Bw demodulations: 2
% 
% Simple tautologies: 75
% Equational tautologies: 1
% Forward subsumptions: 313
% 
% Binary resolution: 175
% Forward superposition: 260
% Backward superposition: 77
% Equality resolution: 7
% 
% Split clauses: 45
% Split components: 95
% SAT solver clauses: 65
% SAT solver unit clauses: 19
% SAT solver binary clauses: 24
% 
% Sat splits: 45
% Sat splitting refutations: 19
% 
% Memory used [KB]: 1407
% Time elapsed: 0.016 s
% ------------------------------
% ------------------------------
% Success in time 11.831 s
