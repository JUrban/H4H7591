Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f444,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f433,f430,f58,f93,f59,f95,f91,f60,f96,f94,f92,f440])).
fof(f440,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f432,f96])).
fof(f432,plain,(
  s(sK1,sK2) = s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl0),
  inference(superposition,[],[f84,f91])).
fof(f84,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X9,X8] : s(X7,X8) = s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X8)))))),
  file('thm.quantHeuristics.PAIR_EQ_EXPAND|split|1','thm.pair.SND')).
fof(f92,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) | $spl1),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f94,plain,(
  s(sK0,sK3) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl3),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  s(sK0,sK3) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f96,plain,(
  s(sK1,sK2) != s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl5),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  s(sK1,sK2) != s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f60,plain,(
  s(sK1,sK2) != s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) | s(sK0,sK3) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | s('type.pair.prod'(sK0,sK1),sK4) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2)))),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  (s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) | (s(sK0,sK3) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) & s(sK1,sK2) = s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))))) & (s('type.pair.prod'(sK0,sK1),sK4) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) | s(sK0,sK3) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | s(sK1,sK2) != s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.pair.prod'(X0,X1),X4) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) | (s(X0,X3) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) & s(X1,X2) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))) & (s('type.pair.prod'(X0,X1),X4) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) | s(X0,X3) != s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) | s(X1,X2) != s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.pair.prod'(X0,X1),X4) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) | (s(X0,X3) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) & s(X1,X2) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))) & (s('type.pair.prod'(X0,X1),X4) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) | (s(X0,X3) != s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) | s(X1,X2) != s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4))))))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.pair.prod'(X0,X1),X4) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) <~> (s(X0,X3) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) & s(X1,X2) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.pair.prod'(X0,X1),X4) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) <=> (s(X0,X3) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) & s(X1,X2) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : (s('type.pair.prod'(X0,X1),X4) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X2))) <=> (s(X0,X3) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X4))) & s(X1,X2) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : (s('type.pair.prod'(X6,X7),X10) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X8))) <=> (s(X6,X9) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X10))) & s(X7,X8) = s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : (s('type.pair.prod'(X6,X7),X10) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X8))) <=> (s(X6,X9) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X10))) & s(X7,X8) = s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X10)))))),
  file('thm.quantHeuristics.PAIR_EQ_EXPAND|split|1','thm.quantHeuristics.PAIR_EQ_EXPAND|split|1')).
fof(f91,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) | $spl0),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f95,plain,(
  s(sK1,sK2) = s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl4),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  s(sK1,sK2) = s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f59,plain,(
  s(sK1,sK2) = s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK4))) | s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2)))),
  inference(cnf_transformation,[],[f42])).
fof(f93,plain,(
  s(sK0,sK3) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl2),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  s(sK0,sK3) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f58,plain,(
  s(sK0,sK3) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2)))),
  inference(cnf_transformation,[],[f42])).
fof(f430,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f429,f92])).
fof(f429,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK2))) | ($spl2 | $spl4)),
  inference(forward_demodulation,[],[f424,f365])).
fof(f365,plain,(
  s(sK1,sK2) = s(sK1,sK6(sK4,sK1,sK0)) | $spl4),
  inference(superposition,[],[f349,f95])).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (s(X1,sK6(X2,X1,X0)) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))) )),
  inference(superposition,[],[f84,f82])).
fof(f82,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X9] : ? [X14,X15] : s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X14),s(X7,X15)))),
  file('thm.quantHeuristics.PAIR_EQ_EXPAND|split|1','thm.pair.ABS_PAIR_THM')).
fof(f424,plain,(
  s('type.pair.prod'(sK0,sK1),sK4) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK3),s(sK1,sK6(sK4,sK1,sK0)))) | $spl2),
  inference(superposition,[],[f82,f401])).
fof(f401,plain,(
  s(sK0,sK3) = s(sK0,sK5(sK4,sK1,sK0)) | $spl2),
  inference(superposition,[],[f350,f93])).
fof(f350,plain,(
  ( ! [X4,X5,X3] : (s(X3,sK5(X5,X4,X3)) = s(X3,'const.pair.FST_1'(s('type.pair.prod'(X3,X4),X5)))) )),
  inference(superposition,[],[f83,f82])).
fof(f83,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X9,X8] : s(X6,X9) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X9),s(X7,X8)))))),
  file('thm.quantHeuristics.PAIR_EQ_EXPAND|split|1','thm.pair.FST')).
fof(f433,plain,(
  s(sK0,sK3) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK4))) | $spl0),
  inference(superposition,[],[f83,f91])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 21
% Passive clauses: 110
% Generated clauses: 375
% Final active clauses: 13
% Final passive clauses: 77
% Input formulas: 16
% Initial clauses: 31
% 
% Duplicate literals: 38
% Trivial inequalities: 3
% Fw subsumption resolutions: 2
% Fw demodulations: 22
% 
% Simple tautologies: 27
% Equational tautologies: 15
% Forward subsumptions: 145
% 
% Binary resolution: 4
% Forward superposition: 84
% Backward superposition: 119
% Self superposition: 30
% Equality factoring: 26
% 
% Split clauses: 8
% Split components: 17
% SAT solver clauses: 20
% SAT solver unit clauses: 5
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 8
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 17
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 895
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
