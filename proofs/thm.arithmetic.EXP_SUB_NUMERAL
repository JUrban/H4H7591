Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (59796)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 188
% Passive clauses: 2319
% Generated clauses: 24201
% Final active clauses: 174
% Final passive clauses: 1948
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 1010
% Trivial inequalities: 206
% Fw subsumption resolutions: 2006
% Fw demodulations: 3116
% Bw demodulations: 13
% 
% Simple tautologies: 420
% Equational tautologies: 57
% Forward subsumptions: 13302
% Fw demodulations to eq. taut.: 38
% 
% Binary resolution: 143
% Forward superposition: 8375
% Backward superposition: 8691
% Self superposition: 249
% Equality factoring: 157
% Equality resolution: 24
% 
% Split clauses: 922
% Split components: 1899
% SAT solver clauses: 1338
% SAT solver unit clauses: 22
% SAT solver binary clauses: 189
% 
% Sat splits: 922
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1337
% TWLsolver calls for satisfiability: 127
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (59821)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 239
% Passive clauses: 1219
% Generated clauses: 25418
% Final active clauses: 214
% Final passive clauses: 700
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 655
% Trivial inequalities: 374
% Fw subsumption resolutions: 764
% Fw demodulations: 2617
% Bw demodulations: 299
% Condensations: 767
% Global subsumptions: 4
% 
% Simple tautologies: 348
% Equational tautologies: 19
% Forward subsumptions: 16765
% Fw demodulations to eq. taut.: 72
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 35
% Forward superposition: 11045
% Backward superposition: 7238
% Self superposition: 89
% Equality factoring: 30
% Equality resolution: 14
% 
% Split clauses: 34
% Split components: 73
% SAT solver clauses: 1571
% SAT solver unit clauses: 67
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 8
% 
% Sat splits: 34
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1555
% TWLsolver calls for satisfiability: 302
% 
% Memory used [KB]: 25841
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% (59841)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 436
% Passive clauses: 4340
% Generated clauses: 193047
% Final active clauses: 166
% Final passive clauses: 484
% Input formulas: 33
% Initial clauses: 50
% Discarded non-redundant clauses: 4560
% 
% Duplicate literals: 8043
% Trivial inequalities: 2509
% Fw subsumption resolutions: 19796
% Fw demodulations: 31259
% Bw demodulations: 971
% Condensations: 15797
% Global subsumptions: 1179
% 
% Simple tautologies: 1924
% Equational tautologies: 1049
% Forward subsumptions: 104564
% Fw demodulations to eq. taut.: 194
% Bw demodulations to eq. taut.: 280
% 
% Unit resulting resolution: 7172
% Forward superposition: 60551
% Backward superposition: 38039
% Self superposition: 658
% Equality factoring: 351
% Equality resolution: 54
% 
% Split clauses: 152
% Split components: 322
% SAT solver clauses: 6984
% SAT solver unit clauses: 830
% SAT solver binary clauses: 1140
% 
% Sat splits: 152
% Sat splitting refutations: 1159
% 
% Memory used [KB]: 105541
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.arithmetic
% (60117)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 389
% Passive clauses: 18245
% Generated clauses: 68746
% Final active clauses: 341
% Final passive clauses: 16570
% Input formulas: 33
% Initial clauses: 48
% 
% Selected by SInE selection: 31
% SInE iterations: 1
% 
% Duplicate literals: 1125
% Trivial inequalities: 364
% Fw subsumption resolutions: 645
% Fw demodulations: 25612
% Bw demodulations: 30
% 
% Simple tautologies: 133
% Equational tautologies: 1
% Forward subsumptions: 22525
% Fw demodulations to eq. taut.: 173
% 
% Binary resolution: 852
% Forward superposition: 21649
% Backward superposition: 18550
% Self superposition: 80
% 
% Split clauses: 672
% Split components: 1521
% SAT solver clauses: 673
% SAT solver binary clauses: 126
% 
% Sat splits: 672
% 
% Memory used [KB]: 80723
% Time elapsed: 4.0000 s
% ------------------------------
% ------------------------------
% remaining time: 142 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.arithmetic
% (60251)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 1057
% Generated clauses: 18232
% Final active clauses: 91
% Final passive clauses: 413
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 228
% Trivial inequalities: 212
% Fw subsumption resolutions: 1359
% Fw demodulations: 4235
% Bw demodulations: 437
% Global subsumptions: 79
% 
% Simple tautologies: 201
% Equational tautologies: 113
% Forward subsumptions: 9662
% Fw demodulations to eq. taut.: 40
% Bw demodulations to eq. taut.: 23
% 
% Unit resulting resolution: 2004
% Forward superposition: 5262
% Backward superposition: 3631
% Self superposition: 132
% Equality factoring: 36
% Equality resolution: 8
% 
% Split clauses: 8
% Split components: 17
% SAT solver clauses: 1840
% SAT solver unit clauses: 581
% SAT solver binary clauses: 418
% 
% Sat splits: 8
% Sat splitting refutations: 694
% 
% Memory used [KB]: 16247
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 135 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.arithmetic
% (60279)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 216
% Passive clauses: 1368
% Generated clauses: 41903
% Final active clauses: 178
% Final passive clauses: 966
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 13
% Trivial inequalities: 61
% Fw subsumption resolutions: 260
% Bw subsumption resolutions: 1
% Fw demodulations: 13794
% Bw demodulations: 198
% 
% Simple tautologies: 37
% Equational tautologies: 1
% Forward subsumptions: 26329
% Backward subsumptions: 54
% Fw demodulations to eq. taut.: 55
% 
% Binary resolution: 136
% Forward superposition: 12054
% Backward superposition: 15563
% Self superposition: 135
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 1376
% SAT solver unit clauses: 411
% SAT solver binary clauses: 758
% 
% Sat splits: 5
% Sat splitting refutations: 1
% 
% Memory used [KB]: 65372
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 119 next slice time: 9
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.arithmetic
% Refutation not found, incomplete strategy
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation not found, incomplete strategy

% Active clauses: 40
% Passive clauses: 7
% Generated clauses: 117
% Final active clauses: 39
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 1
% Trivial inequalities: 3
% Fw demodulations: 14
% Bw demodulations: 2
% Global subsumptions: 1
% 
% Simple tautologies: 17
% Equational tautologies: 3
% Forward subsumptions: 76
% 
% Binary resolution: 4
% Unit resulting resolution: 15
% Forward superposition: 18
% Backward superposition: 52
% Self superposition: 1
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 32
% SAT solver unit clauses: 2
% SAT solver binary clauses: 25
% 
% Sat splits: 1
% 
% Memory used [KB]: 1151
% Time elapsed: 0.005 s
% ------------------------------
% ------------------------------
% remaining time: 119 next slice time: 85
lrs+1_5:4_cond=on:fsr=off:fde=none:gs=on:gsem=on:lwlo=on:nm=64:nwc=1:stl=60:sos=all:spl=off_80 on thm.arithmetic
% (60338)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 551
% Passive clauses: 11309
% Generated clauses: 58381
% Final active clauses: 542
% Final passive clauses: 3564
% Input formulas: 33
% Initial clauses: 50
% Discarded non-redundant clauses: 81102
% 
% Duplicate literals: 1337
% Trivial inequalities: 371
% Fw demodulations: 18609
% Bw demodulations: 2
% Condensations: 494
% Global subsumptions: 39
% 
% Simple tautologies: 91
% Equational tautologies: 1
% Forward subsumptions: 23287
% Fw demodulations to eq. taut.: 497
% 
% Binary resolution: 2379
% Forward superposition: 24082
% Backward superposition: 11090
% Self superposition: 66
% 
% SAT solver clauses: 11504
% SAT solver unit clauses: 95
% SAT solver binary clauses: 141
% SAT solver learnt clauses: 78
% SAT solver learnt literals: 152
% 
% TWLsolver clauses: 11348
% TWLsolver calls for satisfiability: 356815
% 
% Memory used [KB]: 148526
% Time elapsed: 8.600 s
% ------------------------------
% ------------------------------
% remaining time: 33 next slice time: 33
lrs+11_28_cond=on:gs=on:gsaa=from_current:gsem=on:gsssp=full:lwlo=on:nm=64:nwc=1.7:stl=30:sac=on:sdd=off:sfr=on:ssfp=40000:ssfq=1.1:smm=off:ssnc=none:urr=on:updr=off_109 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f45817,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f45816,f1607,f4732,f4730,f45800])).
fof(f45800,plain,(
  $false | $spl1),
  inference(trivial_inequality_removal,[],[f45520])).
fof(f45520,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) | $spl1),
  inference(superposition,[],[f4730,f43876])).
fof(f43876,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f43875,f1572])).
fof(f1572,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1478,f1093])).
fof(f1093,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(forward_demodulation,[],[f1092,f1058])).
fof(f1058,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f136,f154])).
fof(f154,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f152,f99])).
fof(f99,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.ADD_|48|')).
fof(f152,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) )),
  inference(backward_demodulation,[],[f136,f105])).
fof(f105,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.BIT|49|')).
fof(f136,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f1092,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))))) )),
  inference(forward_demodulation,[],[f1059,f136])).
fof(f1059,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))))) )),
  inference(superposition,[],[f136,f156])).
fof(f156,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) )),
  inference(forward_demodulation,[],[f155,f99])).
fof(f155,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(forward_demodulation,[],[f153,f136])).
fof(f153,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(backward_demodulation,[],[f136,f106])).
fof(f106,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.BIT2')).
fof(f1478,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f1444,f102])).
fof(f102,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.SUB_|48||split|1')).
fof(f1444,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f137,f315])).
fof(f315,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f154,f101])).
fof(f101,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f137,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7,X8] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.SUB_MONO_EQ')).
fof(f43875,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f43874,f149])).
fof(f149,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f148,f95])).
fof(f95,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  inference(cnf_transformation,[],[f8])).
fof(f8,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.ZERO_0')),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.ALT_ZERO')).
fof(f148,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f103,f97])).
fof(f97,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.NUMERAL_DEF')).
fof(f103,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.EXP_|49||split|1')).
fof(f43874,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(subsumption_resolution,[],[f43408,f93])).
fof(f93,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.EXP_SUB_NUMERAL',aHL_TRUTH)).
fof(f43408,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f11579,f2309])).
fof(f2309,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(superposition,[],[f2066,f1093])).
fof(f2066,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f1952,f315])).
fof(f1952,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f165,f138,f269])).
fof(f269,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) != s(bool,X3)) )),
  inference(resolution,[],[f231,f108])).
fof(f108,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.bool.EQ_CLAUSES|split|1')).
fof(f231,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f112,f107])).
fof(f107,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.EXP_SUB_NUMERAL',aHL_BOOL_CASES)).
fof(f112,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.bool.EQ_CLAUSES|split|2')).
fof(f138,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7,X8] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X8))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.LESS_EQ_MONO')).
fof(f165,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(unit_resulting_resolution,[],[f98,f109])).
fof(f109,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f74])).
fof(f98,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.ZERO_LESS_EQ')).
fof(f11579,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num',X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) )),
  inference(subsumption_resolution,[],[f11532,f93])).
fof(f11532,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num',X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f140,f164])).
fof(f164,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))),
  inference(unit_resulting_resolution,[],[f91,f109])).
fof(f91,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) & (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f69])).
fof(f69,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',X1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))),s('type.num.num',X1)))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) => (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))),s('type.num.num',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))))),s('type.num.num',X7)))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.EXP_SUB_NUMERAL')).
fof(f140,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) => s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X9,X10,X7] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9))))) => s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num',X10))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X9))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X10))))))),
  file('thm.arithmetic.EXP_SUB_NUMERAL','thm.arithmetic.EXP_SUB')).
fof(f4730,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f4730_D])).
fof(f4730_D,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f4732,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | $spl3),
  inference(cnf_transformation,[],[f4732_D])).
fof(f4732_D,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f1607,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK0),s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))),s('type.num.num',sK1)))),
  inference(backward_demodulation,[],[f1580,f147])).
fof(f147,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f146,f97])).
fof(f146,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(forward_demodulation,[],[f145,f97])).
fof(f145,plain,(
  s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1)))),
  inference(forward_demodulation,[],[f144,f97])).
fof(f144,plain,(
  s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1)))),
  inference(backward_demodulation,[],[f97,f143])).
fof(f143,plain,(
  s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1)))),
  inference(backward_demodulation,[],[f95,f92])).
fof(f92,plain,(
  s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))))),s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(cnf_transformation,[],[f73])).
fof(f1580,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f1478,f1058])).
fof(f45816,plain,(
  $false | $spl3),
  inference(subsumption_resolution,[],[f4732,f44541])).
fof(f44541,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X3))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3))))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f43879,f1058])).
fof(f43879,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f43878,f1478])).
fof(f43878,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(forward_demodulation,[],[f43877,f149])).
fof(f43877,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(subsumption_resolution,[],[f43409,f93])).
fof(f43409,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(superposition,[],[f11579,f2066])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 441
% Passive clauses: 1644
% Generated clauses: 45708
% Final active clauses: 432
% Final passive clauses: 1188
% Input formulas: 33
% Initial clauses: 50
% 
% Duplicate literals: 1473
% Trivial inequalities: 706
% Fw subsumption resolutions: 1419
% Fw demodulations: 7624
% Bw demodulations: 21
% Condensations: 1585
% 
% Simple tautologies: 503
% Equational tautologies: 858
% Forward subsumptions: 29862
% Fw demodulations to eq. taut.: 31
% 
% Binary resolution: 32
% Unit resulting resolution: 3266
% Forward superposition: 19472
% Backward superposition: 9943
% Self superposition: 56
% Equality factoring: 26
% Equality resolution: 31
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 1649
% SAT solver unit clauses: 917
% SAT solver binary clauses: 685
% SAT solver learnt clauses: 1
% 
% Sat splits: 1
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1648
% TWLsolver calls for satisfiability: 5211
% 
% Memory used [KB]: 25330
% Time elapsed: 1.387 s
% ------------------------------
% ------------------------------
% Success in time 28.031 s
