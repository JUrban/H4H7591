Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.gcd
% (109523)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 775
% Passive clauses: 9827
% Generated clauses: 20530
% Final active clauses: 638
% Final passive clauses: 7938
% Input formulas: 45
% Initial clauses: 203
% 
% Duplicate literals: 325
% Trivial inequalities: 116
% Fw subsumption resolutions: 1994
% Fw demodulations: 661
% Bw demodulations: 122
% 
% Simple tautologies: 232
% Equational tautologies: 62
% Forward subsumptions: 7147
% 
% Binary resolution: 11066
% Factoring: 1029
% Forward superposition: 2187
% Backward superposition: 2512
% Self superposition: 36
% Equality factoring: 34
% Equality resolution: 24
% 
% Split clauses: 641
% Split components: 1285
% SAT solver clauses: 1025
% SAT solver unit clauses: 24
% SAT solver binary clauses: 155
% 
% Sat splits: 641
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1023
% TWLsolver calls for satisfiability: 454
% 
% Memory used [KB]: 9466
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.gcd
% (109538)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 458
% Passive clauses: 3162
% Generated clauses: 14518
% Final active clauses: 387
% Final passive clauses: 2175
% Input formulas: 45
% Initial clauses: 203
% 
% Duplicate literals: 235
% Trivial inequalities: 53
% Fw subsumption resolutions: 1240
% Fw demodulations: 668
% Bw demodulations: 590
% Condensations: 432
% Global subsumptions: 13
% 
% Simple tautologies: 285
% Equational tautologies: 20
% Forward subsumptions: 5101
% Bw demodulations to eq. taut.: 9
% 
% Binary resolution: 4382
% Factoring: 197
% Forward superposition: 1492
% Backward superposition: 1704
% Self superposition: 32
% Equality factoring: 30
% Equality resolution: 10
% 
% Split clauses: 83
% Split components: 166
% SAT solver clauses: 3491
% SAT solver unit clauses: 189
% SAT solver binary clauses: 79
% SAT solver learnt clauses: 26
% SAT solver learnt literals: 10
% 
% Sat splits: 83
% 
% TWLsolver clauses: 3439
% TWLsolver calls for satisfiability: 1876
% 
% Memory used [KB]: 13304
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.gcd
% (109562)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 2825
% Passive clauses: 7688
% Generated clauses: 118459
% Final active clauses: 1739
% Final passive clauses: 876
% Input formulas: 45
% Initial clauses: 203
% 
% Duplicate literals: 4657
% Trivial inequalities: 176
% Fw subsumption resolutions: 4535
% Fw demodulations: 17747
% Bw demodulations: 3481
% Condensations: 8484
% Global subsumptions: 1256
% 
% Simple tautologies: 229
% Equational tautologies: 3531
% Forward subsumptions: 67140
% Bw demodulations to eq. taut.: 145
% 
% Unit resulting resolution: 40130
% Factoring: 13
% Forward superposition: 19728
% Backward superposition: 12311
% Self superposition: 206
% Equality factoring: 178
% Equality resolution: 6
% 
% Split clauses: 465
% Split components: 967
% SAT solver clauses: 11769
% SAT solver unit clauses: 1589
% SAT solver binary clauses: 3031
% 
% Sat splits: 465
% Sat splitting refutations: 1892
% 
% Memory used [KB]: 87887
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.gcd
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.gcd
% SZS output start Proof for thm.gcd
fof(f17935,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f533,f534,f641,f639,f778,f779,f886,f884,f911,f912,f1019,f1017,f1044,f1045,f1152,f1150,f15981,f15985,f15983,f17923,f17934])).
fof(f17934,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f15985,f16329])).
fof(f16329,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14))))),
  inference(subsumption_resolution,[],[f16328,f398])).
fof(f398,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.IS_GCD_UNIQUE',aHL_TRUTH)).
fof(f16328,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14))))),
  inference(forward_demodulation,[],[f16327,f931])).
fof(f931,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK12)))),
  inference(resolution,[],[f658,f262])).
fof(f262,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.bool.EQ_CLAUSES|split|0')).
fof(f658,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK12))))),
  inference(resolution,[],[f226,f400])).
fof(f400,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X4] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(rectify,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(flattening,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) | (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2))))))) & ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ? [X3] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) & ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))) | p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))))),
  inference(nnf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(flattening,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) & ! [X3] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X0)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X1))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X3),s('type.num.num',X2)))))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8)))) <=> (p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X8),s('type.num.num',X7)))) & ! [X9] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X9),s('type.num.num',X6)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X9),s('type.num.num',X7))))) => p(s(bool,'const.divides.divides_2'(s('type.num.num',X9),s('type.num.num',X8)))))))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.gcd.is_gcd_def')).
fof(f226,plain,(
  p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK13),s('type.num.num',sK15))))),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK13),s('type.num.num',sK14)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK13),s('type.num.num',sK15)))) & s('type.num.num',sK14) != s('type.num.num',sK15)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X3)))) & s('type.num.num',X2) != s('type.num.num',X3))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X3))))) & s('type.num.num',X2) != s('type.num.num',X3))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X3))))) => s('type.num.num',X2) = s('type.num.num',X3))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ((p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X9))))) => s('type.num.num',X8) = s('type.num.num',X9))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ((p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X8)))) & p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X6),s('type.num.num',X7),s('type.num.num',X9))))) => s('type.num.num',X8) = s('type.num.num',X9))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.gcd.IS_GCD_UNIQUE')).
fof(f16327,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK12))))),
  inference(subsumption_resolution,[],[f16300,f374])).
fof(f374,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f212])).
fof(f212,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f211])).
fof(f211,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X13] : ((p(s(bool,'F_0')) => p(s(bool,X13))) <=> p(s(bool,'T_0')))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.bool.IMP_CLAUSES|split|2')).
fof(f16300,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK12))))),
  inference(superposition,[],[f415,f1064])).
fof(f1064,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK13)))),
  inference(resolution,[],[f659,f262])).
fof(f659,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK13))))),
  inference(resolution,[],[f226,f401])).
fof(f401,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X2),s('type.num.num',X1)))) | ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f415,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK13)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK14)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK12))))) )),
  inference(resolution,[],[f225,f402])).
fof(f402,plain,(
  ( ! [X4,X2,X0,X1] : (p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X2)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X4),s('type.num.num',X0)))) | ~p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',X0),s('type.num.num',X1),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f224])).
fof(f225,plain,(
  p(s(bool,'const.gcd.is_gcd_3'(s('type.num.num',sK12),s('type.num.num',sK13),s('type.num.num',sK14))))),
  inference(cnf_transformation,[],[f146])).
fof(f17923,plain,(
  $false | $spl17),
  inference(subsumption_resolution,[],[f17922,f399])).
fof(f399,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.bool.TRUTH')).
fof(f17922,plain,(
  ~p(s(bool,'T_0')) | $spl17),
  inference(forward_demodulation,[],[f17921,f553])).
fof(f553,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12)))),
  inference(resolution,[],[f413,f262])).
fof(f413,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12))))),
  inference(resolution,[],[f225,f400])).
fof(f17921,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12)))) | $spl17),
  inference(subsumption_resolution,[],[f17920,f391])).
fof(f391,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0] : ((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0)))),
  inference(ennf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) => ~p(s(bool,X0)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) => ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13] : ((p(s(bool,X13)) => p(s(bool,'F_0'))) => ~p(s(bool,X13)))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.bool.IMP_F')).
fof(f17920,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12)))) | $spl17),
  inference(forward_demodulation,[],[f17919,f16005])).
fof(f16005,plain,(
  s(bool,'F_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15))) | $spl17),
  inference(resolution,[],[f15983,f258])).
fof(f258,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.bool.EQ_CLAUSES|split|3')).
fof(f17919,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12))))),
  inference(subsumption_resolution,[],[f17894,f374])).
fof(f17894,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK12))))),
  inference(superposition,[],[f660,f798])).
fof(f798,plain,(
  s(bool,'T_0') = s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK13)))),
  inference(resolution,[],[f414,f262])).
fof(f414,plain,(
  p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK13))))),
  inference(resolution,[],[f225,f401])).
fof(f660,plain,(
  ( ! [X0] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK13)))) | p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK15)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK12))))) )),
  inference(resolution,[],[f226,f402])).
fof(f15983,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15)))) | $spl17),
  inference(cnf_transformation,[],[f15983_D])).
fof(f15983_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15)))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f15985,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14)))) | $spl19),
  inference(cnf_transformation,[],[f15985_D])).
fof(f15985_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14)))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f15981,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',sK14)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK14),s('type.num.num',sK15))))),
  inference(equality_resolution,[],[f411])).
fof(f411,plain,(
  ( ! [X0] : (s('type.num.num',sK14) != s('type.num.num',X0) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK15),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',sK15))))) )),
  inference(superposition,[],[f227,f406])).
fof(f406,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : (~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1))),
  inference(ennf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X1),s('type.num.num',X0))))) => s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7] : ((p(s(bool,'const.divides.divides_2'(s('type.num.num',X6),s('type.num.num',X7)))) & p(s(bool,'const.divides.divides_2'(s('type.num.num',X7),s('type.num.num',X6))))) => s('type.num.num',X6) = s('type.num.num',X7))),
  file('thm.gcd.IS_GCD_UNIQUE','thm.divides.DIVIDES_ANTISYM')).
fof(f227,plain,(
  s('type.num.num',sK14) != s('type.num.num',sK15)),
  inference(cnf_transformation,[],[f146])).
fof(f1150,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK15)))) | $spl13),
  inference(cnf_transformation,[],[f1150_D])).
fof(f1150_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK15)))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f1152,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK15) | $spl14),
  inference(cnf_transformation,[],[f1152_D])).
fof(f1152_D,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK15) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1045,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK15) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK15))))),
  inference(resolution,[],[f659,f406])).
fof(f1044,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK15) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK15))))),
  inference(resolution,[],[f659,f406])).
fof(f1017,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK15)))) | $spl9),
  inference(cnf_transformation,[],[f1017_D])).
fof(f1017_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK15)))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f1019,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK15) | $spl10),
  inference(cnf_transformation,[],[f1019_D])).
fof(f1019_D,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK15) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f912,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK15) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK15))))),
  inference(resolution,[],[f658,f406])).
fof(f911,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK15) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK15))))),
  inference(resolution,[],[f658,f406])).
fof(f884,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14)))) | $spl5),
  inference(cnf_transformation,[],[f884_D])).
fof(f884_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f886,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK14) | $spl6),
  inference(cnf_transformation,[],[f886_D])).
fof(f886_D,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK14) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f779,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK14) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))))),
  inference(resolution,[],[f414,f406])).
fof(f778,plain,(
  s('type.num.num',sK13) = s('type.num.num',sK14) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK13),s('type.num.num',sK14))))),
  inference(resolution,[],[f414,f406])).
fof(f639,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14)))) | $spl1),
  inference(cnf_transformation,[],[f639_D])).
fof(f639_D,plain,(
  ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f641,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK14) | $spl2),
  inference(cnf_transformation,[],[f641_D])).
fof(f641_D,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK14) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f534,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK14) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(resolution,[],[f413,f406])).
fof(f533,plain,(
  s('type.num.num',sK12) = s('type.num.num',sK14) | ~p(s(bool,'const.divides.divides_2'(s('type.num.num',sK12),s('type.num.num',sK14))))),
  inference(resolution,[],[f413,f406])).
% SZS output end Proof for thm.gcd
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 608
% Passive clauses: 5563
% Generated clauses: 17522
% Final active clauses: 574
% Final passive clauses: 4264
% Input formulas: 45
% Initial clauses: 182
% 
% Selected by SInE selection: 38
% SInE iterations: 1
% 
% Duplicate literals: 566
% Trivial inequalities: 57
% Fw subsumption resolutions: 3286
% Fw demodulations: 2214
% Bw demodulations: 17
% 
% Simple tautologies: 1142
% Equational tautologies: 2
% Forward subsumptions: 5167
% 
% Binary resolution: 6275
% Forward superposition: 2954
% Backward superposition: 2153
% Equality resolution: 1
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 12
% SAT solver unit clauses: 2
% SAT solver binary clauses: 9
% 
% Sat splits: 9
% Sat splitting refutations: 2
% 
% Memory used [KB]: 4733
% Time elapsed: 0.234 s
% ------------------------------
% ------------------------------
% Success in time 11.948 s
