Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3487,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3457,f84,f117,f159,f327])).
fof(f327,plain,(
  s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl4),
  inference(cnf_transformation,[],[f327_D])).
fof(f327_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f159,plain,(
  s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(trivial_inequality_removal,[],[f158])).
fof(f158,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(superposition,[],[f77,f85])).
fof(f85,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.isPREFIX_THM|split|1',aHL_BOOL_CASES)).
fof(f77,plain,(
  s(bool,'F_0') != s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  s(bool,'F_0') != s(bool,'const.list.isPREFIX_2'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2] : s(bool,'F_0') != s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X0,X1,X2] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ~! [X0] : ! [X1,X2] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X7))),s('type.list.list'(X6),'const.list.NIL_0')))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X7))),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.isPREFIX_THM|split|1','thm.list.isPREFIX_THM|split|1')).
fof(f117,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f84,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.list.isPREFIX_THM|split|1',aHL_FALSITY)).
fof(f3457,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f3390,f118])).
fof(f118,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl3),
  inference(resolution,[],[f86,f117])).
fof(f86,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : (s(bool,'T_0') = s(bool,X7) <=> p(s(bool,X7)))),
  file('thm.list.isPREFIX_THM|split|1','thm.bool.EQ_CLAUSES|split|1')).
fof(f3390,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl4),
  inference(superposition,[],[f3261,f327])).
fof(f3261,plain,(
  ( ! [X37,X35,X36] : (s(bool,'F_0') = s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X35),'const.list.CONS_2'(s(X35,X36),s('type.list.list'(X35),X37))),s('type.list.list'(X35),'const.list.NIL_0')))) )),
  inference(superposition,[],[f2928,f106])).
fof(f106,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.list.list_CASE_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2),s(fun(X0,fun('type.list.list'(X0),X1)),X3)))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.list.list_CASE_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2),s(fun(X0,fun('type.list.list'(X0),X1)),X3)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.list.list_CASE_3'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2),s(fun(X0,fun('type.list.list'(X0),X1)),X3)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X11] : ! [X12,X13] : s(X11,X12) = s(X11,'const.list.list_CASE_3'(s('type.list.list'(X6),'const.list.NIL_0'),s(X11,X12),s(fun(X6,fun('type.list.list'(X6),X11)),X13)))),
  file('thm.list.isPREFIX_THM|split|1','thm.list.list_case_def|split|0')).
fof(f2928,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),X3))) = s(bool,'const.list.list_CASE_3'(s('type.list.list'(X0),X3),s(bool,'F_0'),s(fun(X0,fun('type.list.list'(X0),bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X0,bool),'=_1'(s(X0,X1))),s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(forward_demodulation,[],[f102,f99])).
fof(f99,plain,(
  ( ! [X2,X0,X1] : (s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),X2)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X17,X18] : s(bool,'const.list.isPREFIX_2'(s('type.list.list'(X6),X17),s('type.list.list'(X6),X18))) = s(bool,happ(s(fun('type.list.list'(X6),bool),'const.list.isPREFIX_1'(s('type.list.list'(X6),X17))),s('type.list.list'(X6),X18)))),
  file('thm.list.isPREFIX_THM|split|1','ARITY_1_2_const.list.isPREFIX')).
fof(f102,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))),s('type.list.list'(X0),X3))) = s(bool,'const.list.list_CASE_3'(s('type.list.list'(X0),X3),s(bool,'F_0'),s(fun(X0,fun('type.list.list'(X0),bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X0,bool),'=_1'(s(X0,X1))),s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))),s('type.list.list'(X0),X3))) = s(bool,'const.list.list_CASE_3'(s('type.list.list'(X0),X3),s(bool,'F_0'),s(fun(X0,fun('type.list.list'(X0),bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X0,bool),'=_1'(s(X0,X1))),s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X2)))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0] : ! [X1,X2,X3] : s(bool,happ(s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))),s('type.list.list'(X0),X3))) = s(bool,'const.list.list_CASE_3'(s('type.list.list'(X0),X3),s(bool,'F_0'),s(fun(X0,fun('type.list.list'(X0),bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X0,bool),'=_1'(s(X0,X1))),s(fun('type.list.list'(X0),bool),'const.list.isPREFIX_1'(s('type.list.list'(X0),X2)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X8,X7,X16] : s(bool,happ(s(fun('type.list.list'(X6),bool),'const.list.isPREFIX_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),X7))))),s('type.list.list'(X6),X16))) = s(bool,'const.list.list_CASE_3'(s('type.list.list'(X6),X16),s(bool,'F_0'),s(fun(X6,fun('type.list.list'(X6),bool)),'_dst_x00x10x01_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X6,bool),'=_1'(s(X6,X8))),s(fun('type.list.list'(X6),bool),'const.list.isPREFIX_1'(s('type.list.list'(X6),X7)))))))),
  file('thm.list.isPREFIX_THM|split|1','thm.list.isPREFIX|split|1')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 62
% Passive clauses: 775
% Generated clauses: 3331
% Final active clauses: 56
% Final passive clauses: 668
% Input formulas: 24
% Initial clauses: 36
% 
% Duplicate literals: 158
% Trivial inequalities: 43
% Fw subsumption resolutions: 281
% Fw demodulations: 298
% Bw demodulations: 6
% 
% Simple tautologies: 97
% Equational tautologies: 17
% Forward subsumptions: 1598
% 
% Binary resolution: 89
% Forward superposition: 1262
% Backward superposition: 1038
% Self superposition: 61
% Equality factoring: 28
% Equality resolution: 9
% 
% Split clauses: 46
% Split components: 96
% SAT solver clauses: 110
% SAT solver unit clauses: 6
% SAT solver binary clauses: 31
% SAT solver learnt clauses: 1
% 
% Sat splits: 46
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 104
% TWLsolver calls for satisfiability: 37
% 
% Memory used [KB]: 4093
% Time elapsed: 0.111 s
% ------------------------------
% ------------------------------
% Success in time 0.113 s
