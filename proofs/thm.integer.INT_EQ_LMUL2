Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f789,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f788,f50,f82,f80,f775,f51,f83,f81])).
fof(f81,plain,(
  s('type.integer.int',sK1) != s('type.integer.int',sK2) | $spl1),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.integer.int',sK1) != s('type.integer.int',sK2) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) | $spl3),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f51,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) | s('type.integer.int',sK1) != s('type.integer.int',sK2)),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & (s('type.integer.int',sK1) = s('type.integer.int',sK2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2)))) & (s('type.integer.int',sK1) != s('type.integer.int',sK2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f34])).
fof(f34,plain,(
  ? [X0,X1,X2] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & (s('type.integer.int',X1) = s('type.integer.int',X2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) & (s('type.integer.int',X1) != s('type.integer.int',X2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ? [X0,X1,X2] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & ((s('type.integer.int',X1) = s('type.integer.int',X2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))) & (s('type.integer.int',X1) != s('type.integer.int',X2) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))))))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ? [X0,X1,X2] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & (s('type.integer.int',X1) = s('type.integer.int',X2) <~> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2] : (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int',X1) = s('type.integer.int',X2) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ~! [X0,X1,X2] : (~s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int',X1) = s('type.integer.int',X2) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (~s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int',X7) = s('type.integer.int',X8) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (~s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => (s('type.integer.int',X7) = s('type.integer.int',X8) <=> s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8)))))),
  file('thm.integer.INT_EQ_LMUL2','thm.integer.INT_EQ_LMUL2')).
fof(f775,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f770,f81])).
fof(f770,plain,(
  s('type.integer.int',sK1) = s('type.integer.int',sK2) | $spl2),
  inference(equality_resolution,[],[f745])).
fof(f745,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',X0))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl2),
  inference(subsumption_resolution,[],[f731,f49])).
fof(f49,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f35])).
fof(f731,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',X0))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',sK2) = s('type.integer.int',X0)) ) | $spl2),
  inference(superposition,[],[f76,f82])).
fof(f76,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int',X2)) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2] : ((s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) | (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2))) & ((s('type.integer.int',X0) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & s('type.integer.int',X1) != s('type.integer.int',X2)) | s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2)))))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X0),s('type.integer.int',X2))) <=> (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X1) = s('type.integer.int',X2)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7,X8] : (s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',X6),s('type.integer.int',X8))) <=> (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int',X7) = s('type.integer.int',X8)))),
  file('thm.integer.INT_EQ_LMUL2','thm.integer.INT_EQ_LMUL')).
fof(f80,plain,(
  s('type.integer.int',sK1) = s('type.integer.int',sK2) | $spl0),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s('type.integer.int',sK1) = s('type.integer.int',sK2) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f82,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) | $spl2),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f50,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) = s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK2))) | s('type.integer.int',sK1) = s('type.integer.int',sK2)),
  inference(cnf_transformation,[],[f35])).
fof(f788,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f787])).
fof(f787,plain,(
  s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) != s('type.integer.int','const.integer.int_mul_2'(s('type.integer.int',sK0),s('type.integer.int',sK1))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f83,f80])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 147
% Generated clauses: 688
% Final active clauses: 23
% Final passive clauses: 89
% Input formulas: 13
% Initial clauses: 30
% 
% Duplicate literals: 80
% Trivial inequalities: 8
% Fw subsumption resolutions: 69
% Fw demodulations: 17
% Bw demodulations: 1
% 
% Simple tautologies: 44
% Equational tautologies: 30
% Forward subsumptions: 277
% 
% Binary resolution: 35
% Factoring: 1
% Forward superposition: 158
% Backward superposition: 168
% Self superposition: 53
% Equality factoring: 50
% Equality resolution: 5
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 44
% SAT solver unit clauses: 3
% SAT solver binary clauses: 22
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 21
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 42
% TWLsolver calls for satisfiability: 26
% 
% Memory used [KB]: 895
% Time elapsed: 0.026 s
% ------------------------------
% ------------------------------
% Success in time 0.027 s
