Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f2424,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2423,f2403,f289,f488,f486,f288,f487,f485])).
fof(f485,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) | $spl0),
  inference(cnf_transformation,[],[f485_D])).
fof(f485_D,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f487,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | $spl2),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f288,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3)))),
  inference(cnf_transformation,[],[f210])).
fof(f210,plain,(
  (s(fun(sK2,bool),'const.pred_set.EMPTY_0') = s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3)) & (s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) | s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3])],[f209])).
fof(f209,plain,(
  ? [X0,X1] : ((s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)))),
  inference(nnf_transformation,[],[f173])).
fof(f173,plain,(
  ? [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <~> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.list.LIST_TO_SET_EQ_EMPTY|split|1','thm.list.LIST_TO_SET_EQ_EMPTY|split|1')).
fof(f486,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) | $spl1),
  inference(cnf_transformation,[],[f486_D])).
fof(f486_D,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f488,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) | $spl3),
  inference(cnf_transformation,[],[f488_D])).
fof(f488_D,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f289,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') != s('type.list.list'(sK2),sK3) | s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),sK3)))),
  inference(cnf_transformation,[],[f210])).
fof(f2403,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f2402,f488])).
fof(f2402,plain,(
  s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | $spl0),
  inference(trivial_inequality_removal,[],[f2400])).
fof(f2400,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.pred_set.EMPTY_0') | s('type.list.list'(sK2),'const.list.NIL_0') = s('type.list.list'(sK2),sK3) | $spl0),
  inference(superposition,[],[f356,f485])).
fof(f356,plain,(
  ( ! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f247])).
fof(f247,plain,(
  ! [X0,X1] : ((s(fun(X0,bool),'const.pred_set.EMPTY_0') != s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7] : (s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.list.LIST_TO_SET_EQ_EMPTY|split|1','thm.list.LIST_TO_SET_EQ_EMPTY|split|0')).
fof(f2423,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f2422,f297])).
fof(f297,plain,(
  ( ! [X0] : (s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s(fun(X0,bool),'const.pred_set.EMPTY_0') = s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X6] : s(fun(X6,bool),'const.pred_set.EMPTY_0') = s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.LIST_TO_SET_EQ_EMPTY|split|1','thm.list.LIST_TO_SET|split|0')).
fof(f2422,plain,(
  s(fun(sK2,bool),'const.pred_set.EMPTY_0') != s(fun(sK2,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(sK2),'const.list.NIL_0'))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f486,f487])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 73
% Passive clauses: 576
% Generated clauses: 2092
% Final active clauses: 58
% Final passive clauses: 455
% Input formulas: 69
% Initial clauses: 191
% 
% Duplicate literals: 82
% Trivial inequalities: 38
% Fw subsumption resolutions: 159
% Fw demodulations: 198
% Bw demodulations: 12
% 
% Simple tautologies: 145
% Equational tautologies: 24
% Forward subsumptions: 827
% 
% Binary resolution: 311
% Factoring: 1
% Forward superposition: 395
% Backward superposition: 607
% Self superposition: 33
% Equality factoring: 26
% Equality resolution: 6
% 
% Split clauses: 61
% Split components: 124
% SAT solver clauses: 84
% SAT solver unit clauses: 7
% SAT solver binary clauses: 42
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 61
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 79
% TWLsolver calls for satisfiability: 12
% 
% Memory used [KB]: 1791
% Time elapsed: 0.038 s
% ------------------------------
% ------------------------------
% Success in time 0.041 s
