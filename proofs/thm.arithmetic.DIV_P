Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f5280,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5279,f71,f113,f112,f1580,f70,f115,f68,f119,f109,f122,f69,f117,f111,f1711,f1726,f2314,f2308,f2253,f2252])).
fof(f2252,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl44),
  inference(cnf_transformation,[],[f2252_D])).
fof(f2252_D,plain,(
  ( ! [X2,X1] : (~p(s(bool,X1)) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2253,plain,(
  ( ! [X4,X3] : (~p(s(bool,X3)) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f2238,f122])).
fof(f2238,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X3)) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',sK2))),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f455,f128])).
fof(f128,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))),
  inference(resolution,[],[f79,f67])).
fof(f67,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))))),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) & p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | ! [X3,X4] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',sK2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X2))),s('type.num.num',X6))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num',X2)))) & p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X5)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))))),
  inference(rectify,[],[f48])).
fof(f48,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & ((p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))) & (~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3))))))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) & (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) <~> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X2)))))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',X2)))) & p(s(bool,happ(s(fun('type.num.num',bool),X0),s('type.num.num',X3)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X8)))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X8)))) & p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X9)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X8)))))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X8)))) & p(s(bool,happ(s(fun('type.num.num',bool),X6),s('type.num.num',X9)))))))),
  file('thm.arithmetic.DIV_P','thm.arithmetic.DIV_P')).
fof(f79,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.arithmetic.DIV_P','thm.bool.EQ_CLAUSES|split|1')).
fof(f455,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X9))),s('type.num.num',X9)))) )),
  inference(resolution,[],[f77,f106])).
fof(f106,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X12,X13] : ((p(s(bool,X12)) => p(s(bool,X13))) => ((p(s(bool,X13)) => p(s(bool,X12))) => s(bool,X12) = s(bool,X13)))),
  file('thm.arithmetic.DIV_P','thm.bool.IMP_ANTISYM_AX')).
fof(f77,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))) => ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X9),s('type.num.num',X11))),s('type.num.num',X11))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',X11))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',X11))),s('type.num.num',X11))))))),
  file('thm.arithmetic.DIV_P','thm.arithmetic.DIVISION')).
fof(f2308,plain,(
  ( ! [X33] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X33),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl50),
  inference(cnf_transformation,[],[f2308_D])).
fof(f2308_D,plain,(
  ( ! [X33] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X33),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2314,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | ($spl12 | $spl44)),
  inference(forward_demodulation,[],[f2313,f128])).
fof(f2313,plain,(
  ( ! [X48] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | ($spl12 | $spl44)),
  inference(subsumption_resolution,[],[f2291,f122])).
fof(f2291,plain,(
  ( ! [X48] : (~p(s(bool,'T_0')) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X48),s('type.num.num',sK2))),s('type.num.num',sK2)))) ) | $spl44),
  inference(superposition,[],[f2252,f128])).
fof(f1726,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl32),
  inference(cnf_transformation,[],[f1726_D])).
fof(f1726_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1711,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl0),
  inference(resolution,[],[f111,f79])).
fof(f111,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | $spl0),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f117,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | $spl6),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f69,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f50])).
fof(f122,plain,(
  p(s(bool,'T_0')) | $spl12),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f109,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f101])).
fof(f101,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X15] : ! [X16] : (s(X15,X16) = s(X15,X16) <=> p(s(bool,'T_0')))),
  file('thm.arithmetic.DIV_P','thm.bool.REFL_CLAUSE')).
fof(f119,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) | $spl8),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f68,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK3),s('type.num.num',sK2))),s('type.num.num',sK4))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f50])).
fof(f115,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3)))) | $spl4),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f70,plain,(
  p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3)))) | p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f50])).
fof(f1580,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f1571,f134])).
fof(f134,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3))) | $spl4),
  inference(resolution,[],[f115,f79])).
fof(f1571,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',sK3))) | ($spl1 | $spl6 | $spl8 | $spl12)),
  inference(backward_demodulation,[],[f1568,f208])).
fof(f208,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))) | $spl1),
  inference(resolution,[],[f112,f78])).
fof(f78,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f51])).
fof(f1568,plain,(
  s('type.num.num',sK3) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))) | ($spl6 | $spl8 | $spl12)),
  inference(equality_resolution,[],[f1566])).
fof(f1566,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | ($spl6 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f1565,f122])).
fof(f1565,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | ($spl6 | $spl8)),
  inference(forward_demodulation,[],[f1558,f129])).
fof(f129,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2))) | $spl6),
  inference(resolution,[],[f79,f117])).
fof(f1558,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4),s('type.num.num',sK2)))) | s('type.num.num',sK3) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK2)))) ) | $spl8),
  inference(superposition,[],[f108,f119])).
fof(f108,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : (! [X3] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0))))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : (? [X3] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X3))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num',X0))))) => s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X11,X9,X8] : (? [X10] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X11))),s('type.num.num',X10))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num',X11))))) => s('type.num.num',X8) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X9),s('type.num.num',X11))))),
  file('thm.arithmetic.DIV_P','thm.arithmetic.DIV_UNIQUE')).
fof(f112,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f113,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',sK2))))) ) | $spl2),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',sK2))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f71,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num',X3)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num',sK2)))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',X4))) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2))))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f5279,plain,(
  $false | ($spl2 | $spl12 | $spl32 | $spl50)),
  inference(subsumption_resolution,[],[f5278,f122])).
fof(f5278,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl12 | $spl32 | $spl50)),
  inference(forward_demodulation,[],[f5277,f1726])).
fof(f5277,plain,(
  ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num',sK2)))))) | ($spl2 | $spl12 | $spl50)),
  inference(equality_resolution,[],[f3958])).
fof(f3958,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X3),s('type.num.num',sK2))))))) ) | ($spl2 | $spl12 | $spl50)),
  inference(subsumption_resolution,[],[f3957,f122])).
fof(f3957,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) != s('type.num.num',X3) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X3),s('type.num.num',sK2))))))) ) | ($spl2 | $spl50)),
  inference(forward_demodulation,[],[f3956,f2308])).
fof(f3956,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X3),s('type.num.num',sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',sK2))))) ) | $spl2),
  inference(subsumption_resolution,[],[f3942,f128])).
fof(f3942,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | ~p(s(bool,happ(s(fun('type.num.num',bool),sK0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X3),s('type.num.num',sK2)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X3),s('type.num.num',sK2))),s('type.num.num',sK2)))) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) ) | $spl2),
  inference(superposition,[],[f113,f1526])).
fof(f1526,plain,(
  ( ! [X12,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X11),s('type.num.num',X12))),s('type.num.num',X12))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num',X12))))) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) )),
  inference(resolution,[],[f76,f78])).
fof(f76,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f42])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 87
% Passive clauses: 702
% Generated clauses: 5074
% Final active clauses: 72
% Final passive clauses: 472
% Input formulas: 19
% Initial clauses: 42
% 
% Duplicate literals: 359
% Trivial inequalities: 115
% Fw subsumption resolutions: 819
% Fw demodulations: 447
% Bw demodulations: 10
% 
% Simple tautologies: 194
% Equational tautologies: 36
% Forward subsumptions: 2220
% 
% Binary resolution: 187
% Factoring: 1
% Forward superposition: 1501
% Backward superposition: 1401
% Self superposition: 62
% Equality factoring: 64
% Equality resolution: 16
% 
% Split clauses: 107
% Split components: 224
% SAT solver clauses: 280
% SAT solver unit clauses: 12
% SAT solver binary clauses: 76
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 3
% 
% Sat splits: 107
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 273
% TWLsolver calls for satisfiability: 73
% 
% Memory used [KB]: 2558
% Time elapsed: 0.108 s
% ------------------------------
% ------------------------------
% Success in time 0.11 s
