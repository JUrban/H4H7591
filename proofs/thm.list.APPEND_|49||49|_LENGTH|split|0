Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% (46657)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 124
% Passive clauses: 2354
% Generated clauses: 15271
% Final active clauses: 115
% Final passive clauses: 2089
% Input formulas: 8
% Initial clauses: 28
% 
% Duplicate literals: 1004
% Trivial inequalities: 177
% Fw subsumption resolutions: 2230
% Fw demodulations: 791
% 
% Simple tautologies: 299
% Equational tautologies: 101
% Forward subsumptions: 6273
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 192
% Forward superposition: 6596
% Backward superposition: 3708
% Self superposition: 334
% Equality factoring: 272
% Equality resolution: 26
% 
% Split clauses: 789
% Split components: 1587
% SAT solver clauses: 2186
% SAT solver unit clauses: 247
% SAT solver binary clauses: 576
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 789
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2176
% TWLsolver calls for satisfiability: 118
% 
% Memory used [KB]: 6140
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f4267,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4266,f3870,f3871,f103,f105,f3865,f3866,f44,f75,f73,f71,f3843,f3852,f41,f77,f52,f92,f102,f42,f72,f43,f74,f70,f3884,f4248,f4257,f3071,f3077,f54,f90,f3887,f3900,f3886])).
fof(f3886,plain,(
  $false | ($spl0 | $spl234)),
  inference(subsumption_resolution,[],[f70,f3866])).
fof(f3900,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) | $spl242),
  inference(cnf_transformation,[],[f3900_D])).
fof(f3900_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f3887,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f72,f70])).
fof(f90,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) ) | $spl28),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f54,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X8,X9,X10] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10)))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  file('thm.list.APPEND_|49||49|_LENGTH|split|0','thm.list.list_|49||48|8_prove_ltb')).
fof(f3077,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) ) | $spl218),
  inference(cnf_transformation,[],[f3077_D])).
fof(f3077_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f3071,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X3)) ) | $spl28),
  inference(equality_resolution,[],[f90])).
fof(f4257,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X0)) ) | $spl260),
  inference(cnf_transformation,[],[f4257_D])).
fof(f4257_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X0)) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f4248,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X0)) ) | ($spl218 | $spl242)),
  inference(superposition,[],[f3077,f3900])).
fof(f3884,plain,(
  $false | $spl236),
  inference(equality_resolution,[],[f3871])).
fof(f70,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | $spl0),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f74,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) | $spl4),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f43,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4))) & (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | (s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) & s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5))) & (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <~> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  file('thm.list.APPEND_|49||49|_LENGTH|split|0','thm.list.APPEND_|49||49|_LENGTH|split|0')).
fof(f72,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) | $spl2),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f102,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f101])).
fof(f101,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f100,f72])).
fof(f100,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f71,f74])).
fof(f92,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) | $spl32),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f52,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f77,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4))) | $spl6),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f41,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK4)))),
  inference(cnf_transformation,[],[f28])).
fof(f3852,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),X2))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) | $spl232),
  inference(cnf_transformation,[],[f3852_D])).
fof(f3852_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),X2))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f3843,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),X2))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) | ($spl6 | $spl32)),
  inference(superposition,[],[f92,f77])).
fof(f71,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | $spl1),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f73,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | $spl3),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f75,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) | $spl5),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f44,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f3866,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X0)))) ) | $spl234),
  inference(cnf_transformation,[],[f3866_D])).
fof(f3866_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X0)))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f3865,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X0)))) ) | ($spl3 | $spl232)),
  inference(subsumption_resolution,[],[f3860,f73])).
fof(f3860,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X1))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),X0))) | s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4)) ) | $spl232),
  inference(equality_resolution,[],[f3852])).
fof(f105,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | $spl46),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f103,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f70,f74])).
fof(f3871,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0)))) ) | $spl236),
  inference(cnf_transformation,[],[f3871_D])).
fof(f3871_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0)))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f3870,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),X0)))) ) | ($spl46 | $spl234)),
  inference(superposition,[],[f3866,f105])).
fof(f4266,plain,(
  $false | ($spl5 | $spl260)),
  inference(subsumption_resolution,[],[f4263,f75])).
fof(f4263,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) | $spl260),
  inference(equality_resolution,[],[f4257])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 54
% Passive clauses: 127
% Generated clauses: 4116
% Final active clauses: 41
% Final passive clauses: 69
% Input formulas: 8
% Initial clauses: 28
% 
% Duplicate literals: 720
% Trivial inequalities: 38
% Fw subsumption resolutions: 144
% Fw demodulations: 91
% Bw demodulations: 8
% Condensations: 1173
% Global subsumptions: 1
% 
% Simple tautologies: 83
% Equational tautologies: 60
% Forward subsumptions: 1404
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 43
% Forward superposition: 693
% Backward superposition: 732
% Self superposition: 178
% Equality factoring: 174
% Equality resolution: 16
% 
% Split clauses: 53
% Split components: 107
% SAT solver clauses: 370
% SAT solver unit clauses: 36
% SAT solver binary clauses: 78
% SAT solver learnt clauses: 5
% SAT solver learnt literals: 4
% 
% Sat splits: 53
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 363
% TWLsolver calls for satisfiability: 344
% 
% Memory used [KB]: 3326
% Time elapsed: 0.465 s
% ------------------------------
% ------------------------------
% Success in time 1.069 s
