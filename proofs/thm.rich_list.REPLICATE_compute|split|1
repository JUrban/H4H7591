Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (74084)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 424
% Passive clauses: 3182
% Generated clauses: 32791
% Final active clauses: 165
% Final passive clauses: 1675
% Input formulas: 69
% Initial clauses: 107
% 
% Duplicate literals: 411
% Trivial inequalities: 286
% Fw subsumption resolutions: 1214
% Fw demodulations: 3723
% Bw demodulations: 207
% 
% Simple tautologies: 215
% Equational tautologies: 37
% Forward subsumptions: 23459
% Fw demodulations to eq. taut.: 28
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 272
% Factoring: 1
% Forward superposition: 11508
% Backward superposition: 14362
% Self superposition: 225
% Equality factoring: 66
% Equality resolution: 23
% 
% Split clauses: 390
% Split components: 787
% SAT solver clauses: 616
% SAT solver unit clauses: 21
% SAT solver binary clauses: 116
% 
% Sat splits: 390
% Sat splitting refutations: 18
% 
% TWLsolver clauses: 615
% TWLsolver calls for satisfiability: 144
% 
% Memory used [KB]: 20980
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f8546,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8545,f2689,f2736,f306,f400,f514,f515,f218,f329,f411,f412,f229,f342,f477,f494,f226,f339,f4637,f4654,f276,f372,f506,f508,f215,f325,f221,f334,f8400,f8466,f3003,f3004,f307,f401,f476,f493,f225,f338,f957,f975,f474,f491,f223,f336])).
fof(f336,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl14),
  inference(cnf_transformation,[],[f336_D])).
fof(f336_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f223,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X27] : s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X27)))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f491,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl200),
  inference(cnf_transformation,[],[f491_D])).
fof(f491_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f474,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | ($spl4 | $spl14)),
  inference(backward_demodulation,[],[f329,f336])).
fof(f975,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl296),
  inference(cnf_transformation,[],[f975_D])).
fof(f975_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f957,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | ($spl200 | $spl234)),
  inference(superposition,[],[f515,f491])).
fof(f338,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl18),
  inference(cnf_transformation,[],[f338_D])).
fof(f338_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f225,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X27] : s('type.num.num',X27) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.SUB_|48||split|1')).
fof(f493,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl204),
  inference(cnf_transformation,[],[f493_D])).
fof(f493_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f476,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl4 | $spl18)),
  inference(backward_demodulation,[],[f329,f338])).
fof(f401,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) | $spl136),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f307,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X7,X27] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X27)))))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.SUB_MONO_EQ')).
fof(f3004,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl602),
  inference(cnf_transformation,[],[f3004_D])).
fof(f3004_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl602),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl602])])).
fof(f3003,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl136 | $spl204 | $spl296)),
  inference(forward_demodulation,[],[f2962,f493])).
fof(f2962,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl136 | $spl296)),
  inference(superposition,[],[f401,f975])).
fof(f8466,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl1440),
  inference(cnf_transformation,[],[f8466_D])).
fof(f8466_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl1440),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1440])])).
fof(f8400,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl550 | $spl602)),
  inference(superposition,[],[f3004,f2736])).
fof(f334,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl10),
  inference(cnf_transformation,[],[f334_D])).
fof(f334_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f221,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.NUMERAL_DEF')).
fof(f325,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2))))) | $spl1),
  inference(cnf_transformation,[],[f325_D])).
fof(f325_D,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f215,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2)))))),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f167])).
fof(f167,plain,(
  ? [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s(X0,X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(X0,X2)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(X0,X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(X0,X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s(X6,X8))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(X6,X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s(X6,X8))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(X6,X8)))))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.rich_list.REPLICATE_compute|split|1')).
fof(f508,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(sK0,sK2))))) | $spl229),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(sK0,sK2))))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f506,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(sK0,sK2))))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f505,f334])).
fof(f505,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s(sK0,sK2))))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f325,f334])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num',X1),s(X0,X2)))))) ) | $spl78),
  inference(cnf_transformation,[],[f372_D])).
fof(f372_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num',X1),s(X0,X2)))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f276,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num',X1),s(X0,X2)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num',X1),s(X0,X2)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.rich_list.REPLICATE_2'(s('type.num.num',X1),s(X0,X2)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X7,X8] : s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))),s(X6,X8))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.rich_list.REPLICATE_2'(s('type.num.num',X7),s(X6,X8)))))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.rich_list.REPLICATE|split|1')).
fof(f4654,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2))) | $spl829),
  inference(cnf_transformation,[],[f4654_D])).
fof(f4654_D,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2))) <=> ~$spl829),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl829])])).
fof(f4637,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(sK0,sK2))) | ($spl78 | $spl229)),
  inference(superposition,[],[f508,f372])).
fof(f339,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f339_D])).
fof(f339_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f226,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X27] : s('type.num.num',X27) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.ADD_|48|')).
fof(f494,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl206),
  inference(cnf_transformation,[],[f494_D])).
fof(f494_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f477,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | ($spl4 | $spl20)),
  inference(backward_demodulation,[],[f329,f339])).
fof(f342,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl26),
  inference(cnf_transformation,[],[f342_D])).
fof(f342_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X7] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.BIT|49|')).
fof(f412,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | $spl152),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f411,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | ($spl26 | $spl134)),
  inference(forward_demodulation,[],[f342,f400])).
fof(f329,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl4),
  inference(cnf_transformation,[],[f329_D])).
fof(f329_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f218,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f48])).
fof(f48,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.ALT_ZERO')).
fof(f515,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl234),
  inference(cnf_transformation,[],[f515_D])).
fof(f515_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f514,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl4 | $spl152 | $spl206)),
  inference(forward_demodulation,[],[f513,f494])).
fof(f513,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl4 | $spl152)),
  inference(forward_demodulation,[],[f412,f329])).
fof(f400,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl134),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f306,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X7,X27] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))),
  file('thm.rich_list.REPLICATE_compute|split|1','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f2736,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) ) | $spl550),
  inference(cnf_transformation,[],[f2736_D])).
fof(f2736_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) ) <=> ~$spl550),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl550])])).
fof(f2689,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) ) | ($spl134 | $spl234)),
  inference(superposition,[],[f400,f515])).
fof(f8545,plain,(
  $false | ($spl550 | $spl829 | $spl1440)),
  inference(trivial_inequality_removal,[],[f8544])).
fof(f8544,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) | ($spl550 | $spl829 | $spl1440)),
  inference(forward_demodulation,[],[f8494,f2736])).
fof(f8494,plain,(
  s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))),s(sK0,sK2))) != s('type.list.list'(sK0),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),s(sK0,sK2))) | ($spl829 | $spl1440)),
  inference(backward_demodulation,[],[f8466,f4654])).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 135
% Passive clauses: 766
% Generated clauses: 8286
% Final active clauses: 113
% Final passive clauses: 444
% Input formulas: 69
% Initial clauses: 107
% 
% Duplicate literals: 92
% Trivial inequalities: 33
% Fw subsumption resolutions: 157
% Fw demodulations: 1086
% Bw demodulations: 194
% Condensations: 142
% Global subsumptions: 4
% 
% Simple tautologies: 49
% Equational tautologies: 19
% Forward subsumptions: 5032
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 7
% 
% Binary resolution: 121
% Factoring: 1
% Forward superposition: 2758
% Backward superposition: 2655
% Self superposition: 76
% Equality factoring: 28
% Equality resolution: 5
% 
% Split clauses: 58
% Split components: 116
% SAT solver clauses: 973
% SAT solver unit clauses: 143
% SAT solver binary clauses: 39
% SAT solver learnt clauses: 9
% 
% Sat splits: 58
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 956
% TWLsolver calls for satisfiability: 419
% 
% Memory used [KB]: 9466
% Time elapsed: 0.224 s
% ------------------------------
% ------------------------------
% Success in time 0.85 s
