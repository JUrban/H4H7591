Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (111827)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 734
% Passive clauses: 10682
% Generated clauses: 23739
% Final active clauses: 734
% Final passive clauses: 9480
% Input formulas: 69
% Initial clauses: 231
% 
% Duplicate literals: 510
% Trivial inequalities: 64
% Fw subsumption resolutions: 1736
% Fw demodulations: 733
% 
% Simple tautologies: 246
% Equational tautologies: 62
% Forward subsumptions: 9561
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 10985
% Factoring: 2516
% Forward superposition: 2693
% Backward superposition: 4002
% Self superposition: 61
% Equality factoring: 26
% Equality resolution: 37
% 
% Split clauses: 321
% Split components: 668
% SAT solver clauses: 611
% SAT solver unit clauses: 17
% SAT solver binary clauses: 103
% 
% Sat splits: 321
% 
% TWLsolver clauses: 611
% TWLsolver calls for satisfiability: 386
% 
% Memory used [KB]: 13304
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (111849)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 391
% Passive clauses: 2526
% Generated clauses: 9851
% Final active clauses: 385
% Final passive clauses: 2097
% Input formulas: 69
% Initial clauses: 231
% 
% Duplicate literals: 130
% Trivial inequalities: 6
% Fw subsumption resolutions: 527
% Fw demodulations: 371
% Bw demodulations: 39
% Condensations: 152
% Global subsumptions: 18
% 
% Simple tautologies: 241
% Equational tautologies: 16
% Forward subsumptions: 3077
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 3369
% Factoring: 342
% Forward superposition: 1314
% Backward superposition: 755
% Self superposition: 43
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 3013
% SAT solver unit clauses: 252
% SAT solver binary clauses: 94
% SAT solver learnt clauses: 36
% SAT solver learnt literals: 10
% 
% Sat splits: 4
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2941
% TWLsolver calls for satisfiability: 1987
% 
% Memory used [KB]: 14072
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f24347,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f24346])).
fof(f24346,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK12),sK15))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK12),sK15)))))))),
  inference(backward_demodulation,[],[f24341,f1415])).
fof(f1415,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK12),sK15))))))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK15)))))))),
  inference(unit_resulting_resolution,[],[f330,f429])).
fof(f429,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f270])).
fof(f270,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X29,X30] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X30))) <=> s('type.num.num',X29) = s('type.num.num',X30))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.prim_rec.INV_SUC_EQ')).
fof(f330,plain,(
  s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK12),sK15))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK15)))))),
  inference(cnf_transformation,[],[f225])).
fof(f225,plain,(
  s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),'const.list.APPEND_2'(s('type.list.list'(sK12),sK14),s('type.list.list'(sK12),sK15))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK14))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(sK12,sK13),s('type.list.list'(sK12),sK15)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f175])).
fof(f175,plain,(
  ? [X0,X1,X2,X3] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2,X3] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X8),s('type.list.list'(X6),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),X8))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X8),s('type.list.list'(X6),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),X8))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X6,X7),s('type.list.list'(X6),X9)))))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.rich_list.LIST_ELEM_COUNT_THM|split|1')).
fof(f24341,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X3)))))) )),
  inference(forward_demodulation,[],[f24340,f403])).
fof(f403,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X19] : ! [X7,X20] : s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X19,X7),s('type.list.list'(X19),X20))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),'const.list.FILTER_2'(s(fun(X19,bool),'_dst_x1x0_2'(s(fun(X19,fun(X19,bool)),'=_0'),s(X19,X7))),s('type.list.list'(X19),X20)))))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.rich_list.LIST_ELEM_COUNT_DEF')).
fof(f24340,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X3))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3)))))))) )),
  inference(forward_demodulation,[],[f24339,f403])).
fof(f24339,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),X3)))))))) )),
  inference(forward_demodulation,[],[f23039,f400])).
fof(f400,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.bool.COND_3'(s(bool,'F_0'),s(X0,X1),s(X0,X2)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X19] : ! [X24,X25] : s(X19,X25) = s(X19,'const.bool.COND_3'(s(bool,'F_0'),s(X19,X24),s(X19,X25)))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.bool.COND_CLAUSES|split|1')).
fof(f23039,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.rich_list.LIST_ELEM_COUNT_2'(s(X0,X1),s('type.list.list'(X0),X2))),s('type.num.num','const.bool.COND_3'(s(bool,'F_0'),s('type.num.num',X4),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s('type.list.list'(X0),X3)))))))))) )),
  inference(unit_resulting_resolution,[],[f403,f400,f413,f418])).
fof(f418,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK22(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK21(X3,X2,X1,X0)),s('type.list.list'(X0),sK22(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK21,sK22])],[f268])).
fof(f268,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f267])).
fof(f267,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f137])).
fof(f137,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X19] : ! [X20,X39,X40] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X20))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X40))) <=> ? [X8,X9] : (s('type.num.num',X39) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X8))) & s('type.num.num',X40) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X19),X9))) & s('type.list.list'(X19),X20) = s('type.list.list'(X19),'const.list.APPEND_2'(s('type.list.list'(X19),X8),s('type.list.list'(X19),X9)))))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.list.LENGTH_EQ_SUM')).
fof(f413,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.FILTER_2'(s(fun(X0,bool),X1),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X19] : ! [X31,X35,X36] : s('type.list.list'(X19),'const.list.FILTER_2'(s(fun(X19,bool),X31),s('type.list.list'(X19),'const.list.APPEND_2'(s('type.list.list'(X19),X35),s('type.list.list'(X19),X36))))) = s('type.list.list'(X19),'const.list.APPEND_2'(s('type.list.list'(X19),'const.list.FILTER_2'(s(fun(X19,bool),X31),s('type.list.list'(X19),X35))),s('type.list.list'(X19),'const.list.FILTER_2'(s(fun(X19,bool),X31),s('type.list.list'(X19),X36)))))),
  file('thm.rich_list.LIST_ELEM_COUNT_THM|split|1','thm.list.FILTER_APPEND_DISTRIB')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 263
% Passive clauses: 1017
% Generated clauses: 24011
% Final active clauses: 263
% Final passive clauses: 749
% Input formulas: 69
% Initial clauses: 231
% 
% Duplicate literals: 35
% Trivial inequalities: 3
% Fw subsumption resolutions: 11
% Fw demodulations: 14021
% Bw demodulations: 5
% Condensations: 56
% Global subsumptions: 1
% 
% Simple tautologies: 64
% Equational tautologies: 25
% Forward subsumptions: 5367
% Fw demodulations to eq. taut.: 3308
% 
% Unit resulting resolution: 7557
% Factoring: 1
% Forward superposition: 1205
% Backward superposition: 844
% Self superposition: 32
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 1
% Split components: 2
% SAT solver clauses: 1022
% SAT solver unit clauses: 306
% SAT solver binary clauses: 510
% 
% Sat splits: 1
% 
% Memory used [KB]: 14711
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% Success in time 2.02 s
