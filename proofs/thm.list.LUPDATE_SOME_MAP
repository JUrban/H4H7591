Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.list
% (83255)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 188
% Passive clauses: 4286
% Generated clauses: 20813
% Final active clauses: 144
% Final passive clauses: 3812
% Input formulas: 69
% Initial clauses: 121
% 
% Duplicate literals: 682
% Trivial inequalities: 365
% Fw subsumption resolutions: 1929
% Fw demodulations: 3023
% Bw demodulations: 40
% 
% Simple tautologies: 482
% Equational tautologies: 48
% Forward subsumptions: 9870
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 413
% Factoring: 1
% Forward superposition: 7606
% Backward superposition: 7063
% Self superposition: 202
% Equality factoring: 88
% Equality resolution: 34
% 
% Split clauses: 137
% Split components: 275
% SAT solver clauses: 378
% SAT solver unit clauses: 19
% SAT solver binary clauses: 102
% 
% Sat splits: 137
% Sat splitting refutations: 15
% 
% TWLsolver clauses: 376
% TWLsolver calls for satisfiability: 100
% 
% Memory used [KB]: 19829
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% (83286)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 126
% Passive clauses: 1420
% Generated clauses: 15201
% Final active clauses: 123
% Final passive clauses: 1280
% Input formulas: 69
% Initial clauses: 121
% 
% Duplicate literals: 549
% Trivial inequalities: 181
% Fw subsumption resolutions: 865
% Fw demodulations: 1604
% Bw demodulations: 17
% Condensations: 890
% Global subsumptions: 8
% 
% Simple tautologies: 241
% Equational tautologies: 39
% Forward subsumptions: 7015
% 
% Binary resolution: 209
% Factoring: 1
% Forward superposition: 4865
% Backward superposition: 4365
% Self superposition: 141
% Equality factoring: 64
% Equality resolution: 20
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 2511
% SAT solver unit clauses: 152
% SAT solver binary clauses: 59
% SAT solver learnt clauses: 16
% 
% Sat splits: 18
% 
% TWLsolver clauses: 2479
% TWLsolver calls for satisfiability: 383
% 
% Memory used [KB]: 17526
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.list
% (83307)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 653
% Passive clauses: 15319
% Generated clauses: 142702
% Final active clauses: 195
% Final passive clauses: 1317
% Input formulas: 69
% Initial clauses: 121
% Discarded non-redundant clauses: 8105
% 
% Duplicate literals: 3931
% Trivial inequalities: 943
% Fw subsumption resolutions: 7384
% Fw demodulations: 26294
% Bw demodulations: 8466
% Condensations: 5111
% Global subsumptions: 1153
% 
% Simple tautologies: 993
% Equational tautologies: 947
% Forward subsumptions: 75264
% Fw demodulations to eq. taut.: 3341
% Bw demodulations to eq. taut.: 387
% 
% Unit resulting resolution: 11623
% Factoring: 4
% Forward superposition: 40183
% Backward superposition: 26089
% Self superposition: 348
% Equality factoring: 156
% Equality resolution: 77
% 
% Split clauses: 64
% Split components: 138
% SAT solver clauses: 18104
% SAT solver unit clauses: 867
% SAT solver binary clauses: 4378
% 
% Sat splits: 64
% Sat splitting refutations: 1502
% 
% Memory used [KB]: 118846
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f802,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f801])).
fof(f801,plain,(
  s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5))))))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5)))))))),
  inference(forward_demodulation,[],[f790,f185])).
fof(f185,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X10,X16] : s('type.option.option'(X6),'const.option.SOME_1'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X16))))) = s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X10),s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X16)))))),
  file('thm.list.LUPDATE_SOME_MAP','thm.option.OPTION_MAP_DEF|split|0')).
fof(f790,plain,(
  s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5))))))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5)))))))),
  inference(equality_resolution,[],[f361])).
fof(f361,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),X0),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) != s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) | s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK4),s('type.option.option'(sK1),X0))))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5)))))))) )),
  inference(forward_demodulation,[],[f332,f188])).
fof(f188,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),happ(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),happ(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),happ(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X12,X13] : s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X12),s('type.option.option'(X7),X13))) = s('type.option.option'(X6),happ(s(fun('type.option.option'(X7),'type.option.option'(X6)),'const.option.OPTION_MAP_1'(s(fun(X7,X6),X12))),s('type.option.option'(X7),X13)))),
  file('thm.list.LUPDATE_SOME_MAP','ARITY_1_2_const.option.OPTION_MAP')).
fof(f332,plain,(
  ( ! [X0] : (s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),X0),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) != s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) | s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5))))))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),happ(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.option.option'(sK1),X0)))))) )),
  inference(superposition,[],[f236,f177])).
fof(f177,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),'const.list.LUPDATE_3'(s(X1,X2),s('type.num.num',X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.LUPDATE_3'(s(X0,happ(s(fun(X1,X0),X5),s(X1,X2))),s('type.num.num',X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),'const.list.LUPDATE_3'(s(X1,X2),s('type.num.num',X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.LUPDATE_3'(s(X0,happ(s(fun(X1,X0),X5),s(X1,X2))),s('type.num.num',X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),'const.list.LUPDATE_3'(s(X1,X2),s('type.num.num',X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.LUPDATE_3'(s(X0,happ(s(fun(X1,X0),X5),s(X1,X2))),s('type.num.num',X3),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X5),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X16,X9,X17,X10] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),'const.list.LUPDATE_3'(s(X7,X16),s('type.num.num',X9),s('type.list.list'(X7),X17))))) = s('type.list.list'(X6),'const.list.LUPDATE_3'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X16))),s('type.num.num',X9),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X10),s('type.list.list'(X7),X17)))))),
  file('thm.list.LUPDATE_SOME_MAP','thm.list.LUPDATE_MAP')).
fof(f236,plain,(
  ( ! [X2] : (s('type.list.list'('type.option.option'(sK0)),'const.list.LUPDATE_3'(s('type.option.option'(sK0),X2),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),sK2))))) != s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) | s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X2))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5)))))))) )),
  inference(superposition,[],[f158,f165])).
fof(f165,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X7] : ! [X16,X21] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X16))) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X21))) <=> s(X7,X16) = s(X7,X21))),
  file('thm.list.LUPDATE_SOME_MAP','thm.option.SOME_|49||49|')).
fof(f158,plain,(
  s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) != s('type.list.list'('type.option.option'(sK0)),'const.list.LUPDATE_3'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5))))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),sK2)))))),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),'const.list.LUPDATE_3'(s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK1)),sK2))))) != s('type.list.list'('type.option.option'(sK0)),'const.list.LUPDATE_3'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(sK1,sK0),sK4),s(sK1,sK5))))),s('type.num.num',sK3),s('type.list.list'('type.option.option'(sK0)),'const.list.MAP_2'(s(fun('type.option.option'(sK1),'type.option.option'(sK0)),'const.option.OPTION_MAP_1'(s(fun(sK1,sK0),sK4))),s('type.list.list'('type.option.option'(sK1)),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f126])).
fof(f126,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),'const.list.LUPDATE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X1)),X2))))) != s('type.list.list'('type.option.option'(X0)),'const.list.LUPDATE_3'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X5))))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),X2)))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),'const.list.LUPDATE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X1)),X2))))) = s('type.list.list'('type.option.option'(X0)),'const.list.LUPDATE_3'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X5))))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),'const.list.LUPDATE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X5))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X1)),X2))))) = s('type.list.list'('type.option.option'(X0)),'const.list.LUPDATE_3'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X4),s(X1,X5))))),s('type.num.num',X3),s('type.list.list'('type.option.option'(X0)),'const.list.MAP_2'(s(fun('type.option.option'(X1),'type.option.option'(X0)),'const.option.OPTION_MAP_1'(s(fun(X1,X0),X4))),s('type.list.list'('type.option.option'(X1)),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun('type.option.option'(X7),'type.option.option'(X6)),'const.option.OPTION_MAP_1'(s(fun(X7,X6),X10))),s('type.list.list'('type.option.option'(X7)),'const.list.LUPDATE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))),s('type.num.num',X9),s('type.list.list'('type.option.option'(X7)),X8))))) = s('type.list.list'('type.option.option'(X6)),'const.list.LUPDATE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X11))))),s('type.num.num',X9),s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun('type.option.option'(X7),'type.option.option'(X6)),'const.option.OPTION_MAP_1'(s(fun(X7,X6),X10))),s('type.list.list'('type.option.option'(X7)),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun('type.option.option'(X7),'type.option.option'(X6)),'const.option.OPTION_MAP_1'(s(fun(X7,X6),X10))),s('type.list.list'('type.option.option'(X7)),'const.list.LUPDATE_3'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))),s('type.num.num',X9),s('type.list.list'('type.option.option'(X7)),X8))))) = s('type.list.list'('type.option.option'(X6)),'const.list.LUPDATE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,happ(s(fun(X7,X6),X10),s(X7,X11))))),s('type.num.num',X9),s('type.list.list'('type.option.option'(X6)),'const.list.MAP_2'(s(fun('type.option.option'(X7),'type.option.option'(X6)),'const.option.OPTION_MAP_1'(s(fun(X7,X6),X10))),s('type.list.list'('type.option.option'(X7)),X8)))))),
  file('thm.list.LUPDATE_SOME_MAP','thm.list.LUPDATE_SOME_MAP')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 64
% Passive clauses: 350
% Generated clauses: 574
% Final active clauses: 64
% Final passive clauses: 294
% Input formulas: 69
% Initial clauses: 70
% 
% Selected by SInE selection: 35
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 2
% Fw demodulations: 102
% 
% Simple tautologies: 30
% Equational tautologies: 3
% Forward subsumptions: 148
% 
% Forward superposition: 445
% Equality resolution: 25
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2558
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 11.784 s
