Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f404,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f401,f47,f70,f69,f296,f46,f72,f68,f305])).
fof(f305,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f303,f197])).
fof(f197,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl9),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f303,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl0),
  inference(resolution,[],[f68,f56])).
fof(f56,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.arithmetic.EVEN_EXISTS','thm.bool.EQ_CLAUSES|split|0')).
fof(f68,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl0),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f72,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | $spl4),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f46,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))) & (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | ! [X1] : s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f37])).
fof(f37,plain,(
  ? [X0] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))) & (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ! [X1] : s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f36])).
fof(f36,plain,(
  ? [X0] : ((p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) & (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ! [X1] : s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ? [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <~> ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) <=> ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) <=> ? [X7] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) <=> ? [X7] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))),
  file('thm.arithmetic.EVEN_EXISTS','thm.arithmetic.EVEN_EXISTS')).
fof(f296,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f295,f50])).
fof(f50,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.EVEN_EXISTS',aHL_FALSITY)).
fof(f295,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f292,f77])).
fof(f77,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl1),
  inference(resolution,[],[f60,f69])).
fof(f60,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X10] : (s(bool,'F_0') = s(bool,X10) <=> ~p(s(bool,X10)))),
  file('thm.arithmetic.EVEN_EXISTS','thm.bool.EQ_CLAUSES|split|2')).
fof(f292,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl4),
  inference(superposition,[],[f51,f72])).
fof(f51,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X6))))))),
  file('thm.arithmetic.EVEN_EXISTS','thm.arithmetic.EVEN_DOUBLE')).
fof(f69,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl1),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f70,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) | $spl2),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f47,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f401,plain,(
  $false | ($spl2 | $spl8)),
  inference(subsumption_resolution,[],[f400,f70])).
fof(f400,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) | $spl8),
  inference(subsumption_resolution,[],[f395,f48])).
fof(f48,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.EVEN_EXISTS',aHL_TRUTH)).
fof(f395,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(sK0)))) | $spl8),
  inference(superposition,[],[f53,f196])).
fof(f196,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl8),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f53,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f31])).
fof(f31,plain,(
  ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) => ? [X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) => ? [X7] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))),
  file('thm.arithmetic.EVEN_EXISTS','thm.arithmetic.EVEN_ODD_EXISTS|split|0')).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 28
% Passive clauses: 94
% Generated clauses: 357
% Final active clauses: 18
% Final passive clauses: 33
% Input formulas: 14
% Initial clauses: 22
% 
% Duplicate literals: 8
% Trivial inequalities: 6
% Fw subsumption resolutions: 47
% Fw demodulations: 39
% Bw demodulations: 3
% 
% Simple tautologies: 12
% Equational tautologies: 6
% Forward subsumptions: 146
% 
% Binary resolution: 48
% Factoring: 1
% Forward superposition: 61
% Backward superposition: 95
% Self superposition: 8
% Equality factoring: 6
% Equality resolution: 2
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 15
% SAT solver unit clauses: 2
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 3
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 13
% TWLsolver calls for satisfiability: 9
% 
% Memory used [KB]: 767
% Time elapsed: 0.018 s
% ------------------------------
% ------------------------------
% Success in time 0.02 s
