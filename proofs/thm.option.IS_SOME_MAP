Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f2936,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2935,f2843,f475,f442,f63,f82])).
fof(f82,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f63,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.option.IS_SOME_MAP',aHL_FALSITY)).
fof(f442,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))))) | $spl5),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f475,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))))) | $spl10),
  inference(backward_demodulation,[],[f447,f56])).
fof(f56,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2)))))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2,X3] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2)))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2,X3] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2)))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1] : ! [X2,X3] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X3),s('type.option.option'(X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X8))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X8))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),X8)))))),
  file('thm.option.IS_SOME_MAP','thm.option.IS_SOME_MAP')).
fof(f447,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) | $spl10),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2843,plain,(
  $false | ($spl1 | $spl5 | $spl10)),
  inference(subsumption_resolution,[],[f2834,f87])).
fof(f87,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) | $spl1),
  inference(subsumption_resolution,[],[f86,f82])).
fof(f86,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(superposition,[],[f66,f64])).
fof(f64,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),'const.option.NONE_0')))),
  file('thm.option.IS_SOME_MAP','thm.option.IS_SOME_DEF|split|1')).
fof(f66,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10] : (s(bool,'T_0') = s(bool,X10) <=> p(s(bool,X10)))),
  file('thm.option.IS_SOME_MAP','thm.bool.EQ_CLAUSES|split|0')).
fof(f2834,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl1 | $spl5 | $spl10)),
  inference(backward_demodulation,[],[f2828,f447])).
fof(f2828,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | ($spl1 | $spl5)),
  inference(subsumption_resolution,[],[f2778,f87])).
fof(f2778,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl5),
  inference(superposition,[],[f684,f615])).
fof(f615,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | $spl5),
  inference(trivial_inequality_removal,[],[f606])).
fof(f606,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),sK2))) | $spl5),
  inference(superposition,[],[f442,f432])).
fof(f432,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f76,f77])).
fof(f77,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f37])).
fof(f37,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : ! [X11] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X11) | ? [X8] : s('type.option.option'(X7),X11) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))))),
  file('thm.option.IS_SOME_MAP','thm.option.option_nchotomy')).
fof(f76,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8)))))),
  file('thm.option.IS_SOME_MAP','thm.option.IS_SOME_DEF|split|0')).
fof(f684,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X2),'const.option.OPTION_MAP_2'(s(fun(X0,X2),X3),s('type.option.option'(X0),X1))))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f581,f77])).
fof(f581,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))))) )),
  inference(superposition,[],[f76,f79])).
fof(f79,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7] : ! [X9,X8] : s('type.option.option'(X6),'const.option.SOME_1'(s(X6,happ(s(fun(X7,X6),X9),s(X7,X8))))) = s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8)))))),
  file('thm.option.IS_SOME_MAP','thm.option.OPTION_MAP_DEF|split|0')).
fof(f2935,plain,(
  $false | $spl11),
  inference(subsumption_resolution,[],[f2934,f64])).
fof(f2934,plain,(
  s(bool,'F_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | $spl11),
  inference(forward_demodulation,[],[f2933,f64])).
fof(f2933,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | $spl11),
  inference(forward_demodulation,[],[f2932,f78])).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X7,X6] : ! [X9] : s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_MAP_2'(s(fun(X7,X6),X9),s('type.option.option'(X7),'const.option.NONE_0')))),
  file('thm.option.IS_SOME_MAP','thm.option.OPTION_MAP_DEF|split|1')).
fof(f2932,plain,(
  s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK1,sK0),sK3),s('type.option.option'(sK1),'const.option.NONE_0'))))) | $spl11),
  inference(forward_demodulation,[],[f56,f2860])).
fof(f2860,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl11),
  inference(trivial_inequality_removal,[],[f2846])).
fof(f2846,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl11),
  inference(superposition,[],[f448,f432])).
fof(f448,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) | $spl11),
  inference(cnf_transformation,[],[f448_D])).
fof(f448_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 66
% Passive clauses: 392
% Generated clauses: 2799
% Final active clauses: 53
% Final passive clauses: 255
% Input formulas: 18
% Initial clauses: 25
% 
% Duplicate literals: 259
% Trivial inequalities: 72
% Fw subsumption resolutions: 262
% Fw demodulations: 182
% Bw demodulations: 10
% 
% Simple tautologies: 82
% Equational tautologies: 20
% Forward subsumptions: 1400
% 
% Binary resolution: 17
% Forward superposition: 1017
% Backward superposition: 769
% Self superposition: 64
% Equality factoring: 46
% Equality resolution: 8
% 
% Split clauses: 127
% Split components: 259
% SAT solver clauses: 191
% SAT solver unit clauses: 9
% SAT solver binary clauses: 67
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 127
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 186
% TWLsolver calls for satisfiability: 39
% 
% Memory used [KB]: 2558
% Time elapsed: 0.073 s
% ------------------------------
% ------------------------------
% Success in time 0.075 s
