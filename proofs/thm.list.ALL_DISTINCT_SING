Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f899,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f891,f65,f98,f100,f69,f101,f376,f381,f379,f435])).
fof(f435,plain,(
  $false | ($spl0 | $spl3 | $spl12)),
  inference(subsumption_resolution,[],[f387,f98])).
fof(f387,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl12)),
  inference(backward_demodulation,[],[f379,f101])).
fof(f379,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(cnf_transformation,[],[f379_D])).
fof(f379_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f381,plain,(
  s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl14),
  inference(cnf_transformation,[],[f381_D])).
fof(f381_D,plain,(
  s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f376,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f332])).
fof(f332,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f290,f71])).
fof(f71,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.list.ALL_DISTINCT_SING',aHL_BOOL_CASES)).
fof(f290,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(subsumption_resolution,[],[f209,f98])).
fof(f209,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s(bool,X10) = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f62,f104])).
fof(f104,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f71,f71])).
fof(f62,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK1),s('type.list.list'(sK0),'const.list.NIL_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f41])).
fof(f41,plain,(
  ? [X0,X1] : ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1] : p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ~! [X0] : ! [X1] : p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.NIL_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X7),s('type.list.list'(X6),'const.list.NIL_0'))))))),
  file('thm.list.ALL_DISTINCT_SING','thm.list.ALL_DISTINCT_SING')).
fof(f101,plain,(
  ~p(s(bool,'F_0')) | $spl3),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f69,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.list.ALL_DISTINCT_SING',aHL_FALSITY)).
fof(f100,plain,(
  p(s(bool,'F_0')) | $spl2),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f98,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f65,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f15])).
fof(f15,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.list.ALL_DISTINCT_SING','thm.bool.NOT_CLAUSES|split|2')).
fof(f891,plain,(
  $false | ($spl0 | $spl3 | $spl14)),
  inference(subsumption_resolution,[],[f880,f101])).
fof(f880,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl3 | $spl14)),
  inference(superposition,[],[f855,f381])).
fof(f855,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f854,f101])).
fof(f854,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl0),
  inference(forward_demodulation,[],[f853,f89])).
fof(f89,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7] : s(bool,'F_0') = s(bool,'const.bool.IN_2'(s(X6,X7),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.ALL_DISTINCT_SING','thm.list.MEM|split|0')).
fof(f853,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) | p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) ) | $spl0),
  inference(subsumption_resolution,[],[f843,f98])).
fof(f843,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0')))))) | p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),'const.list.NIL_0'))))))) )),
  inference(superposition,[],[f92,f70])).
fof(f70,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : s(bool,'T_0') = s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.list.ALL_DISTINCT_SING','thm.list.ALL_DISTINCT|split|0')).
fof(f92,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) | p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2))))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) | (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))))) & (p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) | (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2)))))) & ((p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) | ~p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2))))) | p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))))))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) <=> (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) <=> (~p(s(bool,'const.bool.IN_2'(s(X0,X1),s(fun(X0,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X0),X2)))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X9,X8] : (p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8)))))) <=> (~p(s(bool,'const.bool.IN_2'(s(X6,X9),s(fun(X6,bool),'const.list.LIST_TO_SET_1'(s('type.list.list'(X6),X8)))))) & p(s(bool,'const.list.ALL_DISTINCT_1'(s('type.list.list'(X6),X8))))))),
  file('thm.list.ALL_DISTINCT_SING','thm.list.ALL_DISTINCT|split|1')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 139
% Generated clauses: 814
% Final active clauses: 20
% Final passive clauses: 82
% Input formulas: 18
% Initial clauses: 35
% 
% Duplicate literals: 91
% Trivial inequalities: 5
% Fw subsumption resolutions: 43
% Fw demodulations: 47
% Bw demodulations: 6
% 
% Simple tautologies: 33
% Equational tautologies: 16
% Forward subsumptions: 429
% 
% Binary resolution: 15
% Forward superposition: 327
% Backward superposition: 162
% Self superposition: 39
% Equality factoring: 30
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 34
% SAT solver unit clauses: 3
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 1
% 
% Sat splits: 18
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 29
% TWLsolver calls for satisfiability: 11
% 
% Memory used [KB]: 1151
% Time elapsed: 0.027 s
% ------------------------------
% ------------------------------
% Success in time 0.016 s
