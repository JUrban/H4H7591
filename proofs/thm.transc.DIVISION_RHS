Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.transc
% (103876)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 143
% Passive clauses: 1366
% Generated clauses: 21416
% Final active clauses: 119
% Final passive clauses: 1064
% Input formulas: 18
% Initial clauses: 39
% 
% Duplicate literals: 1327
% Trivial inequalities: 258
% Fw subsumption resolutions: 3397
% Fw demodulations: 2263
% Bw demodulations: 22
% 
% Simple tautologies: 514
% Equational tautologies: 67
% Forward subsumptions: 10490
% 
% Binary resolution: 212
% Forward superposition: 5782
% Backward superposition: 7515
% Self superposition: 238
% Equality factoring: 189
% Equality resolution: 27
% 
% Split clauses: 1204
% Split components: 2475
% SAT solver clauses: 1887
% SAT solver unit clauses: 43
% SAT solver binary clauses: 241
% 
% Sat splits: 1204
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1887
% TWLsolver calls for satisfiability: 148
% 
% Memory used [KB]: 9722
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.transc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.transc
% SZS output start Proof for thm.transc
fof(f307,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f306,f68,f111,f69,f115,f145,f148,f72,f118,f75,f120,f297,f298,f137,f140,f97,f128,f101,f134,f144,f147,f67,f113])).
fof(f113,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0)))) | $spl2),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f67,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0))))),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0)))) & s('type.realax.real',sK2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f39])).
fof(f39,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) & s('type.realax.real',X2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) => s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X7),s('type.realax.real',X8))),s(fun('type.num.num','type.realax.real'),X6)))) => s('type.realax.real',X8) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X7),s('type.realax.real',X8))),s(fun('type.num.num','type.realax.real'),X6)))) => s('type.realax.real',X8) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X6))))))),
  file('thm.transc.DIVISION_RHS','thm.transc.DIVISION_RHS')).
fof(f147,plain,(
  s(bool,'T_0') = s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0))) | $spl44),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  s(bool,'T_0') = s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f144,plain,(
  s(bool,'T_0') = s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))),s(fun('type.num.num','type.realax.real'),sK0))) | ($spl2 | $spl12)),
  inference(resolution,[],[f120,f113])).
fof(f134,plain,(
  ( ! [X2,X0,X5,X1] : (s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))) ) | $spl32),
  inference(cnf_transformation,[],[f134_D])).
fof(f134_D,plain,(
  ( ! [X2,X0,X5,X1] : (s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f101,plain,(
  ( ! [X2,X0,X5,X1] : (s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5))) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X6))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) & ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5)))))) & (s('type.realax.real',X1) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X2,X1,X0)),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',sK4(X2,X1,X0)))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK4(X2,X1,X0)))))))))) | (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',sK5(X2,X1,X0)),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & s('type.realax.real',X2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',sK5(X2,X1,X0))))) | p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f65])).
fof(f65,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X6))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))))))) & ! [X5] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X5),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5)))))) & (s('type.realax.real',X1) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) | ? [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) | ? [X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & s('type.realax.real',X2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3)))) | p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) & ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3)))))) & (s('type.realax.real',X1) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) | ? [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) | ? [X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & s('type.realax.real',X2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3)))) | p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) & ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3)))))) & ((s('type.realax.real',X1) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) | ? [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & ~p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) | ? [X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) & s('type.realax.real',X2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3))))) | p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) <=> (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) & ! [X3] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3))))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) <=> (s('type.realax.real',X1) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.|48|_0'))) & ! [X4] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) => p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X4))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))))))) & ! [X3] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X3),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0)))))) => s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X3))))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X7),s('type.realax.real',X8))),s(fun('type.num.num','type.realax.real'),X6)))) <=> (s('type.realax.real',X7) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num','const.num.|48|_0'))) & ! [X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X6)))))) => p(s(bool,'const.realax.real_lt_2'(s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num',X10))),s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',X10))))))))) & ! [X10] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X6)))))) => s('type.realax.real',X8) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X6),s('type.num.num',X10))))))),
  file('thm.transc.DIVISION_RHS','thm.transc.DIVISION_THM')).
fof(f128,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) | $spl20),
  inference(cnf_transformation,[],[f128_D])).
fof(f128_D,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f97,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X9] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X10),s('type.num.num',X9)))),
  file('thm.transc.DIVISION_RHS','thm.arithmetic.GREATER_EQ')).
fof(f140,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0))),s('type.num.num',X5)))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5)))) ) | $spl38),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0))),s('type.num.num',X5)))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0)))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f137,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),X0))),s('type.num.num',X5)))) | s('type.realax.real',X2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),X0),s('type.num.num',X5))) | ~p(s(bool,'const.transc.division_2'(s('type.pair.prod'('type.realax.real','type.realax.real'),'const.pair.,_2'(s('type.realax.real',X1),s('type.realax.real',X2))),s(fun('type.num.num','type.realax.real'),X0))))) ) | ($spl20 | $spl32)),
  inference(backward_demodulation,[],[f128,f134])).
fof(f298,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))),s('type.num.num',X0)))) | s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num',X0)))) ) | $spl90),
  inference(cnf_transformation,[],[f298_D])).
fof(f298_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))),s('type.num.num',X0)))) | s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num',X0)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f297,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))),s('type.num.num',X0)))) | s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num',X0)))) ) | ($spl4 | $spl38 | $spl44)),
  inference(subsumption_resolution,[],[f288,f115])).
fof(f288,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))),s('type.num.num',X0)))) | s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num',X0)))) ) | ($spl38 | $spl44)),
  inference(superposition,[],[f140,f147])).
fof(f120,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f75,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.transc.DIVISION_RHS','thm.bool.EQ_CLAUSES|split|1')).
fof(f118,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) | $spl8),
  inference(cnf_transformation,[],[f118_D])).
fof(f118_D,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f72,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9] : p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X9))))),
  file('thm.transc.DIVISION_RHS','thm.arithmetic.LESS_EQ_REFL')).
fof(f148,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | $spl46),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f145,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X0)))) ) | ($spl8 | $spl12)),
  inference(resolution,[],[f120,f118])).
fof(f115,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f69,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.transc.DIVISION_RHS',aHL_TRUTH)).
fof(f111,plain,(
  s('type.realax.real',sK2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))))) | $spl1),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  s('type.realax.real',sK2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f68,plain,(
  s('type.realax.real',sK2) != s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0)))))),
  inference(cnf_transformation,[],[f47])).
fof(f306,plain,(
  $false | ($spl1 | $spl4 | $spl46 | $spl90)),
  inference(subsumption_resolution,[],[f305,f111])).
fof(f305,plain,(
  s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))))) | ($spl4 | $spl46 | $spl90)),
  inference(subsumption_resolution,[],[f301,f115])).
fof(f301,plain,(
  ~p(s(bool,'T_0')) | s('type.realax.real',sK2) = s('type.realax.real',happ(s(fun('type.num.num','type.realax.real'),sK0),s('type.num.num','const.transc.dsize_1'(s(fun('type.num.num','type.realax.real'),sK0))))) | ($spl46 | $spl90)),
  inference(superposition,[],[f298,f148])).
% SZS output end Proof for thm.transc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 24
% Passive clauses: 46
% Generated clauses: 230
% Final active clauses: 22
% Final passive clauses: 19
% Input formulas: 18
% Initial clauses: 39
% 
% Duplicate literals: 3
% Trivial inequalities: 4
% Fw subsumption resolutions: 11
% Fw demodulations: 11
% Bw demodulations: 5
% Condensations: 6
% Global subsumptions: 4
% 
% Simple tautologies: 14
% Equational tautologies: 3
% Forward subsumptions: 65
% 
% Binary resolution: 18
% Forward superposition: 41
% Backward superposition: 35
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 3
% 
% SAT solver clauses: 116
% SAT solver unit clauses: 55
% SAT solver binary clauses: 15
% SAT solver learnt clauses: 9
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 99
% TWLsolver calls for satisfiability: 231
% 
% Memory used [KB]: 1023
% Time elapsed: 0.010 s
% ------------------------------
% ------------------------------
% Success in time 0.624 s
