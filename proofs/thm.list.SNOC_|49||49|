Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1061,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1058,f553,f96,f165,f97,f167,f163,f938,f98,f168,f166,f164])).
fof(f164,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) | $spl1),
  inference(cnf_transformation,[],[f164_D])).
fof(f164_D,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f166,plain,(
  s(sK0,sK1) != s(sK0,sK3) | $spl3),
  inference(cnf_transformation,[],[f166_D])).
fof(f166_D,plain,(
  s(sK0,sK1) != s(sK0,sK3) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f168,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK4) | $spl5),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK4) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f98,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK4) | s(sK0,sK1) != s(sK0,sK3) | s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4)))),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  (s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) | (s(sK0,sK1) = s(sK0,sK3) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4))) & (s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) | s(sK0,sK1) != s(sK0,sK3) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK4))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f64])).
fof(f64,plain,(
  ? [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4))))),
  inference(nnf_transformation,[],[f52])).
fof(f52,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) <~> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X9),s('type.list.list'(X6),X10))) <=> (s(X6,X7) = s(X6,X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X9),s('type.list.list'(X6),X10))) <=> (s(X6,X7) = s(X6,X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10)))),
  file('thm.list.SNOC_|49||49|','thm.list.SNOC_|49||49|')).
fof(f938,plain,(
  $false | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f937,f166])).
fof(f937,plain,(
  s(sK0,sK1) = s(sK0,sK3) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f932,f135])).
fof(f135,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.list.LAST_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.list.LAST_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.list.LAST_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X7,X17] : s(X6,X7) = s(X6,'const.list.LAST_1'(s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X17)))))),
  file('thm.list.SNOC_|49||49|','thm.list.LAST_SNOC')).
fof(f932,plain,(
  s(sK0,sK3) = s(sK0,'const.list.LAST_1'(s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f135,f554])).
fof(f554,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f163,f167])).
fof(f163,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) | $spl0),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f167,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) | $spl4),
  inference(cnf_transformation,[],[f167_D])).
fof(f167_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f97,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) | s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4)))),
  inference(cnf_transformation,[],[f66])).
fof(f165,plain,(
  s(sK0,sK1) = s(sK0,sK3) | $spl2),
  inference(cnf_transformation,[],[f165_D])).
fof(f165_D,plain,(
  s(sK0,sK1) = s(sK0,sK3) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f96,plain,(
  s(sK0,sK1) = s(sK0,sK3) | s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) = s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK4)))),
  inference(cnf_transformation,[],[f66])).
fof(f553,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f552])).
fof(f552,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f551,f165])).
fof(f551,plain,(
  s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))) != s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f164,f167])).
fof(f1058,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f1057,f168])).
fof(f1057,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),sK4) | $spl0),
  inference(forward_demodulation,[],[f1051,f136])).
fof(f136,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.FRONT_1'(s('type.list.list'(X0),'const.list.SNOC_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X17] : s('type.list.list'(X6),X17) = s('type.list.list'(X6),'const.list.FRONT_1'(s('type.list.list'(X6),'const.list.SNOC_2'(s(X6,X7),s('type.list.list'(X6),X17)))))),
  file('thm.list.SNOC_|49||49|','thm.list.FRONT_SNOC')).
fof(f1051,plain,(
  s('type.list.list'(sK0),sK4) = s('type.list.list'(sK0),'const.list.FRONT_1'(s('type.list.list'(sK0),'const.list.SNOC_2'(s(sK0,sK1),s('type.list.list'(sK0),sK2))))) | $spl0),
  inference(superposition,[],[f136,f163])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 31
% Passive clauses: 169
% Generated clauses: 919
% Final active clauses: 25
% Final passive clauses: 115
% Input formulas: 23
% Initial clauses: 64
% 
% Duplicate literals: 90
% Trivial inequalities: 13
% Fw subsumption resolutions: 107
% Fw demodulations: 20
% Bw demodulations: 1
% 
% Simple tautologies: 77
% Equational tautologies: 29
% Forward subsumptions: 374
% 
% Binary resolution: 43
% Factoring: 1
% Forward superposition: 199
% Backward superposition: 256
% Self superposition: 50
% Equality factoring: 50
% Equality resolution: 4
% 
% Split clauses: 39
% Split components: 83
% SAT solver clauses: 62
% SAT solver unit clauses: 8
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 39
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 58
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1023
% Time elapsed: 0.029 s
% ------------------------------
% ------------------------------
% Success in time 0.031 s
