Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.int_arith
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.int_arith
% SZS output start Proof for thm.int_arith
fof(f910,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f906,f40,f63,f61,f804,f39,f62,f60])).
fof(f60,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | $spl0),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f62,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) | $spl2),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f39,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) | s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  (s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))) & (s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f34])).
fof(f34,plain,(
  ? [X0,X1,X2] : ((s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))) & (s('type.integer.int',X0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))) | s('type.integer.int',X2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ? [X0,X1,X2] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))) <~> s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ~! [X0,X1,X2] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X2))) <=> s('type.integer.int',X2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))) <=> s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))) <=> s('type.integer.int',X8) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))),
  file('thm.int_arith.eq_move_left_left','thm.int_arith.eq_move_left_left')).
fof(f804,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f787,f63])).
fof(f787,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) | $spl0),
  inference(superposition,[],[f755,f52])).
fof(f52,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int',X1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X7,X6] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X6)))),
  file('thm.int_arith.eq_move_left_left','thm.integer.INT_ADD_SYM')).
fof(f755,plain,(
  s('type.integer.int',sK2) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))),s('type.integer.int',sK0))) | $spl0),
  inference(superposition,[],[f416,f60])).
fof(f416,plain,(
  ( ! [X14,X15] : (s('type.integer.int',X15) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15)))))) )),
  inference(forward_demodulation,[],[f387,f44])).
fof(f44,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6)))),
  file('thm.int_arith.eq_move_left_left','thm.integer.INT_ADD_LID')).
fof(f387,plain,(
  ( ! [X14,X15] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X15))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X14))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X14),s('type.integer.int',X15)))))) )),
  inference(superposition,[],[f58,f46])).
fof(f46,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X0)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))),s('type.integer.int',X6)))),
  file('thm.int_arith.eq_move_left_left','thm.integer.INT_ADD_LINV')).
fof(f58,plain,(
  ( ! [X2,X0,X1] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int',X0)))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X1),s('type.integer.int',X0))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X2),s('type.integer.int',X1))),s('type.integer.int',X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X8,X7,X6] : s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X7),s('type.integer.int',X8))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int',X7))),s('type.integer.int',X8)))),
  file('thm.int_arith.eq_move_left_left','thm.integer.INT_ADD_ASSOC')).
fof(f61,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | $spl1),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f63,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) | $spl3),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f40,plain,(
  s('type.integer.int',sK2) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))) | s('type.integer.int',sK0) != s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2)))),
  inference(cnf_transformation,[],[f35])).
fof(f906,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f888,f61])).
fof(f888,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK1),s('type.integer.int',sK2))) | $spl2),
  inference(superposition,[],[f883,f52])).
fof(f883,plain,(
  s('type.integer.int',sK0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK2),s('type.integer.int',sK1))) | $spl2),
  inference(forward_demodulation,[],[f864,f45])).
fof(f45,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : s('type.integer.int',X6) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X6),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  file('thm.int_arith.eq_move_left_left','thm.integer.INT_ADD_RID')).
fof(f864,plain,(
  s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK2),s('type.integer.int',sK1))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl2),
  inference(superposition,[],[f809,f46])).
fof(f809,plain,(
  ( ! [X0] : (s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK2),s('type.integer.int',X0))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',sK0),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))),s('type.integer.int',X0)))))) ) | $spl2),
  inference(superposition,[],[f58,f62])).
% SZS output end Proof for thm.int_arith
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 34
% Passive clauses: 164
% Generated clauses: 836
% Final active clauses: 29
% Final passive clauses: 107
% Input formulas: 14
% Initial clauses: 20
% 
% Duplicate literals: 79
% Trivial inequalities: 7
% Fw subsumption resolutions: 59
% Fw demodulations: 12
% 
% Simple tautologies: 35
% Equational tautologies: 29
% Forward subsumptions: 446
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 25
% Factoring: 1
% Forward superposition: 233
% Backward superposition: 281
% Self superposition: 60
% Equality factoring: 50
% Equality resolution: 1
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 20
% SAT solver unit clauses: 4
% SAT solver binary clauses: 13
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 15
% TWLsolver calls for satisfiability: 8
% 
% Memory used [KB]: 1151
% Time elapsed: 0.048 s
% ------------------------------
% ------------------------------
% Success in time 0.057 s
