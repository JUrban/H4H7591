Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.option
% (116276)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 103
% Passive clauses: 3847
% Generated clauses: 13374
% Final active clauses: 93
% Final passive clauses: 3612
% Input formulas: 34
% Initial clauses: 73
% 
% Duplicate literals: 618
% Trivial inequalities: 287
% Fw subsumption resolutions: 2054
% Fw demodulations: 655
% Bw demodulations: 10
% 
% Simple tautologies: 350
% Equational tautologies: 75
% Forward subsumptions: 4434
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 307
% Factoring: 2
% Forward superposition: 4300
% Backward superposition: 4525
% Self superposition: 230
% Equality factoring: 174
% Equality resolution: 32
% 
% Split clauses: 388
% Split components: 782
% SAT solver clauses: 1117
% SAT solver unit clauses: 41
% SAT solver binary clauses: 389
% 
% Sat splits: 388
% 
% TWLsolver clauses: 1117
% TWLsolver calls for satisfiability: 150
% 
% Memory used [KB]: 5628
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% (116290)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 129
% Passive clauses: 1506
% Generated clauses: 8831
% Final active clauses: 122
% Final passive clauses: 1336
% Input formulas: 34
% Initial clauses: 73
% 
% Duplicate literals: 283
% Trivial inequalities: 146
% Fw subsumption resolutions: 537
% Fw demodulations: 834
% Bw demodulations: 40
% Condensations: 345
% Global subsumptions: 13
% 
% Simple tautologies: 116
% Equational tautologies: 26
% Forward subsumptions: 2824
% Fw demodulations to eq. taut.: 22
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 388
% Factoring: 2
% Forward superposition: 2187
% Backward superposition: 2233
% Self superposition: 81
% Equality factoring: 39
% Equality resolution: 43
% 
% Split clauses: 62
% Split components: 136
% SAT solver clauses: 2244
% SAT solver unit clauses: 84
% SAT solver binary clauses: 62
% SAT solver learnt clauses: 26
% 
% Sat splits: 62
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2192
% TWLsolver calls for satisfiability: 351
% 
% Memory used [KB]: 11385
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f936,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f129,f204,f128,f206,f203,f127,f208,f126,f210,f205,f202,f213,f719,f722,f721,f720,f820,f822,f824,f856,f861,f862,f865,f868,f869,f929,f932,f935])).
fof(f935,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(subsumption_resolution,[],[f934,f184])).
fof(f184,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X10] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.NOT_NONE_SOME')).
fof(f934,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5(happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0))),sK1)))) | ($spl0 | $spl2 | $spl5)),
  inference(forward_demodulation,[],[f933,f202])).
fof(f933,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5(happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0))),sK1)))) | ($spl2 | $spl5)),
  inference(forward_demodulation,[],[f924,f892])).
fof(f892,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(X0)),X1))) = s('type.option.option'(X0),happ(s(fun(sK0,'type.option.option'(X0)),X1),s(sK0,sK5(sK2,sK0))))) ) | $spl5),
  inference(superposition,[],[f197,f870])).
fof(f870,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK2,sK0)))) | $spl5),
  inference(unit_resulting_resolution,[],[f206,f179])).
fof(f179,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK5(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X17] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X17) | ? [X10] : s('type.option.option'(X6),X17) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.option_nchotomy')).
fof(f197,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),happ(s(fun(X1,'type.option.option'(X0)),X3),s(X1,X2))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(fun(X1,'type.option.option'(X0)),X3)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7] : ! [X10,X9] : s('type.option.option'(X6),happ(s(fun(X7,'type.option.option'(X6)),X9),s(X7,X10))) = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X10))),s(fun(X7,'type.option.option'(X6)),X9)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.OPTION_BIND_def|split|1')).
fof(f924,plain,(
  s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0)))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5(happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0))),sK1)))) | ($spl2 | $spl5)),
  inference(unit_resulting_resolution,[],[f889,f179])).
fof(f889,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0)))) | ($spl2 | $spl5)),
  inference(unit_resulting_resolution,[],[f870,f204])).
fof(f932,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(trivial_inequality_removal,[],[f931])).
fof(f931,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl0 | $spl2 | $spl5)),
  inference(forward_demodulation,[],[f930,f202])).
fof(f930,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))))) | ($spl2 | $spl5)),
  inference(forward_demodulation,[],[f925,f892])).
fof(f925,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0)))))) | ($spl2 | $spl5)),
  inference(unit_resulting_resolution,[],[f889,f187])).
fof(f187,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X10,X14] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))) <=> s(X6,X10) = s(X6,X14))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.SOME_|49||49|')).
fof(f929,plain,(
  $false | ($spl0 | $spl2 | $spl5)),
  inference(trivial_inequality_removal,[],[f928])).
fof(f928,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl0 | $spl2 | $spl5)),
  inference(forward_demodulation,[],[f927,f202])).
fof(f927,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))))) | ($spl2 | $spl5)),
  inference(forward_demodulation,[],[f926,f892])).
fof(f926,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK5(sK2,sK0)))))) | ($spl2 | $spl5)),
  inference(unit_resulting_resolution,[],[f889,f187])).
fof(f869,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f860,f210])).
fof(f860,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | ($spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f859])).
fof(f859,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.NONE_0') | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | ($spl2 | $spl6)),
  inference(superposition,[],[f204,f208])).
fof(f868,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f867,f210])).
fof(f867,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | ($spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f866,f730])).
fof(f730,plain,(
  s(sK0,sK4) = s(sK0,sK5('const.option.SOME_1'(s(sK0,sK4)),sK0)) | $spl8),
  inference(unit_resulting_resolution,[],[f184,f210,f658])).
fof(f658,plain,(
  ( ! [X8] : (s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),X8) | s(sK0,sK4) = s(sK0,sK5(X8,sK0)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X8)) ) | $spl8),
  inference(superposition,[],[f543,f179])).
fof(f543,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s(sK0,sK4) = s(sK0,X0)) ) | $spl8),
  inference(superposition,[],[f187,f210])).
fof(f866,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK4)),sK0)))) | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f858,f208])).
fof(f858,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5('const.option.SOME_1'(s(sK0,sK4)),sK0)))) | ($spl2 | $spl8)),
  inference(superposition,[],[f204,f730])).
fof(f865,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f864,f210])).
fof(f864,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | ($spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f863,f665])).
fof(f665,plain,(
  s(sK0,sK4) = s(sK0,sK5(sK2,sK0)) | $spl8),
  inference(unit_resulting_resolution,[],[f648,f543])).
fof(f648,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK2,sK0)))) | $spl8),
  inference(unit_resulting_resolution,[],[f223,f179])).
fof(f223,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | $spl8),
  inference(superposition,[],[f184,f210])).
fof(f863,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK2,sK0)))) | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f857,f208])).
fof(f857,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK5(sK2,sK0)))) | ($spl2 | $spl8)),
  inference(superposition,[],[f204,f665])).
fof(f862,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f854,f208])).
fof(f854,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) | ($spl2 | $spl8)),
  inference(unit_resulting_resolution,[],[f210,f204])).
fof(f861,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f855,f210])).
fof(f855,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f208,f204])).
fof(f856,plain,(
  $false | ($spl2 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f210,f208,f204])).
fof(f824,plain,(
  $false | ($spl1 | $spl6 | $spl8)),
  inference(trivial_inequality_removal,[],[f823])).
fof(f823,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) | ($spl1 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f818,f208])).
fof(f818,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f802,f528])).
fof(f528,plain,(
  s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))))) | $spl1),
  inference(unit_resulting_resolution,[],[f203,f187])).
fof(f802,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),happ(s(fun(sK0,'type.option.option'(X0)),X1),s(sK0,sK4))) = s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(X0)),X1)))) ) | $spl8),
  inference(superposition,[],[f197,f210])).
fof(f822,plain,(
  $false | ($spl1 | $spl6 | $spl8)),
  inference(trivial_inequality_removal,[],[f821])).
fof(f821,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) | ($spl1 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f817,f208])).
fof(f817,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))))))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f802,f603])).
fof(f603,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK1))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK1)),'const.option.SOME_1'(s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f528,f187])).
fof(f820,plain,(
  $false | ($spl1 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f819,f184])).
fof(f819,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)),sK1)))) | ($spl1 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f816,f208])).
fof(f816,plain,(
  s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)),sK1)))) | ($spl1 | $spl8)),
  inference(backward_demodulation,[],[f802,f646])).
fof(f646,plain,(
  s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK5('const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)),sK1)))) | $spl1),
  inference(unit_resulting_resolution,[],[f203,f179])).
fof(f720,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8))))) ) | $spl10),
  inference(cnf_transformation,[],[f720_D])).
fof(f720_D,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f721,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) | $spl12),
  inference(cnf_transformation,[],[f721_D])).
fof(f721_D,plain,(
  ( ! [X11] : (p(s(bool,X11))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f722,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X15)) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK6(X14,X13,X12))))) )),
  inference(subsumption_resolution,[],[f717,f139])).
fof(f139,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.bool.EQ_CLAUSES|split|0')).
fof(f717,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X15)) | ~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X14)))) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,happ(s(fun(X12,bool),X13),s(X12,sK6(X14,X13,X12))))) )),
  inference(superposition,[],[f191,f226])).
fof(f226,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f137,f137])).
fof(f137,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0',aHL_BOOL_CASES)).
fof(f191,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK6(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X15,X16] : (? [X10] : (s(X6,X10) = s(X6,X16) & p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X10))))) <=> p(s(bool,happ(s(fun(X6,bool),X15),s(X6,X16)))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.bool.UNWIND_THM2')).
fof(f719,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8))))) )),
  inference(subsumption_resolution,[],[f716,f139])).
fof(f716,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X11)) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f191,f226])).
fof(f213,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f212,f196])).
fof(f196,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X6] : ! [X9] : s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),'const.option.NONE_0'),s(fun(X7,'type.option.option'(X6)),X9)))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.OPTION_BIND_def|split|0')).
fof(f212,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),'const.option.NONE_0'),s(fun(sK0,'type.option.option'(sK1)),sK3))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f203,f205])).
fof(f202,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) | $spl0),
  inference(cnf_transformation,[],[f202_D])).
fof(f202_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f205,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl4),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f210,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | $spl8),
  inference(cnf_transformation,[],[f210_D])).
fof(f210_D,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f126,plain,(
  s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)))),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  (s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | (s('type.option.option'(sK0),sK2) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4))) & s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))))) & (s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) | (s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) & ! [X4] : (s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X4))) | s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,X4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f87])).
fof(f87,plain,(
  ? [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X5] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X5))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X5))))) & (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4)))))))),
  inference(rectify,[],[f86])).
fof(f86,plain,(
  ? [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))) & (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4)))))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ? [X0,X1,X2,X3] : ((s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4)))))) & (s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) | (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),X2) & ! [X4] : (s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4)))))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ? [X0,X1,X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) <~> (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ~! [X0,X1,X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) <=> (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),X2),s(fun(X0,'type.option.option'(X1)),X3))) <=> (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | ? [X4] : (s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),happ(s(fun(X0,'type.option.option'(X1)),X3),s(X0,X4))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X8),s(fun(X6,'type.option.option'(X7)),X9))) <=> (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X8) | ? [X10] : (s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10))) & s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X9),s(X6,X10))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),X8),s(fun(X6,'type.option.option'(X7)),X9))) <=> (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X8) | ? [X10] : (s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10))) & s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),happ(s(fun(X6,'type.option.option'(X7)),X9),s(X6,X10))))))),
  file('thm.option.OPTION_BIND_EQUALS_OPTION|split|0','thm.option.OPTION_BIND_EQUALS_OPTION|split|0')).
fof(f208,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) | $spl6),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f127,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,sK4))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)))),
  inference(cnf_transformation,[],[f88])).
fof(f203,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) | $spl1),
  inference(cnf_transformation,[],[f203_D])).
fof(f203_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f206,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | $spl5),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f128,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)))),
  inference(cnf_transformation,[],[f88])).
fof(f204,plain,(
  ( ! [X4] : (s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,X4))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X4)))) ) | $spl2),
  inference(cnf_transformation,[],[f204_D])).
fof(f204_D,plain,(
  ( ! [X4] : (s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,X4))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X4)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f129,plain,(
  ( ! [X4] : (s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),happ(s(fun(sK0,'type.option.option'(sK1)),sK3),s(sK0,X4))) | s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X4))) | s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.OPTION_BIND_2'(s('type.option.option'(sK0),sK2),s(fun(sK0,'type.option.option'(sK1)),sK3)))) )),
  inference(cnf_transformation,[],[f88])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 48
% Passive clauses: 118
% Generated clauses: 796
% Final active clauses: 32
% Final passive clauses: 59
% Input formulas: 34
% Initial clauses: 73
% 
% Duplicate literals: 41
% Trivial inequalities: 17
% Fw subsumption resolutions: 40
% Fw demodulations: 76
% Bw demodulations: 4
% Condensations: 49
% 
% Simple tautologies: 52
% Equational tautologies: 30
% Forward subsumptions: 336
% Fw demodulations to eq. taut.: 18
% 
% Unit resulting resolution: 89
% Factoring: 1
% Forward superposition: 172
% Backward superposition: 169
% Self superposition: 23
% Equality factoring: 26
% Equality resolution: 4
% 
% Split clauses: 6
% Split components: 14
% SAT solver clauses: 145
% SAT solver unit clauses: 10
% SAT solver binary clauses: 44
% 
% Sat splits: 6
% Sat splitting refutations: 13
% 
% Memory used [KB]: 1535
% Time elapsed: 0.030 s
% ------------------------------
% ------------------------------
% Success in time 1.345 s
