Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% (67034)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 168
% Passive clauses: 3094
% Generated clauses: 23073
% Final active clauses: 137
% Final passive clauses: 2600
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 1231
% Trivial inequalities: 622
% Fw subsumption resolutions: 3231
% Fw demodulations: 1893
% Bw demodulations: 23
% 
% Simple tautologies: 605
% Equational tautologies: 85
% Forward subsumptions: 11201
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 28
% Forward superposition: 6498
% Backward superposition: 8747
% Self superposition: 365
% Equality factoring: 226
% Equality resolution: 56
% 
% Split clauses: 493
% Split components: 992
% SAT solver clauses: 1316
% SAT solver unit clauses: 6
% SAT solver binary clauses: 89
% 
% Sat splits: 493
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1302
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 12025
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% (67059)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 137
% Passive clauses: 1376
% Generated clauses: 12135
% Final active clauses: 125
% Final passive clauses: 1185
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 455
% Trivial inequalities: 248
% Fw subsumption resolutions: 693
% Fw demodulations: 1389
% Bw demodulations: 61
% Condensations: 436
% Global subsumptions: 4
% 
% Simple tautologies: 190
% Equational tautologies: 21
% Forward subsumptions: 5096
% Fw demodulations to eq. taut.: 50
% 
% Binary resolution: 10
% Forward superposition: 3979
% Backward superposition: 3142
% Self superposition: 89
% Equality factoring: 36
% Equality resolution: 35
% 
% Split clauses: 71
% Split components: 147
% SAT solver clauses: 2113
% SAT solver unit clauses: 50
% SAT solver binary clauses: 40
% SAT solver learnt clauses: 8
% 
% Sat splits: 71
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 2097
% TWLsolver calls for satisfiability: 204
% 
% Memory used [KB]: 15351
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.option
% (67092)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 578
% Passive clauses: 12773
% Generated clauses: 124487
% Final active clauses: 168
% Final passive clauses: 1133
% Input formulas: 24
% Initial clauses: 39
% Discarded non-redundant clauses: 11240
% 
% Duplicate literals: 5807
% Trivial inequalities: 1093
% Fw subsumption resolutions: 7054
% Fw demodulations: 17860
% Bw demodulations: 4784
% Condensations: 7359
% Global subsumptions: 273
% 
% Simple tautologies: 1045
% Equational tautologies: 847
% Forward subsumptions: 68297
% Fw demodulations to eq. taut.: 755
% Bw demodulations to eq. taut.: 361
% 
% Unit resulting resolution: 4038
% Forward superposition: 33434
% Backward superposition: 31926
% Self superposition: 627
% Equality factoring: 224
% Equality resolution: 105
% 
% Split clauses: 484
% Split components: 973
% SAT solver clauses: 14323
% SAT solver unit clauses: 429
% SAT solver binary clauses: 2292
% 
% Sat splits: 484
% Sat splitting refutations: 307
% 
% Memory used [KB]: 96842
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 182 next slice time: 39
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.option
% (67339)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 789
% Passive clauses: 28865
% Generated clauses: 139994
% Final active clauses: 261
% Final passive clauses: 20393
% Input formulas: 24
% Initial clauses: 31
% 
% Selected by SInE selection: 20
% SInE iterations: 1
% 
% Duplicate literals: 3804
% Trivial inequalities: 3666
% Fw subsumption resolutions: 15011
% Fw demodulations: 23822
% Bw demodulations: 292
% 
% Simple tautologies: 2191
% Equational tautologies: 92
% Forward subsumptions: 60229
% Fw demodulations to eq. taut.: 728
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 23
% Forward superposition: 45458
% Backward superposition: 44314
% Self superposition: 609
% Equality factoring: 239
% Equality resolution: 188
% 
% Split clauses: 2324
% Split components: 4706
% SAT solver clauses: 2561
% SAT solver unit clauses: 6
% SAT solver binary clauses: 195
% 
% Sat splits: 2323
% Sat splitting refutations: 200
% 
% Memory used [KB]: 75734
% Time elapsed: 4.0000 s
% ------------------------------
% ------------------------------
% remaining time: 142 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.option
% (67481)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 100
% Passive clauses: 2108
% Generated clauses: 10567
% Final active clauses: 69
% Final passive clauses: 1619
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 328
% Trivial inequalities: 405
% Fw subsumption resolutions: 900
% Fw demodulations: 407
% Bw demodulations: 123
% Global subsumptions: 9
% 
% Simple tautologies: 344
% Equational tautologies: 82
% Forward subsumptions: 5784
% Fw demodulations to eq. taut.: 70
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 297
% Forward superposition: 3653
% Backward superposition: 3885
% Self superposition: 161
% Equality factoring: 34
% Equality resolution: 25
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 2150
% SAT solver unit clauses: 36
% SAT solver binary clauses: 207
% 
% Sat splits: 8
% Sat splitting refutations: 23
% 
% Memory used [KB]: 10618
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.option
% (67531)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 300
% Passive clauses: 3837
% Generated clauses: 19454
% Final active clauses: 98
% Final passive clauses: 1388
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 645
% Trivial inequalities: 813
% Fw subsumption resolutions: 775
% Bw subsumption resolutions: 230
% Fw demodulations: 1445
% Bw demodulations: 596
% Condensations: 707
% Global subsumptions: 24
% 
% Simple tautologies: 395
% Equational tautologies: 53
% Forward subsumptions: 10659
% Backward subsumptions: 1085
% Fw demodulations to eq. taut.: 43
% Bw demodulations to eq. taut.: 16
% 
% Binary resolution: 124
% Forward superposition: 6054
% Backward superposition: 5394
% Self superposition: 170
% Equality factoring: 94
% Equality resolution: 103
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 3923
% SAT solver unit clauses: 25
% SAT solver binary clauses: 284
% 
% Sat splits: 12
% Sat splitting refutations: 48
% 
% Memory used [KB]: 13560
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 120 next slice time: 9
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.option
% (67571)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 82
% Passive clauses: 59
% Generated clauses: 290
% Final active clauses: 82
% Final passive clauses: 1
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% 
% Simple tautologies: 13
% Equational tautologies: 1
% Forward subsumptions: 114
% 
% Unit resulting resolution: 230
% 
% SAT solver clauses: 295
% SAT solver unit clauses: 2
% SAT solver binary clauses: 291
% 
% Memory used [KB]: 15223
% Time elapsed: 1.0000 s
% ------------------------------
% ------------------------------
% remaining time: 110 next slice time: 85
lrs+1_5:4_cond=on:fsr=off:fde=none:gs=on:gsem=on:lwlo=on:nm=64:nwc=1:stl=60:sos=all:spl=off_80 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f5252,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f5251])).
fof(f5251,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3))) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3)))),
  inference(equality_resolution,[],[f5045])).
fof(f5045,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3))))) | s('type.option.option'(sK0),X8) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3)))) )),
  inference(forward_demodulation,[],[f4950,f184])).
fof(f184,plain,(
  s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1))))),
  inference(trivial_inequality_removal,[],[f173])).
fof(f173,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1)))) | s('type.option.option'(sK1),'const.option.NONE_0') != s('type.option.option'(sK1),'const.option.NONE_0')),
  inference(superposition,[],[f152,f119])).
fof(f119,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) | s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X4)) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) | s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X4) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)) & ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X4) & s('type.option.option'(X2),'const.option.NONE_0') != s('type.option.option'(X2),X3)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3)))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) | (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X4) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3))) & ((s('type.option.option'(X1),'const.option.NONE_0') != s('type.option.option'(X1),X4) & s('type.option.option'(X2),'const.option.NONE_0') != s('type.option.option'(X2),X3)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3)))))),
  inference(nnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) <=> (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X4) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) <=> (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),X4) | s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),X3)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6,X7,X8] : ! [X14,X15,X11] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_MAP2_3'(s(fun(X7,fun(X8,X6)),X11),s('type.option.option'(X7),X15),s('type.option.option'(X8),X14))) <=> (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X15) | s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),X14)))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_MAP2_NONE')).
fof(f152,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),'const.option.NONE_0'),s('type.option.option'(sK2),sK3))) | s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1))))),
  inference(forward_demodulation,[],[f151,f110])).
fof(f110,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X0,X1)),'const.option.NONE_0'),s('type.option.option'(X0),X2)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X0,X1)),'const.option.NONE_0'),s('type.option.option'(X0),X2)))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X0,X1)),'const.option.NONE_0'),s('type.option.option'(X0),X2)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X8,X7] : ! [X10] : s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X8,X7)),'const.option.NONE_0'),s('type.option.option'(X8),X10)))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_APPLY_def|split|0')).
fof(f151,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.NONE_0'),s('type.option.option'(sK2),sK3))) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),'const.option.NONE_0'),s('type.option.option'(sK2),sK3))) | s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1))))),
  inference(forward_demodulation,[],[f129,f109])).
fof(f109,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_MAP_2'(s(fun(X0,X1),X2),s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X7,X8] : ! [X11] : s('type.option.option'(X8),'const.option.NONE_0') = s('type.option.option'(X8),'const.option.OPTION_MAP_2'(s(fun(X7,X8),X11),s('type.option.option'(X7),'const.option.NONE_0')))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_MAP_DEF|split|1')).
fof(f129,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),'const.option.NONE_0'),s('type.option.option'(sK2),sK3))) != s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),'const.option.NONE_0'))),s('type.option.option'(sK2),sK3))) | s('type.option.option'(sK1),sK4) = s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1))))),
  inference(superposition,[],[f82,f102])).
fof(f102,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f35])).
fof(f35,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : ! [X13] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X13) | ? [X10] : s('type.option.option'(X7),X13) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X10))))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.option_nchotomy')).
fof(f82,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3))) != s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),sK3)))),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3))) != s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f62])).
fof(f62,plain,(
  ? [X0,X1,X2,X3,X4,X5] : s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) != s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X2,X0)),'const.option.OPTION_MAP_2'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4))),s('type.option.option'(X2),X3)))),
  inference(ennf_transformation,[],[f27])).
fof(f27,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) = s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X2,X0)),'const.option.OPTION_MAP_2'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4))),s('type.option.option'(X2),X3)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ~! [X0,X1,X2] : ! [X3,X4,X5] : s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4),s('type.option.option'(X2),X3))) = s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X2,X0)),'const.option.OPTION_MAP_2'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),X4))),s('type.option.option'(X2),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10,X11] : s('type.option.option'(X6),'const.option.OPTION_MAP2_3'(s(fun(X7,fun(X8,X6)),X11),s('type.option.option'(X7),X10),s('type.option.option'(X8),X9))) = s('type.option.option'(X6),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X8,X6)),'const.option.OPTION_MAP_2'(s(fun(X7,fun(X8,X6)),X11),s('type.option.option'(X7),X10))),s('type.option.option'(X8),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10,X11] : s('type.option.option'(X6),'const.option.OPTION_MAP2_3'(s(fun(X7,fun(X8,X6)),X11),s('type.option.option'(X7),X10),s('type.option.option'(X8),X9))) = s('type.option.option'(X6),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X8,X6)),'const.option.OPTION_MAP_2'(s(fun(X7,fun(X8,X6)),X11),s('type.option.option'(X7),X10))),s('type.option.option'(X8),X9)))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_APPLY_MAP2')).
fof(f4950,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),'const.option.SOME_1'(s(sK1,sK6(sK4,sK1)))),s('type.option.option'(sK2),sK3))))) | s('type.option.option'(sK0),X8) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3)))) )),
  inference(backward_demodulation,[],[f4946,f3332])).
fof(f3332,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK2,sK0),happ(s(fun(sK1,fun(sK2,sK0)),sK5),s(sK1,sK6(sK4,sK1)))),s('type.option.option'(sK2),sK3))))) | s('type.option.option'(sK0),X8) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3)))) )),
  inference(backward_demodulation,[],[f3230,f145])).
fof(f145,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),sK3))))) | s('type.option.option'(sK0),X8) != s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),sK3)))) )),
  inference(superposition,[],[f82,f107])).
fof(f107,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7] : ! [X10,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X10))) <=> s(X7,X9) = s(X7,X10))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.SOME_|49||49|')).
fof(f3230,plain,(
  ( ! [X191,X189,X192,X190] : (s('type.option.option'(X190),'const.option.OPTION_MAP_2'(s(fun(X189,X190),happ(s(fun(sK1,fun(X189,X190)),X191),s(sK1,sK6(sK4,sK1)))),s('type.option.option'(X189),X192))) = s('type.option.option'(X190),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X189,X190)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(X189,X190)),X191),s('type.option.option'(sK1),sK4))),s('type.option.option'(X189),X192)))) )),
  inference(superposition,[],[f112,f227])).
fof(f227,plain,(
  ( ! [X4,X5] : (s('type.option.option'(X4),'const.option.OPTION_MAP_2'(s(fun(sK1,X4),X5),s('type.option.option'(sK1),sK4))) = s('type.option.option'(X4),'const.option.SOME_1'(s(X4,happ(s(fun(sK1,X4),X5),s(sK1,sK6(sK4,sK1))))))) )),
  inference(superposition,[],[f111,f184])).
fof(f111,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))))) = s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X3)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X8,X7] : ! [X11,X10] : s('type.option.option'(X8),'const.option.SOME_1'(s(X8,happ(s(fun(X7,X8),X11),s(X7,X10))))) = s('type.option.option'(X8),'const.option.OPTION_MAP_2'(s(fun(X7,X8),X11),s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X10)))))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_MAP_DEF|split|0')).
fof(f112,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X1,X0)),'const.option.SOME_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3] : s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X1,X0)),'const.option.SOME_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.option.option'(X0),'const.option.OPTION_MAP_2'(s(fun(X1,X0),X2),s('type.option.option'(X1),X3))) = s('type.option.option'(X0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X1,X0)),'const.option.SOME_1'(s(fun(X1,X0),X2))),s('type.option.option'(X1),X3)))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X7,X8] : ! [X11,X10] : s('type.option.option'(X7),'const.option.OPTION_MAP_2'(s(fun(X8,X7),X11),s('type.option.option'(X8),X10))) = s('type.option.option'(X7),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(X8,X7)),'const.option.SOME_1'(s(fun(X8,X7),X11))),s('type.option.option'(X8),X10)))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_APPLY_def|split|1')).
fof(f4946,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.option.option'(X4),'const.option.OPTION_MAP2_3'(s(fun(X5,fun(sK2,X4)),X6),s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X7))),s('type.option.option'(sK2),sK3))) = s('type.option.option'(X4),'const.option.OPTION_MAP_2'(s(fun(sK2,X4),happ(s(fun(X5,fun(sK2,X4)),X6),s(X5,X7))),s('type.option.option'(sK2),sK3)))) )),
  inference(forward_demodulation,[],[f4850,f3814])).
fof(f3814,plain,(
  s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))),
  inference(trivial_inequality_removal,[],[f3813])).
fof(f3813,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.NONE_0') | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))),
  inference(equality_resolution,[],[f3418])).
fof(f3418,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),X8) | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))) )),
  inference(forward_demodulation,[],[f3310,f109])).
fof(f3310,plain,(
  ( ! [X8] : (s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_MAP_2'(s(fun(sK2,sK0),happ(s(fun(sK1,fun(sK2,sK0)),sK5),s(sK1,sK6(sK4,sK1)))),s('type.option.option'(sK2),'const.option.NONE_0'))))) | s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),X8) | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))) )),
  inference(backward_demodulation,[],[f3230,f309])).
fof(f309,plain,(
  ( ! [X8] : (s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),X8) | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2)))) | s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),X8))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),'const.option.NONE_0')))))) )),
  inference(superposition,[],[f265,f107])).
fof(f265,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),'const.option.NONE_0'))) | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))),
  inference(backward_demodulation,[],[f228,f139])).
fof(f139,plain,(
  s('type.option.option'(sK0),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4),s('type.option.option'(sK2),'const.option.NONE_0'))) != s('type.option.option'(sK0),'const.option.OPTION_APPLY_2'(s('type.option.option'(fun(sK2,sK0)),'const.option.OPTION_MAP_2'(s(fun(sK1,fun(sK2,sK0)),sK5),s('type.option.option'(sK1),sK4))),s('type.option.option'(sK2),'const.option.NONE_0'))) | s('type.option.option'(sK2),sK3) = s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))),
  inference(superposition,[],[f82,f102])).
fof(f228,plain,(
  ( ! [X6,X8,X7] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.OPTION_MAP2_3'(s(fun(sK1,fun(X7,X6)),X8),s('type.option.option'(sK1),sK4),s('type.option.option'(X7),'const.option.NONE_0')))) )),
  inference(superposition,[],[f115,f184])).
fof(f115,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))),s('type.option.option'(X1),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))),s('type.option.option'(X1),'const.option.NONE_0')))),
  inference(flattening,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s('type.option.option'(X2),'const.option.NONE_0') = s('type.option.option'(X2),'const.option.OPTION_MAP2_3'(s(fun(X0,fun(X1,X2)),X4),s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))),s('type.option.option'(X1),'const.option.NONE_0')))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X8,X6,X7] : ! [X10,X11] : s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_MAP2_3'(s(fun(X8,fun(X6,X7)),X11),s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X10))),s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_MAP2_THM|split|1')).
fof(f4850,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.option.option'(X4),'const.option.OPTION_MAP_2'(s(fun(sK2,X4),happ(s(fun(X5,fun(sK2,X4)),X6),s(X5,X7))),s('type.option.option'(sK2),sK3))) = s('type.option.option'(X4),'const.option.OPTION_MAP2_3'(s(fun(X5,fun(sK2,X4)),X6),s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X7))),s('type.option.option'(sK2),'const.option.SOME_1'(s(sK2,sK6(sK3,sK2))))))) )),
  inference(superposition,[],[f3847,f117])).
fof(f117,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X4))),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X3))))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X5),s(X1,X4))),s(X2,X3)))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X4))),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X3))))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X5),s(X1,X4))),s(X2,X3)))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s('type.option.option'(X0),'const.option.OPTION_MAP2_3'(s(fun(X1,fun(X2,X0)),X5),s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X4))),s('type.option.option'(X2),'const.option.SOME_1'(s(X2,X3))))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X5),s(X1,X4))),s(X2,X3)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X7,X8,X6] : ! [X9,X10,X11] : s('type.option.option'(X7),'const.option.OPTION_MAP2_3'(s(fun(X8,fun(X6,X7)),X11),s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X10))),s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))))) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X6,X7),happ(s(fun(X8,fun(X6,X7)),X11),s(X8,X10))),s(X6,X9)))))),
  file('thm.option.OPTION_APPLY_MAP2','thm.option.OPTION_MAP2_THM|split|0')).
fof(f3847,plain,(
  ( ! [X4,X5] : (s('type.option.option'(X4),'const.option.OPTION_MAP_2'(s(fun(sK2,X4),X5),s('type.option.option'(sK2),sK3))) = s('type.option.option'(X4),'const.option.SOME_1'(s(X4,happ(s(fun(sK2,X4),X5),s(sK2,sK6(sK3,sK2))))))) )),
  inference(superposition,[],[f111,f3814])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 121
% Passive clauses: 1275
% Generated clauses: 4987
% Final active clauses: 101
% Final passive clauses: 800
% Input formulas: 24
% Initial clauses: 39
% 
% Duplicate literals: 29
% Trivial inequalities: 382
% Fw demodulations: 860
% Bw demodulations: 236
% Condensations: 35
% Global subsumptions: 11
% 
% Simple tautologies: 57
% Equational tautologies: 3
% Forward subsumptions: 2354
% Fw demodulations to eq. taut.: 10
% Bw demodulations to eq. taut.: 162
% 
% Forward superposition: 2800
% Backward superposition: 693
% Self superposition: 2
% Equality resolution: 18
% 
% SAT solver clauses: 1324
% SAT solver unit clauses: 56
% SAT solver binary clauses: 218
% SAT solver learnt clauses: 22
% SAT solver learnt literals: 28
% 
% TWLsolver clauses: 1286
% TWLsolver calls for satisfiability: 21651
% 
% Memory used [KB]: 8059
% Time elapsed: 0.360 s
% ------------------------------
% ------------------------------
% Success in time 19.296 s
