Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (1318)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1045
% Passive clauses: 7158
% Generated clauses: 28603
% Final active clauses: 869
% Final passive clauses: 5244
% Input formulas: 133
% Initial clauses: 347
% 
% Duplicate literals: 247
% Trivial inequalities: 125
% Fw subsumption resolutions: 1788
% Fw demodulations: 2649
% Bw demodulations: 163
% 
% Simple tautologies: 243
% Equational tautologies: 31
% Forward subsumptions: 16619
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 6495
% Factoring: 1308
% Forward superposition: 6961
% Backward superposition: 8325
% Self superposition: 68
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 252
% Split components: 505
% SAT solver clauses: 469
% SAT solver unit clauses: 7
% SAT solver binary clauses: 59
% 
% Sat splits: 252
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 469
% TWLsolver calls for satisfiability: 419
% 
% Memory used [KB]: 17142
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (1343)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 554
% Passive clauses: 3870
% Generated clauses: 19384
% Final active clauses: 436
% Final passive clauses: 2877
% Input formulas: 133
% Initial clauses: 347
% 
% Duplicate literals: 91
% Trivial inequalities: 111
% Fw subsumption resolutions: 614
% Fw demodulations: 2410
% Bw demodulations: 503
% Condensations: 38
% Global subsumptions: 19
% 
% Simple tautologies: 240
% Equational tautologies: 9
% Forward subsumptions: 7802
% Fw demodulations to eq. taut.: 17
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2476
% Factoring: 78
% Forward superposition: 4694
% Backward superposition: 3812
% Self superposition: 49
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 41
% Split components: 82
% SAT solver clauses: 4426
% SAT solver unit clauses: 377
% SAT solver binary clauses: 121
% SAT solver learnt clauses: 40
% SAT solver learnt literals: 20
% 
% Sat splits: 41
% Sat splitting refutations: 17
% 
% TWLsolver clauses: 4348
% TWLsolver calls for satisfiability: 2470
% 
% Memory used [KB]: 22387
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f18095,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f547,f907,f906,f546,f909,f545,f911,f905,f2394,f2409,f2407,f2398,f2413,f2411,f2399,f2415,f2400,f2418,f2401,f2419,f2403,f2420,f2404,f2421,f2405,f2425,f2423,f3797,f3804,f3802,f3800,f3808,f4926,f3102,f4944,f3018,f2417,f4946,f8074,f8079,f3806,f11358,f11454,f11457,f11460,f11464,f11467,f11468,f11532,f11541,f11543,f11588,f11545,f11546,f17962,f18043])).
fof(f18043,plain,(
  $false | ($spl0 | $spl2 | $spl26)),
  inference(subsumption_resolution,[],[f17961,f11582])).
fof(f11582,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK26(sK13,sK14,sK12)))) | ($spl0 | $spl26)),
  inference(unit_resulting_resolution,[],[f11519,f680])).
fof(f680,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f437,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK26(X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X2,X1,X0)),s('type.list.list'(X0),sK26(X2,X1,X0)))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK25,sK26])],[f436])).
fof(f436,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X5,X6] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X6))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f435])).
fof(f435,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) & (! [X3,X4] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f233])).
fof(f233,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> ? [X3,X4] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X8,X12] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> ? [X33,X9] : (s('type.num.num',X12) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X33),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.list.LENGTH_CONS')).
fof(f11519,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl0 | $spl26)),
  inference(forward_demodulation,[],[f11518,f4981])).
fof(f4981,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',X0)))) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f914])).
fof(f914,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(forward_demodulation,[],[f582,f552])).
fof(f552,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f52])).
fof(f52,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|13')).
fof(f582,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X12] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.SUC_ONE_ADD')).
fof(f4952,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0') | $spl26),
  inference(backward_demodulation,[],[f2421,f567])).
fof(f567,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|4')).
fof(f11518,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK13))) | ($spl0 | $spl26)),
  inference(forward_demodulation,[],[f905,f4954])).
fof(f4954,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl26),
  inference(backward_demodulation,[],[f4952,f552])).
fof(f17961,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK26(sK13,sK14,sK12)))) | ($spl0 | $spl2 | $spl26)),
  inference(unit_resulting_resolution,[],[f11581,f907])).
fof(f11581,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK25(sK13,sK14,sK12)),s('type.list.list'(sK12),sK26(sK13,sK14,sK12)))) | ($spl0 | $spl26)),
  inference(unit_resulting_resolution,[],[f11519,f681])).
fof(f681,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK25(X2,X1,X0)),s('type.list.list'(X0),sK26(X2,X1,X0)))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f437])).
fof(f17962,plain,(
  $false | ($spl0 | $spl2 | $spl26)),
  inference(unit_resulting_resolution,[],[f11582,f11581,f907])).
fof(f11546,plain,(
  ( ! [X0] : (s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),sK14)))) ) | $spl48),
  inference(cnf_transformation,[],[f11546_D])).
fof(f11546_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),sK14)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f11545,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) | $spl47),
  inference(cnf_transformation,[],[f11545_D])).
fof(f11545_D,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f11588,plain,(
  ( ! [X0] : (s('type.num.num',sK13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),sK14)))) ) | ($spl0 | $spl2 | $spl26)),
  inference(superposition,[],[f907,f11519])).
fof(f11543,plain,(
  ( ! [X0] : (s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),sK14))) | s('type.num.num',sK13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13)))) ) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f11542,f909])).
fof(f11542,plain,(
  ( ! [X0] : (s('type.num.num',sK13) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15)))))) ) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f11533,f11352])).
fof(f11352,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f911,f909,f682])).
fof(f682,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f437])).
fof(f11533,plain,(
  ( ! [X0] : (s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X0),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f907,f909])).
fof(f11541,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f11531,f911])).
fof(f11531,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f909,f907])).
fof(f11532,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f911,f909,f907])).
fof(f11468,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f11352,f961])).
fof(f961,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl1),
  inference(forward_demodulation,[],[f960,f914])).
fof(f960,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK13))) | $spl1),
  inference(forward_demodulation,[],[f906,f552])).
fof(f11467,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl26)),
  inference(subsumption_resolution,[],[f11466,f961])).
fof(f11466,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl4 | $spl6 | $spl26)),
  inference(forward_demodulation,[],[f11465,f911])).
fof(f11465,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))) | ($spl4 | $spl26)),
  inference(forward_demodulation,[],[f11353,f4955])).
fof(f4955,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f559])).
fof(f559,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f101])).
fof(f101,axiom,(
  ! [X11] : s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f11353,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))))) | ($spl4 | $spl26)),
  inference(unit_resulting_resolution,[],[f4955,f909,f682])).
fof(f11464,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl26)),
  inference(subsumption_resolution,[],[f11463,f961])).
fof(f11463,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl4 | $spl6 | $spl26)),
  inference(forward_demodulation,[],[f11462,f911])).
fof(f11462,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))) | ($spl4 | $spl26)),
  inference(forward_demodulation,[],[f11461,f4955])).
fof(f11461,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))))) | ($spl4 | $spl26)),
  inference(forward_demodulation,[],[f11354,f744])).
fof(f744,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f277])).
fof(f277,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X11,X12] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.ADD_SYM')).
fof(f11354,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl26)),
  inference(unit_resulting_resolution,[],[f4956,f909,f682])).
fof(f4956,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f560])).
fof(f560,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f95])).
fof(f95,axiom,(
  ! [X11] : s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.ADD_|48|')).
fof(f11460,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl26)),
  inference(subsumption_resolution,[],[f11459,f961])).
fof(f11459,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl4 | $spl6 | $spl26)),
  inference(forward_demodulation,[],[f11458,f911])).
fof(f11458,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))) | ($spl4 | $spl26)),
  inference(forward_demodulation,[],[f11355,f4962])).
fof(f4962,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f568])).
fof(f568,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f150])).
fof(f150,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X12] : s('type.num.num',X12) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|7')).
fof(f11355,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))),s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl4 | $spl26)),
  inference(unit_resulting_resolution,[],[f4962,f909,f682])).
fof(f11457,plain,(
  $false | ($spl1 | $spl4 | $spl6 | $spl26)),
  inference(subsumption_resolution,[],[f11456,f961])).
fof(f11456,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num',sK13))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | ($spl4 | $spl6 | $spl26)),
  inference(forward_demodulation,[],[f11455,f911])).
fof(f11455,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))))) | ($spl4 | $spl26)),
  inference(forward_demodulation,[],[f11356,f4978])).
fof(f4978,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f671])).
fof(f671,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f221])).
fof(f221,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X32,X13] : s(X6,X32) = s(X6,'const.ind_type.FCONS_3'(s(X6,X32),s(fun('type.num.num',X6),X13),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.ind_type.FCONS|split|0')).
fof(f11356,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))),s(fun('type.num.num','type.num.num'),X0),s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl4 | $spl26)),
  inference(unit_resulting_resolution,[],[f4978,f909,f682])).
fof(f11454,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f11357,f911])).
fof(f11357,plain,(
  s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | ($spl1 | $spl4)),
  inference(unit_resulting_resolution,[],[f961,f909,f682])).
fof(f11358,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f911,f961,f909,f682])).
fof(f3806,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK15) | $spl36),
  inference(cnf_transformation,[],[f3806_D])).
fof(f3806_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK15) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f8079,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl45),
  inference(cnf_transformation,[],[f8079_D])).
fof(f8079_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f8074,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK15) | ($spl6 | $spl26)),
  inference(superposition,[],[f4984,f911])).
fof(f4984,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) ) | $spl26),
  inference(backward_demodulation,[],[f4952,f919])).
fof(f919,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(forward_demodulation,[],[f663,f552])).
fof(f663,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f422])).
fof(f422,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f214])).
fof(f214,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X6] : ! [X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|0')).
fof(f4946,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14)))))))) ) | $spl42),
  inference(cnf_transformation,[],[f4946_D])).
fof(f4946_D,plain,(
  ( ! [X14] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14)))))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2417,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl19),
  inference(cnf_transformation,[],[f2417_D])).
fof(f2417_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f3018,plain,(
  ( ! [X14] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X14)))))))) )),
  inference(superposition,[],[f603,f576])).
fof(f576,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|9')).
fof(f603,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f386])).
fof(f386,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f181])).
fof(f181,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f71])).
fof(f71,axiom,(
  ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|18')).
fof(f4944,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15)))))))) ) | $spl40),
  inference(cnf_transformation,[],[f4944_D])).
fof(f4944_D,plain,(
  ( ! [X15] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15)))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f3102,plain,(
  ( ! [X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X15)))))))) )),
  inference(superposition,[],[f603,f577])).
fof(f577,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X12)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|10')).
fof(f4926,plain,(
  $false | $spl19),
  inference(subsumption_resolution,[],[f4925,f548])).
fof(f548,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10',aHL_TRUTH)).
fof(f4925,plain,(
  ~p(s(bool,'T_0')) | $spl19),
  inference(forward_demodulation,[],[f4924,f562])).
fof(f562,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f79])).
fof(f79,axiom,(
  ! [X12] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|29')).
fof(f4924,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0')))) | $spl19),
  inference(backward_demodulation,[],[f4897,f2454])).
fof(f2454,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) | $spl19),
  inference(unit_resulting_resolution,[],[f2417,f607])).
fof(f607,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f388])).
fof(f388,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f183])).
fof(f183,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f78])).
fof(f78,axiom,(
  ! [X12] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X12))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|30')).
fof(f4897,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(superposition,[],[f935,f742])).
fof(f742,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f275])).
fof(f275,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f87])).
fof(f87,axiom,(
  ! [X12,X11] : s(bool,'const.arithmetic.>=_2'(s('type.num.num',X12),s('type.num.num',X11))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.GREATER_EQ')).
fof(f935,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(backward_demodulation,[],[f742,f580])).
fof(f580,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X12] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|27')).
fof(f3808,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK13) | $spl39),
  inference(cnf_transformation,[],[f3808_D])).
fof(f3808_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK13) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f3800,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK13) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),sK15) | $spl6),
  inference(superposition,[],[f653,f911])).
fof(f653,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f417])).
fof(f417,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f204])).
fof(f204,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.list.LENGTH_NIL_SYM')).
fof(f3802,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) | $spl32),
  inference(cnf_transformation,[],[f3802_D])).
fof(f3802_D,plain,(
  s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3804,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | $spl35),
  inference(cnf_transformation,[],[f3804_D])).
fof(f3804_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f3797,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) | s('type.list.list'(sK12),'const.list.NIL_0') = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) | $spl4),
  inference(superposition,[],[f653,f909])).
fof(f2423,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl28),
  inference(cnf_transformation,[],[f2423_D])).
fof(f2423_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2425,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl31),
  inference(cnf_transformation,[],[f2425_D])).
fof(f2425_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f2405,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(superposition,[],[f603,f552])).
fof(f2421,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl26),
  inference(cnf_transformation,[],[f2421_D])).
fof(f2421_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2404,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f603,f567])).
fof(f2420,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) ) | $spl24),
  inference(cnf_transformation,[],[f2420_D])).
fof(f2420_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2403,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) )),
  inference(superposition,[],[f603,f564])).
fof(f564,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f76])).
fof(f76,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.MULT|split|0')).
fof(f2419,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) ) | $spl22),
  inference(cnf_transformation,[],[f2419_D])).
fof(f2419_D,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2401,plain,(
  ( ! [X4] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4)))) )),
  inference(superposition,[],[f603,f565])).
fof(f565,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X12] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|6')).
fof(f2418,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) | $spl20),
  inference(cnf_transformation,[],[f2418_D])).
fof(f2418_D,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2400,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num',X3)))) )),
  inference(superposition,[],[f603,f561])).
fof(f561,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X0)))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X38] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num',X38)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.arithmetic.SUB_EQUAL_|48|')).
fof(f2415,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) | $spl16),
  inference(cnf_transformation,[],[f2415_D])).
fof(f2415_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2399,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f603,f551])).
fof(f551,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f72])).
fof(f72,axiom,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.prim_rec.PRE|split|0')).
fof(f2411,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f2411_D])).
fof(f2411_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2413,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl15),
  inference(cnf_transformation,[],[f2413_D])).
fof(f2413_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f2398,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f603,f913])).
fof(f913,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f574,f552])).
fof(f574,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X12] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.numeral.numeral_distrib|split|11')).
fof(f2407,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | $spl8),
  inference(cnf_transformation,[],[f2407_D])).
fof(f2407_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2409,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK13))) | $spl11),
  inference(cnf_transformation,[],[f2409_D])).
fof(f2409_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK13))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f2394,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK13))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | $spl6),
  inference(superposition,[],[f603,f911])).
fof(f905,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) | $spl0),
  inference(cnf_transformation,[],[f905_D])).
fof(f905_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f911,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | $spl6),
  inference(cnf_transformation,[],[f911_D])).
fof(f911_D,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f545,plain,(
  s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13)))),
  inference(cnf_transformation,[],[f377])).
fof(f377,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) | (s('type.num.num',sK13) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK15))) & s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) | ! [X3,X4] : (s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),X3))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X4),s('type.list.list'(sK12),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16])],[f376])).
fof(f376,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X5,X6] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),X5))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(rectify,[],[f375])).
fof(f375,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) | ! [X3,X4] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3))))))),
  inference(nnf_transformation,[],[f323])).
fof(f323,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <~> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))) <=> ? [X3,X4] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))) <=> ? [X9,X10] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X9)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|10','thm.quantHeuristics.LIST_LENGTH_|49||split|10')).
fof(f909,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) | $spl4),
  inference(cnf_transformation,[],[f909_D])).
fof(f909_D,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f546,plain,(
  s('type.list.list'(sK12),sK14) = s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK16),s('type.list.list'(sK12),sK15))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13)))),
  inference(cnf_transformation,[],[f377])).
fof(f906,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) | $spl1),
  inference(cnf_transformation,[],[f906_D])).
fof(f906_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f907,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),X3))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X4),s('type.list.list'(sK12),X3)))) ) | $spl2),
  inference(cnf_transformation,[],[f907_D])).
fof(f907_D,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),X3))) | s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X4),s('type.list.list'(sK12),X3)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f547,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK12),sK14) != s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X4),s('type.list.list'(sK12),X3))) | s('type.num.num',sK13) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK12),sK14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK13)))) )),
  inference(cnf_transformation,[],[f377])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 743
% Passive clauses: 3564
% Generated clauses: 17565
% Final active clauses: 570
% Final passive clauses: 2299
% Input formulas: 133
% Initial clauses: 347
% 
% Duplicate literals: 7
% Trivial inequalities: 33
% Fw subsumption resolutions: 124
% Fw demodulations: 3470
% Bw demodulations: 639
% Condensations: 7
% 
% Simple tautologies: 89
% Equational tautologies: 24
% Forward subsumptions: 10119
% Fw demodulations to eq. taut.: 98
% 
% Unit resulting resolution: 3290
% Factoring: 1
% Forward superposition: 5228
% Backward superposition: 4266
% Self superposition: 76
% Equality factoring: 2
% Equality resolution: 15
% 
% Split clauses: 18
% Split components: 36
% SAT solver clauses: 3614
% SAT solver unit clauses: 335
% SAT solver binary clauses: 1398
% 
% Sat splits: 18
% Sat splitting refutations: 12
% 
% Memory used [KB]: 28400
% Time elapsed: 0.904 s
% ------------------------------
% ------------------------------
% Success in time 2.24 s
