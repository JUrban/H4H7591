Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.list
% (101172)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 107
% Passive clauses: 3695
% Generated clauses: 13494
% Final active clauses: 93
% Final passive clauses: 3357
% Input formulas: 41
% Initial clauses: 85
% 
% Duplicate literals: 593
% Trivial inequalities: 218
% Fw subsumption resolutions: 1720
% Fw demodulations: 455
% Bw demodulations: 8
% 
% Simple tautologies: 337
% Equational tautologies: 77
% Forward subsumptions: 5187
% Bw demodulations to eq. taut.: 4
% 
% Binary resolution: 357
% Factoring: 3
% Forward superposition: 4593
% Backward superposition: 4892
% Self superposition: 246
% Equality factoring: 179
% Equality resolution: 22
% 
% Split clauses: 446
% Split components: 921
% SAT solver clauses: 1091
% SAT solver unit clauses: 36
% SAT solver binary clauses: 374
% 
% Sat splits: 446
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1086
% TWLsolver calls for satisfiability: 191
% 
% Memory used [KB]: 9978
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f9489,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f9488,f151,f243,f4792,f4793,f212,f273,f214,f275,f217,f278,f3990,f4004,f213,f274,f218,f279,f5502,f5549,f208,f271,f216,f277])).
fof(f277,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) ) | $spl48),
  inference(cnf_transformation,[],[f277_D])).
fof(f277_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f216,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7] : ! [X9,X25,X10] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X25),s('type.list.list'(X7),X10))))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,happ(s(fun(X7,X6),X9),s(X7,X25))),s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),X10)))))),
  file('thm.list.SINGL_SINGL_APPLY','thm.list.MAP|split|1')).
fof(f271,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl36),
  inference(cnf_transformation,[],[f271_D])).
fof(f271_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f208,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X6] : ! [X9] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X9),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.list.SINGL_SINGL_APPLY','thm.list.MAP|split|0')).
fof(f5549,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0')))))) ) | $spl794),
  inference(cnf_transformation,[],[f5549_D])).
fof(f5549_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0')))))) ) <=> ~$spl794),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl794])])).
fof(f5502,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),'const.list.NIL_0')))))) ) | ($spl36 | $spl48)),
  inference(superposition,[],[f277,f271])).
fof(f279,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) ) | $spl52),
  inference(cnf_transformation,[],[f279_D])).
fof(f279_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f218,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X18,X7,X6] : ! [X9,X8,X13] : s(X18,'const.combin.C_3'(s(fun(X7,fun(X6,X18)),X9),s(X6,X8),s(X7,X13))) = s(X18,happ(s(fun(X6,X18),happ(s(fun(X7,fun(X6,X18)),X9),s(X7,X13))),s(X6,X8)))),
  file('thm.list.SINGL_SINGL_APPLY','thm.combin.C_THM')).
fof(f274,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) | $spl42),
  inference(cnf_transformation,[],[f274_D])).
fof(f274_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f213,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),happ(s(fun('type.list.list'(X1),'type.list.list'(X0)),happ(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s(fun(X1,X0),X2))),s('type.list.list'(X1),X3)))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6,X7] : ! [X28,X29] : s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X28),s('type.list.list'(X7),X29))) = s('type.list.list'(X6),happ(s(fun('type.list.list'(X7),'type.list.list'(X6)),happ(s(fun(fun(X7,X6),fun('type.list.list'(X7),'type.list.list'(X6))),'const.list.MAP_0'),s(fun(X7,X6),X28))),s('type.list.list'(X7),X29)))),
  file('thm.list.SINGL_SINGL_APPLY','ARITY_0_2_const.list.MAP')).
fof(f4004,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) | $spl618),
  inference(cnf_transformation,[],[f4004_D])).
fof(f4004_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) <=> ~$spl618),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl618])])).
fof(f3990,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6)))) ) | ($spl42 | $spl52)),
  inference(superposition,[],[f274,f279])).
fof(f278,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) ) | $spl50),
  inference(cnf_transformation,[],[f278_D])).
fof(f278_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f217,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4),s(X2,X5))) = s(X0,happ(s(fun(X2,X0),'const.combin.C_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X4))),s(X2,X5)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X18,X6,X7] : ! [X28,X29,X30] : s(X18,'const.combin.C_3'(s(fun(X7,fun(X6,X18)),X28),s(X6,X29),s(X7,X30))) = s(X18,happ(s(fun(X7,X18),'const.combin.C_2'(s(fun(X7,fun(X6,X18)),X28),s(X6,X29))),s(X7,X30)))),
  file('thm.list.SINGL_SINGL_APPLY','ARITY_2_3_const.combin.C')).
fof(f275,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) ) | $spl44),
  inference(cnf_transformation,[],[f275_D])).
fof(f275_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f214,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X1,X0)),X2),s('type.list.list'(X1),X3))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X1,X0)),X2),s(fun(fun(X1,X0),'type.list.list'(X0)),'const.combin.C_2'(s(fun(fun(X1,X0),fun('type.list.list'(X1),'type.list.list'(X0))),'const.list.MAP_0'),s('type.list.list'(X1),X3)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7,X6] : ! [X26,X27] : s('type.list.list'(X7),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X6,X7)),X26),s('type.list.list'(X6),X27))) = s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(fun(X6,X7)),X26),s(fun(fun(X6,X7),'type.list.list'(X7)),'const.combin.C_2'(s(fun(fun(X6,X7),fun('type.list.list'(X6),'type.list.list'(X7))),'const.list.MAP_0'),s('type.list.list'(X6),X27)))))),
  file('thm.list.SINGL_SINGL_APPLY','thm.list.LIST_APPLY_def')).
fof(f273,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) ) | $spl40),
  inference(cnf_transformation,[],[f273_D])).
fof(f273_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f212,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),happ(s(fun(X1,'type.list.list'(X0)),X3),s(X1,X2))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0'))),s(fun(X1,'type.list.list'(X0)),X3)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X7,X6] : ! [X8,X9] : s('type.list.list'(X7),happ(s(fun(X6,'type.list.list'(X7)),X9),s(X6,X8))) = s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0'))),s(fun(X6,'type.list.list'(X7)),X9)))),
  file('thm.list.SINGL_SINGL_APPLY','thm.list.SINGL_LIST_APPLY_L')).
fof(f4793,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | $spl718),
  inference(cnf_transformation,[],[f4793_D])).
fof(f4793_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) <=> ~$spl718),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl718])])).
fof(f4792,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.MAP_2'(s(fun(X5,X4),X6),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | ($spl40 | $spl44 | $spl50 | $spl618)),
  inference(forward_demodulation,[],[f4791,f4004])).
fof(f4791,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.combin.C_3'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7),s(fun(X5,X4),X6))) = s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7)))) ) | ($spl40 | $spl44 | $spl50)),
  inference(forward_demodulation,[],[f4778,f278])).
fof(f4778,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(X4),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X5,X4)),'const.list.CONS_2'(s(fun(X5,X4),X6),s('type.list.list'(fun(X5,X4)),'const.list.NIL_0'))),s('type.list.list'(X5),X7))) = s('type.list.list'(X4),happ(s(fun(fun(X5,X4),'type.list.list'(X4)),'const.combin.C_2'(s(fun(fun(X5,X4),fun('type.list.list'(X5),'type.list.list'(X4))),'const.list.MAP_0'),s('type.list.list'(X5),X7))),s(fun(X5,X4),X6)))) ) | ($spl40 | $spl44)),
  inference(superposition,[],[f275,f273])).
fof(f243,plain,(
  s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK2))),s('type.list.list'(sK1),'const.list.NIL_0'))) != s('type.list.list'(sK1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK0,sK1)),'const.list.CONS_2'(s(fun(sK0,sK1),sK3),s('type.list.list'(fun(sK0,sK1)),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl1),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK2))),s('type.list.list'(sK1),'const.list.NIL_0'))) != s('type.list.list'(sK1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK0,sK1)),'const.list.CONS_2'(s(fun(sK0,sK1),sK3),s('type.list.list'(fun(sK0,sK1)),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f151,plain,(
  s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK2))),s('type.list.list'(sK1),'const.list.NIL_0'))) != s('type.list.list'(sK1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK0,sK1)),'const.list.CONS_2'(s(fun(sK0,sK1),sK3),s('type.list.list'(fun(sK0,sK1)),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK2))),s('type.list.list'(sK1),'const.list.NIL_0'))) != s('type.list.list'(sK1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(sK0,sK1)),'const.list.CONS_2'(s(fun(sK0,sK1),sK3),s('type.list.list'(fun(sK0,sK1)),'const.list.NIL_0'))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f104])).
fof(f104,plain,(
  ? [X0,X1,X2,X3] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun(X0,X1),X3),s(X0,X2))),s('type.list.list'(X1),'const.list.NIL_0'))) != s('type.list.list'(X1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X0,X1)),'const.list.CONS_2'(s(fun(X0,X1),X3),s('type.list.list'(fun(X0,X1)),'const.list.NIL_0'))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f44])).
fof(f44,plain,(
  ~! [X0,X1,X2,X3] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun(X0,X1),X3),s(X0,X2))),s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.list.list'(X1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X0,X1)),'const.list.CONS_2'(s(fun(X0,X1),X3),s('type.list.list'(fun(X0,X1)),'const.list.NIL_0'))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ~! [X0,X1] : ! [X2,X3] : s('type.list.list'(X1),'const.list.CONS_2'(s(X1,happ(s(fun(X0,X1),X3),s(X0,X2))),s('type.list.list'(X1),'const.list.NIL_0'))) = s('type.list.list'(X1),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X0,X1)),'const.list.CONS_2'(s(fun(X0,X1),X3),s('type.list.list'(fun(X0,X1)),'const.list.NIL_0'))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun(X6,X7),X9),s(X6,X8))),s('type.list.list'(X7),'const.list.NIL_0'))) = s('type.list.list'(X7),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X6,X7)),'const.list.CONS_2'(s(fun(X6,X7),X9),s('type.list.list'(fun(X6,X7)),'const.list.NIL_0'))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s('type.list.list'(X7),'const.list.CONS_2'(s(X7,happ(s(fun(X6,X7),X9),s(X6,X8))),s('type.list.list'(X7),'const.list.NIL_0'))) = s('type.list.list'(X7),'const.list.LIST_APPLY_2'(s('type.list.list'(fun(X6,X7)),'const.list.CONS_2'(s(fun(X6,X7),X9),s('type.list.list'(fun(X6,X7)),'const.list.NIL_0'))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X8),s('type.list.list'(X6),'const.list.NIL_0')))))),
  file('thm.list.SINGL_SINGL_APPLY','thm.list.SINGL_SINGL_APPLY')).
fof(f9488,plain,(
  $false | ($spl1 | $spl718 | $spl794)),
  inference(subsumption_resolution,[],[f9473,f5549])).
fof(f9473,plain,(
  s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,happ(s(fun(sK0,sK1),sK3),s(sK0,sK2))),s('type.list.list'(sK1),'const.list.NIL_0'))) != s('type.list.list'(sK1),'const.list.MAP_2'(s(fun(sK0,sK1),sK3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK2),s('type.list.list'(sK0),'const.list.NIL_0'))))) | ($spl1 | $spl718)),
  inference(superposition,[],[f243,f4793])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 86
% Passive clauses: 609
% Generated clauses: 9235
% Final active clauses: 80
% Final passive clauses: 488
% Input formulas: 41
% Initial clauses: 85
% 
% Duplicate literals: 453
% Trivial inequalities: 160
% Fw subsumption resolutions: 672
% Fw demodulations: 780
% Bw demodulations: 34
% Condensations: 877
% Global subsumptions: 8
% 
% Simple tautologies: 185
% Equational tautologies: 39
% Forward subsumptions: 4306
% 
% Binary resolution: 66
% Factoring: 2
% Forward superposition: 2524
% Backward superposition: 2729
% Self superposition: 126
% Equality factoring: 76
% Equality resolution: 14
% 
% Split clauses: 51
% Split components: 114
% SAT solver clauses: 1233
% SAT solver unit clauses: 93
% SAT solver binary clauses: 51
% SAT solver learnt clauses: 18
% SAT solver learnt literals: 1
% 
% Sat splits: 51
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1199
% TWLsolver calls for satisfiability: 264
% 
% Memory used [KB]: 11001
% Time elapsed: 0.531 s
% ------------------------------
% ------------------------------
% Success in time 1.178 s
