Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f2439,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2438,f27,f40,f38,f2340,f2355,f2350])).
fof(f2350,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl82),
  inference(cnf_transformation,[],[f2350_D])).
fof(f2350_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f2355,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3) | $spl0),
  inference(backward_demodulation,[],[f37,f26])).
fof(f26,plain,(
  s('type.num.num',sK3) = s('type.num.num',sK4)),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  s('type.num.num',sK3) = s('type.num.num',sK4) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) | s(sK0,sK1) = s(sK0,sK5)) & ! [X7] : (s('type.num.num',sK4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) | s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',X7))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',X7)))) & s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK5),s(fun('type.num.num',sK0),sK6))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK4),s(sK0,sK1),s(fun('type.num.num',sK0),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f21])).
fof(f21,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num',X3) = s('type.num.num',X4) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | s(X0,X1) = s(X0,X5)) & ! [X7] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) | s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X7))) = s(X0,happ(s(fun('type.num.num',X0),X6),s('type.num.num',X7)))) & s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X3),s(X0,X5),s(fun('type.num.num',X0),X6))) != s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X4),s(X0,X1),s(fun('type.num.num',X0),X2))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X3) = s('type.num.num',X4) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | s(X0,X1) = s(X0,X5)) & ! [X7] : (s('type.num.num',X4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) | s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X7))) = s(X0,happ(s(fun('type.num.num',X0),X6),s('type.num.num',X7))))) & s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X3),s(X0,X5),s(fun('type.num.num',X0),X6))) != s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X4),s(X0,X1),s(fun('type.num.num',X0),X2))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X3) = s('type.num.num',X4) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) => s(X0,X1) = s(X0,X5)) & ! [X7] : (s('type.num.num',X4) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) => s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X7))) = s(X0,happ(s(fun('type.num.num',X0),X6),s('type.num.num',X7))))) => s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X3),s(X0,X5),s(fun('type.num.num',X0),X6))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X4),s(X0,X1),s(fun('type.num.num',X0),X2))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6] : ((s('type.num.num',X3) = s('type.num.num',X4) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) => s(X0,X1) = s(X0,X5)) & ! [X7] : (s('type.num.num',X4) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) => s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X7))) = s(X0,happ(s(fun('type.num.num',X0),X6),s('type.num.num',X7))))) => s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X3),s(X0,X5),s(fun('type.num.num',X0),X6))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',X4),s(X0,X1),s(fun('type.num.num',X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((s('type.num.num',X9) = s('type.num.num',X10) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) => s(X6,X7) = s(X6,X11)) & ! [X13] : (s('type.num.num',X10) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) => s(X6,happ(s(fun('type.num.num',X6),X8),s('type.num.num',X13))) = s(X6,happ(s(fun('type.num.num',X6),X12),s('type.num.num',X13))))) => s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num',X9),s(X6,X11),s(fun('type.num.num',X6),X12))) = s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num',X10),s(X6,X7),s(fun('type.num.num',X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12] : ((s('type.num.num',X9) = s('type.num.num',X10) & (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) => s(X6,X7) = s(X6,X11)) & ! [X13] : (s('type.num.num',X10) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))) => s(X6,happ(s(fun('type.num.num',X6),X8),s('type.num.num',X13))) = s(X6,happ(s(fun('type.num.num',X6),X12),s('type.num.num',X13))))) => s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num',X9),s(X6,X11),s(fun('type.num.num',X6),X12))) = s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num',X10),s(X6,X7),s(fun('type.num.num',X6),X8))))),
  file('thm.arithmetic.num_case_cong','thm.arithmetic.num_case_cong')).
fof(f37,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK4) | $spl0),
  inference(cnf_transformation,[],[f37_D])).
fof(f37_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK4) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2340,plain,(
  $false | $spl1),
  inference(subsumption_resolution,[],[f2339,f1539])).
fof(f1539,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK3)))) != s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK3)))) | $spl1),
  inference(superposition,[],[f1465,f1454])).
fof(f1454,plain,(
  ( ! [X38,X36] : (s(X36,happ(s(fun('type.num.num',X36),X38),s('type.num.num',sK7(sK3)))) = s(X36,happ(s(fun('type.num.num',X36),X38),s('type.num.num',sK7(sK4))))) ) | $spl1),
  inference(subsumption_resolution,[],[f1407,f41])).
fof(f41,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK3) | $spl1),
  inference(superposition,[],[f38,f26])).
fof(f1407,plain,(
  ( ! [X38,X36] : (s(X36,happ(s(fun('type.num.num',X36),X38),s('type.num.num',sK7(sK3)))) = s(X36,happ(s(fun('type.num.num',X36),X38),s('type.num.num',sK7(sK4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK3)) ) | $spl1),
  inference(superposition,[],[f1320,f263])).
fof(f263,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,happ(s(fun('type.num.num',X1),X2),s('type.num.num',sK7(X0)))) = s(X1,'const.arithmetic.num_CASE_3'(s('type.num.num',X0),s(X1,X3),s(fun('type.num.num',X1),X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f35,f33])).
fof(f33,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f13])).
fof(f13,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X14] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X14) | ? [X13] : s('type.num.num',X14) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))))),
  file('thm.arithmetic.num_case_cong','thm.arithmetic.num_CASES')).
fof(f35,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X1))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2),s(fun('type.num.num',X0),X3)))) )),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X1))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2),s(fun('type.num.num',X0),X3)))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X3),s('type.num.num',X1))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s(X0,X2),s(fun('type.num.num',X0),X3)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X13,X11,X12] : s(X6,happ(s(fun('type.num.num',X6),X12),s('type.num.num',X13))) = s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s(X6,X11),s(fun('type.num.num',X6),X12)))),
  file('thm.arithmetic.num_case_cong','thm.arithmetic.num_case_def|split|1')).
fof(f1320,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK7(sK4)))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(X0,X2),s(fun('type.num.num',X0),X1)))) ) | $spl1),
  inference(subsumption_resolution,[],[f1220,f38])).
fof(f1220,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.num.num',X0),X1),s('type.num.num',sK7(sK4)))) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(X0,X2),s(fun('type.num.num',X0),X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK4)) )),
  inference(superposition,[],[f263,f26])).
fof(f1465,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK3)))) != s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK4)))) | $spl1),
  inference(backward_demodulation,[],[f1454,f1451])).
fof(f1451,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK4)))) != s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK4)))) | $spl1),
  inference(forward_demodulation,[],[f1367,f1320])).
fof(f1367,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK4)))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK1),s(fun('type.num.num',sK0),sK2))) | $spl1),
  inference(backward_demodulation,[],[f1320,f258])).
fof(f258,plain,(
  s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK1),s(fun('type.num.num',sK0),sK2))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK5),s(fun('type.num.num',sK0),sK6)))),
  inference(forward_demodulation,[],[f29,f26])).
fof(f29,plain,(
  s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK5),s(fun('type.num.num',sK0),sK6))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK4),s(sK0,sK1),s(fun('type.num.num',sK0),sK2)))),
  inference(cnf_transformation,[],[f23])).
fof(f2339,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK3)))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK3)))) | $spl1),
  inference(forward_demodulation,[],[f2338,f1454])).
fof(f2338,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK4)))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK3)))) | $spl1),
  inference(subsumption_resolution,[],[f2337,f38])).
fof(f2337,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK4)))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK4) | $spl1),
  inference(subsumption_resolution,[],[f2329,f26])).
fof(f2329,plain,(
  s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(sK4)))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(sK3)))) | s('type.num.num',sK3) != s('type.num.num',sK4) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK4) | $spl1),
  inference(superposition,[],[f1078,f1454])).
fof(f1078,plain,(
  ( ! [X0] : (s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',sK7(X0)))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',sK7(X0)))) | s('type.num.num',sK3) != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(superposition,[],[f632,f33])).
fof(f632,plain,(
  ( ! [X7] : (s('type.num.num',sK3) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) | s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',X7))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',X7)))) )),
  inference(forward_demodulation,[],[f28,f26])).
fof(f28,plain,(
  ( ! [X7] : (s(sK0,happ(s(fun('type.num.num',sK0),sK2),s('type.num.num',X7))) = s(sK0,happ(s(fun('type.num.num',sK0),sK6),s('type.num.num',X7))) | s('type.num.num',sK4) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f38,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) | $spl1),
  inference(cnf_transformation,[],[f38_D])).
fof(f38_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f40,plain,(
  s(sK0,sK1) = s(sK0,sK5) | $spl2),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  s(sK0,sK1) = s(sK0,sK5) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f27,plain,(
  s(sK0,sK1) = s(sK0,sK5) | s('type.num.num','const.num.|48|_0') != s('type.num.num',sK4)),
  inference(cnf_transformation,[],[f23])).
fof(f2438,plain,(
  $false | ($spl2 | $spl82)),
  inference(subsumption_resolution,[],[f2437,f34])).
fof(f34,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(X0,X1),s(fun('type.num.num',X0),X2)))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(X0,X1),s(fun('type.num.num',X0),X2)))),
  inference(flattening,[],[f14])).
fof(f14,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(X0,X1),s(fun('type.num.num',X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X11,X12] : s(X6,X11) = s(X6,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(X6,X11),s(fun('type.num.num',X6),X12)))),
  file('thm.arithmetic.num_case_cong','thm.arithmetic.num_case_def|split|0')).
fof(f2437,plain,(
  s(sK0,sK1) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(sK0,sK1),s(fun('type.num.num',sK0),sK2))) | ($spl2 | $spl82)),
  inference(forward_demodulation,[],[f2436,f34])).
fof(f2436,plain,(
  s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(sK0,sK1),s(fun('type.num.num',sK0),sK2))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num','const.num.|48|_0'),s(sK0,sK1),s(fun('type.num.num',sK0),sK6))) | ($spl2 | $spl82)),
  inference(forward_demodulation,[],[f2435,f2350])).
fof(f2435,plain,(
  s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK1),s(fun('type.num.num',sK0),sK2))) != s(sK0,'const.arithmetic.num_CASE_3'(s('type.num.num',sK3),s(sK0,sK1),s(fun('type.num.num',sK0),sK6))) | $spl2),
  inference(forward_demodulation,[],[f258,f40])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 53
% Passive clauses: 364
% Generated clauses: 2325
% Final active clauses: 38
% Final passive clauses: 223
% Input formulas: 8
% Initial clauses: 11
% 
% Duplicate literals: 242
% Trivial inequalities: 42
% Fw subsumption resolutions: 161
% Fw demodulations: 167
% Bw demodulations: 8
% 
% Simple tautologies: 75
% Equational tautologies: 19
% Forward subsumptions: 1169
% 
% Binary resolution: 6
% Forward superposition: 956
% Backward superposition: 566
% Self superposition: 72
% Equality factoring: 46
% Equality resolution: 5
% 
% Split clauses: 71
% Split components: 150
% SAT solver clauses: 117
% SAT solver unit clauses: 12
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 1
% 
% Sat splits: 71
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 116
% TWLsolver calls for satisfiability: 28
% 
% Memory used [KB]: 2046
% Time elapsed: 0.065 s
% ------------------------------
% ------------------------------
% Success in time 0.064 s
