Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rat
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rat
% SZS output start Proof for thm.rat
fof(f565,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f564,f132,f232,f230,f228,f133,f227,f134,f229])).
fof(f229,plain,(
  s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl3),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f134,plain,(
  s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6) | s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7)))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK6) & s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) & ! [X1] : s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7])],[f89])).
fof(f89,plain,(
  ? [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) & ! [X1] : s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) & ! [X2] : s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) & s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) & ! [X2] : s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X2] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X7] : s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X7] : s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X7] : s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))) => (s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ? [X7] : s('type.num.num',X6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7)))))))),
  file('thm.rat.rat_36_prove_ltb','thm.rat.rat_36_prove_ltb')).
fof(f227,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK6) | $spl1),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK6) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f133,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK6)),
  inference(cnf_transformation,[],[f90])).
fof(f228,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f230,plain,(
  s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f232,plain,(
  s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7))))) | $spl4),
  inference(cnf_transformation,[],[f232_D])).
fof(f232_D,plain,(
  s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f132,plain,(
  s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK7))))) | s('type.num.num',sK6) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK6)),
  inference(cnf_transformation,[],[f90])).
fof(f564,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f232,f135])).
fof(f135,plain,(
  ( ! [X1] : (s('type.num.num',sK6) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.rat
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 79
% Passive clauses: 167
% Generated clauses: 426
% Final active clauses: 79
% Final passive clauses: 68
% Input formulas: 26
% Initial clauses: 94
% 
% Duplicate literals: 7
% Fw subsumption resolutions: 19
% 
% Simple tautologies: 30
% Equational tautologies: 2
% Forward subsumptions: 194
% 
% Binary resolution: 263
% Factoring: 32
% Equality resolution: 3
% 
% Split clauses: 19
% Split components: 40
% SAT solver clauses: 27
% SAT solver unit clauses: 7
% SAT solver binary clauses: 17
% SAT solver learnt clauses: 1
% 
% Sat splits: 19
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 26
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.018 s
% ------------------------------
% ------------------------------
% Success in time 0.02 s
