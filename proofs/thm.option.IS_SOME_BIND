Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f708,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f705,f62,f89,f99,f102,f100,f109,f90,f92,f60,f86,f392,f668,f347,f671])).
fof(f671,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | $spl22),
  inference(cnf_transformation,[],[f671_D])).
fof(f671_D,plain,(
  s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f347,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(cnf_transformation,[],[f347_D])).
fof(f347_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f668,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f641])).
fof(f641,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,X7) | s('type.option.option'(sK1),'const.option.NONE_0') = s('type.option.option'(sK1),sK2) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f438,f297])).
fof(f297,plain,(
  ( ! [X13] : (s(bool,X13) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) | s(bool,'T_0') = s(bool,X13)) ) | $spl0),
  inference(subsumption_resolution,[],[f212,f86])).
fof(f212,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,X13) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f59,f93])).
fof(f93,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f64,f64])).
fof(f64,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.IS_SOME_BIND',aHL_BOOL_CASES)).
fof(f59,plain,(
  ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))))),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),sK2),s(fun(sK1,'type.option.option'(sK0)),sK3)))))) & ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK1),sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X2),s(fun(X1,'type.option.option'(X0)),X3)))))) & ~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X2),s(fun(X1,'type.option.option'(X0)),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2)))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.OPTION_BIND_2'(s('type.option.option'(X1),X2),s(fun(X1,'type.option.option'(X0)),X3)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),X8),s(fun(X7,'type.option.option'(X6)),X9)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.OPTION_BIND_2'(s('type.option.option'(X7),X8),s(fun(X7,'type.option.option'(X6)),X9)))))) => p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),X8)))))),
  file('thm.option.IS_SOME_BIND','thm.option.IS_SOME_BIND')).
fof(f438,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X1))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f80,f81])).
fof(f81,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f31])).
fof(f31,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X7] : ! [X11] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X11) | ? [X8] : s('type.option.option'(X7),X11) = s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))))),
  file('thm.option.IS_SOME_BIND','thm.option.option_nchotomy')).
fof(f80,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8)))))),
  file('thm.option.IS_SOME_BIND','thm.option.IS_SOME_DEF|split|0')).
fof(f392,plain,(
  $false | ($spl11 | $spl12)),
  inference(trivial_inequality_removal,[],[f386])).
fof(f386,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl11 | $spl12)),
  inference(superposition,[],[f102,f347])).
fof(f86,plain,(
  p(s(bool,'T_0')) | $spl0),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f60,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.option.IS_SOME_BIND','thm.bool.TRUTH')).
fof(f92,plain,(
  $false | ($spl0 | $spl6)),
  inference(resolution,[],[f90,f86])).
fof(f90,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f109,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | ($spl5 | $spl8)),
  inference(superposition,[],[f89,f100])).
fof(f100,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl8),
  inference(cnf_transformation,[],[f100_D])).
fof(f100_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f102,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl11),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f99,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f64])).
fof(f89,plain,(
  ~p(s(bool,'F_0')) | $spl5),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f62,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.option.IS_SOME_BIND',aHL_FALSITY)).
fof(f705,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl5 | $spl11 | $spl22)),
  inference(duplicate_literal_removal,[],[f684])).
fof(f684,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl5 | $spl11 | $spl22)),
  inference(superposition,[],[f680,f294])).
fof(f294,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X14),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X15)) ) | $spl11),
  inference(subsumption_resolution,[],[f168,f102])).
fof(f168,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X15) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X14),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f93,f63])).
fof(f63,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X7] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X7),'const.option.NONE_0')))),
  file('thm.option.IS_SOME_BIND','thm.option.IS_SOME_DEF|split|1')).
fof(f680,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | ($spl5 | $spl22)),
  inference(forward_demodulation,[],[f676,f82])).
fof(f82,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ! [X2] : s('type.option.option'(X1),'const.option.NONE_0') = s('type.option.option'(X1),'const.option.OPTION_BIND_2'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(X0,'type.option.option'(X1)),X2)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X7] : ! [X12] : s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.OPTION_BIND_2'(s('type.option.option'(X6),'const.option.NONE_0'),s(fun(X6,'type.option.option'(X7)),X12)))),
  file('thm.option.IS_SOME_BIND','thm.option.OPTION_BIND_def|split|0')).
fof(f676,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),'const.option.NONE_0'),s(fun(sK1,'type.option.option'(sK0)),sK3))))) | ($spl5 | $spl22)),
  inference(backward_demodulation,[],[f671,f129])).
fof(f129,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),sK2),s(fun(sK1,'type.option.option'(sK0)),sK3))))) | $spl5),
  inference(subsumption_resolution,[],[f128,f89])).
fof(f128,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),sK2),s(fun(sK1,'type.option.option'(sK0)),sK3)))))),
  inference(superposition,[],[f58,f64])).
fof(f58,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.OPTION_BIND_2'(s('type.option.option'(sK1),sK2),s(fun(sK1,'type.option.option'(sK0)),sK3))))))),
  inference(cnf_transformation,[],[f45])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 34
% Passive clauses: 92
% Generated clauses: 631
% Final active clauses: 17
% Final passive clauses: 33
% Input formulas: 16
% Initial clauses: 27
% 
% Duplicate literals: 96
% Trivial inequalities: 8
% Fw subsumption resolutions: 26
% Fw demodulations: 12
% Bw demodulations: 11
% 
% Simple tautologies: 30
% Equational tautologies: 16
% Forward subsumptions: 334
% 
% Binary resolution: 5
% Forward superposition: 188
% Backward superposition: 173
% Self superposition: 34
% Equality factoring: 30
% 
% Split clauses: 18
% Split components: 37
% SAT solver clauses: 37
% SAT solver unit clauses: 3
% SAT solver binary clauses: 14
% SAT solver learnt clauses: 1
% 
% Sat splits: 18
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 33
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 895
% Time elapsed: 0.023 s
% ------------------------------
% ------------------------------
% Success in time 0.024 s
