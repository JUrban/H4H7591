Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.integer
% (75666)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 184
% Passive clauses: 4189
% Generated clauses: 20420
% Final active clauses: 157
% Final passive clauses: 3744
% Input formulas: 43
% Initial clauses: 76
% 
% Duplicate literals: 637
% Trivial inequalities: 488
% Fw subsumption resolutions: 2014
% Fw demodulations: 3555
% Bw demodulations: 19
% 
% Simple tautologies: 275
% Equational tautologies: 57
% Forward subsumptions: 8727
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 399
% Factoring: 1
% Forward superposition: 6988
% Backward superposition: 5690
% Self superposition: 223
% Equality factoring: 142
% Equality resolution: 36
% 
% Split clauses: 341
% Split components: 682
% SAT solver clauses: 668
% SAT solver unit clauses: 6
% SAT solver binary clauses: 59
% 
% Sat splits: 341
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 668
% TWLsolver calls for satisfiability: 132
% 
% Memory used [KB]: 11897
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f4111,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4107,f140,f220,f147,f228,f2343,f148,f229,f177,f244,f4056,f4058,f198,f258,f270,f272,f137,f216,f146,f227,f3645,f197,f257])).
fof(f257,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) | $spl58),
  inference(cnf_transformation,[],[f257_D])).
fof(f257_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f197,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(flattening,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X7,X6] : (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) => s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num',X6))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X6))))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.INT_DIV')).
fof(f3645,plain,(
  $false | ($spl32 | $spl58 | $spl229)),
  inference(subsumption_resolution,[],[f3628,f244])).
fof(f3628,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | ($spl58 | $spl229)),
  inference(trivial_inequality_removal,[],[f3605])).
fof(f3605,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | ($spl58 | $spl229)),
  inference(superposition,[],[f961,f257])).
fof(f961,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl229),
  inference(cnf_transformation,[],[f961_D])).
fof(f961_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f227,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl8),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f146,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.arithmetic.NUMERAL_DEF')).
fof(f216,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | $spl1),
  inference(cnf_transformation,[],[f216_D])).
fof(f216_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f137,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))))))))),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f98])).
fof(f98,plain,(
  ? [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ~! [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))))))))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.INT_DIV_REDUCE|split|9')).
fof(f272,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | $spl81),
  inference(cnf_transformation,[],[f272_D])).
fof(f272_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f270,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f269,f227])).
fof(f269,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))))))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))) | ($spl1 | $spl8)),
  inference(forward_demodulation,[],[f216,f227])).
fof(f258,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl60),
  inference(cnf_transformation,[],[f258_D])).
fof(f258_D,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f198,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))) | s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) | s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),
  inference(ennf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X0),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))),s('type.integer.int',X1))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X24,X25] : (~s('type.integer.int',X25) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => s('type.integer.int','const.integer.int_div_2'(s('type.integer.int',X24),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X25))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X24))),s('type.integer.int',X25))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.INT_DIV_NEG')).
fof(f4058,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl732),
  inference(cnf_transformation,[],[f4058_D])).
fof(f4058_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) <=> ~$spl732),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl732])])).
fof(f4056,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | ($spl10 | $spl60 | $spl81 | $spl228)),
  inference(subsumption_resolution,[],[f4055,f960])).
fof(f960,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl228),
  inference(cnf_transformation,[],[f960_D])).
fof(f960_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) = s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f4055,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | ($spl10 | $spl60 | $spl81)),
  inference(forward_demodulation,[],[f4016,f228])).
fof(f4016,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) != s('type.integer.int','const.integer.int_div_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',sK0))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))))))) | s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | ($spl60 | $spl81)),
  inference(superposition,[],[f272,f258])).
fof(f244,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) ) | $spl32),
  inference(cnf_transformation,[],[f244_D])).
fof(f244_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f177,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X7] : ~s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7)))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.integer_386_prove_ltb|split|1')).
fof(f229,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) | $spl12),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f148,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X7)))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.NUM_OF_INT')).
fof(f2343,plain,(
  $false | ($spl12 | $spl32 | $spl340)),
  inference(subsumption_resolution,[],[f2342,f244])).
fof(f2342,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | ($spl12 | $spl340)),
  inference(forward_demodulation,[],[f2326,f229])).
fof(f2326,plain,(
  s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) = s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl12 | $spl340)),
  inference(superposition,[],[f229,f2320])).
fof(f2320,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl340),
  inference(cnf_transformation,[],[f2320_D])).
fof(f2320_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f228,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) | $spl10),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f147,plain,(
  ( ! [X0] : (s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : s('type.integer.int',X0) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X8] : s('type.integer.int',X8) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X8)))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.INT_NEGNEG')).
fof(f220,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl4),
  inference(cnf_transformation,[],[f220_D])).
fof(f220_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f140,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(cnf_transformation,[],[f34])).
fof(f34,axiom,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))),
  file('thm.integer.INT_DIV_REDUCE|split|9','thm.integer.INT_NEG_|48|')).
fof(f4107,plain,(
  $false | ($spl4 | $spl10 | $spl341 | $spl732)),
  inference(subsumption_resolution,[],[f4106,f2319])).
fof(f2319,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl341),
  inference(cnf_transformation,[],[f2319_D])).
fof(f2319_D,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl341),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl341])])).
fof(f4106,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | ($spl4 | $spl10 | $spl732)),
  inference(forward_demodulation,[],[f4073,f220])).
fof(f4073,plain,(
  s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) = s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl10 | $spl732)),
  inference(superposition,[],[f228,f4058])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 99
% Passive clauses: 384
% Generated clauses: 4079
% Final active clauses: 72
% Final passive clauses: 230
% Input formulas: 43
% Initial clauses: 76
% 
% Duplicate literals: 26
% Trivial inequalities: 11
% Fw subsumption resolutions: 228
% Fw demodulations: 486
% Bw demodulations: 48
% Condensations: 23
% Global subsumptions: 9
% 
% Simple tautologies: 32
% Equational tautologies: 14
% Forward subsumptions: 2182
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 83
% Factoring: 1
% Forward superposition: 969
% Backward superposition: 1486
% Self superposition: 100
% Equality factoring: 8
% Equality resolution: 2
% 
% Split clauses: 50
% Split components: 100
% SAT solver clauses: 707
% SAT solver unit clauses: 97
% SAT solver binary clauses: 55
% SAT solver learnt clauses: 20
% SAT solver learnt literals: 1
% 
% Sat splits: 50
% Sat splitting refutations: 25
% 
% TWLsolver clauses: 669
% TWLsolver calls for satisfiability: 384
% 
% Memory used [KB]: 4989
% Time elapsed: 0.116 s
% ------------------------------
% ------------------------------
% Success in time 0.72 s
