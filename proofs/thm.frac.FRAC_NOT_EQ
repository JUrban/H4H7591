Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.frac
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.frac
% SZS output start Proof for thm.frac
fof(f7575,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7574,f4025,f216,f392,f215,f394,f390,f6959,f214,f391,f393,f389,f244,f395,f397,f223,f398])).
fof(f398,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f398_D])).
fof(f398_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f223,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.frac.FRAC_NOT_EQ',aHL_FALSITY)).
fof(f397,plain,(
  p(s(bool,'F_0')) | $spl8),
  inference(cnf_transformation,[],[f397_D])).
fof(f397_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f395,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f395_D])).
fof(f395_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f244,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f146])).
fof(f146,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X12] : ((p(s(bool,'F_0')) => p(s(bool,X12))) <=> p(s(bool,'T_0')))),
  file('thm.frac.FRAC_NOT_EQ','thm.bool.IMP_CLAUSES|split|2')).
fof(f389,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) | $spl1),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f393,plain,(
  s('type.integer.int',sK12) != s('type.integer.int',sK14) | $spl5),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s('type.integer.int',sK12) != s('type.integer.int',sK14) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f391,plain,(
  s('type.integer.int',sK13) != s('type.integer.int',sK15) | $spl3),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.integer.int',sK13) != s('type.integer.int',sK15) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f214,plain,(
  s('type.integer.int',sK13) != s('type.integer.int',sK15) | s('type.integer.int',sK12) != s('type.integer.int',sK14) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15)))))),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK15)))) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) | s('type.integer.int',sK12) != s('type.integer.int',sK14) | s('type.integer.int',sK13) != s('type.integer.int',sK15)) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) | (s('type.integer.int',sK12) = s('type.integer.int',sK14) & s('type.integer.int',sK13) = s('type.integer.int',sK15)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f136])).
fof(f136,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3)) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & ((s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | (s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3))) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3)))))),
  inference(nnf_transformation,[],[f92])).
fof(f92,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <~> (s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) & (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) & (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <~> (s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) => (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <=> (s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) => (~s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <=> (~s('type.integer.int',X0) = s('type.integer.int',X2) | ~s('type.integer.int',X1) = s('type.integer.int',X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) => (~s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',X7))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X8),s('type.integer.int',X9))))) <=> (~s('type.integer.int',X6) = s('type.integer.int',X8) | ~s('type.integer.int',X7) = s('type.integer.int',X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) => (~s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',X7))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X8),s('type.integer.int',X9))))) <=> (~s('type.integer.int',X6) = s('type.integer.int',X8) | ~s('type.integer.int',X7) = s('type.integer.int',X9)))))),
  file('thm.frac.FRAC_NOT_EQ','thm.frac.FRAC_NOT_EQ')).
fof(f6959,plain,(
  $false | ($spl0 | $spl3 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6958,f395])).
fof(f6958,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl3 | $spl4)),
  inference(forward_demodulation,[],[f6957,f824])).
fof(f824,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))),
  inference(resolution,[],[f212,f234])).
fof(f234,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.frac.FRAC_NOT_EQ','thm.bool.EQ_CLAUSES|split|1')).
fof(f212,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13))))),
  inference(cnf_transformation,[],[f137])).
fof(f6957,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))) | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f6954,f391])).
fof(f6954,plain,(
  s('type.integer.int',sK13) = s('type.integer.int',sK15) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))) | ($spl0 | $spl4)),
  inference(equality_resolution,[],[f4124])).
fof(f4124,plain,(
  ( ! [X0,X1] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s('type.integer.int',sK15) = s('type.integer.int',X1) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) ) | ($spl0 | $spl4)),
  inference(subsumption_resolution,[],[f4116,f213])).
fof(f213,plain,(
  p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK15))))),
  inference(cnf_transformation,[],[f137])).
fof(f4116,plain,(
  ( ! [X0,X1] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) | s('type.integer.int',sK15) = s('type.integer.int',X1) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK15))))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f383,f4026])).
fof(f4026,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK15))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f390,f394])).
fof(f383,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | s('type.integer.int',X1) = s('type.integer.int',X3) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f211])).
fof(f211,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | ((s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3))) & (s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))))),
  inference(flattening,[],[f210])).
fof(f210,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | ((s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3))) & ((s('type.integer.int',X0) != s('type.integer.int',X2) | s('type.integer.int',X1) != s('type.integer.int',X3)) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))))))),
  inference(nnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <=> (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3))))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) | (~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <=> (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3)))))),
  inference(ennf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) => (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) <=> (s('type.integer.int',X0) = s('type.integer.int',X2) & s('type.integer.int',X1) = s('type.integer.int',X3)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X7,X8,X9] : (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7)))) => (p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X9)))) => (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X6),s('type.integer.int',X7))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X8),s('type.integer.int',X9))))) <=> (s('type.integer.int',X6) = s('type.integer.int',X8) & s('type.integer.int',X7) = s('type.integer.int',X9)))))),
  file('thm.frac.FRAC_NOT_EQ','thm.frac.FRAC_EQ')).
fof(f390,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) | $spl0),
  inference(cnf_transformation,[],[f390_D])).
fof(f390_D,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f394,plain,(
  s('type.integer.int',sK12) = s('type.integer.int',sK14) | $spl4),
  inference(cnf_transformation,[],[f394_D])).
fof(f394_D,plain,(
  s('type.integer.int',sK12) = s('type.integer.int',sK14) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f215,plain,(
  s('type.integer.int',sK12) = s('type.integer.int',sK14) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15)))))),
  inference(cnf_transformation,[],[f137])).
fof(f392,plain,(
  s('type.integer.int',sK13) = s('type.integer.int',sK15) | $spl2),
  inference(cnf_transformation,[],[f392_D])).
fof(f392_D,plain,(
  s('type.integer.int',sK13) = s('type.integer.int',sK15) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f216,plain,(
  s('type.integer.int',sK13) = s('type.integer.int',sK15) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) = s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK15)))))),
  inference(cnf_transformation,[],[f137])).
fof(f4025,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f4024])).
fof(f4024,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f4023,f394])).
fof(f4023,plain,(
  s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK14),s('type.integer.int',sK13))))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f389,f392])).
fof(f7574,plain,(
  $false | ($spl0 | $spl5 | $spl6)),
  inference(subsumption_resolution,[],[f7573,f395])).
fof(f7573,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl5 | $spl6)),
  inference(forward_demodulation,[],[f7572,f824])).
fof(f7572,plain,(
  ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))) | ($spl0 | $spl5 | $spl6)),
  inference(subsumption_resolution,[],[f7569,f393])).
fof(f7569,plain,(
  s('type.integer.int',sK12) = s('type.integer.int',sK14) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK13)))) | ($spl0 | $spl6)),
  inference(equality_resolution,[],[f7017])).
fof(f7017,plain,(
  ( ! [X4,X5] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X4),s('type.integer.int',X5))))) | s('type.integer.int',sK14) = s('type.integer.int',X4) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) ) | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f7016,f395])).
fof(f7016,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X4),s('type.integer.int',X5))))) | s('type.integer.int',sK14) = s('type.integer.int',X4) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) ) | $spl0),
  inference(forward_demodulation,[],[f7010,f4027])).
fof(f4027,plain,(
  s(bool,'T_0') = s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK15)))),
  inference(resolution,[],[f213,f234])).
fof(f7010,plain,(
  ( ! [X4,X5] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',sK12),s('type.integer.int',sK13))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X4),s('type.integer.int',X5))))) | s('type.integer.int',sK14) = s('type.integer.int',X4) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK15)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X5))))) ) | $spl0),
  inference(superposition,[],[f382,f390])).
fof(f382,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X0),s('type.integer.int',X1))))) != s('type.frac.frac','const.frac.abs_frac_1'(s('type.pair.prod'('type.integer.int','type.integer.int'),'const.pair.,_2'(s('type.integer.int',X2),s('type.integer.int',X3))))) | s('type.integer.int',X0) = s('type.integer.int',X2) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X3)))) | ~p(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))))) )),
  inference(cnf_transformation,[],[f211])).
% SZS output end Proof for thm.frac
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 482
% Passive clauses: 2065
% Generated clauses: 7283
% Final active clauses: 455
% Final passive clauses: 1366
% Input formulas: 36
% Initial clauses: 173
% 
% Duplicate literals: 277
% Trivial inequalities: 45
% Fw subsumption resolutions: 860
% Fw demodulations: 138
% Bw demodulations: 21
% 
% Simple tautologies: 181
% Equational tautologies: 45
% Forward subsumptions: 3577
% 
% Binary resolution: 3203
% Factoring: 826
% Forward superposition: 572
% Backward superposition: 1010
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 24
% 
% Split clauses: 181
% Split components: 369
% SAT solver clauses: 323
% SAT solver unit clauses: 13
% SAT solver binary clauses: 75
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 181
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 320
% TWLsolver calls for satisfiability: 233
% 
% Memory used [KB]: 3198
% Time elapsed: 0.152 s
% ------------------------------
% ------------------------------
% Success in time 0.146 s
