Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (76674)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 156
% Passive clauses: 1697
% Generated clauses: 19857
% Final active clauses: 109
% Final passive clauses: 1373
% Input formulas: 26
% Initial clauses: 55
% 
% Duplicate literals: 1019
% Trivial inequalities: 386
% Fw subsumption resolutions: 3069
% Fw demodulations: 2658
% Bw demodulations: 43
% 
% Simple tautologies: 416
% Equational tautologies: 25
% Forward subsumptions: 8778
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 324
% Forward superposition: 6803
% Backward superposition: 4943
% Self superposition: 162
% Equality factoring: 75
% Equality resolution: 37
% 
% Split clauses: 1147
% Split components: 2309
% SAT solver clauses: 1917
% SAT solver unit clauses: 30
% SAT solver binary clauses: 166
% 
% Sat splits: 1147
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1912
% TWLsolver calls for satisfiability: 169
% 
% Memory used [KB]: 9978
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f3907,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3906,f94,f166,f130,f186,f3873,f3901,f99,f174,f976,f977,f95,f170,f133,f189,f191,f194,f93,f168,f102,f176])).
fof(f176,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f102,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X9] : (s(bool,'T_0') = s(bool,X9) <=> p(s(bool,X9)))),
  file('thm.arithmetic.DIVMOD_CALC|split|1','thm.bool.EQ_CLAUSES|split|1')).
fof(f168,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl2),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f93,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) & s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f59])).
fof(f59,plain,(
  ? [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num',X7))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))) = s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num',X7))))))))))),
  file('thm.arithmetic.DIVMOD_CALC|split|1','thm.arithmetic.DIVMOD_CALC|split|1')).
fof(f194,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl36),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f191,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl2 | $spl14)),
  inference(resolution,[],[f176,f168])).
fof(f189,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl32),
  inference(cnf_transformation,[],[f189_D])).
fof(f189_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f133,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) | s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) => s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',X1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) => s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num',X7))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X7))))))),
  file('thm.arithmetic.DIVMOD_CALC|split|1','thm.arithmetic.DIVMOD_CORRECT')).
fof(f170,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f95,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.DIVMOD_CALC|split|1',aHL_TRUTH)).
fof(f977,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X0),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X1),s('type.num.num',sK1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK1)))))) ) | $spl120),
  inference(cnf_transformation,[],[f977_D])).
fof(f977_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X0),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X1),s('type.num.num',sK1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK1)))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f976,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X0),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X1),s('type.num.num',sK1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK1)))))) ) | ($spl4 | $spl32 | $spl36)),
  inference(subsumption_resolution,[],[f962,f170])).
fof(f962,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X0),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X1),s('type.num.num',sK1))))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num',sK1))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK1)))))) ) | ($spl32 | $spl36)),
  inference(superposition,[],[f189,f194])).
fof(f174,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl10),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f99,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.DIVMOD_CALC|split|1','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f3901,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK1))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',sK1)))))))) ) | $spl362),
  inference(cnf_transformation,[],[f3901_D])).
fof(f3901_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK1))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',sK1)))))))) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f3873,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK1))))) = s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X0),s('type.num.num',sK1)))))))) ) | ($spl10 | $spl120)),
  inference(superposition,[],[f977,f174])).
fof(f186,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) ) | $spl26),
  inference(cnf_transformation,[],[f186_D])).
fof(f186_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f130,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X10,X18] : ! [X11,X12] : s(X18,X12) = s(X18,'const.pair.SND_1'(s('type.pair.prod'(X10,X18),'const.pair.,_2'(s(X10,X11),s(X18,X12)))))),
  file('thm.arithmetic.DIVMOD_CALC|split|1','thm.pair.SND')).
fof(f166,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))))) | $spl1),
  inference(cnf_transformation,[],[f166_D])).
fof(f166_D,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f94,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.arithmetic.DIVMOD_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num','const.num.|48|_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))))))),
  inference(cnf_transformation,[],[f71])).
fof(f3906,plain,(
  $false | ($spl1 | $spl26 | $spl362)),
  inference(subsumption_resolution,[],[f3905,f186])).
fof(f3905,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))) != s('type.num.num','const.pair.SND_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))) | ($spl1 | $spl362)),
  inference(backward_demodulation,[],[f3901,f166])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 65
% Passive clauses: 175
% Generated clauses: 3752
% Final active clauses: 56
% Final passive clauses: 94
% Input formulas: 26
% Initial clauses: 55
% 
% Duplicate literals: 244
% Trivial inequalities: 81
% Fw subsumption resolutions: 227
% Fw demodulations: 244
% Bw demodulations: 20
% Condensations: 422
% Global subsumptions: 4
% 
% Simple tautologies: 84
% Equational tautologies: 20
% Forward subsumptions: 1917
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 27
% Forward superposition: 1256
% Backward superposition: 867
% Self superposition: 73
% Equality factoring: 33
% Equality resolution: 16
% 
% Split clauses: 51
% Split components: 110
% SAT solver clauses: 386
% SAT solver unit clauses: 65
% SAT solver binary clauses: 27
% SAT solver learnt clauses: 9
% 
% Sat splits: 51
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 369
% TWLsolver calls for satisfiability: 223
% 
% Memory used [KB]: 4221
% Time elapsed: 0.142 s
% ------------------------------
% ------------------------------
% Success in time 0.756 s
