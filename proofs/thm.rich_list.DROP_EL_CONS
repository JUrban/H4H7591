Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f11354,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11342,f267,f358,f356,f236,f357])).
fof(f357,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f357_D])).
fof(f357_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f236,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.rich_list.DROP_EL_CONS',aHL_FALSITY)).
fof(f356,plain,(
  p(s(bool,'F_0')) | $spl0),
  inference(cnf_transformation,[],[f356_D])).
fof(f356_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f358,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f358_D])).
fof(f358_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f267,plain,(
  p(s(bool,'T_0')) | p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f195])).
fof(f195,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X11] : ((p(s(bool,'F_0')) => p(s(bool,X11))) <=> p(s(bool,'T_0')))),
  file('thm.rich_list.DROP_EL_CONS','thm.bool.IMP_CLAUSES|split|2')).
fof(f11342,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f11341,f11032])).
fof(f11032,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f11031,f2371])).
fof(f2371,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f2218,f303])).
fof(f303,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9,X8] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))),
  file('thm.rich_list.DROP_EL_CONS','thm.arithmetic.ADD_SYM')).
fof(f2218,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(backward_demodulation,[],[f2173,f248])).
fof(f248,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X8] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8)))),
  file('thm.rich_list.DROP_EL_CONS','thm.arithmetic.SUC_ONE_ADD')).
fof(f2173,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f248,f241])).
fof(f241,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))),
  file('thm.rich_list.DROP_EL_CONS','thm.arithmetic.ADD_|48|')).
fof(f11031,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'(sK0),sK1)))))),
  inference(forward_demodulation,[],[f227,f2173])).
fof(f227,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f182])).
fof(f182,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))) & s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f158])).
fof(f158,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) & s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X1))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X1))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X2),s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X7))),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X7))))))),
  file('thm.rich_list.DROP_EL_CONS','thm.rich_list.DROP_EL_CONS')).
fof(f11341,plain,(
  s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.list.list'(sK0),sK1))))) | $spl2),
  inference(subsumption_resolution,[],[f11292,f358])).
fof(f11292,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,'const.list.EL_2'(s('type.num.num',sK2),s('type.list.list'(sK0),sK1))),s('type.list.list'(sK0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK2))),s('type.list.list'(sK0),sK1)))))),
  inference(superposition,[],[f293,f430])).
fof(f430,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1)))))),
  inference(resolution,[],[f226,f253])).
fof(f253,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f186])).
fof(f186,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.rich_list.DROP_EL_CONS','thm.bool.EQ_CLAUSES|split|1')).
fof(f226,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK2),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK1))))))),
  inference(cnf_transformation,[],[f182])).
fof(f293,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) | s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2))))))),
  inference(ennf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2))))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))))) => s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.EL_2'(s('type.num.num',X1),s('type.list.list'(X0),X2))),s('type.list.list'(X0),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.list.list'(X0),X2))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8,X10] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10)))))) => s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num',X8),s('type.list.list'(X6),X10))) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.EL_2'(s('type.num.num',X8),s('type.list.list'(X6),X10))),s('type.list.list'(X6),'const.list.DROP_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s('type.list.list'(X6),X10))))))),
  file('thm.rich_list.DROP_EL_CONS','thm.rich_list.DROP_CONS_EL')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 170
% Passive clauses: 1697
% Generated clauses: 11041
% Final active clauses: 136
% Final passive clauses: 1409
% Input formulas: 69
% Initial clauses: 127
% 
% Duplicate literals: 273
% Trivial inequalities: 84
% Fw subsumption resolutions: 811
% Fw demodulations: 1769
% Bw demodulations: 33
% 
% Simple tautologies: 174
% Equational tautologies: 38
% Forward subsumptions: 6086
% Fw demodulations to eq. taut.: 20
% 
% Binary resolution: 339
% Factoring: 1
% Forward superposition: 4434
% Backward superposition: 2939
% Self superposition: 102
% Equality factoring: 58
% Equality resolution: 17
% 
% Split clauses: 103
% Split components: 212
% SAT solver clauses: 204
% SAT solver unit clauses: 8
% SAT solver binary clauses: 78
% SAT solver learnt clauses: 1
% 
% Sat splits: 103
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 197
% TWLsolver calls for satisfiability: 67
% 
% Memory used [KB]: 7675
% Time elapsed: 0.229 s
% ------------------------------
% ------------------------------
% Success in time 0.231 s
