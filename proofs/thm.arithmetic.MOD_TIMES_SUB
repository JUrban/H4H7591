Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (117147)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 164
% Passive clauses: 1920
% Generated clauses: 27707
% Final active clauses: 114
% Final passive clauses: 1460
% Input formulas: 30
% Initial clauses: 62
% 
% Duplicate literals: 1204
% Trivial inequalities: 319
% Fw subsumption resolutions: 4080
% Fw demodulations: 4285
% Bw demodulations: 44
% 
% Simple tautologies: 430
% Equational tautologies: 70
% Forward subsumptions: 12961
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 458
% Factoring: 3
% Forward superposition: 8073
% Backward superposition: 8578
% Self superposition: 274
% Equality factoring: 187
% Equality resolution: 32
% 
% Split clauses: 847
% Split components: 1736
% SAT solver clauses: 1485
% SAT solver unit clauses: 21
% SAT solver binary clauses: 188
% 
% Sat splits: 847
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 1472
% TWLsolver calls for satisfiability: 167
% 
% Memory used [KB]: 10490
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% (117158)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 155
% Passive clauses: 649
% Generated clauses: 14223
% Final active clauses: 110
% Final passive clauses: 398
% Input formulas: 30
% Initial clauses: 62
% 
% Duplicate literals: 826
% Trivial inequalities: 157
% Fw subsumption resolutions: 1277
% Fw demodulations: 1354
% Bw demodulations: 133
% Condensations: 1519
% Global subsumptions: 9
% 
% Simple tautologies: 232
% Equational tautologies: 55
% Forward subsumptions: 7245
% 
% Binary resolution: 218
% Factoring: 2
% Forward superposition: 3649
% Backward superposition: 4029
% Self superposition: 203
% Equality factoring: 135
% Equality resolution: 21
% 
% Split clauses: 109
% Split components: 230
% SAT solver clauses: 988
% SAT solver unit clauses: 81
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 18
% 
% Sat splits: 109
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 952
% TWLsolver calls for satisfiability: 252
% 
% Memory used [KB]: 11129
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 286 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f59928,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1257,f1247,f1290,f1242,f1240,f1231,f1284,f1228,f1291,f1141,f1401,f1422,f1424,f1426,f1428,f1431,f1441,f1443,f1446,f2242,f2243,f2253,f2255,f2267,f2275,f2281,f2283,f2287,f2289,f2291,f2293,f2297,f2299,f2301,f2303,f2305,f2337,f2338,f2339,f2340,f3110,f3129,f3109,f3130,f3103,f3135,f3102,f3138,f3259,f3263,f3262,f3261,f3727,f2244,f3731,f3730,f3841,f3842,f3729,f3884,f3932,f3934,f3941,f3943,f3945,f3947,f3949,f3951,f3953,f3955,f3957,f3959,f3961,f3963,f3965,f3967,f3968,f3970,f3973,f3975,f3979,f3983,f7680,f7762,f7662,f7659,f7794,f7648,f7759,f7817,f7763,f7584,f8005,f8127,f8130,f8128,f8137,f8142,f8143,f8140,f8139,f8194,f8195,f8196,f8277,f8279,f8282,f8287,f8289,f8291,f8293,f8296,f10337,f10409,f10893,f10966,f15782,f15783,f15800,f15801,f15842,f15853,f1400,f15871,f15882,f15843,f15883,f16153,f16161,f16163,f16179,f16187,f16195,f16199,f16201,f16203,f16205,f16207,f16209,f16213,f16215,f16217,f16219,f16221,f16223,f16225,f16393,f16395,f16404,f16407,f16408,f16409,f16410,f16411,f16412,f16413,f16414,f16415,f16416,f16417,f16418,f16419,f16420,f16421,f16429,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f21865,f21617,f21861,f21466,f22211,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24218,f24214,f24174,f24175,f24219,f24176,f24177,f24178,f24220,f24179,f24221,f24180,f24222,f24223,f24182,f24224,f24183,f24225,f24226,f24185,f24227,f24228,f24187,f24229,f24210,f24188,f24230,f24189,f24190,f24191,f24234,f24233,f24192,f24213,f24211,f24231,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24830,f24748,f24749,f24831,f24750,f24751,f24752,f24832,f24753,f24833,f24834,f24755,f24835,f24836,f24757,f24837,f24838,f24759,f24839,f24840,f24761,f24841,f24842,f24827,f24843,f24828,f24764,f24844,f24765,f24845,f24846,f24849,f24851,f24769,f24770,f24771,f24853,f24772,f24852,f24854,f24855,f24857,f24859,f24860,f24862,f24826,f24864,f24847,f24825,f27188,f27189,f27190,f27192,f27277,f27276,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27290,f27216,f27292,f27297,f27298,f27293,f27218,f27299,f27301,f27307,f27285,f28041,f28042,f28043,f28045,f28182,f28181,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28199,f28071,f28207,f28209,f28219,f28190,f28825,f28986,f28069,f29080,f29624,f29663,f29727,f29742,f29746,f29728,f29564,f29763,f29753,f29561,f29768,f29812,f29813,f30949,f30948,f31011,f31075,f30893,f31002,f31090,f31094,f31076,f30891,f31111,f31101,f30888,f31118,f31158,f31159,f31357,f31393,f31356,f31397,f32434,f32433,f32432,f32486,f32566,f32376,f32476,f32581,f32585,f32567,f32374,f32373,f32485,f32602,f32592,f32370,f32609,f32662,f32663,f33077,f33103,f33076,f33106,f33075,f33107,f33683,f33725,f33682,f33734,f33681,f33735,f33680,f33736,f34034,f34054,f34056,f34064,f34066,f34068,f34079,f34081,f34087,f34092,f34095,f34107,f34110,f34119,f34122,f34125,f34608,f34609,f34610,f34611,f34616,f34618,f34634,f34637,f34638,f34643,f34645,f34647,f34648,f34029,f34635,f33569,f34026,f34656,f33561,f33545,f33532,f34676,f34014,f34677,f33490,f34691,f33489,f34693,f33488,f34654,f33471,f34703,f33470,f34704,f33468,f34705,f34708,f34710,f34712,f34715,f34726,f34727,f34706,f34732,f34692,f34767,f34655,f34768,f34657,f34775,f34669,f34709,f36215,f29081,f3128,f37022,f37049,f37021,f37050,f37020,f37051,f37114,f37115,f37116,f37117,f37118,f37119,f37122,f37123,f37126,f37127,f37128,f37129,f37130,f37131,f37132,f37133,f37134,f37135,f37136,f37137,f37138,f37139,f37140,f37141,f37142,f37143,f37144,f37145,f37146,f37147,f37148,f37149,f37150,f37151,f37152,f37153,f37154,f37155,f37156,f37157,f37158,f39655,f39678,f39654,f39679,f39653,f39680,f1285,f40071,f40091,f40093,f40101,f40103,f40105,f40116,f40118,f40124,f40129,f40132,f40144,f40147,f40156,f40159,f40162,f40645,f40646,f40647,f40648,f40653,f40655,f43762,f43764,f43767,f43774,f43777,f43780,f43781,f43783,f43786,f43788,f43790,f43795,f38152,f38151,f27275,f48780,f48782,f48781,f48914,f48916,f48919,f48926,f48929,f48932,f48933,f48935,f48938,f48940,f48942,f48946,f48949,f48953,f48956,f48962,f48965,f48967,f48970,f48972,f48976,f48979,f48982,f48985,f48988,f48991,f48994,f48997,f49000,f49003,f49007,f49012,f49015,f49018,f49021,f49024,f49027,f49030,f49033,f49036,f49039,f49042,f49045,f49049,f49052,f49055,f49058,f49062,f49065,f49068,f49071,f49074,f49077,f49080,f49083,f49086,f49092,f49147,f49155,f49158,f49161,f49164,f49166,f49178,f49202,f49204,f49207,f49210,f49217,f49244,f49253,f49263,f49271,f49295,f49298,f49302,f49305,f49311,f49314,f49316,f49319,f49321,f49325,f49328,f49331,f49334,f49337,f49340,f49343,f49346,f49349,f49352,f49356,f49359,f49364,f49367,f49370,f49373,f49376,f49379,f49382,f49385,f49388,f49391,f49394,f49397,f49401,f49404,f49407,f49410,f49414,f49417,f49420,f49423,f49426,f49429,f49432,f49435,f49438,f51807,f51809,f15784,f51808,f52314,f52316,f52319,f52326,f52329,f52332,f52333,f52335,f52337,f52338,f52339,f52341,f52343,f52345,f52346,f52348,f52350,f52352,f52354,f52356,f52358,f52360,f52362,f52364,f52366,f52368,f52370,f52371,f52373,f52374,f52376,f52378,f52380,f52382,f52384,f52386,f52388,f52390,f52392,f52394,f52396,f52398,f52400,f52402,f52404,f52406,f52408,f52410,f52412,f52414,f52416,f52418,f52420,f52475,f34649,f52476,f52530,f52553,f52559,f52561,f58429,f24216,f58430,f55709,f55708,f39153,f39152,f24217,f28180,f59927])).
fof(f59927,plain,(
  $false | $spl47),
  inference(subsumption_resolution,[],[f59900,f111])).
fof(f111,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0)))),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) & s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f66])).
fof(f66,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X0)))) & s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X0))))) & s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X0))))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X0),s('type.num.num',X2))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X6))))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X8))),s('type.num.num',X6))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X6))))) => s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X8))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X8))),s('type.num.num',X6))))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.MOD_TIMES_SUB')).
fof(f59900,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0))) | $spl47),
  inference(superposition,[],[f11779,f8297])).
fof(f8297,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))) | $spl47),
  inference(unit_resulting_resolution,[],[f8138,f117])).
fof(f117,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f35])).
fof(f35,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | ? [X1] : s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | ? [X6] : s('type.num.num',X9) = s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.num_CASES')).
fof(f8138,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl47),
  inference(cnf_transformation,[],[f8138_D])).
fof(f8138_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f11779,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0)))) )),
  inference(forward_demodulation,[],[f11755,f163])).
fof(f163,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X6] : s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X6))),s('type.num.num',X6)))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.MULT|split|1')).
fof(f11755,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f891,f2245])).
fof(f2245,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(subsumption_resolution,[],[f2222,f112])).
fof(f112,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f12])).
fof(f12,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.bool.TRUTH')).
fof(f2222,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f164,f182])).
fof(f182,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))),
  inference(unit_resulting_resolution,[],[f110,f121])).
fof(f121,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X15] : (s(bool,'T_0') = s(bool,X15) <=> p(s(bool,X15)))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.bool.EQ_CLAUSES|split|1')).
fof(f110,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f78])).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ! [X2] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) => ! [X2] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X10,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X11)))) => ! [X12] : s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num',X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num',X10))))))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.LESS_EQ_ADD_SUB')).
fof(f891,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',X0))),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f878,f112])).
fof(f878,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',X0))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f119,f180])).
fof(f180,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))),
  inference(unit_resulting_resolution,[],[f108,f121])).
fof(f108,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))),
  inference(cnf_transformation,[],[f78])).
fof(f119,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1,X2] : s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1,X2] : s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) => ! [X7,X8] : s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X8),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X8))),s('type.num.num',X6))))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.MOD_TIMES')).
fof(f28180,plain,(
  ( ! [X39,X35,X38,X36,X40] : (s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X35,X36,bool,bool))))) ) | $spl162),
  inference(cnf_transformation,[],[f28180_D])).
fof(f28180_D,plain,(
  ( ! [X39,X35,X38,X36,X40] : (s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X35,X36,bool,bool))))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f24217,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) | $spl82),
  inference(cnf_transformation,[],[f24217_D])).
fof(f24217_D,plain,(
  ( ! [X7] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X7)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f39152,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,X37) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X35,X36,bool,bool)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f783,f419])).
fof(f419,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f229,f229])).
fof(f229,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f116,f116])).
fof(f116,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.MOD_TIMES_SUB',aHL_BOOL_CASES)).
fof(f783,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK4(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK4(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f169,f229])).
fof(f169,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK4(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK4(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.arithmetic.MOD_TIMES_SUB',aHL_EXT)).
fof(f39153,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f783,f419])).
fof(f55708,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,X37) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X35,X36,bool,bool)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f783,f419])).
fof(f55709,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f783,f419])).
fof(f58430,plain,(
  ( ! [X216,X215,X214] : (s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,'T_0') = s(bool,X216) | s(bool,X216) = s(bool,g(s(bool,sK4(X214,X215,bool,bool))))) ) | $spl288),
  inference(cnf_transformation,[],[f58430_D])).
fof(f58430_D,plain,(
  ( ! [X216,X215,X214] : (s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,'T_0') = s(bool,X216) | s(bool,X216) = s(bool,g(s(bool,sK4(X214,X215,bool,bool))))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f24216,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl81),
  inference(cnf_transformation,[],[f24216_D])).
fof(f24216_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f58429,plain,(
  ( ! [X216,X215,X214] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,g(s(bool,sK4(X214,X215,bool,bool)))) | s(bool,'T_0') = s(bool,X216)) ) | $spl154),
  inference(forward_demodulation,[],[f58428,f180])).
fof(f58428,plain,(
  ( ! [X216,X215,X214] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,g(s(bool,sK4(X214,X215,bool,bool)))) | s(bool,'T_0') = s(bool,X216)) ) | $spl154),
  inference(subsumption_resolution,[],[f58076,f781])).
fof(f781,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f169,f229])).
fof(f58076,plain,(
  ( ! [X216,X215,X214] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X214) = s(fun(bool,bool),X215) | s(bool,X216) = s(bool,g(s(bool,sK4(X214,X215,bool,bool)))) | s(bool,'T_0') = s(bool,X216) | s(bool,'T_0') = s(bool,f(s(bool,sK4(X214,X215,bool,bool))))) ) | $spl154),
  inference(superposition,[],[f781,f52777])).
fof(f52777,plain,(
  ( ! [X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f52651,f176])).
fof(f176,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f114,f120])).
fof(f120,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f80])).
fof(f114,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.MOD_TIMES_SUB',aHL_FALSITY)).
fof(f52651,plain,(
  ( ! [X36] : (s(bool,'T_0') = s(bool,f(s(bool,X36))) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f871])).
fof(f871,plain,(
  ( ! [X35,X34] : (s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) )),
  inference(subsumption_resolution,[],[f848,f112])).
fof(f848,plain,(
  ( ! [X35,X34] : (~p(s(bool,'T_0')) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f707,f180])).
fof(f707,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f504,f112])).
fof(f504,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f168,f229])).
fof(f168,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X13,X14] : ((p(s(bool,X13)) => p(s(bool,X14))) => ((p(s(bool,X14)) => p(s(bool,X13))) => s(bool,X13) = s(bool,X14)))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.bool.IMP_ANTISYM_AX')).
fof(f27291,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl154),
  inference(cnf_transformation,[],[f27291_D])).
fof(f27291_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f52561,plain,(
  $false | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52560,f112])).
fof(f52560,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f114,f52424])).
fof(f52424,plain,(
  ( ! [X159] : (s(bool,'T_0') = s(bool,X159)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f29081,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291])).
fof(f893,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X10),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X9))) | s(bool,X12) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f882,f112])).
fof(f882,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X10),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X9))) | s(bool,X12) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f119,f229])).
fof(f124,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.bool.EQ_CLAUSES|split|3')).
fof(f125,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f82])).
fof(f216,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f158,f125])).
fof(f787,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK4(X16,X17,X18,bool))) )),
  inference(forward_demodulation,[],[f779,f216])).
fof(f779,plain,(
  ( ! [X19,X17,X18,X16] : (s(X18,f(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0'))))) != s(X18,g(s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0'))))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK4(X16,X17,X18,bool))) )),
  inference(superposition,[],[f169,f319])).
fof(f788,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK4(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) )),
  inference(forward_demodulation,[],[f785,f216])).
fof(f785,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0'))) != s(bool,f(s(X16,sK4(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f169,f319])).
fof(f1292,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f960,f177])).
fof(f960,plain,(
  ( ! [X45,X46] : (s(bool,'F_0') = s(bool,X46) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f871,f216])).
fof(f1392,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1115,f112])).
fof(f1115,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) )),
  inference(superposition,[],[f124,f871])).
fof(f1673,plain,(
  ( ! [X8,X9] : (~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f1672,f112])).
fof(f1672,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X8)) )),
  inference(forward_demodulation,[],[f1599,f180])).
fof(f1599,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | ~p(s(bool,X9)) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f168,f1292])).
fof(f1692,plain,(
  ( ! [X47,X48,X49] : (s(X49,f(s(bool,'T_0'))) != s(X49,g(s(bool,'T_0'))) | s(fun(bool,X49),X47) = s(fun(bool,X49),X48) | s(bool,'F_0') = s(bool,sK4(X47,X48,X49,bool))) )),
  inference(forward_demodulation,[],[f1620,f180])).
fof(f1620,plain,(
  ( ! [X47,X48,X49] : (s(X49,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) != s(X49,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,X49),X47) = s(fun(bool,X49),X48) | s(bool,'F_0') = s(bool,sK4(X47,X48,X49,bool))) )),
  inference(superposition,[],[f169,f1292])).
fof(f1693,plain,(
  ( ! [X52,X50,X51] : (s(bool,'T_0') != s(bool,f(s(X50,sK4(X51,X52,bool,X50)))) | s(fun(X50,bool),X51) = s(fun(X50,bool),X52) | s(bool,'F_0') = s(bool,g(s(X50,sK4(X51,X52,bool,X50))))) )),
  inference(forward_demodulation,[],[f1621,f180])).
fof(f1621,plain,(
  ( ! [X52,X50,X51] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,f(s(X50,sK4(X51,X52,bool,X50)))) | s(fun(X50,bool),X51) = s(fun(X50,bool),X52) | s(bool,'F_0') = s(bool,g(s(X50,sK4(X51,X52,bool,X50))))) )),
  inference(superposition,[],[f169,f1292])).
fof(f1776,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f1754,f112])).
fof(f1754,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22)) )),
  inference(superposition,[],[f1673,f871])).
fof(f1789,plain,(
  ( ! [X48] : (s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f1765,f112])).
fof(f1765,plain,(
  ( ! [X48] : (~p(s(bool,'T_0')) | s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,X48)) )),
  inference(superposition,[],[f1673,f181])).
fof(f1790,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f1767,f112])).
fof(f1767,plain,(
  ( ! [X52] : (~p(s(bool,'T_0')) | s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X52)) )),
  inference(superposition,[],[f1673,f182])).
fof(f1878,plain,(
  ( ! [X54,X55,X53] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X54),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X53))),s('type.num.num',X54))),s('type.num.num',X53))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) )),
  inference(subsumption_resolution,[],[f1877,f112])).
fof(f1877,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X54),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X53))),s('type.num.num',X54))),s('type.num.num',X53))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) )),
  inference(forward_demodulation,[],[f1868,f180])).
fof(f1868,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X54),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X53))),s('type.num.num',X54))),s('type.num.num',X53))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) )),
  inference(superposition,[],[f119,f1292])).
fof(f2252,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num',X42))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(subsumption_resolution,[],[f2251,f112])).
fof(f2251,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num',X42))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f2233,f180])).
fof(f2233,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num',X42))))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(superposition,[],[f164,f1292])).
fof(f2531,plain,(
  ( ! [X130,X128,X131,X129] : (s(X130,f(s(bool,X131))) != s(X130,g(s(bool,X131))) | s(fun(bool,X130),X128) = s(fun(bool,X130),X129) | s(bool,'F_0') = s(bool,X131) | s(bool,'F_0') = s(bool,sK4(X128,X129,X130,bool))) )),
  inference(superposition,[],[f169,f1579])).
fof(f2532,plain,(
  ( ! [X134,X132,X135,X133] : (s(bool,X135) != s(bool,f(s(X132,sK4(X133,X134,bool,X132)))) | s(fun(X132,bool),X133) = s(fun(X132,bool),X134) | s(bool,'F_0') = s(bool,X135) | s(bool,'F_0') = s(bool,g(s(X132,sK4(X133,X134,bool,X132))))) )),
  inference(superposition,[],[f169,f1579])).
fof(f2650,plain,(
  ( ! [X111,X109,X112,X110] : (s(X111,f(s(bool,'F_0'))) != s(X111,g(s(bool,'F_0'))) | s(fun(bool,X111),X109) = s(fun(bool,X111),X110) | s(bool,X112) = s(bool,sK4(X109,X110,X111,bool)) | s(bool,'F_0') = s(bool,X112)) )),
  inference(superposition,[],[f169,f1579])).
fof(f2651,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'F_0') != s(bool,f(s(X113,sK4(X114,X115,bool,X113)))) | s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,X116) = s(bool,g(s(X113,sK4(X114,X115,bool,X113)))) | s(bool,'F_0') = s(bool,X116)) )),
  inference(superposition,[],[f169,f1579])).
fof(f2927,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f2612,f114])).
fof(f2612,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f165,f1579])).
fof(f3270,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X42) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(subsumption_resolution,[],[f3269,f112])).
fof(f3269,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X42) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f3247,f180])).
fof(f3247,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X43))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X42)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X42) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(superposition,[],[f2215,f1292])).
fof(f5275,plain,(
  ( ! [X78,X79,X77] : (s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X78) = s(bool,X79) | s(bool,'F_0') = s(bool,X79)) )),
  inference(subsumption_resolution,[],[f5246,f114])).
fof(f5246,plain,(
  ( ! [X78,X79,X77] : (p(s(bool,'F_0')) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X78) = s(bool,X79) | s(bool,'F_0') = s(bool,X79)) )),
  inference(superposition,[],[f2927,f216])).
fof(f5609,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f5608,f112])).
fof(f5608,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f5366,f180])).
fof(f5366,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f124,f1293])).
fof(f5842,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f5609,f1579])).
fof(f6448,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,X19) != s(bool,X20) | s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X19) = s(bool,X22)) )),
  inference(superposition,[],[f2587,f871])).
fof(f7432,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X23) = s(bool,X26)) )),
  inference(superposition,[],[f2587,f872])).
fof(f7801,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) = s(bool,X74) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X73) = s(bool,X75) | s(bool,'F_0') = s(bool,X75)) )),
  inference(subsumption_resolution,[],[f7104,f176])).
fof(f7104,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) = s(bool,X74) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X73) = s(bool,X75) | s(bool,'F_0') = s(bool,X75)) )),
  inference(superposition,[],[f872,f1579])).
fof(f8058,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f7458,f112])).
fof(f7458,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) )),
  inference(superposition,[],[f124,f872])).
fof(f8165,plain,(
  ( ! [X87,X85,X86] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))),s('type.num.num',X86))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X85) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) )),
  inference(subsumption_resolution,[],[f8164,f112])).
fof(f8164,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))),s('type.num.num',X86))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X85) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) )),
  inference(forward_demodulation,[],[f8116,f180])).
fof(f8116,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X86),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))),s('type.num.num',X86))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X85)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X85) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) )),
  inference(superposition,[],[f876,f1292])).
fof(f21255,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X39) != s(bool,X40) | s(bool,X40) = s(bool,X41) | s(bool,'F_0') = s(bool,X41) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X39) = s(bool,X42)) )),
  inference(superposition,[],[f2587,f873])).
fof(f22283,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f21291,f112])).
fof(f21291,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) )),
  inference(superposition,[],[f124,f873])).
fof(f22301,plain,(
  ( ! [X127,X128,X126] : (s(bool,X126) = s(bool,X127) | s(bool,'F_0') = s(bool,X127) | s(bool,X128) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X126) = s(bool,X128)) )),
  inference(subsumption_resolution,[],[f21326,f112])).
fof(f21326,plain,(
  ( ! [X127,X128,X126] : (~p(s(bool,'T_0')) | s(bool,X126) = s(bool,X127) | s(bool,'F_0') = s(bool,X127) | s(bool,X128) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X126) = s(bool,X128)) )),
  inference(superposition,[],[f1673,f873])).
fof(f25407,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,X6) = s(bool,X7) | s(bool,X8) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s(bool,X7) = s(bool,X8) | s(bool,X6) = s(bool,X10) | s(bool,'F_0') = s(bool,X10)) )),
  inference(superposition,[],[f5275,f1579])).
fof(f25961,plain,(
  ( ! [X532,X528,X530,X529,X531] : (s(X530,f(s(bool,X531))) != s(X530,g(s(bool,X531))) | s(fun(bool,X530),X528) = s(fun(bool,X530),X529) | s(bool,X531) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X532),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,sK4(X528,X529,X530,bool))) )),
  inference(superposition,[],[f169,f5275])).
fof(f25962,plain,(
  ( ! [X536,X534,X537,X533,X535] : (s(bool,X536) != s(bool,f(s(X533,sK4(X534,X535,bool,X533)))) | s(fun(X533,bool),X534) = s(fun(X533,bool),X535) | s(bool,X536) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X537),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,g(s(X533,sK4(X534,X535,bool,X533))))) )),
  inference(superposition,[],[f169,f5275])).
fof(f26139,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'F_0'))) != s(X455,g(s(bool,'F_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) )),
  inference(superposition,[],[f169,f5275])).
fof(f26140,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,'F_0') != s(bool,f(s(X458,sK4(X459,X460,bool,X458)))) | s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) )),
  inference(superposition,[],[f169,f5275])).
fof(f26817,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(X153,f(s(bool,X152))) != s(X153,g(s(bool,X152))) | s(fun(bool,X153),X154) = s(fun(bool,X153),X155) | s(bool,'T_0') = s(bool,sK4(X154,X155,X153,bool)) | s(bool,X152) = s(bool,X156) | s(bool,'F_0') = s(bool,X156)) )),
  inference(subsumption_resolution,[],[f25643,f177])).
fof(f25643,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (s(X153,f(s(bool,X152))) != s(X153,g(s(bool,X152))) | s(fun(bool,X153),X154) = s(fun(bool,X153),X155) | s(bool,'T_0') = s(bool,sK4(X154,X155,X153,bool)) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X151),s('type.num.num','const.num.|48|_0'))) | s(bool,X152) = s(bool,X156) | s(bool,'F_0') = s(bool,X156)) )),
  inference(superposition,[],[f777,f5275])).
fof(f26830,plain,(
  ( ! [X206,X207] : (s(bool,X206) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X206) = s(bool,X207) | s(bool,'F_0') = s(bool,X207)) )),
  inference(subsumption_resolution,[],[f25656,f177])).
fof(f25656,plain,(
  ( ! [X206,X207,X205] : (s(bool,X206) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X205),s('type.num.num','const.num.|48|_0'))) | s(bool,X206) = s(bool,X207) | s(bool,'F_0') = s(bool,X207)) )),
  inference(superposition,[],[f1169,f5275])).
fof(f26845,plain,(
  ( ! [X271,X270] : (s(bool,X270) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X270) = s(bool,X271) | s(bool,'F_0') = s(bool,X271)) ) | $spl18),
  inference(subsumption_resolution,[],[f25673,f177])).
fof(f25673,plain,(
  ( ! [X269,X271,X270] : (s(bool,X270) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X269),s('type.num.num','const.num.|48|_0'))) | s(bool,X270) = s(bool,X271) | s(bool,'F_0') = s(bool,X271)) ) | $spl18),
  inference(superposition,[],[f3129,f5275])).
fof(f26941,plain,(
  ( ! [X310,X311] : (p(s(bool,X311)) | s(bool,X310) != s(bool,X311) | s(bool,'F_0') = s(bool,X310)) )),
  inference(subsumption_resolution,[],[f25769,f177])).
fof(f25769,plain,(
  ( ! [X310,X312,X311] : (s(bool,X310) != s(bool,X311) | p(s(bool,X311)) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X312),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X310)) )),
  inference(superposition,[],[f120,f5275])).
fof(f26942,plain,(
  ( ! [X337,X339,X340,X336,X338] : (s(X337,f(s(bool,X336))) != s(X337,g(s(bool,X336))) | s(fun(bool,X337),X338) = s(fun(bool,X337),X339) | s(bool,X340) = s(bool,sK4(X338,X339,X337,bool)) | s(bool,'T_0') = s(bool,X340) | s(bool,'F_0') = s(bool,X336)) )),
  inference(subsumption_resolution,[],[f25774,f177])).
fof(f25774,plain,(
  ( ! [X341,X337,X339,X340,X336,X338] : (s(X337,f(s(bool,X336))) != s(X337,g(s(bool,X336))) | s(fun(bool,X337),X338) = s(fun(bool,X337),X339) | s(bool,X340) = s(bool,sK4(X338,X339,X337,bool)) | s(bool,'T_0') = s(bool,X340) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X341),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X336)) )),
  inference(superposition,[],[f775,f5275])).
fof(f27320,plain,(
  ( ! [X146,X147,X145,X148] : (s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK4(X146,X147,bool,X145)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,f(s(X145,sK4(X146,X147,bool,X145))))) )),
  inference(subsumption_resolution,[],[f27250,f180])).
fof(f27250,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(X145,bool),X146) = s(fun(X145,bool),X147) | s(bool,X148) = s(bool,g(s(X145,sK4(X146,X147,bool,X145)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,f(s(X145,sK4(X146,X147,bool,X145))))) )),
  inference(superposition,[],[f781,f1292])).
fof(f28171,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s(bool,X320) != s(bool,f(s(X321,sK4(X322,X323,bool,X321)))) | s(fun(X321,bool),X322) = s(fun(X321,bool),X323) | s(bool,'T_0') = s(bool,g(s(X321,sK4(X322,X323,bool,X321)))) | s(bool,X320) = s(bool,X324) | s(bool,'F_0') = s(bool,X324)) )),
  inference(subsumption_resolution,[],[f28027,f177])).
fof(f28027,plain,(
  ( ! [X321,X323,X324,X320,X322,X319] : (s(bool,X320) != s(bool,f(s(X321,sK4(X322,X323,bool,X321)))) | s(fun(X321,bool),X322) = s(fun(X321,bool),X323) | s(bool,'T_0') = s(bool,g(s(X321,sK4(X322,X323,bool,X321)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X319),s('type.num.num','const.num.|48|_0'))) | s(bool,X320) = s(bool,X324) | s(bool,'F_0') = s(bool,X324)) )),
  inference(superposition,[],[f783,f5275])).
fof(f28264,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'F_0') = s(bool,X3)) )),
  inference(condensation,[],[f28263])).
fof(f28263,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,g(s(X159,sK4(X160,X161,bool,X159)))) | s(bool,'T_0') = s(bool,X162) | s(bool,X163) = s(bool,f(s(X159,sK4(X160,X161,bool,X159)))) | s(bool,'F_0') = s(bool,X163)) )),
  inference(subsumption_resolution,[],[f28106,f116])).
fof(f28106,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(bool,'F_0') != s(bool,X162) | s(fun(X159,bool),X160) = s(fun(X159,bool),X161) | s(bool,'T_0') = s(bool,g(s(X159,sK4(X160,X161,bool,X159)))) | s(bool,'T_0') = s(bool,X162) | s(bool,X163) = s(bool,f(s(X159,sK4(X160,X161,bool,X159)))) | s(bool,'F_0') = s(bool,X163)) )),
  inference(superposition,[],[f783,f1579])).
fof(f29680,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s(bool,X313) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X314))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X315),s('type.num.num',X314))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X316),s('type.num.num',X314))),s('type.num.num',X315))),s('type.num.num',X314))) | s(bool,X313) = s(bool,X317) | s(bool,'F_0') = s(bool,X317)) )),
  inference(subsumption_resolution,[],[f29188,f177])).
fof(f29188,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s(bool,X313) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X314))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X315),s('type.num.num',X314))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X316),s('type.num.num',X314))),s('type.num.num',X315))),s('type.num.num',X314))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X312),s('type.num.num','const.num.|48|_0'))) | s(bool,X313) = s(bool,X317) | s(bool,'F_0') = s(bool,X317)) )),
  inference(superposition,[],[f893,f5275])).
fof(f31020,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s(bool,X323) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X324),s('type.num.num',X325))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X326),s('type.num.num',X325))),s('type.num.num',X324))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X326),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X325),s('type.num.num',X324))))) | s(bool,X323) = s(bool,X327) | s(bool,'F_0') = s(bool,X327)) )),
  inference(subsumption_resolution,[],[f30526,f177])).
fof(f30526,plain,(
  ( ! [X325,X327,X323,X324,X326,X322] : (s(bool,X323) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X324),s('type.num.num',X325))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X326),s('type.num.num',X325))),s('type.num.num',X324))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X326),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X325),s('type.num.num',X324))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X322),s('type.num.num','const.num.|48|_0'))) | s(bool,X323) = s(bool,X327) | s(bool,'F_0') = s(bool,X327)) )),
  inference(superposition,[],[f2246,f5275])).
fof(f32495,plain,(
  ( ! [X325,X327,X324,X326,X328] : (s(bool,X324) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X325),s('type.num.num',X326))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',X326))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X325)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X326),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X325)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X325) | s(bool,X324) = s(bool,X328) | s(bool,'F_0') = s(bool,X328)) )),
  inference(subsumption_resolution,[],[f31998,f177])).
fof(f31998,plain,(
  ( ! [X325,X327,X323,X324,X326,X328] : (s(bool,X324) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X325),s('type.num.num',X326))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',X326))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X325)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X326),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X325)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X325) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X323),s('type.num.num','const.num.|48|_0'))) | s(bool,X324) = s(bool,X328) | s(bool,'F_0') = s(bool,X328)) )),
  inference(superposition,[],[f3264,f5275])).
fof(f42972,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X121) != s(bool,X122) | s(bool,'F_0') = s(bool,X122) | s(bool,X123) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X124),s('type.num.num','const.num.|48|_0'))) | s(bool,X121) = s(bool,X123)) )),
  inference(subsumption_resolution,[],[f42892,f114])).
fof(f42892,plain,(
  ( ! [X123,X121,X124,X122] : (p(s(bool,'F_0')) | s(bool,X121) != s(bool,X122) | s(bool,'F_0') = s(bool,X122) | s(bool,X123) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X124),s('type.num.num','const.num.|48|_0'))) | s(bool,X121) = s(bool,X123)) )),
  inference(superposition,[],[f26941,f5275])).
fof(f13361,plain,(
  ( ! [X430,X432,X434,X429,X431,X433] : (s(bool,X432) != s(bool,f(s(X429,sK4(X430,X431,bool,X429)))) | s(fun(X429,bool),X430) = s(fun(X429,bool),X431) | s(bool,X432) = s(bool,X433) | s(bool,'T_0') = s(bool,X433) | s(bool,X434) = s(bool,g(s(X429,sK4(X430,X431,bool,X429)))) | s(bool,'T_0') = s(bool,X434)) )),
  inference(superposition,[],[f169,f419])).
fof(f13545,plain,(
  ( ! [X430,X432,X434,X429,X431,X433] : (s(bool,X432) != s(bool,f(s(X429,sK4(X430,X431,bool,X429)))) | s(fun(X429,bool),X430) = s(fun(X429,bool),X431) | s(bool,X433) = s(bool,g(s(X429,sK4(X430,X431,bool,X429)))) | s(bool,'T_0') = s(bool,X432) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434)) )),
  inference(superposition,[],[f169,f419])).
fof(f13637,plain,(
  ( ! [X422,X424,X426,X421,X423,X425] : (s(bool,X424) != s(bool,f(s(X421,sK4(X422,X423,bool,X421)))) | s(fun(X421,bool),X422) = s(fun(X421,bool),X423) | s(bool,X424) = s(bool,X425) | s(bool,'T_0') = s(bool,g(s(X421,sK4(X422,X423,bool,X421)))) | s(bool,X425) = s(bool,X426) | s(bool,'T_0') = s(bool,X426)) )),
  inference(superposition,[],[f169,f419])).
fof(f13754,plain,(
  ( ! [X408,X405,X407,X409,X404,X406] : (s(bool,'T_0') != s(bool,f(s(X404,sK4(X405,X406,bool,X404)))) | s(fun(X404,bool),X405) = s(fun(X404,bool),X406) | s(bool,X407) = s(bool,X408) | s(bool,X408) = s(bool,g(s(X404,sK4(X405,X406,bool,X404)))) | s(bool,X407) = s(bool,X409) | s(bool,'T_0') = s(bool,X409)) )),
  inference(superposition,[],[f169,f419])).
fof(f27272,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X49] : (s(fun(X43,bool),X44) = s(fun(X43,bool),X45) | s(bool,X46) = s(bool,g(s(X43,sK4(X44,X45,bool,X43)))) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,f(s(X43,sK4(X44,X45,bool,X43)))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(trivial_inequality_removal,[],[f27232])).
fof(f27232,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X49] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X43,bool),X44) = s(fun(X43,bool),X45) | s(bool,X46) = s(bool,g(s(X43,sK4(X44,X45,bool,X43)))) | s(bool,'T_0') = s(bool,X46) | s(bool,X47) = s(bool,X48) | s(bool,X48) = s(bool,f(s(X43,sK4(X44,X45,bool,X43)))) | s(bool,X47) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f781,f419])).
fof(f27274,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK4(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK4(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(trivial_inequality_removal,[],[f27225])).
fof(f27225,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK4(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK4(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f781,f229])).
fof(f28221,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f28220])).
fof(f28220,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(subsumption_resolution,[],[f28077,f116])).
fof(f28077,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X3) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f783,f116])).
fof(f28232,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f28231])).
fof(f28231,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(condensation,[],[f28230])).
fof(f28230,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s(fun(X57,bool),X58) = s(fun(X57,bool),X59) | s(bool,'T_0') = s(bool,g(s(X57,sK4(X58,X59,bool,X57)))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,f(s(X57,sK4(X58,X59,bool,X57)))) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f28087,f229])).
fof(f28087,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s(bool,X60) != s(bool,X61) | s(fun(X57,bool),X58) = s(fun(X57,bool),X59) | s(bool,'T_0') = s(bool,g(s(X57,sK4(X58,X59,bool,X57)))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,f(s(X57,sK4(X58,X59,bool,X57)))) | s(bool,'T_0') = s(bool,X60) | s(bool,X62) = s(bool,X63) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f783,f419])).
fof(f28272,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.num.|48|_0'))) | s(bool,X3) = s(bool,f(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f28271])).
fof(f28271,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(fun(X193,bool),X194) = s(fun(X193,bool),X195) | s(bool,'T_0') = s(bool,g(s(X193,sK4(X194,X195,bool,X193)))) | s(bool,'T_0') = s(bool,X196) | s(bool,X197) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X198),s('type.num.num','const.num.|48|_0'))) | s(bool,X197) = s(bool,f(s(X193,sK4(X194,X195,bool,X193))))) )),
  inference(subsumption_resolution,[],[f28113,f116])).
fof(f28113,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (s(bool,'F_0') != s(bool,X196) | s(fun(X193,bool),X194) = s(fun(X193,bool),X195) | s(bool,'T_0') = s(bool,g(s(X193,sK4(X194,X195,bool,X193)))) | s(bool,'T_0') = s(bool,X196) | s(bool,X197) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X198),s('type.num.num','const.num.|48|_0'))) | s(bool,X197) = s(bool,f(s(X193,sK4(X194,X195,bool,X193))))) )),
  inference(superposition,[],[f783,f5275])).
fof(f8156,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))),s('type.num.num',X34))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f8103,f112])).
fof(f8103,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))),s('type.num.num',X34))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f876,f229])).
fof(f15948,plain,(
  ( ! [X280,X282,X279,X281,X283,X278] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X279),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X280),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))),s('type.num.num',X279))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X278) | s(bool,X281) = s(bool,X282) | s(bool,X282) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X278))) | s(bool,X281) = s(bool,X283) | s(bool,'T_0') = s(bool,X283)) )),
  inference(subsumption_resolution,[],[f13728,f112])).
fof(f13728,plain,(
  ( ! [X280,X282,X279,X281,X283,X278] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X279),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X280),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))),s('type.num.num',X279))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X278) | s(bool,X281) = s(bool,X282) | s(bool,X282) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X278))) | s(bool,X281) = s(bool,X283) | s(bool,'T_0') = s(bool,X283)) )),
  inference(superposition,[],[f876,f419])).
fof(f15949,plain,(
  ( ! [X288,X285,X287,X289,X284,X286] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X285),s('type.num.num',X284))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X284))),s('type.num.num',X285))),s('type.num.num',X284))) | s(bool,X287) = s(bool,X288) | s(bool,X288) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X284))) | s(bool,X287) = s(bool,X289) | s(bool,'T_0') = s(bool,X289)) )),
  inference(subsumption_resolution,[],[f13729,f112])).
fof(f13729,plain,(
  ( ! [X288,X285,X287,X289,X284,X286] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X285),s('type.num.num',X284))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X284))),s('type.num.num',X285))),s('type.num.num',X284))) | s(bool,X287) = s(bool,X288) | s(bool,X288) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X284))) | s(bool,X287) = s(bool,X289) | s(bool,'T_0') = s(bool,X289)) )),
  inference(superposition,[],[f119,f419])).
fof(f29100,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))),s('type.num.num',X0))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f893,f115])).
fof(f29101,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X3))) | s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f893,f715])).
fof(f29116,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num',X1))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f893,f163])).
fof(f29117,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',X4))) | s(bool,X5) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f893,f2245])).
fof(f29572,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,X2,bool)) | s(X2,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))))) != s(X2,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X3)))) )),
  inference(condensation,[],[f29571])).
fof(f29571,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X140,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))))) != s(X140,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))))) | s(fun(bool,X140),X141) = s(fun(bool,X140),X142) | s(bool,'T_0') = s(bool,sK4(X141,X142,X140,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X143),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X144),s('type.num.num',X139))),s('type.num.num',X143))),s('type.num.num',X139)))) )),
  inference(duplicate_literal_removal,[],[f29328])).
fof(f29328,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X140,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))))) != s(X140,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))))) | s(fun(bool,X140),X141) = s(fun(bool,X140),X142) | s(bool,'T_0') = s(bool,sK4(X141,X142,X140,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X143),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X144),s('type.num.num',X139))),s('type.num.num',X143))),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f777,f893])).
fof(f29758,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1))) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757])).
fof(f30624,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num',X23))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X24))),s('type.num.num',X25))),s('type.num.num',X23))) | s(bool,X26) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f893,f2246])).
fof(f32101,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X26),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X27)))))),s('type.num.num',X25))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num',X26))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X27)))))),s('type.num.num',X25))) | s(bool,X28) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X26))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X27) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f893,f3264])).
fof(f33340,plain,(
  ( ! [X30,X28,X31,X29,X27,X32] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X29)))),s('type.num.num',X30))),s('type.num.num',X28))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X29)))))),s('type.num.num',X30))),s('type.num.num',X28))) | s(bool,X31) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X30),s('type.num.num',X29))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X29) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f893,f3732])).
fof(f33360,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X132),s('type.num.num',X133))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X129),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X130)))))),s('type.num.num',X131))),s('type.num.num',X133))),s('type.num.num',X132))),s('type.num.num',X133))) | s(bool,X134) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133))) | s(bool,'T_0') = s(bool,X134) | s(bool,X135) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X131),s('type.num.num',X130))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X130) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f893,f3732])).
fof(f29125,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X34),s('type.num.num',X33))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X35),s('type.num.num',X33))),s('type.num.num',X34))),s('type.num.num',X33))) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) | s(bool,'T_0') = s(bool,X36) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f893,f117])).
fof(f2246,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X6))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f2224,f112])).
fof(f2224,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X6))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f164,f229])).
fof(f3264,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f3238,f112])).
fof(f3238,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2215,f229])).
fof(f15962,plain,(
  ( ! [X383,X385,X387,X388,X384,X386] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num',X384))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X383)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X384),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X383)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X383) | s(bool,X386) = s(bool,X387) | s(bool,X387) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X383),s('type.num.num',X384))) | s(bool,X386) = s(bool,X388) | s(bool,'T_0') = s(bool,X388)) )),
  inference(subsumption_resolution,[],[f13751,f112])).
fof(f13751,plain,(
  ( ! [X383,X385,X387,X388,X384,X386] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num',X384))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X383)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X384),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X383)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X383) | s(bool,X386) = s(bool,X387) | s(bool,X387) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X383),s('type.num.num',X384))) | s(bool,X386) = s(bool,X388) | s(bool,'T_0') = s(bool,X388)) )),
  inference(superposition,[],[f2215,f419])).
fof(f15963,plain,(
  ( ! [X389,X391,X393,X390,X392,X394] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X391),s('type.num.num',X390))),s('type.num.num',X389))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X391),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X390),s('type.num.num',X389))))) | s(bool,X392) = s(bool,X393) | s(bool,X393) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X389),s('type.num.num',X390))) | s(bool,X392) = s(bool,X394) | s(bool,'T_0') = s(bool,X394)) )),
  inference(subsumption_resolution,[],[f13752,f112])).
fof(f13752,plain,(
  ( ! [X389,X391,X393,X390,X392,X394] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X391),s('type.num.num',X390))),s('type.num.num',X389))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X391),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X390),s('type.num.num',X389))))) | s(bool,X392) = s(bool,X393) | s(bool,X393) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X389),s('type.num.num',X390))) | s(bool,X392) = s(bool,X394) | s(bool,'T_0') = s(bool,X394)) )),
  inference(superposition,[],[f164,f419])).
fof(f30476,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',X1))),s('type.num.num',X2))) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2246,f163])).
fof(f30618,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f768,f2246])).
fof(f30619,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',sK1))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f11328,f2246])).
fof(f30620,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))),s('type.num.num',X8))),s('type.num.num',sK0))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f11066,f2246])).
fof(f30622,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',sK0))),s('type.num.num',X15))),s('type.num.num',X16))),s('type.num.num',sK0))) | s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f891,f2246])).
fof(f30623,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',sK1))) | s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f892,f2246])).
fof(f30900,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,X2,bool)) | s(X2,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) != s(X2,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X3)))))) )),
  inference(condensation,[],[f30899])).
fof(f30899,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X141,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) != s(X141,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) | s(fun(bool,X141),X142) = s(fun(bool,X141),X143) | s(bool,'T_0') = s(bool,sK4(X142,X143,X141,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X140))),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X140),s('type.num.num',X139)))))) )),
  inference(duplicate_literal_removal,[],[f30684])).
fof(f30684,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X141,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) != s(X141,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) | s(fun(bool,X141),X142) = s(fun(bool,X141),X143) | s(bool,'T_0') = s(bool,sK4(X142,X143,X141,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X140))),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X140),s('type.num.num',X139))))) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f777,f2246])).
fof(f31106,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1))))) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757,f29758,f29561,f29807,f29812,f30450,f30453,f30459,f30465,f30468,f30474,f30476,f30477,f30949,f30948,f31020,f30541,f30550,f30556,f30565,f30618,f30619,f30620,f30622,f30623,f30624,f30627,f30630,f30631,f30637,f30642,f30645,f30647,f30648,f30649,f30650,f31075,f30900,f30898,f30893,f31090,f31094,f30891,f31105])).
fof(f31948,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f3264,f163])).
fof(f32017,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X35))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X35))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X33))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X33))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))) | s(bool,'T_0') = s(bool,X34) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3264,f117])).
fof(f32095,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))))) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f768,f3264])).
fof(f32096,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))),s('type.num.num',sK1))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f11328,f3264])).
fof(f32097,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X10)))))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X10)))))),s('type.num.num',sK0))) | s(bool,X11) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f11066,f3264])).
fof(f32099,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X18)))))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num',sK0))),s('type.num.num',X17))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X18)))))),s('type.num.num',sK0))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num',X17))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X18) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f891,f3264])).
fof(f32100,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',X21))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))),s('type.num.num',sK1))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num',X21))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X22) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f892,f3264])).
fof(f32383,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,sK4(X0,X1,X2,bool)) | s(X2,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) != s(X2,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(condensation,[],[f32382])).
fof(f32382,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X141,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) != s(X141,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) | s(fun(bool,X141),X142) = s(fun(bool,X141),X143) | s(bool,'T_0') = s(bool,sK4(X142,X143,X141,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X140))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X139)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X140),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X139)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X139)) )),
  inference(duplicate_literal_removal,[],[f32166])).
fof(f32166,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X141,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) != s(X141,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num',X140))))) | s(fun(bool,X141),X142) = s(fun(bool,X141),X143) | s(bool,'T_0') = s(bool,sK4(X142,X143,X141,bool)) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X140))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X139)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X140),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X139)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X139) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f777,f3264])).
fof(f32597,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757,f29758,f29561,f29807,f29812,f30450,f30453,f30459,f30465,f30468,f30474,f30476,f30477,f30949,f30948,f31020,f30541,f30550,f30556,f30565,f30618,f30619,f30620,f30622,f30623,f30624,f30627,f30630,f30631,f30637,f30642,f30645,f30647,f30648,f30649,f30650,f31075,f30900,f30898,f30893,f31090,f31094,f30891,f31105,f31106,f30888,f31153,f31158,f31932,f31935,f31941,f31942,f31948,f31949,f32434,f32433,f32432,f32495,f32504,f32505,f32506,f32014,f32507,f32508,f32017,f32515,f32516,f32023,f32024,f32517,f32030,f32033,f32039,f32040,f32095,f32096,f32097,f32099,f32100,f32101,f32104,f32107,f32108,f32114,f32119,f32122,f32124,f32125,f32126,f32127,f32129,f32130,f32132,f32133,f32566,f32383,f32381,f32376,f32581,f32585,f32374,f32373,f32596])).
fof(f33334,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num',X7))))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f768,f3732])).
fof(f33335,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X9)))),s('type.num.num',X10))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X9)))))),s('type.num.num',X10))),s('type.num.num',sK1))) | s(bool,X11) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f11328,f3732])).
fof(f33336,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X12)))),s('type.num.num',X13))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X12)))))),s('type.num.num',X13))),s('type.num.num',sK0))) | s(bool,X14) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X12) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f11066,f3732])).
fof(f33337,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X15))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X16)))),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X16)))),s('type.num.num',X17))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X16)))))),s('type.num.num',X17))) | s(bool,X18) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X16) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f163,f3732])).
fof(f33338,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X20)))),s('type.num.num',X21))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X20)))))),s('type.num.num',X21))),s('type.num.num',sK0))) | s(bool,X22) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X20) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f891,f3732])).
fof(f33339,plain,(
  ( ! [X26,X24,X23,X25] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X24)))),s('type.num.num',X25))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X23),s('type.num.num',sK1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X24)))))),s('type.num.num',X25))),s('type.num.num',sK1))) | s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X24) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f892,f3732])).
fof(f33370,plain,(
  ( ! [X191,X196,X194,X192,X190,X195,X193] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X191)))))),s('type.num.num',X192))),s('type.num.num',X193))),s('type.num.num',X194))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X191)))))),s('type.num.num',X192))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X193),s('type.num.num',X194))))) | s(bool,X195) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X194),s('type.num.num',X193))) | s(bool,'T_0') = s(bool,X195) | s(bool,X196) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X192),s('type.num.num',X191))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X191) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f33375,plain,(
  ( ! [X229,X227,X225,X223,X228,X226,X224] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X223),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X224)))))),s('type.num.num',X225))),s('type.num.num',X226))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X227)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X223),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X224)))))),s('type.num.num',X225))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X226),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X227)))))))) | s(bool,X228) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X227),s('type.num.num',X226))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X227) | s(bool,'T_0') = s(bool,X228) | s(bool,X229) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X225),s('type.num.num',X224))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X224) | s(bool,'T_0') = s(bool,X229)) )),
  inference(superposition,[],[f3264,f3732])).
fof(f34804,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))) | s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))),s('type.num.num',X49))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))),s('type.num.num',X49))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f33273,f163])).
fof(f33273,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))),s('type.num.num',X49))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))),s('type.num.num',X49))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f3732,f163])).
fof(f34802,plain,(
  ( ! [X78,X76,X79,X77] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X76))) | s(bool,X77) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X76))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X76)))))))),s('type.num.num',X78))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X76)))))),s('type.num.num',X78))))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(forward_demodulation,[],[f33278,f768])).
fof(f33278,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X77) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X76))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X76)))))))),s('type.num.num',X78))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X76)))))),s('type.num.num',X78))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f3732,f768])).
fof(f34803,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))) | s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X53))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(forward_demodulation,[],[f33274,f2245])).
fof(f33274,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X53))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f3732,f2245])).
fof(f34814,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))),s('type.num.num',X11))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(forward_demodulation,[],[f33264,f891])).
fof(f33264,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f3732,f891])).
fof(f34812,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))) | s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))),s('type.num.num',X27))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(forward_demodulation,[],[f33267,f11066])).
fof(f33267,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))),s('type.num.num',X27))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f3732,f11066])).
fof(f34813,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))),s('type.num.num',X16))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(forward_demodulation,[],[f33265,f892])).
fof(f33265,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))),s('type.num.num',X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))),s('type.num.num',X16))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f3732,f892])).
fof(f34811,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))),s('type.num.num',X31))))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(forward_demodulation,[],[f33268,f11328])).
fof(f33268,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))),s('type.num.num',X31))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f3732,f11328])).
fof(f31935,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))))) | s(bool,X36) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X35) | s(bool,'T_0') = s(bool,X36) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3264,f117])).
fof(f30453,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num',X35))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num',X35))))) | s(bool,X36) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) | s(bool,'T_0') = s(bool,X36) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f2246,f117])).
fof(f34815,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))),s('type.num.num',X6))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(forward_demodulation,[],[f33263,f715])).
fof(f33263,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))),s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3732,f715])).
fof(f32517,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X69))) | s(bool,X70) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X69))),s('type.num.num',X71))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X69)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X69)))))))))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(forward_demodulation,[],[f32025,f768])).
fof(f32025,plain,(
  ( ! [X70,X72,X71,X69] : (s(bool,X70) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X69))),s('type.num.num',X71))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X69)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X71),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X69)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))),s('type.num.num',X69))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f3264,f768])).
fof(f32515,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))) | s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))),s('type.num.num',X49))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f32021,f163])).
fof(f32021,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X46))),s('type.num.num',X47))),s('type.num.num',X49))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X49))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X49),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num',X47))),s('type.num.num',X47))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f3264,f163])).
fof(f32516,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))) | s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',X53))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X53))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(forward_demodulation,[],[f32022,f2245])).
fof(f32022,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',X53))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',X53))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f3264,f2245])).
fof(f32508,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X31))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(forward_demodulation,[],[f32016,f11328])).
fof(f32016,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X31))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f3264,f11328])).
fof(f32506,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',X16))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(forward_demodulation,[],[f32013,f892])).
fof(f32013,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',X16))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',sK1))),s('type.num.num',X14))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f3264,f892])).
fof(f32507,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))) | s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))),s('type.num.num',X27))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(forward_demodulation,[],[f32015,f11066])).
fof(f32015,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num',sK0))),s('type.num.num',X27))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f3264,f11066])).
fof(f32505,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))),s('type.num.num',X11))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(forward_demodulation,[],[f32012,f891])).
fof(f32012,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num',sK0))),s('type.num.num',X11))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',sK0))),s('type.num.num',X9))),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f3264,f891])).
fof(f30468,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))),s('type.num.num',X33))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X35),s('type.num.num',X33))))) | s(bool,X36) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))),s('type.num.num',X35))) | s(bool,'T_0') = s(bool,X36) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f2246,f117])).
fof(f32504,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(forward_demodulation,[],[f32011,f715])).
fof(f32011,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X4))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3264,f715])).
fof(f29570,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',X3))),s('type.num.num',X4))),s('type.num.num',X3)))) )),
  inference(condensation,[],[f29569])).
fof(f29569,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) != s(bool,f(s(X147,sK4(X148,X149,bool,X147)))) | s(fun(X147,bool),X148) = s(fun(X147,bool),X149) | s(bool,'T_0') = s(bool,g(s(X147,sK4(X148,X149,bool,X147)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146)))) )),
  inference(duplicate_literal_removal,[],[f29329])).
fof(f29329,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) != s(bool,f(s(X147,sK4(X148,X149,bool,X147)))) | s(fun(X147,bool),X148) = s(fun(X147,bool),X149) | s(bool,'T_0') = s(bool,g(s(X147,sK4(X148,X149,bool,X147)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f783,f893])).
fof(f30898,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num',X3)))))) )),
  inference(condensation,[],[f30897])).
fof(f30897,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num',X147))) != s(bool,f(s(X148,sK4(X149,X150,bool,X148)))) | s(fun(X148,bool),X149) = s(fun(X148,bool),X150) | s(bool,'T_0') = s(bool,g(s(X148,sK4(X149,X150,bool,X148)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X147))),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X147),s('type.num.num',X146)))))) )),
  inference(duplicate_literal_removal,[],[f30685])).
fof(f30685,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num',X147))) != s(bool,f(s(X148,sK4(X149,X150,bool,X148)))) | s(fun(X148,bool),X149) = s(fun(X148,bool),X150) | s(bool,'T_0') = s(bool,g(s(X148,sK4(X149,X150,bool,X148)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X147))),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X147),s('type.num.num',X146))))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f783,f2246])).
fof(f32381,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) != s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(condensation,[],[f32380])).
fof(f32380,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num',X147))) != s(bool,f(s(X148,sK4(X149,X150,bool,X148)))) | s(fun(X148,bool),X149) = s(fun(X148,bool),X150) | s(bool,'T_0') = s(bool,g(s(X148,sK4(X149,X150,bool,X148)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X147))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X146)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X147),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X146)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X146)) )),
  inference(duplicate_literal_removal,[],[f32167])).
fof(f32167,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X146),s('type.num.num',X147))) != s(bool,f(s(X148,sK4(X149,X150,bool,X148)))) | s(fun(X148,bool),X149) = s(fun(X148,bool),X150) | s(bool,'T_0') = s(bool,g(s(X148,sK4(X149,X150,bool,X148)))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X147))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X146)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X147),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X146)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X146) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f783,f3264])).
fof(f11922,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) )),
  inference(forward_demodulation,[],[f11902,f768])).
fof(f11902,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))) )),
  inference(superposition,[],[f876,f768])).
fof(f8135,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) )),
  inference(forward_demodulation,[],[f8091,f163])).
fof(f8091,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))) )),
  inference(superposition,[],[f876,f163])).
fof(f11783,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) )),
  inference(forward_demodulation,[],[f11767,f2245])).
fof(f11767,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f876,f2245])).
fof(f8088,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f876,f117])).
fof(f11826,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) )),
  inference(forward_demodulation,[],[f11810,f11066])).
fof(f11810,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f876,f11066])).
fof(f11098,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) )),
  inference(forward_demodulation,[],[f11087,f891])).
fof(f11087,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f876,f891])).
fof(f11871,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) )),
  inference(forward_demodulation,[],[f11854,f11328])).
fof(f11854,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f876,f11328])).
fof(f11363,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) )),
  inference(forward_demodulation,[],[f11350,f892])).
fof(f11350,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f876,f892])).
fof(f8125,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) )),
  inference(forward_demodulation,[],[f8087,f715])).
fof(f8087,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f876,f715])).
fof(f876,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f119,f117])).
fof(f29807,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) )),
  inference(condensation,[],[f29806])).
fof(f29806,plain,(
  ( ! [X132,X130,X133,X131,X129] : (p(s(bool,X130)) | p(s(bool,X131)) | s(bool,X131) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X132),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num',X129))),s('type.num.num',X132))),s('type.num.num',X129)))) )),
  inference(subsumption_resolution,[],[f29455,f120])).
fof(f29455,plain,(
  ( ! [X132,X130,X133,X131,X129] : (p(s(bool,X130)) | p(s(bool,X131)) | s(bool,X131) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X132),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num',X129))),s('type.num.num',X132))),s('type.num.num',X129))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f165,f893])).
fof(f29285,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X59),s('type.num.num',X58)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X59))),s('type.num.num',X58)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X59))),s('type.num.num',X58)))))))),s('type.num.num',X60))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X59))),s('type.num.num',X58)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X59))),s('type.num.num',X58))) | s(bool,X62) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f876,f893])).
fof(f29275,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X10),s('type.num.num',X9)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X9))))),s('type.num.num',X11))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X9))))) | s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f119,f893])).
fof(f29202,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))),s('type.num.num',X22))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f893,f893])).
fof(f29122,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))),s('type.num.num',X21))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s(bool,X23) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f893,f893])).
fof(f29278,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X26),s('type.num.num',X25))),s('type.num.num',X27)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num',X26))),s('type.num.num',X25))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X27),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num',X26))),s('type.num.num',X25))))))) | s(bool,X29) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X25))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f164,f893])).
fof(f29279,plain,(
  ( ! [X30,X35,X33,X31,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',X31)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num',X31))),s('type.num.num',X32))),s('type.num.num',X31))))),s('type.num.num',X33))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X30),s('type.num.num',X31))),s('type.num.num',X32))),s('type.num.num',X31))),s('type.num.num',X33))))) | s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f164,f893])).
fof(f29291,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X90),s('type.num.num',X89))),s('type.num.num',X91)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X88),s('type.num.num',X89))),s('type.num.num',X90))),s('type.num.num',X89)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X91),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X88),s('type.num.num',X89))),s('type.num.num',X90))),s('type.num.num',X89)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X88),s('type.num.num',X89))),s('type.num.num',X90))),s('type.num.num',X89))) | s(bool,X93) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))) | s(bool,'T_0') = s(bool,X93)) )),
  inference(superposition,[],[f2215,f893])).
fof(f29292,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X97),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X96),s('type.num.num',X95)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X94),s('type.num.num',X95))),s('type.num.num',X96))),s('type.num.num',X95))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X97)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X94),s('type.num.num',X95))),s('type.num.num',X96))),s('type.num.num',X95))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X97)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X97) | s(bool,X99) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2215,f893])).
fof(f30450,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))),s('type.num.num',X22))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',X22))))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f2246,f893])).
fof(f30465,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f2246,f893])).
fof(f30541,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',X22))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))))) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f2246,f893])).
fof(f30556,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))),s('type.num.num',X22))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))),s('type.num.num',X22))))) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f2246,f893])).
fof(f31932,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X22) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3264,f893])).
fof(f32014,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',X22))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X22),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3264,f893])).
fof(f32030,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X22) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3264,f893])).
fof(f33359,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X123)))))),s('type.num.num',X124))),s('type.num.num',X125))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X123)))))),s('type.num.num',X124))))),s('type.num.num',X125))) | s(bool,X127) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X127) | s(bool,X128) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num',X123))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X123) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f893,f3732])).
fof(f33343,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X41)))))),s('type.num.num',X42)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X41)))),s('type.num.num',X42))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X41)))),s('type.num.num',X42))))))),s('type.num.num',X43))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X41)))),s('type.num.num',X42))))))) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X41))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X41) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f119,f3732])).
fof(f33353,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X90)))))),s('type.num.num',X91)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X90)))),s('type.num.num',X91)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X93),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X90)))),s('type.num.num',X91)))))))))),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X90)))),s('type.num.num',X91)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X90)))),s('type.num.num',X91))))) | s(bool,X94) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X91),s('type.num.num',X90))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X90) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f876,f3732])).
fof(f33361,plain,(
  ( ! [X142,X140,X138,X136,X141,X139,X137] : (s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X137)))))),s('type.num.num',X138))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X140),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X137)))),s('type.num.num',X138))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X141),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X137)))),s('type.num.num',X138))))))),s('type.num.num',X140))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X137)))),s('type.num.num',X138))))))) | s(bool,'T_0') = s(bool,X139) | s(bool,X142) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X138),s('type.num.num',X137))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X137) | s(bool,'T_0') = s(bool,X142)) )),
  inference(superposition,[],[f893,f3732])).
fof(f32122,plain,(
  ( ! [X134,X138,X136,X135,X133,X139,X137] : (s(bool,X136) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num',X134))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X135)))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X137),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X135)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X138),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X135)))))))))),s('type.num.num',X137))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X134),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X135)))))))))) | s(bool,'T_0') = s(bool,X136) | s(bool,X139) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X135),s('type.num.num',X134))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X135) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f893,f3264])).
fof(f32114,plain,(
  ( ! [X90,X88,X87,X91,X89,X86] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X88))))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X89),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X88))))))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X90),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X88))))))))))))),s('type.num.num',X89))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X88))))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X88)))))))) | s(bool,X91) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X88),s('type.num.num',X87))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X88) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f876,f3264])).
fof(f32104,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X39))))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X39)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X39)))))))))),s('type.num.num',X40))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X39)))))))))) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num',X38))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X39) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f119,f3264])).
fof(f30645,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (s(bool,X134) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X132))),s('type.num.num',X133))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X135),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X132),s('type.num.num',X133))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X132),s('type.num.num',X133))))))),s('type.num.num',X135))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X132),s('type.num.num',X133))))))) | s(bool,'T_0') = s(bool,X134) | s(bool,X137) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X133),s('type.num.num',X132))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f893,f2246])).
fof(f30637,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X85))),s('type.num.num',X86)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X87),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X85),s('type.num.num',X86)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X88),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X85),s('type.num.num',X86)))))))))),s('type.num.num',X87))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X85),s('type.num.num',X86)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X85),s('type.num.num',X86))))) | s(bool,X89) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X86),s('type.num.num',X85))) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f876,f2246])).
fof(f30627,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num',X37)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num',X37))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num',X37))))))),s('type.num.num',X38))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num',X37))))))) | s(bool,X40) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X37),s('type.num.num',X36))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f119,f2246])).
fof(f33358,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X116)))))),s('type.num.num',X117))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X119),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X116)))))),s('type.num.num',X117))))),s('type.num.num',X118))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X116)))))),s('type.num.num',X117))))) | s(bool,X120) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X116)))),s('type.num.num',X117))))))) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X117),s('type.num.num',X116))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X116) | s(bool,'T_0') = s(bool,X121)) )),
  inference(superposition,[],[f893,f3732])).
fof(f32119,plain,(
  ( ! [X118,X116,X114,X112,X117,X115,X113] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X113))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X114)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X113))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X114)))))))),s('type.num.num',X115))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X113))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X114)))))))) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X113),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X114)))))))))) | s(bool,'T_0') = s(bool,X117) | s(bool,X118) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X114),s('type.num.num',X113))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X114) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f893,f3264])).
fof(f30642,plain,(
  ( ! [X111,X116,X114,X112,X110,X115,X113] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X113),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',X111))),s('type.num.num',X112))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X114),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',X111))),s('type.num.num',X112))))),s('type.num.num',X113))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',X111))),s('type.num.num',X112))))) | s(bool,X115) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X111),s('type.num.num',X112))))))) | s(bool,'T_0') = s(bool,X115) | s(bool,X116) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num',X111))) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f893,f2246])).
fof(f30477,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num',X9))))),s('type.num.num',X8))),s('type.num.num',X9))) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2246,f768])).
fof(f31949,plain,(
  ( ! [X12,X10,X11] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X11)))))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X11)))))))),s('type.num.num',X10))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X11)))))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X11) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f3264,f768])).
fof(f33341,plain,(
  ( ! [X35,X33,X34] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))),s('type.num.num',X34))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))),s('type.num.num',X34))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))),s('type.num.num',X34))) | s(bool,X35) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X34),s('type.num.num',X33))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f768,f3732])).
fof(f3255,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) )),
  inference(forward_demodulation,[],[f3230,f163])).
fof(f3230,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f2215,f163])).
fof(f11923,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) )),
  inference(forward_demodulation,[],[f11908,f768])).
fof(f11908,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))) )),
  inference(superposition,[],[f2215,f768])).
fof(f11784,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',X36)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) )),
  inference(forward_demodulation,[],[f11773,f2245])).
fof(f11773,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',X36)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f2215,f2245])).
fof(f3229,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f2215,f117])).
fof(f11099,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))),s('type.num.num',X38)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) )),
  inference(forward_demodulation,[],[f11089,f891])).
fof(f11089,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))),s('type.num.num',X38)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f2215,f891])).
fof(f11827,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) )),
  inference(forward_demodulation,[],[f11816,f11066])).
fof(f11816,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f2215,f11066])).
fof(f11364,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))),s('type.num.num',X44)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) )),
  inference(forward_demodulation,[],[f11354,f892])).
fof(f11354,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))),s('type.num.num',X44)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2215,f892])).
fof(f11872,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) )),
  inference(forward_demodulation,[],[f11860,f11328])).
fof(f11860,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))),s('type.num.num',X33)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2215,f11328])).
fof(f3254,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))),s('type.num.num',X4)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) )),
  inference(forward_demodulation,[],[f3228,f715])).
fof(f3228,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))),s('type.num.num',X4)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f2215,f715])).
fof(f32657,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(condensation,[],[f32656])).
fof(f32656,plain,(
  ( ! [X61,X59,X57,X60,X58] : (p(s(bool,X59)) | p(s(bool,X60)) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X58))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X57)) )),
  inference(subsumption_resolution,[],[f32265,f120])).
fof(f32265,plain,(
  ( ! [X61,X59,X57,X60,X58] : (p(s(bool,X59)) | p(s(bool,X60)) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X58))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X58))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X57) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f165,f3264])).
fof(f32133,plain,(
  ( ! [X206,X204,X202,X207,X205,X203,X201] : (s(bool,X204) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X205),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X201),s('type.num.num',X202))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X203)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X201),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X202),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X203)))))))))),s('type.num.num',X205))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X201),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X202),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X203)))))))),s('type.num.num',X205))))) | s(bool,'T_0') = s(bool,X204) | s(bool,X207) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X203),s('type.num.num',X202))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X203) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f2246,f3264])).
fof(f32132,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,X197) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num',X195))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X196)))))),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X195),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X196)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X195),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X196)))))))))))) | s(bool,'T_0') = s(bool,X197) | s(bool,X200) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X196),s('type.num.num',X195))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X196) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f2246,f3264])).
fof(f32130,plain,(
  ( ! [X185,X182,X180,X186,X184,X183,X181] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num',X181))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X182)))))))),s('type.num.num',X184))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num',X181))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X182)))))),s('type.num.num',X184))))) | s(bool,X185) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X184),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X181),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X182)))))))))) | s(bool,'T_0') = s(bool,X185) | s(bool,X186) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X182),s('type.num.num',X181))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X182) | s(bool,'T_0') = s(bool,X186)) )),
  inference(superposition,[],[f2246,f3264])).
fof(f32129,plain,(
  ( ! [X177,X175,X173,X178,X176,X174,X179] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num',X177))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num',X174))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X175)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X177),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num',X174))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X175)))))))))) | s(bool,X178) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X174),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X175)))))))),s('type.num.num',X177))) | s(bool,'T_0') = s(bool,X178) | s(bool,X179) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X175),s('type.num.num',X174))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X175) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f2246,f3264])).
fof(f32125,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X152))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X153))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X153)))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X154)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X152),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X153)))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X154)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X154) | s(bool,X156) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num',X152))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X153) | s(bool,'T_0') = s(bool,X156)) )),
  inference(superposition,[],[f2215,f3264])).
fof(f32124,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X146))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))),s('type.num.num',X148)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X146),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147))))))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X146),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147))))))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X146),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))))) | s(bool,X150) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X146))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X147) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f2215,f3264])).
fof(f32107,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X55)))))),s('type.num.num',X56)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X56))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X55)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X54),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X55)))))))))))) | s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num',X54))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X55) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f164,f3264])).
fof(f32040,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s(bool,X65) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X66) | s(bool,'T_0') = s(bool,X65) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3264,f3264])).
fof(f32024,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s(bool,X65) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))),s('type.num.num',X66))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X66))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64))))))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X66),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64))))))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))) | s(bool,'T_0') = s(bool,X65) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3264,f3264])).
fof(f31942,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))))) | s(bool,X67) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3264,f3264])).
fof(f2215,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f164,f117])).
fof(f32108,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num',X60))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X61))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X61)))))))))),s('type.num.num',X62))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X61)))))))),s('type.num.num',X62))))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X61),s('type.num.num',X60))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X61) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f164,f3264])).
fof(f3726,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) )),
  inference(forward_demodulation,[],[f3700,f163])).
fof(f3700,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f2219,f163])).
fof(f11366,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) )),
  inference(forward_demodulation,[],[f11356,f892])).
fof(f11356,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2219,f892])).
fof(f11101,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) )),
  inference(forward_demodulation,[],[f11091,f891])).
fof(f11091,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f2219,f891])).
fof(f32039,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X59) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3264,f2246])).
fof(f32023,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num',X59))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X59))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3264,f2246])).
fof(f31941,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))))) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X59) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3264,f2246])).
fof(f31153,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(condensation,[],[f31152])).
fof(f31152,plain,(
  ( ! [X54,X52,X55,X53,X51] : (p(s(bool,X53)) | p(s(bool,X54)) | s(bool,X54) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X52))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X52))),s('type.num.num',X51))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num',X51)))))) )),
  inference(subsumption_resolution,[],[f30782,f120])).
fof(f30782,plain,(
  ( ! [X54,X52,X55,X53,X51] : (p(s(bool,X53)) | p(s(bool,X54)) | s(bool,X54) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X51),s('type.num.num',X52))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X52))),s('type.num.num',X51))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num',X51))))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f165,f2246])).
fof(f30648,plain,(
  ( ! [X154,X152,X151,X149,X153,X150] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X150))),s('type.num.num',X151)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X150),s('type.num.num',X151))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X152)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X150),s('type.num.num',X151))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X152)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X152) | s(bool,X154) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X151),s('type.num.num',X150))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f2215,f2246])).
fof(f30647,plain,(
  ( ! [X146,X144,X147,X145,X143,X148] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X145))),s('type.num.num',X146)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num',X146))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X144),s('type.num.num',X145)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X146),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X144),s('type.num.num',X145)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X144),s('type.num.num',X145))))) | s(bool,X148) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X145),s('type.num.num',X144))) | s(bool,'T_0') = s(bool,X148)) )),
  inference(superposition,[],[f2215,f2246])).
fof(f30631,plain,(
  ( ! [X61,X59,X57,X62,X60,X58] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num',X59)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))))))),s('type.num.num',X60))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num',X60))))) | s(bool,X62) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X58))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f164,f2246])).
fof(f30630,plain,(
  ( ! [X54,X52,X56,X55,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X53))),s('type.num.num',X54)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X54))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num',X53))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X52),s('type.num.num',X53))))))))) | s(bool,X56) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X53),s('type.num.num',X52))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f164,f2246])).
fof(f30565,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))),s('type.num.num',X59))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))),s('type.num.num',X59))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f2246,f2246])).
fof(f30550,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num',X59))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X59))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f2246,f2246])).
fof(f30474,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))))) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))),s('type.num.num',X59))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f2246,f2246])).
fof(f30459,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))),s('type.num.num',X59))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num',X59))))) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f2246,f2246])).
fof(f11925,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) )),
  inference(forward_demodulation,[],[f11910,f768])).
fof(f11910,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))) )),
  inference(superposition,[],[f2219,f768])).
fof(f11786,plain,(
  ( ! [X43,X41,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) )),
  inference(forward_demodulation,[],[f11775,f2245])).
fof(f11775,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(superposition,[],[f2219,f2245])).
fof(f11874,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) )),
  inference(forward_demodulation,[],[f11862,f11328])).
fof(f11862,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f2219,f11328])).
fof(f11829,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) )),
  inference(forward_demodulation,[],[f11818,f11066])).
fof(f11818,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f2219,f11066])).
fof(f3725,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) )),
  inference(forward_demodulation,[],[f3698,f715])).
fof(f3698,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f2219,f715])).
fof(f33377,plain,(
  ( ! [X243,X241,X239,X237,X242,X240,X238] : (s(bool,X240) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X241),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))),s('type.num.num',X239))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))),s('type.num.num',X239))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X241)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))),s('type.num.num',X239))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X241)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X241) | s(bool,'T_0') = s(bool,X240) | s(bool,X243) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X239),s('type.num.num',X238))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X238) | s(bool,'T_0') = s(bool,X243)) )),
  inference(superposition,[],[f3264,f3732])).
fof(f33376,plain,(
  ( ! [X231,X235,X233,X230,X236,X234,X232] : (s(bool,X233) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X231)))))),s('type.num.num',X232))),s('type.num.num',X234))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',X234))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X231)))),s('type.num.num',X232)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X234),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X231)))),s('type.num.num',X232)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X231)))),s('type.num.num',X232))))) | s(bool,'T_0') = s(bool,X233) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X232),s('type.num.num',X231))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X231) | s(bool,'T_0') = s(bool,X236)) )),
  inference(superposition,[],[f3264,f3732])).
fof(f33374,plain,(
  ( ! [X218,X216,X222,X220,X219,X217,X221] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X217)))))),s('type.num.num',X218))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X217)))))),s('type.num.num',X218))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))))) | s(bool,X221) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X217)))),s('type.num.num',X218))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X220) | s(bool,'T_0') = s(bool,X221) | s(bool,X222) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X218),s('type.num.num',X217))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X217) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f3264,f3732])).
fof(f33372,plain,(
  ( ! [X210,X208,X206,X204,X209,X207,X205] : (s(bool,X207) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X208),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))))),s('type.num.num',X206))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X206))))))),s('type.num.num',X208))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X206))))),s('type.num.num',X208))))) | s(bool,'T_0') = s(bool,X207) | s(bool,X210) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X206),s('type.num.num',X205))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X205) | s(bool,'T_0') = s(bool,X210)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f33371,plain,(
  ( ! [X198,X202,X200,X199,X197,X203,X201] : (s(bool,X200) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))))),s('type.num.num',X199))),s('type.num.num',X201))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num',X201))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X199))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X201),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X199))))))))) | s(bool,'T_0') = s(bool,X200) | s(bool,X203) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X199),s('type.num.num',X198))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X198) | s(bool,'T_0') = s(bool,X203)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f33369,plain,(
  ( ! [X189,X187,X185,X188,X186,X184,X183] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X184)))))),s('type.num.num',X185))))),s('type.num.num',X187))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X184)))))),s('type.num.num',X185))),s('type.num.num',X187))))) | s(bool,X188) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X187),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X184)))),s('type.num.num',X185))))))) | s(bool,'T_0') = s(bool,X188) | s(bool,X189) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X185),s('type.num.num',X184))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X184) | s(bool,'T_0') = s(bool,X189)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f33368,plain,(
  ( ! [X177,X182,X180,X178,X176,X181,X179] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X179),s('type.num.num',X180))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))))),s('type.num.num',X178))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X179),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X180),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))))),s('type.num.num',X178))))))) | s(bool,X181) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))),s('type.num.num',X178))))),s('type.num.num',X180))) | s(bool,'T_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X178),s('type.num.num',X177))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X177) | s(bool,'T_0') = s(bool,X182)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f33364,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X155)))))),s('type.num.num',X156)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X158),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X155)))),s('type.num.num',X156))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X157)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X158),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X155)))),s('type.num.num',X156))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X157)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X157) | s(bool,X159) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X156),s('type.num.num',X155))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X155) | s(bool,'T_0') = s(bool,X159)) )),
  inference(superposition,[],[f2215,f3732])).
fof(f33363,plain,(
  ( ! [X152,X151,X149,X153,X150,X148] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X149)))))),s('type.num.num',X150))),s('type.num.num',X151)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num',X151))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X149)))),s('type.num.num',X150)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X152),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X151),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X149)))),s('type.num.num',X150)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X149)))),s('type.num.num',X150))))) | s(bool,X153) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X150),s('type.num.num',X149))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X149) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f2215,f3732])).
fof(f33347,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X63)))))),s('type.num.num',X64)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X63)))),s('type.num.num',X64))))))),s('type.num.num',X65))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X63)))),s('type.num.num',X64))))),s('type.num.num',X65))))) | s(bool,X67) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X63) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f164,f3732])).
fof(f33346,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))))),s('type.num.num',X58))),s('type.num.num',X59)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X59))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))),s('type.num.num',X58))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X57)))),s('type.num.num',X58))))))))) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X58),s('type.num.num',X57))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X57) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f164,f3732])).
fof(f48529,plain,(
  ( ! [X167,X166] : (s(bool,f(s(bool,X166))) = s(bool,f(s(bool,X167))) | s(bool,'T_0') = s(bool,X167) | s(bool,'T_0') = s(bool,X166)) ) | $spl154),
  inference(subsumption_resolution,[],[f48456,f112])).
fof(f48456,plain,(
  ( ! [X167,X166] : (~p(s(bool,'T_0')) | s(bool,f(s(bool,X166))) = s(bool,f(s(bool,X167))) | s(bool,'T_0') = s(bool,X167) | s(bool,'T_0') = s(bool,X166)) ) | $spl154),
  inference(superposition,[],[f41319,f40809])).
fof(f48504,plain,(
  ( ! [X92,X90,X91] : (s(bool,X90) = s(bool,f(s(bool,X91))) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92)) ) | $spl154),
  inference(subsumption_resolution,[],[f48430,f112])).
fof(f48430,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,'T_0')) | s(bool,X90) = s(bool,f(s(bool,X91))) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92)) ) | $spl154),
  inference(superposition,[],[f41319,f873])).
fof(f48495,plain,(
  ( ! [X74,X72,X73] : (s(bool,X72) = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X72) = s(bool,X74)) ) | $spl154),
  inference(subsumption_resolution,[],[f48424,f112])).
fof(f48424,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,f(s(bool,X73))) | s(bool,'T_0') = s(bool,X73) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X72) = s(bool,X74)) ) | $spl154),
  inference(superposition,[],[f41319,f872])).
fof(f48490,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) = s(bool,f(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X60) = s(bool,X62)) ) | $spl154),
  inference(subsumption_resolution,[],[f48420,f112])).
fof(f48420,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,f(s(bool,X61))) | s(bool,'T_0') = s(bool,X61) | s(bool,X62) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X60) = s(bool,X62)) ) | $spl154),
  inference(superposition,[],[f41319,f871])).
fof(f48489,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,X27) = s(bool,f(s(bool,X28))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl154),
  inference(subsumption_resolution,[],[f48413,f112])).
fof(f48413,plain,(
  ( ! [X30,X28,X31,X29,X27] : (~p(s(bool,'T_0')) | s(bool,X27) = s(bool,f(s(bool,X28))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) ) | $spl154),
  inference(superposition,[],[f41319,f419])).
fof(f40807,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl154),
  inference(superposition,[],[f27291,f1579])).
fof(f40949,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(condensation,[],[f40948])).
fof(f40948,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f40844])).
fof(f40844,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f41007,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | $spl154),
  inference(subsumption_resolution,[],[f40896,f112])).
fof(f40896,plain,(
  ( ! [X47] : (~p(s(bool,'T_0')) | s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | $spl154),
  inference(superposition,[],[f1673,f27291])).
fof(f41312,plain,(
  ( ! [X74,X72] : (s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,f(s(bool,X72))) | s(bool,'F_0') = s(bool,X74)) ) | $spl154),
  inference(subsumption_resolution,[],[f41123,f177])).
fof(f41123,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X73),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,f(s(bool,X72))) | s(bool,'F_0') = s(bool,X74)) ) | $spl154),
  inference(superposition,[],[f40809,f5275])).
fof(f41318,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | $spl154),
  inference(subsumption_resolution,[],[f41135,f112])).
fof(f41135,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | $spl154),
  inference(superposition,[],[f124,f40809])).
fof(f41596,plain,(
  ( ! [X111,X110] : (p(s(bool,f(s(bool,X110)))) | s(bool,'F_0') = s(bool,X111) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(forward_demodulation,[],[f41595,f216])).
fof(f41595,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,f(s(bool,X110)))) | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X112),s('type.num.num','const.num.|48|_0'))) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(subsumption_resolution,[],[f41468,f176])).
fof(f41468,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,f(s(bool,X110)))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X112),s('type.num.num','const.num.|48|_0'))) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(superposition,[],[f41230,f5275])).
fof(f41718,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(superposition,[],[f41007,f5275])).
fof(f41719,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,f(s(bool,X4))) | s(bool,'F_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl154),
  inference(superposition,[],[f41007,f1579])).
fof(f42052,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl154),
  inference(subsumption_resolution,[],[f41732,f176])).
fof(f41732,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl154),
  inference(superposition,[],[f41007,f419])).
fof(f42056,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f41737,f176])).
fof(f41737,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f41007,f871])).
fof(f42057,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'F_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f41740,f176])).
fof(f41740,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'F_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f41007,f872])).
fof(f42058,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'F_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f41742,f176])).
fof(f41742,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'F_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f41007,f873])).
fof(f42703,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f42702])).
fof(f42702,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f42571])).
fof(f42571,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(superposition,[],[f41318,f419])).
fof(f42742,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X133))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl154),
  inference(subsumption_resolution,[],[f42629,f177])).
fof(f42629,plain,(
  ( ! [X134,X132,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X133))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X132),s('type.num.num','const.num.|48|_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl154),
  inference(superposition,[],[f41318,f5275])).
fof(f41230,plain,(
  ( ! [X1] : (p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl154),
  inference(trivial_inequality_removal,[],[f41133])).
fof(f41133,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl154),
  inference(superposition,[],[f120,f40809])).
fof(f41319,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(subsumption_resolution,[],[f41139,f112])).
fof(f41139,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(superposition,[],[f168,f40809])).
fof(f41552,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X1)))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f41551])).
fof(f41551,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f41428])).
fof(f41428,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(superposition,[],[f41230,f419])).
fof(f41313,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') = s(bool,X75) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X76) = s(bool,f(s(bool,X75)))) ) | $spl154),
  inference(subsumption_resolution,[],[f41124,f176])).
fof(f41124,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X75) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X76) = s(bool,f(s(bool,X75)))) ) | $spl154),
  inference(superposition,[],[f40809,f5275])).
fof(f41248,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f41247])).
fof(f41247,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f41101])).
fof(f41101,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(superposition,[],[f40809,f419])).
fof(f40973,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f40830,f176])).
fof(f40830,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f873])).
fof(f40972,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f40828,f176])).
fof(f40828,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f872])).
fof(f40971,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f40825,f176])).
fof(f40825,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f871])).
fof(f40967,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(subsumption_resolution,[],[f40820,f176])).
fof(f40820,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f40809,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl154),
  inference(superposition,[],[f27291,f116])).
fof(f40806,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(superposition,[],[f27291,f5275])).
fof(f37077,plain,(
  ( ! [X141] : (s(bool,'F_0') != s(bool,f(s(bool,X141))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f36960,f177])).
fof(f36960,plain,(
  ( ! [X140,X141] : (s(bool,'F_0') != s(bool,f(s(bool,X141))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X140),s('type.num.num','const.num.|48|_0'))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(superposition,[],[f35488,f1293])).
fof(f37076,plain,(
  ( ! [X139] : (s(bool,'F_0') != s(bool,f(s(bool,X139))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f36959,f177])).
fof(f36959,plain,(
  ( ! [X138,X139] : (s(bool,'F_0') != s(bool,f(s(bool,X139))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X138),s('type.num.num','const.num.|48|_0'))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(superposition,[],[f35488,f7818])).
fof(f37073,plain,(
  ( ! [X136] : (s(bool,'F_0') != s(bool,f(s(bool,X136))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f36957,f177])).
fof(f36957,plain,(
  ( ! [X136,X135] : (s(bool,'F_0') != s(bool,f(s(bool,X136))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X135),s('type.num.num','const.num.|48|_0'))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(superposition,[],[f35488,f21962])).
fof(f37072,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X133))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl154),
  inference(subsumption_resolution,[],[f36956,f177])).
fof(f36956,plain,(
  ( ! [X134,X132,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X133))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X132),s('type.num.num','const.num.|48|_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl154),
  inference(superposition,[],[f35488,f5275])).
fof(f37030,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f37029])).
fof(f37029,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f36898])).
fof(f36898,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(superposition,[],[f35488,f419])).
fof(f36293,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'F_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f35975,f176])).
fof(f35975,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'F_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f35049,f873])).
fof(f36292,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'F_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f35973,f176])).
fof(f35973,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'F_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f35049,f872])).
fof(f36291,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f35970,f176])).
fof(f35970,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'F_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f35049,f871])).
fof(f36287,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl154),
  inference(subsumption_resolution,[],[f35965,f176])).
fof(f35965,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl154),
  inference(superposition,[],[f35049,f419])).
fof(f35952,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,f(s(bool,X4))) | s(bool,'F_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl154),
  inference(superposition,[],[f35049,f1579])).
fof(f35951,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(superposition,[],[f35049,f5275])).
fof(f35692,plain,(
  ( ! [X111,X110] : (s(bool,'F_0') = s(bool,X111) | p(s(bool,f(s(bool,X110)))) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(forward_demodulation,[],[f35691,f216])).
fof(f35691,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,f(s(bool,X110)))) | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X112),s('type.num.num','const.num.|48|_0'))) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(subsumption_resolution,[],[f35564,f176])).
fof(f35564,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,f(s(bool,X110)))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X112),s('type.num.num','const.num.|48|_0'))) | s(bool,X110) = s(bool,X111)) ) | $spl154),
  inference(superposition,[],[f35400,f5275])).
fof(f35648,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X1)))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f35647])).
fof(f35647,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f35524])).
fof(f35524,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(superposition,[],[f35400,f419])).
fof(f35489,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(subsumption_resolution,[],[f35309,f112])).
fof(f35309,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(superposition,[],[f168,f34851])).
fof(f35488,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | $spl154),
  inference(subsumption_resolution,[],[f35305,f112])).
fof(f35305,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | $spl154),
  inference(superposition,[],[f124,f34851])).
fof(f35400,plain,(
  ( ! [X1] : (p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl154),
  inference(trivial_inequality_removal,[],[f35303])).
fof(f35303,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,f(s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl154),
  inference(superposition,[],[f120,f34851])).
fof(f35483,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') = s(bool,X75) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X76) = s(bool,f(s(bool,X75)))) ) | $spl154),
  inference(subsumption_resolution,[],[f35294,f176])).
fof(f35294,plain,(
  ( ! [X76,X77,X75] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X75) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,X76) = s(bool,f(s(bool,X75)))) ) | $spl154),
  inference(superposition,[],[f34851,f5275])).
fof(f35482,plain,(
  ( ! [X74,X72] : (s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,f(s(bool,X72))) | s(bool,'F_0') = s(bool,X74)) ) | $spl154),
  inference(subsumption_resolution,[],[f35293,f177])).
fof(f35293,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X73),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X72) | s(bool,X74) = s(bool,f(s(bool,X72))) | s(bool,'F_0') = s(bool,X74)) ) | $spl154),
  inference(superposition,[],[f34851,f5275])).
fof(f35418,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f35417])).
fof(f35417,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f35271])).
fof(f35271,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(superposition,[],[f34851,f419])).
fof(f35049,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | $spl154),
  inference(subsumption_resolution,[],[f34938,f112])).
fof(f34938,plain,(
  ( ! [X47] : (~p(s(bool,'T_0')) | s(bool,X47) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X47)) ) | $spl154),
  inference(superposition,[],[f1673,f27291])).
fof(f34991,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(condensation,[],[f34990])).
fof(f34990,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f34886])).
fof(f34886,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f35015,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f34872,f176])).
fof(f34872,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f873])).
fof(f35014,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f34870,f176])).
fof(f34870,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f872])).
fof(f35013,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f34867,f176])).
fof(f34867,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f871])).
fof(f35009,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(subsumption_resolution,[],[f34862,f176])).
fof(f34862,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f34851,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl154),
  inference(superposition,[],[f27291,f116])).
fof(f34849,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl154),
  inference(superposition,[],[f27291,f1579])).
fof(f34848,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(superposition,[],[f27291,f5275])).
fof(f29293,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X103),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X102),s('type.num.num',X101)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num',X102))),s('type.num.num',X101)))))))),s('type.num.num',X103))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num',X102))),s('type.num.num',X101)))))),s('type.num.num',X103))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X100),s('type.num.num',X101))),s('type.num.num',X102))),s('type.num.num',X101))) | s(bool,X105) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X101))) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f2219,f893])).
fof(f29294,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X108),s('type.num.num',X107))),s('type.num.num',X109)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X109)))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X106),s('type.num.num',X107))),s('type.num.num',X108))),s('type.num.num',X107))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X109)))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X106),s('type.num.num',X107))),s('type.num.num',X108))),s('type.num.num',X107))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X109) | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X107))) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f2219,f893])).
fof(f33168,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X22) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3732,f893])).
fof(f3233,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f2215,f117])).
fof(f3699,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f2219,f117])).
fof(f30649,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X158),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num',X157)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X157)))))))))),s('type.num.num',X158))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X157)))))))),s('type.num.num',X158))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X156),s('type.num.num',X157))))) | s(bool,X160) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X157),s('type.num.num',X156))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f2219,f2246])).
fof(f30650,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num',X162))),s('type.num.num',X163))),s('type.num.num',X164)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X164)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X162),s('type.num.num',X163))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X164)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X162),s('type.num.num',X163))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X164) | s(bool,X166) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X163),s('type.num.num',X162))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f2219,f2246])).
fof(f32126,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X160),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X158))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X159))))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X158),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X159))))))))))))),s('type.num.num',X160))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X158),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X159))))))))))),s('type.num.num',X160))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X158),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X159)))))))) | s(bool,X162) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X159),s('type.num.num',X158))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X159) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f2219,f3264])).
fof(f32127,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X164))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))),s('type.num.num',X166)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X166)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X164),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X166)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X164),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X166) | s(bool,X168) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X165),s('type.num.num',X164))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X165) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f2219,f3264])).
fof(f33177,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))))) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))),s('type.num.num',X59))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X59) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3732,f2246])).
fof(f33178,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))))) | s(bool,X67) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))),s('type.num.num',X66))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3732,f3264])).
fof(f33179,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X73)))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))))),s('type.num.num',X71))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X73)))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))))),s('type.num.num',X71))))))) | s(bool,X74) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71))))),s('type.num.num',X73))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X73) | s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X70) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f3732,f3732])).
fof(f33171,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))),s('type.num.num',X33))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))),s('type.num.num',X33))))) | s(bool,X36) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))),s('type.num.num',X35))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X35) | s(bool,'T_0') = s(bool,X36) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3732,f117])).
fof(f33249,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',X22))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X22)))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X22) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3732,f893])).
fof(f33252,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X35))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X35) | s(bool,'T_0') = s(bool,X34) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3732,f117])).
fof(f33258,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))),s('type.num.num',X59))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X59)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X59) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3732,f2246])).
fof(f33259,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s(bool,X65) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))),s('type.num.num',X66))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X66)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X66) | s(bool,'T_0') = s(bool,X65) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3732,f3264])).
fof(f33260,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (s(bool,X72) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))))),s('type.num.num',X71))),s('type.num.num',X73))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X73)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X73)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X73) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X70) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f3732,f3732])).
fof(f33266,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19)))))))),s('type.num.num',X22))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19)))))),s('type.num.num',X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X21) | s(bool,X24) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f3732,f893])).
fof(f33269,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X33))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X33))))))))),s('type.num.num',X35))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X33))))))),s('type.num.num',X35))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))) | s(bool,'T_0') = s(bool,X34) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3732,f117])).
fof(f33275,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X57))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57)))))))))),s('type.num.num',X59))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57)))))))),s('type.num.num',X59))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X56),s('type.num.num',X57))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X61) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X57),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f3732,f2246])).
fof(f33276,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s(bool,X65) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X66),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num',X63))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64))))))))))))),s('type.num.num',X66))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64))))))))))),s('type.num.num',X66))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X62),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X63),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X64)))))))) | s(bool,'T_0') = s(bool,X65) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X64),s('type.num.num',X63))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X64) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f3732,f3264])).
fof(f33277,plain,(
  ( ! [X70,X74,X72,X71,X69,X75,X73] : (s(bool,X72) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X73),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))))),s('type.num.num',X71))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71)))))))))),s('type.num.num',X73))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71)))))))),s('type.num.num',X73))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X70)))),s('type.num.num',X71))))) | s(bool,'T_0') = s(bool,X72) | s(bool,X75) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X70) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f3732,f3732])).
fof(f33365,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X160),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X161)))))),s('type.num.num',X162)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X164),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X160),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X161)))),s('type.num.num',X162)))))))))),s('type.num.num',X163))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X164),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X160),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X161)))),s('type.num.num',X162)))))))),s('type.num.num',X163))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X160),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X161)))),s('type.num.num',X162))))) | s(bool,X165) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X162),s('type.num.num',X161))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X161) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f2219,f3732])).
fof(f33366,plain,(
  ( ! [X167,X171,X169,X166,X170,X168] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X167)))))),s('type.num.num',X168))),s('type.num.num',X169)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X169)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X167)))),s('type.num.num',X168))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X169)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X167)))),s('type.num.num',X168))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X169) | s(bool,X171) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X168),s('type.num.num',X167))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X167) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f2219,f3732])).
fof(f34751,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757,f29758,f29561,f29807,f29812,f30450,f30453,f30459,f30465,f30468,f30474,f30476,f30477,f30949,f30948,f31020,f30541,f30550,f30556,f30565,f30618,f30619,f30620,f30622,f30623,f30624,f30627,f30630,f30631,f30637,f30642,f30645,f30647,f30648,f30649,f30650,f31075,f30900,f30898,f30893,f31090,f31094,f30891,f31105,f31106,f30888,f31153,f31158,f31932,f31935,f31941,f31942,f31948,f31949,f32434,f32433,f32432,f32495,f32504,f32505,f32506,f32014,f32507,f32508,f32017,f32515,f32516,f32023,f32024,f32517,f32030,f32033,f32039,f32040,f32095,f32096,f32097,f32099,f32100,f32101,f32104,f32107,f32108,f32114,f32119,f32122,f32124,f32125,f32126,f32127,f32129,f32130,f32132,f32133,f32566,f32383,f32381,f32376,f32581,f32585,f32374,f32373,f32596,f32597,f32370,f32657,f32662,f33168,f33171,f33177,f33178,f33179,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634])).
fof(f33634,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(condensation,[],[f33633])).
fof(f33633,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(duplicate_literal_removal,[],[f33632])).
fof(f33632,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s(bool,X1) = s(bool,X2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | s(bool,'T_0') = s(bool,X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f33408])).
fof(f33408,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X133),s('type.num.num',X134)))) | s(bool,X132) = s(bool,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X134)))))),s('type.num.num',X133))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X134)))),s('type.num.num',X133))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X134) | s(bool,'T_0') = s(bool,X132)) )),
  inference(superposition,[],[f707,f3732])).
fof(f34730,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757,f29758,f29561,f29807,f29812,f30450,f30453,f30459,f30465,f30468,f30474,f30476,f30477,f30949,f30948,f31020,f30541,f30550,f30556,f30565,f30618,f30619,f30620,f30622,f30623,f30624,f30627,f30630,f30631,f30637,f30642,f30645,f30647,f30648,f30649,f30650,f31075,f30900,f30898,f30893,f31090,f31094,f30891,f31105,f31106,f30888,f31153,f31158,f31932,f31935,f31941,f31942,f31948,f31949,f32434,f32433,f32432,f32495,f32504,f32505,f32506,f32014,f32507,f32508,f32017,f32515,f32516,f32023,f32024,f32517,f32030,f32033,f32039,f32040,f32095,f32096,f32097,f32099,f32100,f32101,f32104,f32107,f32108,f32114,f32119,f32122,f32124,f32125,f32126,f32127,f32129,f32130,f32132,f32133,f32566,f32383,f32381,f32376,f32581,f32585,f32374,f32373,f32596,f32597,f32370,f32657,f32662,f33168,f33171,f33177,f33178,f33179,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729])).
fof(f34729,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(condensation,[],[f34728])).
fof(f34728,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X297),s('type.num.num',X298))) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X298)))))),s('type.num.num',X297))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X298)))),s('type.num.num',X297))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X298)) )),
  inference(subsumption_resolution,[],[f33440,f2587])).
fof(f33440,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X297),s('type.num.num',X298))) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X298)))))),s('type.num.num',X297))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X298)))),s('type.num.num',X297))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X298) | s(bool,'T_0') = s(bool,X296)) )),
  inference(superposition,[],[f2587,f3732])).
fof(f34699,plain,(
  ( ! [X553,X551,X552,X554,X550] : (s(bool,X552) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X550),s('type.num.num',X551))) | s(bool,X552) = s(bool,X553) | s(bool,'F_0') = s(bool,X553) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X554),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X551)))))),s('type.num.num',X550))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X554),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X551)))),s('type.num.num',X550))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X551)) )),
  inference(subsumption_resolution,[],[f33477,f177])).
fof(f33477,plain,(
  ( ! [X553,X549,X551,X552,X554,X550] : (s(bool,X552) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X550),s('type.num.num',X551))) | s(bool,X552) = s(bool,X553) | s(bool,'F_0') = s(bool,X553) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X554),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X551)))))),s('type.num.num',X550))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X554),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X551)))),s('type.num.num',X550))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X551) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X549),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f5275,f3732])).
fof(f33491,plain,(
  ( ! [X666,X668,X664,X667,X669,X665] : (s(X666,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X667),s('type.num.num',X668))))) != s(X666,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X667),s('type.num.num',X668))))) | s(fun(bool,X666),X664) = s(fun(bool,X666),X665) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X669),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X668)))))),s('type.num.num',X667))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X669),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X668)))),s('type.num.num',X667))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X668) | s(bool,'T_0') = s(bool,sK4(X664,X665,X666,bool))) )),
  inference(superposition,[],[f169,f3732])).
fof(f33494,plain,(
  ( ! [X685,X687,X683,X684,X686,X682] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X685),s('type.num.num',X686))) != s(bool,f(s(X682,sK4(X683,X684,bool,X682)))) | s(fun(X682,bool),X683) = s(fun(X682,bool),X684) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X687),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X686)))))),s('type.num.num',X685))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X687),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X686)))),s('type.num.num',X685))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X686) | s(bool,'T_0') = s(bool,g(s(X682,sK4(X683,X684,bool,X682))))) )),
  inference(superposition,[],[f169,f3732])).
fof(f34012,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(condensation,[],[f34011])).
fof(f34011,plain,(
  ( ! [X70,X68,X72,X71,X69] : (p(s(bool,X70)) | p(s(bool,X71)) | s(bool,X71) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',X69))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X69)))))),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X69)))),s('type.num.num',X68))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X69)) )),
  inference(subsumption_resolution,[],[f33512,f120])).
fof(f33512,plain,(
  ( ! [X70,X68,X72,X71,X69] : (p(s(bool,X70)) | p(s(bool,X71)) | s(bool,X71) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X68),s('type.num.num',X69))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X69)))))),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X69)))),s('type.num.num',X68))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X69) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f165,f3732])).
fof(f33595,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(condensation,[],[f33594])).
fof(f33594,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,X133) | s(bool,X133) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,X132) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num',X130))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X130)))))),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X130)))),s('type.num.num',X129))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X130)) )),
  inference(duplicate_literal_removal,[],[f33523])).
fof(f33523,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,X133) | s(bool,X133) = s(bool,X134) | s(bool,'T_0') = s(bool,X134) | s(bool,X132) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X129),s('type.num.num',X130))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X130)))))),s('type.num.num',X129))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X130)))),s('type.num.num',X129))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X130) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f419,f3732])).
fof(f34653,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))),s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(condensation,[],[f34652])).
fof(f34652,plain,(
  ( ! [X4,X2,X0,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'F_0') = s(bool,X0) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(forward_demodulation,[],[f34651,f216])).
fof(f34651,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(condensation,[],[f34650])).
fof(f34650,plain,(
  ( ! [X397,X393,X395,X396,X392,X394] : (s(bool,X394) = s(bool,X395) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X396),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X392),s('type.num.num',X393))) | s(bool,'F_0') = s(bool,X395) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X393)))))),s('type.num.num',X392))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X393)))),s('type.num.num',X392))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X393)) )),
  inference(subsumption_resolution,[],[f33572,f2587])).
fof(f33572,plain,(
  ( ! [X397,X393,X395,X396,X392,X394] : (s(bool,X394) = s(bool,X395) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X396),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X392),s('type.num.num',X393))) | s(bool,'F_0') = s(bool,X395) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X393)))))),s('type.num.num',X392))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X393)))),s('type.num.num',X392))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X393) | s(bool,'T_0') = s(bool,X394)) )),
  inference(superposition,[],[f5275,f3732])).
fof(f34632,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(condensation,[],[f34631])).
fof(f34631,plain,(
  ( ! [X476,X474,X475,X477,X473] : (s(bool,'T_0') = s(bool,X476) | s(bool,X476) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X473),s('type.num.num',X474))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))))),s('type.num.num',X473))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))),s('type.num.num',X473))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X474) | s(bool,'T_0') = s(bool,X475)) )),
  inference(forward_demodulation,[],[f34630,f182])).
fof(f34630,plain,(
  ( ! [X476,X474,X475,X477,X473] : (s(bool,X476) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X476) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X473),s('type.num.num',X474))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))))),s('type.num.num',X473))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))),s('type.num.num',X473))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X474) | s(bool,'T_0') = s(bool,X475)) )),
  inference(subsumption_resolution,[],[f33588,f116])).
fof(f33588,plain,(
  ( ! [X476,X474,X475,X477,X473] : (s(bool,'F_0') != s(bool,X475) | s(bool,X476) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X476) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X473),s('type.num.num',X474))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))))),s('type.num.num',X473))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X477),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X474)))),s('type.num.num',X473))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X474) | s(bool,'T_0') = s(bool,X475)) )),
  inference(superposition,[],[f22283,f3732])).
fof(f33589,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(equality_factoring,[],[f3732])).
fof(f33745,plain,(
  ( ! [X333,X335,X331,X332,X334] : (s(bool,X331) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X332),s('type.num.num',X333))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))))),s('type.num.num',X332))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))),s('type.num.num',X332))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X333) | s(bool,X331) = s(bool,X335) | s(bool,'F_0') = s(bool,X335)) )),
  inference(subsumption_resolution,[],[f33232,f177])).
fof(f33232,plain,(
  ( ! [X333,X335,X331,X332,X334,X330] : (s(bool,X331) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X332),s('type.num.num',X333))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))))),s('type.num.num',X332))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))),s('type.num.num',X332))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X333) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X330),s('type.num.num','const.num.|48|_0'))) | s(bool,X331) = s(bool,X335) | s(bool,'F_0') = s(bool,X335)) )),
  inference(superposition,[],[f3732,f5275])).
fof(f33182,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X13)))),s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X13)))),s('type.num.num',X14))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X13)))))),s('type.num.num',X14))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X13) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f3732,f768])).
fof(f33181,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))),s('type.num.num',X2))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))),s('type.num.num',X2))) | s(bool,X3) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f3732,f163])).
fof(f32596,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(condensation,[],[f32595])).
fof(f32595,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X297),s('type.num.num',X298))) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X298))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X297)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X298),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X297)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X297)) )),
  inference(subsumption_resolution,[],[f32197,f2587])).
fof(f32197,plain,(
  ( ! [X300,X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X297),s('type.num.num',X298))) | s(bool,X296) = s(bool,X299) | s(bool,'F_0') = s(bool,X299) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X298))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X297)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X298),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X297)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X297) | s(bool,'T_0') = s(bool,X296)) )),
  inference(superposition,[],[f2587,f3264])).
fof(f32033,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X33))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X33)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X35)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X35) | s(bool,'T_0') = s(bool,X34) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X33)) )),
  inference(superposition,[],[f3264,f117])).
fof(f31414,plain,(
  ( ! [X118,X119] : (s(bool,'F_0') = s(bool,X119) | p(s(bool,f(s(bool,X118)))) | s(bool,X118) = s(bool,X119)) ) | $spl154),
  inference(forward_demodulation,[],[f31413,f216])).
fof(f31413,plain,(
  ( ! [X118,X120,X119] : (p(s(bool,f(s(bool,X118)))) | s(bool,X119) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X120),s('type.num.num','const.num.|48|_0'))) | s(bool,X118) = s(bool,X119)) ) | $spl154),
  inference(subsumption_resolution,[],[f31278,f176])).
fof(f31278,plain,(
  ( ! [X118,X120,X119] : (p(s(bool,f(s(bool,X118)))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X119) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X120),s('type.num.num','const.num.|48|_0'))) | s(bool,X118) = s(bool,X119)) ) | $spl154),
  inference(superposition,[],[f30318,f5275])).
fof(f31368,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,f(s(bool,X1)))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f31367])).
fof(f31367,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f31236])).
fof(f31236,plain,(
  ( ! [X33,X31,X34,X32] : (p(s(bool,f(s(bool,X32)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl154),
  inference(superposition,[],[f30318,f419])).
fof(f30886,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl154),
  inference(condensation,[],[f30885])).
fof(f30885,plain,(
  ( ! [X422,X424,X421,X423] : (s(bool,'T_0') = s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X422),s('type.num.num',X423))))) | s(bool,'T_0') = s(bool,X421) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X424),s('type.num.num',X423))),s('type.num.num',X422))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X424),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X423),s('type.num.num',X422)))))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f30740])).
fof(f30740,plain,(
  ( ! [X422,X424,X421,X423] : (s(bool,'T_0') = s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X422),s('type.num.num',X423))))) | s(bool,'T_0') = s(bool,X421) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X424),s('type.num.num',X423))),s('type.num.num',X422))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X424),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X423),s('type.num.num',X422))))) | s(bool,'T_0') = s(bool,X421)) ) | $spl154),
  inference(superposition,[],[f29890,f2246])).
fof(f31105,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(condensation,[],[f31104])).
fof(f31104,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X290),s('type.num.num',X291))) | s(bool,X289) = s(bool,X292) | s(bool,'F_0') = s(bool,X292) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X291))),s('type.num.num',X290))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X291),s('type.num.num',X290)))))) )),
  inference(subsumption_resolution,[],[f30714,f2587])).
fof(f30714,plain,(
  ( ! [X292,X290,X293,X289,X291] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X290),s('type.num.num',X291))) | s(bool,X289) = s(bool,X292) | s(bool,'F_0') = s(bool,X292) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',X291))),s('type.num.num',X290))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X291),s('type.num.num',X290))))) | s(bool,'T_0') = s(bool,X289)) )),
  inference(superposition,[],[f2587,f2246])).
fof(f30410,plain,(
  ( ! [X15,X16] : (~p(s(bool,X16)) | s(bool,X16) = s(bool,f(s(bool,X15))) | s(bool,'T_0') = s(bool,X15)) ) | $spl154),
  inference(subsumption_resolution,[],[f30225,f112])).
fof(f30225,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X16)) | s(bool,X16) = s(bool,f(s(bool,X15))) | s(bool,'T_0') = s(bool,X15)) ) | $spl154),
  inference(superposition,[],[f168,f29890])).
fof(f30409,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(subsumption_resolution,[],[f30221,f112])).
fof(f30221,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,f(s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) ) | $spl154),
  inference(superposition,[],[f124,f29890])).
fof(f30318,plain,(
  ( ! [X7] : (p(s(bool,f(s(bool,X7)))) | s(bool,'T_0') = s(bool,X7)) ) | $spl154),
  inference(trivial_inequality_removal,[],[f30219])).
fof(f30219,plain,(
  ( ! [X7] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,f(s(bool,X7)))) | s(bool,'T_0') = s(bool,X7)) ) | $spl154),
  inference(superposition,[],[f120,f29890])).
fof(f30404,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X81),s('type.num.num','const.num.|48|_0'))) | s(bool,X80) = s(bool,f(s(bool,X79)))) ) | $spl154),
  inference(subsumption_resolution,[],[f30208,f176])).
fof(f30208,plain,(
  ( ! [X80,X81,X79] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X81),s('type.num.num','const.num.|48|_0'))) | s(bool,X80) = s(bool,f(s(bool,X79)))) ) | $spl154),
  inference(superposition,[],[f29890,f5275])).
fof(f30403,plain,(
  ( ! [X78,X76] : (s(bool,'T_0') = s(bool,X76) | s(bool,X78) = s(bool,f(s(bool,X76))) | s(bool,'F_0') = s(bool,X78)) ) | $spl154),
  inference(subsumption_resolution,[],[f30207,f177])).
fof(f30207,plain,(
  ( ! [X78,X76,X77] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X77),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X76) | s(bool,X78) = s(bool,f(s(bool,X76))) | s(bool,'F_0') = s(bool,X78)) ) | $spl154),
  inference(superposition,[],[f29890,f5275])).
fof(f30337,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl154),
  inference(condensation,[],[f30336])).
fof(f30336,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f30184])).
fof(f30184,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,f(s(bool,X20))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl154),
  inference(superposition,[],[f29890,f419])).
fof(f30345,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num',X1))),s('type.num.num',X0)))) ) | $spl154),
  inference(condensation,[],[f30344])).
fof(f30344,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f30125])).
fof(f30125,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) ) | $spl154),
  inference(superposition,[],[f29890,f893])).
fof(f30088,plain,(
  ( ! [X51] : (s(bool,X51) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X51)) ) | $spl154),
  inference(subsumption_resolution,[],[f29977,f112])).
fof(f29977,plain,(
  ( ! [X51] : (~p(s(bool,'T_0')) | s(bool,X51) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X51)) ) | $spl154),
  inference(superposition,[],[f1673,f27291])).
fof(f30030,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(condensation,[],[f30029])).
fof(f30029,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f29925])).
fof(f29925,plain,(
  ( ! [X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f30054,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f29911,f176])).
fof(f29911,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f873])).
fof(f30053,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(subsumption_resolution,[],[f29909,f176])).
fof(f29909,plain,(
  ( ! [X42] : (s(bool,'T_0') = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f872])).
fof(f30052,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(subsumption_resolution,[],[f29906,f176])).
fof(f29906,plain,(
  ( ! [X39] : (s(bool,'T_0') = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl154),
  inference(superposition,[],[f27291,f871])).
fof(f30048,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(subsumption_resolution,[],[f29901,f176])).
fof(f29901,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl154),
  inference(superposition,[],[f27291,f419])).
fof(f29890,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl154),
  inference(superposition,[],[f27291,f116])).
fof(f29888,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl154),
  inference(superposition,[],[f27291,f1579])).
fof(f29887,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl154),
  inference(superposition,[],[f27291,f5275])).
fof(f29757,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) )),
  inference(condensation,[],[f29756])).
fof(f29756,plain,(
  ( ! [X282,X285,X283,X284,X286] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283))) | s(bool,X282) = s(bool,X284) | s(bool,'F_0') = s(bool,X284) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X285),s('type.num.num',X283))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X283))),s('type.num.num',X285))),s('type.num.num',X283)))) )),
  inference(subsumption_resolution,[],[f29357,f2587])).
fof(f29357,plain,(
  ( ! [X282,X285,X283,X284,X286] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283))) | s(bool,X282) = s(bool,X284) | s(bool,'F_0') = s(bool,X284) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X285),s('type.num.num',X283))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X283))),s('type.num.num',X285))),s('type.num.num',X283))) | s(bool,'T_0') = s(bool,X282)) )),
  inference(superposition,[],[f2587,f893])).
fof(f29082,plain,(
  ( ! [X156,X152,X155,X153] : (s(bool,X155) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X152,X153,bool,bool)))) | s(bool,'T_0') = s(bool,X155) | s(bool,X156) = s(bool,sK4(X152,X153,bool,bool)) | s(bool,'F_0') = s(bool,X156)) )),
  inference(forward_demodulation,[],[f28068,f216])).
fof(f28068,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(bool,X155) != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num',X154),s('type.num.num','const.num.|48|_0'))))) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X152,X153,bool,bool)))) | s(bool,'T_0') = s(bool,X155) | s(bool,X156) = s(bool,sK4(X152,X153,bool,bool)) | s(bool,'F_0') = s(bool,X156)) )),
  inference(superposition,[],[f783,f5275])).
fof(f27132,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(X153,f(s(bool,X152))) != s(X153,g(s(bool,X152))) | s(fun(bool,X153),X154) = s(fun(bool,X153),X155) | s(bool,'T_0') = s(bool,sK4(X154,X155,X153,bool)) | s(bool,X156) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X157),s('type.num.num','const.num.|48|_0'))) | s(bool,X152) = s(bool,X156)) )),
  inference(subsumption_resolution,[],[f25998,f176])).
fof(f25998,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(X153,f(s(bool,X152))) != s(X153,g(s(bool,X152))) | s(fun(bool,X153),X154) = s(fun(bool,X153),X155) | s(bool,'T_0') = s(bool,sK4(X154,X155,X153,bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X156) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X157),s('type.num.num','const.num.|48|_0'))) | s(bool,X152) = s(bool,X156)) )),
  inference(superposition,[],[f777,f5275])).
fof(f25974,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,X40) != s(bool,X41) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X41) = s(bool,X42) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num','const.num.|48|_0'))) | s(bool,X40) = s(bool,X43)) )),
  inference(superposition,[],[f22283,f5275])).
fof(f25973,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,X35) != s(bool,X36) | s(bool,X37) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X36) = s(bool,X37) | s(bool,X38) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))) | s(bool,X35) = s(bool,X38)) )),
  inference(superposition,[],[f8058,f5275])).
fof(f25972,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X31) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X32),s('type.num.num','const.num.|48|_0'))) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0'))) | s(bool,X30) = s(bool,X33)) )),
  inference(superposition,[],[f5609,f5275])).
fof(f25969,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s(bool,X15) != s(bool,X16) | s(bool,X17) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X19),s('type.num.num','const.num.|48|_0'))) | s(bool,X15) = s(bool,X18)) )),
  inference(superposition,[],[f1392,f5275])).
fof(f25968,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s(bool,X10) != s(bool,X11) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num','const.num.|48|_0'))) | s(bool,X10) = s(bool,X13)) )),
  inference(superposition,[],[f706,f5275])).
fof(f25967,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,X8) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0'))) | s(bool,X7) = s(bool,X8)) )),
  inference(superposition,[],[f176,f5275])).
fof(f27086,plain,(
  ( ! [X341,X337,X339,X340,X336,X338] : (s(X337,f(s(bool,X336))) != s(X337,g(s(bool,X336))) | s(fun(bool,X337),X338) = s(fun(bool,X337),X339) | s(bool,X340) = s(bool,sK4(X338,X339,X337,bool)) | s(bool,'T_0') = s(bool,X340) | s(bool,X336) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X341),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f25910,f176])).
fof(f25910,plain,(
  ( ! [X341,X337,X339,X340,X336,X338] : (s(X337,f(s(bool,X336))) != s(X337,g(s(bool,X336))) | s(fun(bool,X337),X338) = s(fun(bool,X337),X339) | s(bool,X340) = s(bool,sK4(X338,X339,X337,bool)) | s(bool,'T_0') = s(bool,X340) | s(bool,X336) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X341),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f775,f5275])).
fof(f25406,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X4)) )),
  inference(superposition,[],[f5275,f5275])).
fof(f26593,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,X219) = s(bool,X220) | s(bool,X220) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X221),s('type.num.num','const.num.|48|_0'))) | s(bool,X222) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X219) = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f25381,f176])).
fof(f25381,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,X219) = s(bool,X220) | s(bool,X220) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X221),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X222) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X219) = s(bool,X222)) )),
  inference(superposition,[],[f5275,f873])).
fof(f26592,plain,(
  ( ! [X218,X216,X215,X217] : (s(bool,X215) = s(bool,X216) | s(bool,X216) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X217),s('type.num.num','const.num.|48|_0'))) | s(bool,X218) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X215) = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f25380,f176])).
fof(f25380,plain,(
  ( ! [X218,X216,X215,X217] : (s(bool,X215) = s(bool,X216) | s(bool,X216) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X217),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X218) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X215) = s(bool,X218)) )),
  inference(superposition,[],[f5275,f872])).
fof(f26591,plain,(
  ( ! [X212,X213,X211,X214] : (s(bool,X211) = s(bool,X212) | s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X213),s('type.num.num','const.num.|48|_0'))) | s(bool,X214) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X211) = s(bool,X214)) )),
  inference(subsumption_resolution,[],[f25379,f176])).
fof(f25379,plain,(
  ( ! [X212,X213,X211,X214] : (s(bool,X211) = s(bool,X212) | s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X213),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X214) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X211) = s(bool,X214)) )),
  inference(superposition,[],[f5275,f871])).
fof(f26590,plain,(
  ( ! [X204,X202,X200,X199,X203,X201] : (s(bool,X199) = s(bool,X200) | s(bool,X200) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X201),s('type.num.num','const.num.|48|_0'))) | s(bool,X202) = s(bool,X203) | s(bool,X199) = s(bool,X203) | s(bool,X202) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(subsumption_resolution,[],[f25377,f176])).
fof(f25377,plain,(
  ( ! [X204,X202,X200,X199,X203,X201] : (s(bool,X199) = s(bool,X200) | s(bool,X200) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X201),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X202) = s(bool,X203) | s(bool,X199) = s(bool,X203) | s(bool,X202) = s(bool,X204) | s(bool,'T_0') = s(bool,X204)) )),
  inference(superposition,[],[f5275,f419])).
fof(f24628,plain,(
  ( ! [X182,X180,X184,X183,X179] : (s(bool,X179) != s(bool,X180) | s(bool,'T_0') = s(bool,X180) | s(bool,X182) = s(bool,X183) | s(bool,X179) = s(bool,X183) | s(bool,X182) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) )),
  inference(subsumption_resolution,[],[f24465,f177])).
fof(f24465,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s(bool,X179) != s(bool,X180) | s(bool,'T_0') = s(bool,X180) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X181),s('type.num.num','const.num.|48|_0'))) | s(bool,X182) = s(bool,X183) | s(bool,X179) = s(bool,X183) | s(bool,X182) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) )),
  inference(superposition,[],[f5414,f419])).
fof(f24362,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f24250,f176])).
fof(f24250,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f22283,f419])).
fof(f24143,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(X41,f(s(bool,X40))) != s(X41,g(s(bool,X40))) | s(fun(bool,X41),X42) = s(fun(bool,X41),X43) | s(bool,X44) = s(bool,sK4(X42,X43,X41,bool)) | s(bool,'T_0') = s(bool,X44) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X40) = s(bool,X45)) )),
  inference(superposition,[],[f775,f873])).
fof(f24142,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(X35,f(s(bool,X34))) != s(X35,g(s(bool,X34))) | s(fun(bool,X35),X36) = s(fun(bool,X35),X37) | s(bool,X38) = s(bool,sK4(X36,X37,X35,bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X34) = s(bool,X39)) )),
  inference(superposition,[],[f775,f872])).
fof(f24141,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(X29,f(s(bool,X28))) != s(X29,g(s(bool,X28))) | s(fun(bool,X29),X30) = s(fun(bool,X29),X31) | s(bool,X32) = s(bool,sK4(X30,X31,X29,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X28) = s(bool,X33)) )),
  inference(superposition,[],[f775,f871])).
fof(f24139,plain,(
  ( ! [X14,X12,X19,X17,X15,X13,X18,X16] : (s(X13,f(s(bool,X12))) != s(X13,g(s(bool,X12))) | s(fun(bool,X13),X14) = s(fun(bool,X13),X15) | s(bool,X16) = s(bool,sK4(X14,X15,X13,bool)) | s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,X18) | s(bool,X12) = s(bool,X18) | s(bool,X17) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f775,f419])).
fof(f24080,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f23968,f176])).
fof(f23968,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f8058,f419])).
fof(f23892,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f23778,f176])).
fof(f23778,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,X51) != s(bool,X52) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X52) = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f1392,f419])).
fof(f22464,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X23) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X24) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X22) = s(bool,X24)) )),
  inference(superposition,[],[f22201,f873])).
fof(f22460,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,X6) != s(bool,X7) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X8) = s(bool,X9) | s(bool,X6) = s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f22201,f419])).
fof(f21385,plain,(
  ( ! [X288,X287,X289,X286] : (s(X288,f(s(bool,'T_0'))) != s(X288,g(s(bool,'T_0'))) | s(fun(bool,X288),X286) = s(fun(bool,X288),X287) | s(bool,X289) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X289) = s(bool,sK4(X286,X287,X288,bool))) )),
  inference(superposition,[],[f169,f873])).
fof(f22254,plain,(
  ( ! [X37,X38,X36] : (s(bool,'T_0') = s(bool,X37) | s(bool,X36) != s(bool,X37) | s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X36) = s(bool,X38)) )),
  inference(forward_demodulation,[],[f21254,f180])).
fof(f21254,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) != s(bool,X37) | s(bool,X37) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X36) = s(bool,X38)) )),
  inference(superposition,[],[f1370,f873])).
fof(f21244,plain,(
  ( ! [X310,X312,X309,X311] : (s(X311,f(s(bool,X312))) != s(X311,g(s(bool,X312))) | s(fun(bool,X311),X309) = s(fun(bool,X311),X310) | s(bool,X312) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,sK4(X309,X310,X311,bool))) )),
  inference(superposition,[],[f169,f873])).
fof(f22224,plain,(
  ( ! [X235,X236,X234] : (s(bool,X234) != s(bool,X235) | s(bool,X235) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X236),s('type.num.num','const.num.|48|_0'))) | s(bool,X234) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f21215,f176])).
fof(f21215,plain,(
  ( ! [X235,X236,X234] : (s(bool,X234) != s(bool,X235) | s(bool,X235) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X236),s('type.num.num','const.num.|48|_0'))) | s(bool,X234) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f5609,f873])).
fof(f22223,plain,(
  ( ! [X227,X225,X226] : (s(bool,X225) != s(bool,X226) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227) | s(bool,X225) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f21212,f176])).
fof(f21212,plain,(
  ( ! [X227,X225,X226] : (s(bool,X225) != s(bool,X226) | s(bool,X226) = s(bool,X227) | s(bool,'T_0') = s(bool,X227) | s(bool,X225) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f706,f873])).
fof(f22201,plain,(
  ( ! [X113] : (s(bool,'T_0') != s(bool,X113) | s(bool,X113) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200])).
fof(f22200,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') != s(bool,X113) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(forward_demodulation,[],[f21467,f180])).
fof(f21467,plain,(
  ( ! [X112,X113] : (s(bool,X113) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f21171])).
fof(f21171,plain,(
  ( ! [X112,X113] : (s(bool,X113) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X112) | s(bool,X113) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f1169,f873])).
fof(f21962,plain,(
  ( ! [X142,X141] : (s(bool,X142) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X142) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X141),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f20886,f176])).
fof(f20886,plain,(
  ( ! [X142,X141] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X142) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X142) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X141),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f873,f216])).
fof(f20820,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X28) = s(bool,X29) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X29) = s(bool,X30) | s(bool,X31) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X28) = s(bool,X31)) )),
  inference(superposition,[],[f873,f873])).
fof(f20816,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X9) = s(bool,X10) | s(bool,X11) = s(bool,X12) | s(bool,X8) = s(bool,X12) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f873,f419])).
fof(f21705,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21704])).
fof(f21704,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(duplicate_literal_removal,[],[f20692])).
fof(f20692,plain,(
  ( ! [X30,X28,X31,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X30) | s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f873,f419])).
fof(f19655,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) != s(bool,X40) | s(bool,X40) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X41) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X39) = s(bool,X41)) )),
  inference(superposition,[],[f7994,f872])).
fof(f19241,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X4) = s(bool,X7)) )),
  inference(superposition,[],[f872,f419])).
fof(f2219,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X6)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) )),
  inference(superposition,[],[f164,f117])).
fof(f3738,plain,(
  ( ! [X43,X44,X42] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))),s('type.num.num',X42))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X43) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(subsumption_resolution,[],[f3737,f112])).
fof(f3737,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))),s('type.num.num',X42))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X43) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f3714,f180])).
fof(f3714,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X43)))),s('type.num.num',X42))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X43) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num',X43)))) )),
  inference(superposition,[],[f2219,f1292])).
fof(f3732,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))),s('type.num.num',X6))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f3705,f112])).
fof(f3705,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))),s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2219,f229])).
fof(f15961,plain,(
  ( ! [X377,X379,X380,X382,X378,X381] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X378)))))),s('type.num.num',X377))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X378)))),s('type.num.num',X377))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X378) | s(bool,X380) = s(bool,X381) | s(bool,X381) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X377),s('type.num.num',X378))) | s(bool,X380) = s(bool,X382) | s(bool,'T_0') = s(bool,X382)) )),
  inference(subsumption_resolution,[],[f13750,f112])).
fof(f13750,plain,(
  ( ! [X377,X379,X380,X382,X378,X381] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X378)))))),s('type.num.num',X377))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X378)))),s('type.num.num',X377))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X378) | s(bool,X380) = s(bool,X381) | s(bool,X381) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X377),s('type.num.num',X378))) | s(bool,X380) = s(bool,X382) | s(bool,'T_0') = s(bool,X382)) )),
  inference(superposition,[],[f2219,f419])).
fof(f14094,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f419])).
fof(f16148,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f14087,f229])).
fof(f14087,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f419])).
fof(f13753,plain,(
  ( ! [X399,X401,X403,X398,X400,X402] : (s(X400,f(s(bool,'T_0'))) != s(X400,g(s(bool,'T_0'))) | s(fun(bool,X400),X398) = s(fun(bool,X400),X399) | s(bool,X401) = s(bool,X402) | s(bool,X402) = s(bool,sK4(X398,X399,X400,bool)) | s(bool,X401) = s(bool,X403) | s(bool,'T_0') = s(bool,X403)) )),
  inference(superposition,[],[f169,f419])).
fof(f15933,plain,(
  ( ! [X146,X144,X142,X145,X143] : (s(bool,X142) = s(bool,X143) | s(bool,'F_0') = s(bool,X143) | s(bool,X144) = s(bool,X145) | s(bool,X142) = s(bool,X145) | s(bool,X144) = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) )),
  inference(subsumption_resolution,[],[f13698,f112])).
fof(f13698,plain,(
  ( ! [X146,X144,X142,X145,X143] : (~p(s(bool,'T_0')) | s(bool,X142) = s(bool,X143) | s(bool,'F_0') = s(bool,X143) | s(bool,X144) = s(bool,X145) | s(bool,X142) = s(bool,X145) | s(bool,X144) = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) )),
  inference(superposition,[],[f1673,f419])).
fof(f15927,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f13676,f112])).
fof(f13676,plain,(
  ( ! [X30,X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X31)) | s(bool,X30) = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f168,f419])).
fof(f15926,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f13672,f112])).
fof(f13672,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,X12) = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f124,f419])).
fof(f13645,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X41) != s(bool,X42) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X43) = s(bool,X44) | s(bool,X41) = s(bool,X44) | s(bool,X43) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f7994,f419])).
fof(f13644,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,X35) != s(bool,X36) | s(bool,X36) = s(bool,X37) | s(bool,'F_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X35) = s(bool,X39) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f2587,f419])).
fof(f13643,plain,(
  ( ! [X30,X33,X31,X34,X32] : (s(bool,X30) != s(bool,X31) | s(bool,X31) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X32) = s(bool,X33) | s(bool,X30) = s(bool,X33) | s(bool,X32) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f1370,f419])).
fof(f13639,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,X4) != s(bool,X5) | p(s(bool,X5)) | s(bool,X6) = s(bool,X7) | s(bool,X4) = s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f120,f419])).
fof(f13636,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (s(X417,f(s(bool,X418))) != s(X417,g(s(bool,X418))) | s(fun(bool,X417),X415) = s(fun(bool,X417),X416) | s(bool,X418) = s(bool,X419) | s(bool,'T_0') = s(bool,sK4(X415,X416,X417,bool)) | s(bool,X419) = s(bool,X420) | s(bool,'T_0') = s(bool,X420)) )),
  inference(superposition,[],[f169,f419])).
fof(f15885,plain,(
  ( ! [X280,X282,X281,X283,X284] : (s(bool,X280) != s(bool,X281) | s(bool,X281) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0'))) | s(bool,X280) = s(bool,X283) | s(bool,X283) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(subsumption_resolution,[],[f13607,f176])).
fof(f13607,plain,(
  ( ! [X280,X282,X281,X283,X284] : (s(bool,X280) != s(bool,X281) | s(bool,X281) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X282),s('type.num.num','const.num.|48|_0'))) | s(bool,X280) = s(bool,X283) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X283) = s(bool,X284) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f5609,f419])).
fof(f15884,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X265) != s(bool,X266) | s(bool,X266) = s(bool,X267) | s(bool,'T_0') = s(bool,X267) | s(bool,X265) = s(bool,X268) | s(bool,X268) = s(bool,X269) | s(bool,'T_0') = s(bool,X269)) )),
  inference(subsumption_resolution,[],[f13604,f176])).
fof(f13604,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X265) != s(bool,X266) | s(bool,X266) = s(bool,X267) | s(bool,'T_0') = s(bool,X267) | s(bool,X265) = s(bool,X268) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X268) = s(bool,X269) | s(bool,'T_0') = s(bool,X269)) )),
  inference(superposition,[],[f706,f419])).
fof(f14499,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl18),
  inference(condensation,[],[f14498])).
fof(f14498,plain,(
  ( ! [X180,X178,X181,X179] : (s(bool,X179) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X178) | s(bool,X179) = s(bool,X180) | s(bool,X180) = s(bool,X181) | s(bool,'T_0') = s(bool,X181)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f13583])).
fof(f13583,plain,(
  ( ! [X180,X178,X181,X179] : (s(bool,X179) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X178) | s(bool,X179) = s(bool,X180) | s(bool,'T_0') = s(bool,X178) | s(bool,X180) = s(bool,X181) | s(bool,'T_0') = s(bool,X181)) ) | $spl18),
  inference(superposition,[],[f3129,f419])).
fof(f14501,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f14500])).
fof(f14500,plain,(
  ( ! [X152,X151,X149,X153,X150] : (s(bool,X150) != s(bool,X151) | s(bool,'T_0') = s(bool,X149) | s(bool,'F_0') = s(bool,X151) | s(bool,X150) = s(bool,X152) | s(bool,X152) = s(bool,X153) | s(bool,'T_0') = s(bool,X153)) )),
  inference(duplicate_literal_removal,[],[f13577])).
fof(f13577,plain,(
  ( ! [X152,X151,X149,X153,X150] : (s(bool,X150) != s(bool,X151) | s(bool,'T_0') = s(bool,X149) | s(bool,'F_0') = s(bool,X151) | s(bool,X150) = s(bool,X152) | s(bool,'T_0') = s(bool,X149) | s(bool,X152) = s(bool,X153) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f1622,f419])).
fof(f14503,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f14502])).
fof(f14502,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,X103) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,X104) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(duplicate_literal_removal,[],[f13567])).
fof(f13567,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,X103) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,X104) | s(bool,'T_0') = s(bool,X102) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f1169,f419])).
fof(f13544,plain,(
  ( ! [X428,X424,X426,X423,X425,X427] : (s(X425,f(s(bool,X426))) != s(X425,g(s(bool,X426))) | s(fun(bool,X425),X423) = s(fun(bool,X425),X424) | s(bool,X427) = s(bool,sK4(X423,X424,X425,bool)) | s(bool,'T_0') = s(bool,X426) | s(bool,X427) = s(bool,X428) | s(bool,'T_0') = s(bool,X428)) )),
  inference(superposition,[],[f169,f419])).
fof(f15778,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f15777])).
fof(f15777,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f13459,f120])).
fof(f13459,plain,(
  ( ! [X24,X23,X21,X22,X20] : (p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X20) = s(bool,X22) | s(bool,X20) = s(bool,X23) | s(bool,'T_0') = s(bool,X21) | s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f165,f419])).
fof(f13360,plain,(
  ( ! [X428,X424,X426,X423,X425,X427] : (s(X425,f(s(bool,X426))) != s(X425,g(s(bool,X426))) | s(fun(bool,X425),X423) = s(fun(bool,X425),X424) | s(bool,X426) = s(bool,X427) | s(bool,'T_0') = s(bool,X427) | s(bool,X428) = s(bool,sK4(X423,X424,X425,bool)) | s(bool,'T_0') = s(bool,X428)) )),
  inference(superposition,[],[f169,f419])).
fof(f13042,plain,(
  ( ! [X21,X19,X17,X20,X18,X16] : (s(bool,X16) = s(bool,X17) | s(bool,X18) = s(bool,X19) | s(bool,X17) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X16) = s(bool,X21)) )),
  inference(superposition,[],[f419,f871])).
fof(f13040,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f419,f419])).
fof(f15292,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f15291])).
fof(f15291,plain,(
  ( ! [X167,X165,X163,X161,X166,X164,X162] : (s(bool,X161) = s(bool,X162) | s(bool,X162) = s(bool,X163) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,X166) | s(bool,X166) = s(bool,X167) | s(bool,'T_0') = s(bool,X167) | s(bool,X161) = s(bool,X165)) )),
  inference(duplicate_literal_removal,[],[f12858])).
fof(f12858,plain,(
  ( ! [X167,X165,X163,X161,X166,X164,X162] : (s(bool,X161) = s(bool,X162) | s(bool,X162) = s(bool,X163) | s(bool,'T_0') = s(bool,X163) | s(bool,'T_0') = s(bool,X164) | s(bool,'T_0') = s(bool,X164) | s(bool,X165) = s(bool,X166) | s(bool,X166) = s(bool,X167) | s(bool,'T_0') = s(bool,X167) | s(bool,X161) = s(bool,X165)) )),
  inference(superposition,[],[f419,f419])).
fof(f11917,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0))),s('type.num.num',sK2)))),
  inference(forward_demodulation,[],[f11890,f2245])).
fof(f11890,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))),s('type.num.num',sK0))),s('type.num.num',sK2)))),
  inference(superposition,[],[f768,f2245])).
fof(f11876,plain,(
  s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))),
  inference(superposition,[],[f768,f2245])).
fof(f11843,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK1)))),
  inference(superposition,[],[f11328,f2245])).
fof(f11799,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0)))),
  inference(superposition,[],[f11066,f2245])).
fof(f11756,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',sK1))),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f892,f2245])).
fof(f11753,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))),s('type.num.num',sK0))),s('type.num.num',sK2)))) )),
  inference(superposition,[],[f2245,f163])).
fof(f11339,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',sK1))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f892,f163])).
fof(f11329,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))),s('type.num.num',X1))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f892,f715])).
fof(f11328,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f892,f115])).
fof(f11076,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.num.num',sK0))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f891,f163])).
fof(f11067,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',X1))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f891,f715])).
fof(f11066,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f891,f115])).
fof(f181,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))),
  inference(unit_resulting_resolution,[],[f109,f121])).
fof(f872,plain,(
  ( ! [X37,X36] : (s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f849,f112])).
fof(f849,plain,(
  ( ! [X37,X36] : (~p(s(bool,'T_0')) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f707,f181])).
fof(f892,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK1))),s('type.num.num',X2))),s('type.num.num',sK1)))) )),
  inference(subsumption_resolution,[],[f879,f112])).
fof(f879,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',sK1))),s('type.num.num',X2))),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f119,f181])).
fof(f7119,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f872,f872])).
fof(f7424,plain,(
  ( ! [X212,X215,X213,X214] : (s(X214,f(s(bool,X215))) != s(X214,g(s(bool,X215))) | s(fun(bool,X214),X212) = s(fun(bool,X214),X213) | s(bool,X215) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,sK4(X212,X213,X214,bool))) )),
  inference(superposition,[],[f169,f872])).
fof(f7526,plain,(
  ( ! [X202,X200,X203,X201] : (s(X202,f(s(bool,'T_0'))) != s(X202,g(s(bool,'T_0'))) | s(fun(bool,X202),X200) = s(fun(bool,X202),X201) | s(bool,X203) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X203) = s(bool,sK4(X200,X201,X202,bool))) )),
  inference(superposition,[],[f169,f872])).
fof(f7808,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') = s(bool,X7) | s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7)) )),
  inference(forward_demodulation,[],[f7120,f180])).
fof(f7120,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X4) = s(bool,X7)) )),
  inference(superposition,[],[f872,f871])).
fof(f7818,plain,(
  ( ! [X85,X86] : (s(bool,X86) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X86) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f7163,f176])).
fof(f7163,plain,(
  ( ! [X85,X86] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X86) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X86) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f872,f216])).
fof(f7994,plain,(
  ( ! [X61] : (s(bool,'T_0') != s(bool,X61) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993])).
fof(f8017,plain,(
  ( ! [X144,X142,X143] : (s(bool,X142) != s(bool,X143) | s(bool,X143) = s(bool,X144) | s(bool,'T_0') = s(bool,X144) | s(bool,X142) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(subsumption_resolution,[],[f7399,f176])).
fof(f7399,plain,(
  ( ! [X144,X142,X143] : (s(bool,X142) != s(bool,X143) | s(bool,X143) = s(bool,X144) | s(bool,'T_0') = s(bool,X144) | s(bool,X142) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f706,f872])).
fof(f8018,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) != s(bool,X152) | s(bool,X152) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X153),s('type.num.num','const.num.|48|_0'))) | s(bool,X151) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(subsumption_resolution,[],[f7402,f176])).
fof(f7402,plain,(
  ( ! [X152,X151,X153] : (s(bool,X151) != s(bool,X152) | s(bool,X152) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X153),s('type.num.num','const.num.|48|_0'))) | s(bool,X151) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f5609,f872])).
fof(f8038,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) != s(bool,X21) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X20) = s(bool,X22)) )),
  inference(forward_demodulation,[],[f7431,f180])).
fof(f7431,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,X21) | s(bool,X21) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X20) = s(bool,X22)) )),
  inference(superposition,[],[f1370,f872])).
fof(f8141,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,X4)) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)) )),
  inference(subsumption_resolution,[],[f8093,f124])).
fof(f8093,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,X4)) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f876,f1789])).
fof(f7993,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') != s(bool,X61) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f7585,f180])).
fof(f7585,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(duplicate_literal_removal,[],[f7368])).
fof(f7368,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f1169,f872])).
fof(f5414,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1169,f1293])).
fof(f5633,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f5632,f112])).
fof(f5632,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f5379,f180])).
fof(f5379,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f707,f1293])).
fof(f5298,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1293,f1293])).
fof(f873,plain,(
  ( ! [X45,X46] : (s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f852,f112])).
fof(f852,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f707,f182])).
fof(f962,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f871,f871])).
fof(f963,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f871,f229])).
fof(f1094,plain,(
  ( ! [X88,X87,X85,X86] : (s(X87,f(s(bool,X88))) != s(X87,g(s(bool,X88))) | s(fun(bool,X87),X85) = s(fun(bool,X87),X86) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,sK4(X85,X86,X87,bool))) )),
  inference(superposition,[],[f169,f871])).
fof(f1139,plain,(
  ( ! [X78,X76,X77,X75] : (s(X77,f(s(bool,'T_0'))) != s(X77,g(s(bool,'T_0'))) | s(fun(bool,X77),X75) = s(fun(bool,X77),X76) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X78) = s(bool,sK4(X75,X76,X77,bool))) )),
  inference(superposition,[],[f169,f871])).
fof(f1169,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f1147])).
fof(f1147,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f871])).
fof(f1293,plain,(
  ( ! [X35,X34] : (s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f982,f176])).
fof(f982,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f871,f216])).
fof(f1369,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f1083,f176])).
fof(f1083,plain,(
  ( ! [X61,X62,X60] : (s(bool,X60) != s(bool,X61) | s(bool,X61) = s(bool,X62) | s(bool,'T_0') = s(bool,X62) | s(bool,X60) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f706,f871])).
fof(f1370,plain,(
  ( ! [X65] : (s(bool,'T_0') != s(bool,X65) | s(bool,X65) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(subsumption_resolution,[],[f1085,f176])).
fof(f1085,plain,(
  ( ! [X65] : (s(bool,'T_0') != s(bool,X65) | s(bool,X65) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f176,f871])).
fof(f1794,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X0) = s(bool,X2)) )),
  inference(superposition,[],[f1370,f871])).
fof(f3131,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) != s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X47) = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f3054,f176])).
fof(f3054,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) != s(bool,X48) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X49) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X47) = s(bool,X49)) )),
  inference(superposition,[],[f1622,f871])).
fof(f2587,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X10)) )),
  inference(superposition,[],[f176,f1579])).
fof(f2585,plain,(
  ( ! [X4,X2,X5,X3] : (s(bool,X2) != s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X2) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) )),
  inference(superposition,[],[f706,f1579])).
fof(f2408,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f1579,f1579])).
fof(f1622,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f1169,f1292])).
fof(f1580,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1292,f871])).
fof(f1579,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f1292,f1292])).
fof(f826,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0'))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f812,f114])).
fof(f812,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,'F_0')) | s(bool,X43) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X42),s('type.num.num','const.num.|48|_0'))) | s(bool,X43) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f487,f216])).
fof(f777,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK4(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f169,f229])).
fof(f775,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK4(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f169,f229])).
fof(f768,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f163,f715])).
fof(f728,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f706,f116])).
fof(f715,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f163,f115])).
fof(f706,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f500,f112])).
fof(f500,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f124,f229])).
fof(f487,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,X4)) | s(bool,X3) != s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f120,f229])).
fof(f319,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f316,f114])).
fof(f316,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f278,f216])).
fof(f278,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f266,f114])).
fof(f266,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f165,f116])).
fof(f177,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(unit_resulting_resolution,[],[f158,f120])).
fof(f165,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f158,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.prim_rec.NOT_LESS_|48|')).
fof(f115,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))),
  file('thm.arithmetic.MOD_TIMES_SUB','thm.arithmetic.MULT|split|0')).
fof(f109,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f78])).
fof(f52559,plain,(
  $false | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36657,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f42488,f42365,f42368,f42510,f42511,f42512,f42513,f41552,f41319,f41230,f42742,f42703,f42498,f42489,f42448,f42366,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291,f29081,f52424,f52436,f52438,f52440,f52442,f52444,f52446,f52448,f52450,f52458,f52460,f52462,f52464,f52466,f52468,f52470,f52472,f52477,f52483,f52485,f52487,f52489,f52491,f52493,f52495,f52497,f52510,f52519,f52525,f52529,f52552,f52558])).
fof(f52558,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52557,f52424])).
fof(f52557,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f124,f52424])).
fof(f52552,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(condensation,[],[f52551])).
fof(f52551,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52550,f871])).
fof(f52550,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f1392,f52424])).
fof(f52529,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52528,f52424])).
fof(f52528,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f5609,f52424])).
fof(f52525,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(condensation,[],[f52524])).
fof(f52524,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52523,f872])).
fof(f52523,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f8058,f52424])).
fof(f52519,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(condensation,[],[f52518])).
fof(f52518,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52517,f52424])).
fof(f52517,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f22283,f52424])).
fof(f52510,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f26139,f52424])).
fof(f52497,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52496,f112])).
fof(f52496,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f8135,f52424])).
fof(f52495,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52494,f112])).
fof(f52494,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11922,f52424])).
fof(f52493,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52492,f112])).
fof(f52492,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11783,f52424])).
fof(f52491,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52490,f112])).
fof(f52490,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11871,f52424])).
fof(f52489,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52488,f112])).
fof(f52488,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11363,f52424])).
fof(f52487,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52486,f112])).
fof(f52486,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11826,f52424])).
fof(f52485,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52484,f112])).
fof(f52484,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11098,f52424])).
fof(f52483,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52482,f112])).
fof(f52482,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f8125,f52424])).
fof(f52477,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f32597,f52424])).
fof(f52472,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52471,f112])).
fof(f52471,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11925,f52424])).
fof(f52470,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52469,f112])).
fof(f52469,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f3726,f52424])).
fof(f52468,plain,(
  ( ! [X43,X41,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52467,f112])).
fof(f52467,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11786,f52424])).
fof(f52466,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52465,f112])).
fof(f52465,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11101,f52424])).
fof(f52464,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52463,f112])).
fof(f52463,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11829,f52424])).
fof(f52462,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52461,f112])).
fof(f52461,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11366,f52424])).
fof(f52460,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52459,f112])).
fof(f52459,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11874,f52424])).
fof(f52458,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52457,f112])).
fof(f52457,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f3725,f52424])).
fof(f52450,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52449,f112])).
fof(f52449,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11923,f52424])).
fof(f52448,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52447,f112])).
fof(f52447,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f3255,f52424])).
fof(f52446,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52445,f112])).
fof(f52445,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11784,f52424])).
fof(f52444,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52443,f112])).
fof(f52443,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11364,f52424])).
fof(f52442,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52441,f112])).
fof(f52441,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11872,f52424])).
fof(f52440,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52439,f112])).
fof(f52439,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11099,f52424])).
fof(f52438,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52437,f112])).
fof(f52437,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f11827,f52424])).
fof(f52436,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52435,f112])).
fof(f52435,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl18 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f3254,f52424])).
fof(f42366,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f42448,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl178),
  inference(condensation,[],[f42447])).
fof(f42447,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl178),
  inference(duplicate_literal_removal,[],[f42304])).
fof(f42304,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f42489,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,f(s(bool,X114))) | s(bool,X114) = s(bool,X115) | s(bool,'F_0') = s(bool,X115)) ) | $spl178),
  inference(subsumption_resolution,[],[f42339,f176])).
fof(f42339,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,f(s(bool,X114))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X114) = s(bool,X115) | s(bool,'F_0') = s(bool,X115)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f42498,plain,(
  ( ! [X134,X133] : (s(bool,X133) != s(bool,f(s(bool,'F_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl178),
  inference(subsumption_resolution,[],[f42355,f177])).
fof(f42355,plain,(
  ( ! [X134,X132,X133] : (s(bool,X133) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X132),s('type.num.num','const.num.|48|_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f42513,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f42389,f176])).
fof(f42389,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f873])).
fof(f42512,plain,(
  ( ! [X64,X65] : (s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(subsumption_resolution,[],[f42387,f176])).
fof(f42387,plain,(
  ( ! [X64,X65] : (s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f872])).
fof(f42511,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f42384,f176])).
fof(f42384,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f871])).
fof(f42510,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl178),
  inference(subsumption_resolution,[],[f42379,f176])).
fof(f42379,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f42368,plain,(
  ( ! [X10,X11] : (s(bool,X11) != s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl178),
  inference(superposition,[],[f29081,f116])).
fof(f42365,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f42488,plain,(
  ( ! [X111,X112,X113] : (s(bool,X111) != s(bool,f(s(bool,X111))) | s(bool,X112) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X113),s('type.num.num','const.num.|48|_0'))) | s(bool,X111) = s(bool,X112)) ) | $spl178),
  inference(subsumption_resolution,[],[f42338,f176])).
fof(f42338,plain,(
  ( ! [X111,X112,X113] : (s(bool,X111) != s(bool,f(s(bool,X111))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X112) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X113),s('type.num.num','const.num.|48|_0'))) | s(bool,X111) = s(bool,X112)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36637,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(forward_demodulation,[],[f36466,f216])).
fof(f36466,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl178),
  inference(unit_resulting_resolution,[],[f177,f29081])).
fof(f36465,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(unit_resulting_resolution,[],[f176,f29081])).
fof(f36634,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36469])).
fof(f36469,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(superposition,[],[f29081,f116])).
fof(f36641,plain,(
  ( ! [X9] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl178),
  inference(forward_demodulation,[],[f36629,f216])).
fof(f36629,plain,(
  ( ! [X10,X9] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36474])).
fof(f36474,plain,(
  ( ! [X10,X9] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl178),
  inference(superposition,[],[f29081,f319])).
fof(f36616,plain,(
  ( ! [X50,X49] : (s(bool,X50) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36486])).
fof(f36486,plain,(
  ( ! [X50,X49] : (s(bool,X50) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X49)) ) | $spl178),
  inference(superposition,[],[f29081,f871])).
fof(f36615,plain,(
  ( ! [X57,X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36490])).
fof(f36490,plain,(
  ( ! [X57,X58] : (s(bool,X58) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X57)) ) | $spl178),
  inference(superposition,[],[f29081,f872])).
fof(f36614,plain,(
  ( ! [X64,X63] : (s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36493])).
fof(f36493,plain,(
  ( ! [X64,X63] : (s(bool,X64) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X63)) ) | $spl178),
  inference(superposition,[],[f29081,f873])).
fof(f36647,plain,(
  ( ! [X70] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X70)) ) | $spl178),
  inference(forward_demodulation,[],[f36646,f216])).
fof(f36646,plain,(
  ( ! [X70,X71] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X70)) ) | $spl178),
  inference(subsumption_resolution,[],[f36497,f1169])).
fof(f36497,plain,(
  ( ! [X70,X71] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X71),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X70) | s(bool,X70) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(superposition,[],[f29081,f1293])).
fof(f36651,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(forward_demodulation,[],[f36650,f216])).
fof(f36650,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) | $spl178),
  inference(condensation,[],[f36649])).
fof(f36649,plain,(
  ( ! [X83,X84,X82] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X82) | s(bool,X82) = s(bool,X84)) ) | $spl178),
  inference(subsumption_resolution,[],[f36504,f706])).
fof(f36504,plain,(
  ( ! [X83,X84,X82] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X82) | s(bool,X82) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36654,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') != s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(condensation,[],[f36653])).
fof(f36653,plain,(
  ( ! [X85,X86] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X85) | s(bool,X85) = s(bool,X86)) ) | $spl178),
  inference(subsumption_resolution,[],[f36505,f826])).
fof(f36505,plain,(
  ( ! [X87,X85,X86] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X85) | s(bool,X86) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X87),s('type.num.num','const.num.|48|_0'))) | s(bool,X85) = s(bool,X86)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36657,plain,(
  ( ! [X96] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl18 | $spl178)),
  inference(forward_demodulation,[],[f36656,f216])).
fof(f36656,plain,(
  ( ! [X97,X96] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl18 | $spl178)),
  inference(subsumption_resolution,[],[f36509,f3129])).
fof(f36509,plain,(
  ( ! [X97,X96] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X96) | s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(superposition,[],[f29081,f7818])).
fof(f36675,plain,(
  ( ! [X136] : (s(bool,X136) != s(bool,f(s(bool,'F_0'))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36532,f177])).
fof(f36532,plain,(
  ( ! [X136,X135] : (s(bool,X136) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X135),s('type.num.num','const.num.|48|_0'))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(superposition,[],[f29081,f21962])).
fof(f36677,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(subsumption_resolution,[],[f36533,f177])).
fof(f36533,plain,(
  ( ! [X137] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X137),s('type.num.num','const.num.|48|_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f216])).
fof(f36679,plain,(
  ( ! [X139] : (s(bool,X139) != s(bool,f(s(bool,'F_0'))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36534,f177])).
fof(f36534,plain,(
  ( ! [X138,X139] : (s(bool,X139) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X138),s('type.num.num','const.num.|48|_0'))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(superposition,[],[f29081,f7818])).
fof(f36681,plain,(
  ( ! [X141] : (s(bool,X141) != s(bool,f(s(bool,'F_0'))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36535,f177])).
fof(f36535,plain,(
  ( ! [X140,X141] : (s(bool,X141) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X140),s('type.num.num','const.num.|48|_0'))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(superposition,[],[f29081,f1293])).
fof(f36691,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36690])).
fof(f36690,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36577,f116])).
fof(f36577,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f116])).
fof(f36694,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36693])).
fof(f36693,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(condensation,[],[f36692])).
fof(f36692,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36579,f229])).
fof(f36579,plain,(
  ( ! [X8,X7] : (s(bool,X7) != s(bool,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f229])).
fof(f36697,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36696])).
fof(f36696,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(condensation,[],[f36695])).
fof(f36695,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl178),
  inference(subsumption_resolution,[],[f36580,f229])).
fof(f36580,plain,(
  ( ! [X10,X9] : (s(bool,X9) != s(bool,X10) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl178),
  inference(superposition,[],[f29081,f229])).
fof(f36700,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl178),
  inference(condensation,[],[f36699])).
fof(f36699,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl178),
  inference(condensation,[],[f36698])).
fof(f36698,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl178),
  inference(subsumption_resolution,[],[f36586,f229])).
fof(f36586,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f36705,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36704])).
fof(f36704,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(condensation,[],[f36703])).
fof(f36703,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36702])).
fof(f36702,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl178),
  inference(condensation,[],[f36701])).
fof(f36701,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl178),
  inference(subsumption_resolution,[],[f36587,f419])).
fof(f36587,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f36708,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl178),
  inference(condensation,[],[f36707])).
fof(f36707,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl178),
  inference(condensation,[],[f36706])).
fof(f36706,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,f(s(bool,'F_0'))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | $spl178),
  inference(subsumption_resolution,[],[f36588,f229])).
fof(f36588,plain,(
  ( ! [X39,X41,X38,X40] : (s(bool,X38) != s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,X40) = s(bool,f(s(bool,'F_0'))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41) | s(bool,'T_0') = s(bool,X38)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f36713,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36712])).
fof(f36712,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(condensation,[],[f36711])).
fof(f36711,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36710])).
fof(f36710,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(condensation,[],[f36709])).
fof(f36709,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36589,f419])).
fof(f36589,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X42) != s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f36717,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36716])).
fof(f36716,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(forward_demodulation,[],[f36715,f180])).
fof(f36715,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(condensation,[],[f36714])).
fof(f36714,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') = s(bool,X49) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X48)) ) | $spl178),
  inference(subsumption_resolution,[],[f36591,f229])).
fof(f36591,plain,(
  ( ! [X48,X49] : (s(bool,X48) != s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X48)) ) | $spl178),
  inference(superposition,[],[f29081,f871])).
fof(f37125,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(condensation,[],[f37124])).
fof(f37124,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') = s(bool,X51) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36592,f871])).
fof(f36592,plain,(
  ( ! [X50,X51] : (s(bool,X50) != s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f871])).
fof(f36721,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36720])).
fof(f36720,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(forward_demodulation,[],[f36719,f181])).
fof(f36719,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(condensation,[],[f36718])).
fof(f36718,plain,(
  ( ! [X54,X55] : (s(bool,'T_0') = s(bool,X55) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X54)) ) | $spl178),
  inference(subsumption_resolution,[],[f36594,f229])).
fof(f36594,plain,(
  ( ! [X54,X55] : (s(bool,X54) != s(bool,X55) | s(bool,'T_0') = s(bool,X55) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X54)) ) | $spl178),
  inference(superposition,[],[f29081,f872])).
fof(f37121,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(condensation,[],[f37120])).
fof(f37120,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') = s(bool,X57) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36595,f872])).
fof(f36595,plain,(
  ( ! [X57,X56] : (s(bool,X56) != s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f872])).
fof(f36725,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(condensation,[],[f36724])).
fof(f36724,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl178),
  inference(forward_demodulation,[],[f36723,f182])).
fof(f36723,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(condensation,[],[f36722])).
fof(f36722,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') = s(bool,X59) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X58)) ) | $spl178),
  inference(subsumption_resolution,[],[f36596,f229])).
fof(f36596,plain,(
  ( ! [X59,X58] : (s(bool,X58) != s(bool,X59) | s(bool,'T_0') = s(bool,X59) | s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X58)) ) | $spl178),
  inference(superposition,[],[f29081,f873])).
fof(f36727,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(condensation,[],[f36726])).
fof(f36726,plain,(
  ( ! [X61,X60] : (s(bool,'T_0') = s(bool,X61) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36597,f873])).
fof(f36597,plain,(
  ( ! [X61,X60] : (s(bool,X60) != s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,X60) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f873])).
fof(f36728,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X66)) ) | $spl178),
  inference(subsumption_resolution,[],[f36599,f116])).
fof(f36599,plain,(
  ( ! [X66,X65] : (s(bool,'F_0') != s(bool,X65) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X66)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f36729,plain,(
  ( ! [X72,X71] : (s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X72)) ) | $spl178),
  inference(subsumption_resolution,[],[f36602,f116])).
fof(f36602,plain,(
  ( ! [X72,X71] : (s(bool,'F_0') != s(bool,X71) | s(bool,'T_0') = s(bool,X71) | s(bool,X72) = s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X72)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f36730,plain,(
  ( ! [X76,X74,X75] : (s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X76),s('type.num.num','const.num.|48|_0'))) | s(bool,X75) = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(subsumption_resolution,[],[f36603,f116])).
fof(f36603,plain,(
  ( ! [X76,X74,X75] : (s(bool,'F_0') != s(bool,X74) | s(bool,'T_0') = s(bool,X74) | s(bool,X75) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X76),s('type.num.num','const.num.|48|_0'))) | s(bool,X75) = s(bool,f(s(bool,'F_0')))) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36607,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl178),
  inference(equality_resolution,[],[f29081])).
fof(f36689,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36565,f176])).
fof(f36565,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f873])).
fof(f36688,plain,(
  ( ! [X64,X65] : (s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36563,f176])).
fof(f36563,plain,(
  ( ! [X64,X65] : (s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f872])).
fof(f36687,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl178),
  inference(subsumption_resolution,[],[f36560,f176])).
fof(f36560,plain,(
  ( ! [X59,X58] : (s(bool,X59) != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl178),
  inference(superposition,[],[f29081,f871])).
fof(f36686,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl178),
  inference(subsumption_resolution,[],[f36555,f176])).
fof(f36555,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f36544,plain,(
  ( ! [X10,X11] : (s(bool,X11) != s(bool,f(s(bool,X10))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X10)) ) | $spl178),
  inference(superposition,[],[f29081,f116])).
fof(f36542,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f36541,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36674,plain,(
  ( ! [X134,X133] : (s(bool,X133) != s(bool,f(s(bool,'F_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl178),
  inference(subsumption_resolution,[],[f36531,f177])).
fof(f36531,plain,(
  ( ! [X134,X132,X133] : (s(bool,X133) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X132),s('type.num.num','const.num.|48|_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36665,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,f(s(bool,X114))) | s(bool,X114) = s(bool,X115) | s(bool,'F_0') = s(bool,X115)) ) | $spl178),
  inference(subsumption_resolution,[],[f36515,f176])).
fof(f36515,plain,(
  ( ! [X114,X115] : (s(bool,X114) != s(bool,f(s(bool,X114))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X114) = s(bool,X115) | s(bool,'F_0') = s(bool,X115)) ) | $spl178),
  inference(superposition,[],[f29081,f1579])).
fof(f36664,plain,(
  ( ! [X111,X112,X113] : (s(bool,X111) != s(bool,f(s(bool,X111))) | s(bool,X112) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X113),s('type.num.num','const.num.|48|_0'))) | s(bool,X111) = s(bool,X112)) ) | $spl178),
  inference(subsumption_resolution,[],[f36514,f176])).
fof(f36514,plain,(
  ( ! [X111,X112,X113] : (s(bool,X111) != s(bool,f(s(bool,X111))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X112) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X113),s('type.num.num','const.num.|48|_0'))) | s(bool,X111) = s(bool,X112)) ) | $spl178),
  inference(superposition,[],[f29081,f5275])).
fof(f36624,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'F_0'))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl178),
  inference(condensation,[],[f36623])).
fof(f36623,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl178),
  inference(duplicate_literal_removal,[],[f36480])).
fof(f36480,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X32) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl178),
  inference(superposition,[],[f29081,f419])).
fof(f52553,plain,(
  $false | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25612,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34645,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34698,f34699,f34700,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36657,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f42488,f42365,f42368,f42510,f42511,f42512,f42513,f41552,f41319,f41230,f42742,f42703,f42498,f42489,f42448,f42366,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32627,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31136,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29782,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32626,f32495,f31135,f31020,f29781,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f22228,f21255,f8165,f8058,f8022,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f3135,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291,f29081,f52424,f52436,f52438,f52440,f52442,f52444,f52446,f52448,f52450,f52458,f52460,f52462,f52464,f52466,f52468,f52470,f52472,f52475,f52477,f52480,f52481,f52483,f52485,f52487,f52489,f52491,f52493,f52495,f52497,f52500,f52501,f52510,f52519,f52525,f52529,f52552])).
fof(f52501,plain,(
  ( ! [X499,X502,X503] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25612,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34645,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34698,f34699,f34700,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36657,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f42488,f42365,f42368,f42510,f42511,f42512,f42513,f41552,f41319,f41230,f42742,f42703,f42498,f42489,f42448,f42366,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32627,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31136,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29782,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32626,f32495,f31135,f31020,f29781,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f22228,f21255,f8165,f8058,f8022,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f3135,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291,f29081,f52424,f52436,f52438,f52440,f52442,f52444,f52446,f52448,f52450,f52458,f52460,f52462,f52464,f52466,f52468,f52470,f52472,f52475,f52477,f52480,f52481,f52483,f52485,f52487,f52489,f52491,f52493,f52495,f52497,f52500])).
fof(f52500,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52499,f52424])).
fof(f52499,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,'T_0') != s(bool,X500) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f29782,f52424])).
fof(f52481,plain,(
  ( ! [X555,X558,X554] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25612,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34645,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34698,f34699,f34700,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36657,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f42488,f42365,f42368,f42510,f42511,f42512,f42513,f41552,f41319,f41230,f42742,f42703,f42498,f42489,f42448,f42366,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32627,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31136,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29782,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32626,f32495,f31135,f31020,f29781,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f22228,f21255,f8165,f8058,f8022,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f3135,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291,f29081,f52424,f52436,f52438,f52440,f52442,f52444,f52446,f52448,f52450,f52458,f52460,f52462,f52464,f52466,f52468,f52470,f52472,f52475,f52477,f52480])).
fof(f52480,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52479,f52424])).
fof(f52479,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,'T_0') != s(bool,X556) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f31136,f52424])).
fof(f8022,plain,(
  ( ! [X169,X168] : (s(bool,X168) != s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X168) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl22),
  inference(subsumption_resolution,[],[f7407,f177])).
fof(f7407,plain,(
  ( ! [X167,X169,X168] : (s(bool,X168) != s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X168) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X167),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f872])).
fof(f22228,plain,(
  ( ! [X253,X252] : (s(bool,X252) != s(bool,X253) | s(bool,'F_0') = s(bool,X253) | s(bool,X252) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl22),
  inference(subsumption_resolution,[],[f21221,f177])).
fof(f21221,plain,(
  ( ! [X253,X251,X252] : (s(bool,X252) != s(bool,X253) | s(bool,'F_0') = s(bool,X253) | s(bool,X252) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X251),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f873])).
fof(f29781,plain,(
  ( ! [X488,X490,X489,X491] : (s(bool,X489) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X488))) | s(bool,'F_0') = s(bool,X489) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X490),s('type.num.num',X488))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X491),s('type.num.num',X488))),s('type.num.num',X490))),s('type.num.num',X488)))) ) | $spl22),
  inference(subsumption_resolution,[],[f29391,f177])).
fof(f29391,plain,(
  ( ! [X488,X490,X487,X489,X491] : (s(bool,X489) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X488))) | s(bool,'F_0') = s(bool,X489) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X490),s('type.num.num',X488))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X491),s('type.num.num',X488))),s('type.num.num',X490))),s('type.num.num',X488))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X487),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f893])).
fof(f31135,plain,(
  ( ! [X546,X545,X543,X544] : (s(bool,X545) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X543),s('type.num.num',X544))) | s(bool,'F_0') = s(bool,X545) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X546),s('type.num.num',X544))),s('type.num.num',X543))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X546),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X544),s('type.num.num',X543)))))) ) | $spl22),
  inference(subsumption_resolution,[],[f30751,f177])).
fof(f30751,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,X545) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X543),s('type.num.num',X544))) | s(bool,'F_0') = s(bool,X545) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X546),s('type.num.num',X544))),s('type.num.num',X543))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X546),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X544),s('type.num.num',X543))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X542),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f2246])).
fof(f32626,plain,(
  ( ! [X546,X545,X547,X544] : (s(bool,X546) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X544),s('type.num.num',X545))) | s(bool,'F_0') = s(bool,X546) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X547),s('type.num.num',X545))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X544)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X547),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X545),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X544)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X544)) ) | $spl22),
  inference(subsumption_resolution,[],[f32232,f177])).
fof(f32232,plain,(
  ( ! [X546,X545,X547,X543,X544] : (s(bool,X546) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X544),s('type.num.num',X545))) | s(bool,'F_0') = s(bool,X546) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X547),s('type.num.num',X545))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X544)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X547),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X545),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X544)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X544) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X543),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f3264])).
fof(f29782,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,X500) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X499))) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | $spl22),
  inference(subsumption_resolution,[],[f29393,f177])).
fof(f29393,plain,(
  ( ! [X499,X500,X502,X498,X501,X503] : (s(bool,X500) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X499))) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X498),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f5697,f893])).
fof(f31136,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,X556) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X554),s('type.num.num',X555))) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | $spl22),
  inference(subsumption_resolution,[],[f30753,f177])).
fof(f30753,plain,(
  ( ! [X557,X553,X555,X556,X558,X554] : (s(bool,X556) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X554),s('type.num.num',X555))) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X553),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f5697,f2246])).
fof(f32627,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,X557) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X555),s('type.num.num',X556))) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | $spl22),
  inference(subsumption_resolution,[],[f32234,f177])).
fof(f32234,plain,(
  ( ! [X557,X559,X555,X556,X558,X554] : (s(bool,X557) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X555),s('type.num.num',X556))) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X554),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f5697,f3264])).
fof(f34700,plain,(
  ( ! [X546,X545,X547,X548] : (s(bool,X547) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X545),s('type.num.num',X546))) | s(bool,'F_0') = s(bool,X547) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X548),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X546)))))),s('type.num.num',X545))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X548),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X546)))),s('type.num.num',X545))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X546)) ) | $spl22),
  inference(subsumption_resolution,[],[f33476,f177])).
fof(f33476,plain,(
  ( ! [X546,X545,X547,X548,X544] : (s(bool,X547) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X545),s('type.num.num',X546))) | s(bool,'F_0') = s(bool,X547) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X548),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X546)))))),s('type.num.num',X545))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X548),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X546)))),s('type.num.num',X545))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X546) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X544),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f3732])).
fof(f34698,plain,(
  ( ! [X557,X559,X560,X556,X558] : (s(bool,X558) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X556),s('type.num.num',X557))) | s(bool,X558) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X559),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X560),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X557)))))),s('type.num.num',X556))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X560),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X557)))),s('type.num.num',X556))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X557)) ) | $spl22),
  inference(subsumption_resolution,[],[f33478,f177])).
fof(f33478,plain,(
  ( ! [X557,X559,X555,X560,X556,X558] : (s(bool,X558) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X556),s('type.num.num',X557))) | s(bool,X558) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X559),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X560),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X557)))))),s('type.num.num',X556))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X560),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X557)))),s('type.num.num',X556))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X557) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X555),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f5697,f3732])).
fof(f25612,plain,(
  ( ! [X17,X15,X16] : (s(bool,X15) != s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,X15) = s(bool,X17) | s(bool,'F_0') = s(bool,X17)) ) | $spl22),
  inference(superposition,[],[f3135,f5275])).
fof(f5943,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,X2) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl22),
  inference(superposition,[],[f5697,f1293])).
fof(f5697,plain,(
  ( ! [X97,X98,X96] : (s(bool,X96) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) | s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(subsumption_resolution,[],[f5696,f176])).
fof(f5696,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X96) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) | s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(forward_demodulation,[],[f5445,f180])).
fof(f5445,plain,(
  ( ! [X97,X98,X96] : (s(bool,X96) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X98),s('type.num.num','const.num.|48|_0')))) ) | $spl22),
  inference(superposition,[],[f3135,f1293])).
fof(f52530,plain,(
  $false | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25612,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34645,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34698,f34699,f34700,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36657,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f42488,f42365,f42368,f42510,f42511,f42512,f42513,f41552,f41319,f41230,f42742,f42703,f42498,f42489,f42448,f42366,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39679,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32627,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31136,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29782,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32626,f32495,f31135,f31020,f29781,f29680,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f22228,f21255,f8165,f8058,f8022,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f3135,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f27291,f29081,f52424,f52436,f52438,f52440,f52442,f52444,f52446,f52448,f52450,f52458,f52460,f52462,f52464,f52466,f52468,f52470,f52472,f52475,f52477,f52480,f52481,f52483,f52485,f52487,f52489,f52491,f52493,f52495,f52497,f52500,f52501,f52510,f52519,f52525,f52529])).
fof(f52476,plain,(
  ( ! [X559,X555,X556] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | $spl286),
  inference(cnf_transformation,[],[f52476_D])).
fof(f52476_D,plain,(
  ( ! [X559,X555,X556] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f34649,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) | $spl236),
  inference(cnf_transformation,[],[f34649_D])).
fof(f34649_D,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f52475,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(subsumption_resolution,[],[f52474,f52424])).
fof(f52474,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,'T_0') != s(bool,X557) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl18 | $spl22 | $spl154 | $spl178 | $spl278)),
  inference(forward_demodulation,[],[f32627,f52424])).
fof(f52420,plain,(
  $false | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52419,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409,f52411,f52413])).
fof(f52413,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52111,f112])).
fof(f52111,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3254])).
fof(f52411,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52108,f112])).
fof(f52108,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11827])).
fof(f52409,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52107,f112])).
fof(f52107,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11099])).
fof(f52407,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52104,f112])).
fof(f52104,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11872])).
fof(f52405,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52103,f112])).
fof(f52103,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11364])).
fof(f52403,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52100,f112])).
fof(f52100,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11784])).
fof(f52401,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52098,f112])).
fof(f52098,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3255])).
fof(f52399,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52096,f112])).
fof(f52096,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11923])).
fof(f52391,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52088,f112])).
fof(f52088,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3725])).
fof(f52389,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52084,f112])).
fof(f52084,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11874])).
fof(f52387,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52083,f112])).
fof(f52083,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11366])).
fof(f52385,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52080,f112])).
fof(f52080,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11829])).
fof(f52383,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52079,f112])).
fof(f52079,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11101])).
fof(f52381,plain,(
  ( ! [X43,X41,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52076,f112])).
fof(f52076,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11786])).
fof(f52379,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52074,f112])).
fof(f52074,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3726])).
fof(f52377,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52072,f112])).
fof(f52072,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11925])).
fof(f52177,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f52047])).
fof(f52047,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f32597])).
fof(f52213,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f52018])).
fof(f52018,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f31106])).
fof(f52369,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51997,f112])).
fof(f51997,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3229])).
fof(f52367,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51995,f112])).
fof(f51995,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f2215])).
fof(f52365,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51994,f112])).
fof(f51994,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f164])).
fof(f52363,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51993,f112])).
fof(f51993,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f8125])).
fof(f52361,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51988,f112])).
fof(f51988,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11098])).
fof(f52359,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51987,f112])).
fof(f51987,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11826])).
fof(f52357,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51986,f112])).
fof(f51986,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11363])).
fof(f52355,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51985,f112])).
fof(f51985,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11871])).
fof(f52353,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51984,f112])).
fof(f51984,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11783])).
fof(f52351,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51974,f112])).
fof(f51974,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f11922])).
fof(f52349,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51973,f112])).
fof(f51973,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f8135])).
fof(f52279,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f51955])).
fof(f51955,plain,(
  ( ! [X2,X3,X1] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f29758])).
fof(f52344,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51937,f112])).
fof(f51937,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f8088])).
fof(f52342,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51935,f112])).
fof(f51935,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f876])).
fof(f52340,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51934,f112])).
fof(f51934,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f119])).
fof(f52334,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51893,f51848])).
fof(f51893,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,'T_0') != s(bool,f(s(X458,sK4(X459,X460,bool,X458)))) | s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f26140])).
fof(f51892,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f26139])).
fof(f52331,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(condensation,[],[f52330])).
fof(f52330,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51887,f51848])).
fof(f51887,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f22283])).
fof(f52328,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(condensation,[],[f52327])).
fof(f52327,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51880,f872])).
fof(f51880,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f8058])).
fof(f52325,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51874,f51848])).
fof(f51874,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f5609])).
fof(f52318,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl154 | $spl276 | $spl282)),
  inference(condensation,[],[f52317])).
fof(f52317,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51856,f871])).
fof(f51856,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f1392])).
fof(f52315,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51850,f51848])).
fof(f51850,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f124])).
fof(f51848,plain,(
  ( ! [X46] : (s(bool,'T_0') = s(bool,X46)) ) | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f48781,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893])).
fof(f52419,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52117,f112])).
fof(f52117,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3762])).
fof(f3762,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | $spl27),
  inference(subsumption_resolution,[],[f3761,f3260])).
fof(f3260,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl27),
  inference(cnf_transformation,[],[f3260_D])).
fof(f3260_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f3761,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | $spl27),
  inference(forward_demodulation,[],[f3753,f3741])).
fof(f3741,plain,(
  s('type.num.num',sK2) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))) | $spl27),
  inference(unit_resulting_resolution,[],[f3260,f117])).
fof(f3753,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',X9)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2))))) ) | $spl27),
  inference(superposition,[],[f2215,f3741])).
fof(f52418,plain,(
  $false | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52417,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409,f52411,f52413])).
fof(f52417,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52115,f112])).
fof(f52115,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f10048])).
fof(f10048,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | $spl47),
  inference(subsumption_resolution,[],[f10047,f8138])).
fof(f10047,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | $spl47),
  inference(forward_demodulation,[],[f10015,f8297])).
fof(f10015,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1))))) ) | $spl47),
  inference(superposition,[],[f2215,f8297])).
fof(f52416,plain,(
  $false | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52415,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409,f52411,f52413])).
fof(f52415,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52113,f112])).
fof(f52113,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f5820])).
fof(f5820,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | $spl31),
  inference(subsumption_resolution,[],[f5819,f3728])).
fof(f3728,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) | $spl31),
  inference(cnf_transformation,[],[f3728_D])).
fof(f3728_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK0) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f5819,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | $spl31),
  inference(forward_demodulation,[],[f5793,f3985])).
fof(f3985,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))) | $spl31),
  inference(unit_resulting_resolution,[],[f3728,f117])).
fof(f5793,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK0),s('type.num.num',X11)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0))))) ) | $spl31),
  inference(superposition,[],[f2215,f3985])).
fof(f52414,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409,f52411,f52413])).
fof(f52412,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409,f52411])).
fof(f52410,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407,f52409])).
fof(f52408,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405,f52407])).
fof(f52406,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403,f52405])).
fof(f52404,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401,f52403])).
fof(f52402,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399,f52401])).
fof(f52400,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391,f52399])).
fof(f52398,plain,(
  $false | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52397,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391])).
fof(f52397,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52094,f112])).
fof(f52094,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f3765])).
fof(f3765,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | $spl27),
  inference(subsumption_resolution,[],[f3764,f3260])).
fof(f3764,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | $spl27),
  inference(forward_demodulation,[],[f3755,f3741])).
fof(f3755,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2))))) ) | $spl27),
  inference(superposition,[],[f2219,f3741])).
fof(f52396,plain,(
  $false | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52395,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391])).
fof(f52395,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52092,f112])).
fof(f52092,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl47 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f10500])).
fof(f10500,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | $spl47),
  inference(subsumption_resolution,[],[f10499,f8138])).
fof(f10499,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | $spl47),
  inference(forward_demodulation,[],[f10468,f8297])).
fof(f10468,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1))))) ) | $spl47),
  inference(superposition,[],[f2219,f8297])).
fof(f52394,plain,(
  $false | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52393,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391])).
fof(f52393,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52090,f112])).
fof(f52090,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl31 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f6030])).
fof(f6030,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | $spl31),
  inference(subsumption_resolution,[],[f6029,f3728])).
fof(f6029,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | $spl31),
  inference(forward_demodulation,[],[f6004,f3985])).
fof(f6004,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0))))) ) | $spl31),
  inference(superposition,[],[f2219,f3985])).
fof(f52392,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389,f52391])).
fof(f52390,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387,f52389])).
fof(f52388,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385,f52387])).
fof(f52386,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383,f52385])).
fof(f52384,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381,f52383])).
fof(f52382,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379,f52381])).
fof(f52380,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377,f52379])).
fof(f52378,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177,f52377])).
fof(f52376,plain,(
  $false | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52375,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177])).
fof(f52375,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52048,f51848])).
fof(f52048,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,'T_0') != s(bool,X557) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f32627])).
fof(f52374,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213,f52177])).
fof(f52373,plain,(
  $false | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52372,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213])).
fof(f52372,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f52019,f51848])).
fof(f52019,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,'T_0') != s(bool,X556) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f31136])).
fof(f52371,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369,f52213])).
fof(f52370,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367,f52369])).
fof(f52368,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365,f52367])).
fof(f52366,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363,f52365])).
fof(f52364,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361,f52363])).
fof(f52362,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359,f52361])).
fof(f52360,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357,f52359])).
fof(f52358,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355,f52357])).
fof(f52356,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353,f52355])).
fof(f52354,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351,f52353])).
fof(f52352,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349,f52351])).
fof(f52350,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279,f52349])).
fof(f52348,plain,(
  $false | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52347,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279])).
fof(f52347,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51956,f51848])).
fof(f51956,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,'T_0') != s(bool,X500) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl22 | $spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f29782])).
fof(f52346,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344,f52279])).
fof(f52345,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342,f52344])).
fof(f52343,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340,f52342])).
fof(f52341,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334,f52340])).
fof(f52339,plain,(
  $false | ($spl154 | $spl222 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52311,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334])).
fof(f52311,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | ($spl154 | $spl222 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f51919])).
fof(f51919,plain,(
  ( ! [X88,X87,X89] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | ($spl154 | $spl222 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f33106])).
fof(f52338,plain,(
  $false | ($spl154 | $spl224 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52312,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334])).
fof(f52312,plain,(
  ( ! [X92,X93,X91] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) | ($spl154 | $spl224 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f51918])).
fof(f51918,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) | ($spl154 | $spl224 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f33107])).
fof(f52337,plain,(
  $false | ($spl154 | $spl220 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f52313,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334])).
fof(f52313,plain,(
  ( ! [X70,X68,X69] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | ($spl154 | $spl220 | $spl276 | $spl282)),
  inference(trivial_inequality_removal,[],[f51916])).
fof(f51916,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | ($spl154 | $spl220 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f33103])).
fof(f52335,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892,f52334])).
fof(f52333,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331,f51892])).
fof(f52332,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328,f52331])).
fof(f52329,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325,f52328])).
fof(f52326,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318,f52325])).
fof(f52319,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315,f52318])).
fof(f52316,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f30886,f31158,f31368,f31357,f31356,f31414,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f33168,f29294,f29293,f34848,f34849,f34851,f35009,f35013,f35014,f35015,f34991,f35049,f35418,f35482,f35483,f35400,f35488,f35489,f35648,f35692,f35951,f35952,f36287,f36291,f36292,f36293,f36215,f37030,f37022,f37021,f37020,f37072,f37073,f37076,f37077,f40806,f40809,f40967,f40971,f40972,f40973,f41248,f41313,f41552,f41319,f41230,f42742,f42703,f42058,f42057,f42056,f42052,f41719,f41718,f41596,f41318,f41312,f41007,f40949,f40807,f27291,f38152,f38151,f48489,f48490,f48495,f48504,f48529,f48780,f48782,f39678,f164,f33346,f33347,f33363,f33364,f33368,f33369,f33371,f33372,f33374,f33376,f33377,f3725,f11829,f11874,f11786,f11925,f30459,f30474,f30550,f30565,f30630,f30631,f30647,f30648,f31153,f31941,f32023,f32039,f11101,f11366,f3726,f32108,f2215,f31942,f32024,f32040,f32107,f32124,f32125,f32129,f32130,f32132,f32133,f32657,f3254,f11872,f11364,f11827,f11099,f3229,f11784,f11923,f3255,f33341,f31949,f30477,f30642,f32119,f33358,f30627,f30637,f30645,f32104,f32114,f32122,f33361,f33353,f33343,f33359,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29292,f29291,f29279,f29278,f29122,f119,f29202,f29275,f29285,f29807,f876,f8125,f11363,f11871,f11098,f11826,f8088,f11783,f8135,f11922,f32381,f30898,f29570,f32504,f30468,f32505,f32507,f32506,f32508,f32516,f32515,f32517,f34815,f30453,f31935,f34811,f34813,f34812,f34814,f34803,f34802,f34804,f33375,f33370,f33339,f33338,f33337,f33336,f33335,f33334,f32597,f32383,f32100,f32099,f32097,f32096,f32095,f32017,f31948,f31106,f30900,f30623,f30622,f30620,f30619,f30618,f30476,f15963,f15962,f3264,f2246,f29125,f33360,f33340,f32101,f30624,f29758,f29572,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f32495,f31020,f29680,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f893,f48781,f51848,f52315])).
fof(f52314,plain,(
  $false | ($spl154 | $spl276 | $spl282)),
  inference(subsumption_resolution,[],[f51849,f112])).
fof(f51849,plain,(
  ~p(s(bool,'T_0')) | ($spl154 | $spl276 | $spl282)),
  inference(backward_demodulation,[],[f51848,f114])).
fof(f51808,plain,(
  ( ! [X30,X29,X27] : (s(bool,'F_0') = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X30) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X29)) ) | $spl284),
  inference(cnf_transformation,[],[f51808_D])).
fof(f51808_D,plain,(
  ( ! [X30,X29,X27] : (s(bool,'F_0') = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X30) | s(bool,X29) = s(bool,X30) | s(bool,X27) = s(bool,X29)) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f15784,plain,(
  ( ! [X66] : (p(s(bool,X66))) ) | $spl58),
  inference(cnf_transformation,[],[f15784_D])).
fof(f15784_D,plain,(
  ( ! [X66] : (p(s(bool,X66))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f51809,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,X36)) | s(bool,'F_0') = s(bool,f(s(bool,X35))) | s(bool,X35) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl155),
  inference(subsumption_resolution,[],[f51751,f120])).
fof(f51751,plain,(
  ( ! [X37,X35,X38,X36] : (p(s(bool,X36)) | s(bool,'F_0') = s(bool,f(s(bool,X35))) | s(bool,X35) = s(bool,X37) | s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X36)) ) | $spl155),
  inference(superposition,[],[f51712,f419])).
fof(f51712,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7)))) ) | $spl155),
  inference(subsumption_resolution,[],[f51567,f120])).
fof(f51567,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f125,f49932])).
fof(f49932,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f49741,f116])).
fof(f49741,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl155),
  inference(unit_resulting_resolution,[],[f176,f27292,f1579])).
fof(f51807,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,X28)) | s(bool,'F_0') = s(bool,f(s(bool,X27))) | s(bool,X27) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f51749,f120])).
fof(f51749,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,X28)) | s(bool,'F_0') = s(bool,f(s(bool,X27))) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f51712,f419])).
fof(f49438,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422,f49425,f49437])).
fof(f49437,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49436,f112])).
fof(f49436,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f164,f49205])).
fof(f49425,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49424,f112])).
fof(f49424,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3725,f49205])).
fof(f49422,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49421,f112])).
fof(f49421,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11829,f49205])).
fof(f49419,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49418,f112])).
fof(f49418,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11874,f49205])).
fof(f49416,plain,(
  ( ! [X43,X41,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49415,f112])).
fof(f49415,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11786,f49205])).
fof(f49413,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49412,f112])).
fof(f49412,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11925,f49205])).
fof(f49409,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49408,f112])).
fof(f49408,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11101,f49205])).
fof(f49406,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49405,f112])).
fof(f49405,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11366,f49205])).
fof(f49403,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49402,f112])).
fof(f49402,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3726,f49205])).
fof(f49400,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49399,f112])).
fof(f49399,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f2215,f49205])).
fof(f49396,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49395,f112])).
fof(f49395,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3254,f49205])).
fof(f49393,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49392,f112])).
fof(f49392,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11872,f49205])).
fof(f49390,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49389,f112])).
fof(f49389,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11364,f49205])).
fof(f49387,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49386,f112])).
fof(f49386,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11827,f49205])).
fof(f49384,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49383,f112])).
fof(f49383,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11099,f49205])).
fof(f49381,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49380,f112])).
fof(f49380,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3229,f49205])).
fof(f49369,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49368,f112])).
fof(f49368,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11784,f49205])).
fof(f49366,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49365,f112])).
fof(f49365,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11923,f49205])).
fof(f49363,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49362,f112])).
fof(f49362,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3255,f49205])).
fof(f49355,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49354,f112])).
fof(f49354,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f119,f49205])).
fof(f49351,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49350,f112])).
fof(f49350,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f876,f49205])).
fof(f49348,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49347,f112])).
fof(f49347,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f8125,f49205])).
fof(f49345,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49344,f112])).
fof(f49344,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11363,f49205])).
fof(f49342,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49341,f112])).
fof(f49341,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11871,f49205])).
fof(f49339,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49338,f112])).
fof(f49338,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11098,f49205])).
fof(f49336,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49335,f112])).
fof(f49335,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11826,f49205])).
fof(f49333,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49332,f112])).
fof(f49332,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f8088,f49205])).
fof(f49330,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49329,f112])).
fof(f49329,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11783,f49205])).
fof(f49327,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49326,f112])).
fof(f49326,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f8135,f49205])).
fof(f49324,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49323,f112])).
fof(f49323,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f11922,f49205])).
fof(f49310,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f32597,f49205])).
fof(f49301,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f31106,f49205])).
fof(f49294,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f29758,f49205])).
fof(f49270,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f26139,f49205])).
fof(f49262,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(condensation,[],[f49261])).
fof(f49261,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49260,f49205])).
fof(f49260,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f22283,f49205])).
fof(f49252,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(condensation,[],[f49251])).
fof(f49251,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49250,f872])).
fof(f49250,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f8058,f49205])).
fof(f49243,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49242,f49205])).
fof(f49242,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f5609,f49205])).
fof(f49216,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl18 | $spl155 | $spl272)),
  inference(condensation,[],[f49215])).
fof(f49215,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49214,f871])).
fof(f49214,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f1392,f49205])).
fof(f49209,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49208,f49205])).
fof(f49208,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f124,f49205])).
fof(f49205,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12)) ) | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893])).
fof(f39741,plain,(
  ( ! [X130,X131,X129] : (s(bool,X130) = s(bool,f(s(bool,X129))) | s(bool,X130) = s(bool,X131) | s(bool,'F_0') = s(bool,X131) | s(bool,'T_0') = s(bool,X129)) ) | $spl155),
  inference(subsumption_resolution,[],[f39608,f114])).
fof(f39608,plain,(
  ( ! [X130,X131,X129] : (p(s(bool,'F_0')) | s(bool,X130) = s(bool,f(s(bool,X129))) | s(bool,X130) = s(bool,X131) | s(bool,'F_0') = s(bool,X131) | s(bool,'T_0') = s(bool,X129)) ) | $spl155),
  inference(superposition,[],[f2927,f38128])).
fof(f39729,plain,(
  ( ! [X66,X64,X65] : (s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,X65) = s(bool,X66) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64)) ) | $spl155),
  inference(subsumption_resolution,[],[f39577,f114])).
fof(f39577,plain,(
  ( ! [X66,X64,X65] : (p(s(bool,'F_0')) | s(bool,X65) != s(bool,f(s(bool,X64))) | s(bool,X65) = s(bool,X66) | s(bool,'T_0') = s(bool,X66) | s(bool,'T_0') = s(bool,X64)) ) | $spl155),
  inference(superposition,[],[f487,f38128])).
fof(f39724,plain,(
  ( ! [X14,X15] : (p(s(bool,X15)) | s(bool,X15) = s(bool,f(s(bool,X14))) | s(bool,'T_0') = s(bool,X14)) ) | $spl155),
  inference(subsumption_resolution,[],[f39560,f114])).
fof(f39560,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | p(s(bool,X15)) | s(bool,X15) = s(bool,f(s(bool,X14))) | s(bool,'T_0') = s(bool,X14)) ) | $spl155),
  inference(superposition,[],[f165,f38128])).
fof(f39702,plain,(
  ( ! [X141] : (s(bool,'F_0') = s(bool,f(s(bool,X141))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f39502,f177])).
fof(f39502,plain,(
  ( ! [X140,X141] : (s(bool,'F_0') = s(bool,f(s(bool,X141))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X140),s('type.num.num','const.num.|48|_0'))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(superposition,[],[f38128,f1293])).
fof(f39701,plain,(
  ( ! [X139] : (s(bool,'F_0') = s(bool,f(s(bool,X139))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f39501,f177])).
fof(f39501,plain,(
  ( ! [X138,X139] : (s(bool,'F_0') = s(bool,f(s(bool,X139))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X138),s('type.num.num','const.num.|48|_0'))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(superposition,[],[f38128,f7818])).
fof(f39700,plain,(
  ( ! [X136] : (s(bool,'F_0') = s(bool,f(s(bool,X136))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f39499,f177])).
fof(f39499,plain,(
  ( ! [X136,X135] : (s(bool,'F_0') = s(bool,f(s(bool,X136))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X135),s('type.num.num','const.num.|48|_0'))) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(superposition,[],[f38128,f21962])).
fof(f39699,plain,(
  ( ! [X134,X133] : (s(bool,'F_0') = s(bool,f(s(bool,X133))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl155),
  inference(subsumption_resolution,[],[f39498,f177])).
fof(f39498,plain,(
  ( ! [X134,X132,X133] : (s(bool,'F_0') = s(bool,f(s(bool,X133))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X132),s('type.num.num','const.num.|48|_0'))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | $spl155),
  inference(superposition,[],[f38128,f5275])).
fof(f39663,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,f(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl155),
  inference(condensation,[],[f39662])).
fof(f39662,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') = s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(duplicate_literal_removal,[],[f39440])).
fof(f39440,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') = s(bool,f(s(bool,X32))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,X33) | s(bool,'T_0') = s(bool,X31) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(superposition,[],[f38128,f419])).
fof(f38735,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f38365,f176])).
fof(f38365,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37484,f873])).
fof(f38734,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f38363,f176])).
fof(f38363,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37484,f872])).
fof(f38732,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f38360,f176])).
fof(f38360,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37484,f871])).
fof(f38727,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl155),
  inference(subsumption_resolution,[],[f38355,f176])).
fof(f38355,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl155),
  inference(superposition,[],[f37484,f419])).
fof(f38342,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl155),
  inference(superposition,[],[f37484,f1579])).
fof(f38341,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl155),
  inference(superposition,[],[f37484,f5275])).
fof(f38128,plain,(
  ( ! [X67] : (s(bool,'F_0') = s(bool,f(s(bool,X67))) | s(bool,'T_0') = s(bool,X67)) ) | $spl155),
  inference(subsumption_resolution,[],[f38058,f180])).
fof(f38058,plain,(
  ( ! [X67] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X67) | s(bool,'F_0') = s(bool,f(s(bool,X67)))) ) | $spl155),
  inference(superposition,[],[f37419,f1292])).
fof(f38076,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f38057])).
fof(f38057,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(superposition,[],[f37419,f873])).
fof(f38077,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f38051])).
fof(f38051,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(superposition,[],[f37419,f872])).
fof(f38078,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f38047])).
fof(f38047,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(superposition,[],[f37419,f871])).
fof(f38080,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f38040])).
fof(f38040,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(superposition,[],[f37419,f419])).
fof(f38082,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f38033])).
fof(f38033,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(superposition,[],[f37419,f229])).
fof(f37941,plain,(
  ( ! [X59,X58] : (s(bool,X58) = s(bool,f(s(bool,'F_0'))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | $spl155),
  inference(subsumption_resolution,[],[f37863,f114])).
fof(f37863,plain,(
  ( ! [X59,X58] : (p(s(bool,'F_0')) | s(bool,X58) = s(bool,f(s(bool,'F_0'))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | $spl155),
  inference(superposition,[],[f2927,f37487])).
fof(f37933,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(subsumption_resolution,[],[f37842,f114])).
fof(f37842,plain,(
  ( ! [X33,X34] : (p(s(bool,'F_0')) | s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(superposition,[],[f487,f37487])).
fof(f37908,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37787,f176])).
fof(f37787,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37487,f873])).
fof(f37907,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37785,f176])).
fof(f37785,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37487,f872])).
fof(f37906,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37782,f176])).
fof(f37782,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f37487,f871])).
fof(f37903,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f37777,f176])).
fof(f37777,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f37487,f419])).
fof(f37766,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f37487,f116])).
fof(f37764,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f37487,f1579])).
fof(f37763,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f37487,f5275])).
fof(f37482,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f37456])).
fof(f37456,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f37484,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f37450])).
fof(f37450,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(superposition,[],[f27292,f229])).
fof(f37592,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37440,f176])).
fof(f37440,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f873])).
fof(f37591,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37438,f176])).
fof(f37438,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f872])).
fof(f37590,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f37435,f176])).
fof(f37435,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f871])).
fof(f37587,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f37430,f176])).
fof(f37430,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f37419,plain,(
  ( ! [X7] : (s(bool,'T_0') != s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f27292,f116])).
fof(f37417,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f27292,f1579])).
fof(f37416,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f27292,f5275])).
fof(f37487,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl155),
  inference(forward_demodulation,[],[f37415,f216])).
fof(f37415,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl155),
  inference(unit_resulting_resolution,[],[f176,f27292,f5275])).
fof(f33126,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,f(s(bool,X71)))) ) | $spl155),
  inference(subsumption_resolution,[],[f33047,f180])).
fof(f33047,plain,(
  ( ! [X71] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X71) | s(bool,'F_0') = s(bool,f(s(bool,X71)))) ) | $spl155),
  inference(superposition,[],[f31726,f1292])).
fof(f33067,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f33045])).
fof(f33045,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(superposition,[],[f31726,f873])).
fof(f33068,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f33039])).
fof(f33039,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(superposition,[],[f31726,f872])).
fof(f33069,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f33035])).
fof(f33035,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(superposition,[],[f31726,f871])).
fof(f33071,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f33028])).
fof(f33028,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(superposition,[],[f31726,f419])).
fof(f33073,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f33021])).
fof(f33021,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(superposition,[],[f31726,f229])).
fof(f32923,plain,(
  ( ! [X64,X65] : (s(bool,X64) = s(bool,f(s(bool,'F_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl155),
  inference(subsumption_resolution,[],[f32845,f114])).
fof(f32845,plain,(
  ( ! [X64,X65] : (p(s(bool,'F_0')) | s(bool,X64) = s(bool,f(s(bool,'F_0'))) | s(bool,X64) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | $spl155),
  inference(superposition,[],[f2927,f31794])).
fof(f32915,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(subsumption_resolution,[],[f32824,f114])).
fof(f32824,plain,(
  ( ! [X33,X34] : (p(s(bool,'F_0')) | s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(superposition,[],[f487,f31794])).
fof(f32890,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f32769,f176])).
fof(f32769,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f31794,f873])).
fof(f32889,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f32767,f176])).
fof(f32767,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f31794,f872])).
fof(f32888,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f32764,f176])).
fof(f32764,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f31794,f871])).
fof(f32885,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f32759,f176])).
fof(f32759,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f31794,f419])).
fof(f32748,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f31794,f116])).
fof(f32746,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f31794,f1579])).
fof(f32745,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f31794,f5275])).
fof(f31789,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f31763])).
fof(f31763,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f31791,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f31757])).
fof(f31757,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(superposition,[],[f27292,f229])).
fof(f31899,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f31747,f176])).
fof(f31747,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f873])).
fof(f31898,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f31745,f176])).
fof(f31745,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f872])).
fof(f31897,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f31742,f176])).
fof(f31742,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f871])).
fof(f31894,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f31737,f176])).
fof(f31737,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f31726,plain,(
  ( ! [X7] : (s(bool,'T_0') != s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f27292,f116])).
fof(f31724,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f27292,f1579])).
fof(f31723,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f27292,f5275])).
fof(f31794,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl155),
  inference(forward_demodulation,[],[f31722,f216])).
fof(f31722,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl155),
  inference(unit_resulting_resolution,[],[f176,f27292,f5275])).
fof(f28947,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f28571,f176])).
fof(f28571,plain,(
  ( ! [X68,X69] : (s(bool,X69) = s(bool,f(s(bool,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27655,f873])).
fof(f28946,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f28569,f176])).
fof(f28569,plain,(
  ( ! [X64,X65] : (s(bool,X65) = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X65) | s(bool,X64) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27655,f872])).
fof(f28944,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f28566,f176])).
fof(f28566,plain,(
  ( ! [X59,X58] : (s(bool,X59) = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X59) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27655,f871])).
fof(f28939,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl155),
  inference(subsumption_resolution,[],[f28561,f176])).
fof(f28561,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,X43) = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl155),
  inference(superposition,[],[f27655,f419])).
fof(f28548,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl155),
  inference(superposition,[],[f27655,f1579])).
fof(f28547,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X2)) ) | $spl155),
  inference(superposition,[],[f27655,f5275])).
fof(f28459,plain,(
  ( ! [X67] : (s(bool,'T_0') = s(bool,X67) | s(bool,'F_0') = s(bool,f(s(bool,X67)))) ) | $spl155),
  inference(subsumption_resolution,[],[f28389,f180])).
fof(f28389,plain,(
  ( ! [X67] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X67) | s(bool,'F_0') = s(bool,f(s(bool,X67)))) ) | $spl155),
  inference(superposition,[],[f27590,f1292])).
fof(f28407,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f28388])).
fof(f28388,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X66) = s(bool,f(s(bool,X65)))) ) | $spl155),
  inference(superposition,[],[f27590,f873])).
fof(f28408,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f28382])).
fof(f28382,plain,(
  ( ! [X54,X53] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X54) = s(bool,f(s(bool,X53)))) ) | $spl155),
  inference(superposition,[],[f27590,f872])).
fof(f28409,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(trivial_inequality_removal,[],[f28378])).
fof(f28378,plain,(
  ( ! [X45,X46] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X46) = s(bool,f(s(bool,X45)))) ) | $spl155),
  inference(superposition,[],[f27590,f871])).
fof(f28411,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f28371])).
fof(f28371,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,f(s(bool,X19))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl155),
  inference(superposition,[],[f27590,f419])).
fof(f28413,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f28364])).
fof(f28364,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) ) | $spl155),
  inference(superposition,[],[f27590,f229])).
fof(f28205,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK4(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))) | s(bool,X2) = s(bool,sK4(X0,X1,bool,bool))) ) | $spl155),
  inference(condensation,[],[f28204])).
fof(f28204,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X157,X158,bool,bool)))) | s(bool,'T_0') = s(bool,X159) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool))) ) | $spl155),
  inference(subsumption_resolution,[],[f28069,f27655])).
fof(f28198,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,sK4(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK4(X0,X1,bool,bool)) | s(bool,'F_0') = s(bool,X2)) ) | $spl155),
  inference(condensation,[],[f28197])).
fof(f28197,plain,(
  ( ! [X132,X130,X133,X131] : (s(fun(bool,bool),X130) = s(fun(bool,bool),X131) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X130,X131,bool,bool)))) | s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,sK4(X130,X131,bool,bool)) | s(bool,'F_0') = s(bool,X133)) ) | $spl155),
  inference(subsumption_resolution,[],[f28062,f27655])).
fof(f28062,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,X132) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X130) = s(fun(bool,bool),X131) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X130,X131,bool,bool)))) | s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,sK4(X130,X131,bool,bool)) | s(bool,'F_0') = s(bool,X133)) )),
  inference(superposition,[],[f783,f1579])).
fof(f27973,plain,(
  ( ! [X59,X58] : (s(bool,X58) = s(bool,f(s(bool,'F_0'))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | $spl155),
  inference(subsumption_resolution,[],[f27895,f114])).
fof(f27895,plain,(
  ( ! [X59,X58] : (p(s(bool,'F_0')) | s(bool,X58) = s(bool,f(s(bool,'F_0'))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | $spl155),
  inference(superposition,[],[f2927,f27658])).
fof(f27965,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(subsumption_resolution,[],[f27874,f114])).
fof(f27874,plain,(
  ( ! [X33,X34] : (p(s(bool,'F_0')) | s(bool,X33) != s(bool,f(s(bool,'F_0'))) | s(bool,X33) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl155),
  inference(superposition,[],[f487,f27658])).
fof(f27940,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27819,f176])).
fof(f27819,plain,(
  ( ! [X44] : (s(bool,X44) = s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27658,f873])).
fof(f27939,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27817,f176])).
fof(f27817,plain,(
  ( ! [X42] : (s(bool,X42) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27658,f872])).
fof(f27938,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27814,f176])).
fof(f27814,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27658,f871])).
fof(f27935,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f27809,f176])).
fof(f27809,plain,(
  ( ! [X30,X28,X29] : (s(bool,X28) = s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f27658,f419])).
fof(f27798,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f27658,f116])).
fof(f27796,plain,(
  ( ! [X4,X3] : (s(bool,X3) = s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f27658,f1579])).
fof(f27795,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f27658,f5275])).
fof(f27653,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f27627])).
fof(f27627,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X11) = s(bool,X12) | s(bool,X12) = s(bool,f(s(bool,'F_0'))) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f27655,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(trivial_inequality_removal,[],[f27621])).
fof(f27621,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl155),
  inference(superposition,[],[f27292,f229])).
fof(f27763,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27611,f176])).
fof(f27611,plain,(
  ( ! [X44] : (s(bool,'T_0') != s(bool,f(s(bool,X44))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f873])).
fof(f27762,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27609,f176])).
fof(f27609,plain,(
  ( ! [X42] : (s(bool,'T_0') != s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f872])).
fof(f27761,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(subsumption_resolution,[],[f27606,f176])).
fof(f27606,plain,(
  ( ! [X39] : (s(bool,'T_0') != s(bool,f(s(bool,X39))) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl155),
  inference(superposition,[],[f27292,f871])).
fof(f27758,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(subsumption_resolution,[],[f27601,f176])).
fof(f27601,plain,(
  ( ! [X30,X28,X29] : (s(bool,'T_0') != s(bool,f(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) ) | $spl155),
  inference(superposition,[],[f27292,f419])).
fof(f27590,plain,(
  ( ! [X7] : (s(bool,'T_0') != s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | $spl155),
  inference(superposition,[],[f27292,f116])).
fof(f27588,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl155),
  inference(superposition,[],[f27292,f1579])).
fof(f27587,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl155),
  inference(superposition,[],[f27292,f5275])).
fof(f27658,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | $spl155),
  inference(forward_demodulation,[],[f27586,f216])).
fof(f27586,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl155),
  inference(unit_resulting_resolution,[],[f176,f27292,f5275])).
fof(f49435,plain,(
  $false | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49434,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422,f49425])).
fof(f49434,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49433,f112])).
fof(f49433,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3765,f49205])).
fof(f49432,plain,(
  $false | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49431,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422,f49425])).
fof(f49431,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49430,f112])).
fof(f49430,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f10500,f49205])).
fof(f49429,plain,(
  $false | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49428,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422,f49425])).
fof(f49428,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49427,f112])).
fof(f49427,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f6030,f49205])).
fof(f49426,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422,f49425])).
fof(f49423,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419,f49422])).
fof(f49420,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416,f49419])).
fof(f49417,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413,f49416])).
fof(f49414,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409,f49413])).
fof(f49410,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406,f49409])).
fof(f49407,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403,f49406])).
fof(f49404,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400,f49403])).
fof(f49401,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396,f49400])).
fof(f49397,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393,f49396])).
fof(f49394,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390,f49393])).
fof(f49391,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387,f49390])).
fof(f49388,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384,f49387])).
fof(f49385,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381,f49384])).
fof(f49382,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369,f49381])).
fof(f49379,plain,(
  $false | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49378,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369])).
fof(f49378,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49377,f112])).
fof(f49377,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl18 | $spl31 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f5820,f49205])).
fof(f49376,plain,(
  $false | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49375,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369])).
fof(f49375,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49374,f112])).
fof(f49374,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl18 | $spl47 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f10048,f49205])).
fof(f49373,plain,(
  $false | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49372,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369])).
fof(f49372,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49371,f112])).
fof(f49371,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl18 | $spl27 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f3762,f49205])).
fof(f49370,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366,f49369])).
fof(f49367,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363,f49366])).
fof(f49364,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355,f49363])).
fof(f49359,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f27292,f49205])).
fof(f49356,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351,f49355])).
fof(f49352,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348,f49351])).
fof(f49349,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345,f49348])).
fof(f49346,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342,f49345])).
fof(f49343,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339,f49342])).
fof(f49340,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336,f49339])).
fof(f49337,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333,f49336])).
fof(f49334,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330,f49333])).
fof(f49331,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327,f49330])).
fof(f49328,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324,f49327])).
fof(f49325,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310,f49324])).
fof(f49321,plain,(
  $false | ($spl18 | $spl155 | $spl222 | $spl272)),
  inference(global_subsumption,[],[f49320,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310])).
fof(f49320,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | ($spl18 | $spl155 | $spl222 | $spl272)),
  inference(subsumption_resolution,[],[f33106,f49205])).
fof(f49319,plain,(
  $false | ($spl18 | $spl155 | $spl224 | $spl272)),
  inference(global_subsumption,[],[f49318,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310])).
fof(f49318,plain,(
  ( ! [X92,X93,X91] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) | ($spl18 | $spl155 | $spl224 | $spl272)),
  inference(subsumption_resolution,[],[f33107,f49205])).
fof(f49316,plain,(
  $false | ($spl18 | $spl155 | $spl220 | $spl272)),
  inference(global_subsumption,[],[f49315,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310])).
fof(f49315,plain,(
  ( ! [X70,X68,X69] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | ($spl18 | $spl155 | $spl220 | $spl272)),
  inference(subsumption_resolution,[],[f33103,f49205])).
fof(f49314,plain,(
  $false | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49313,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310])).
fof(f49313,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49312,f49205])).
fof(f49312,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,'T_0') != s(bool,X557) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f32627,f49205])).
fof(f49311,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301,f49310])).
fof(f49305,plain,(
  $false | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49304,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301])).
fof(f49304,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49303,f49205])).
fof(f49303,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,'T_0') != s(bool,X556) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f31136,f49205])).
fof(f49302,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294,f49301])).
fof(f49298,plain,(
  $false | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f49297,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294])).
fof(f49297,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49296,f49205])).
fof(f49296,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,'T_0') != s(bool,X500) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl18 | $spl22 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f29782,f49205])).
fof(f49295,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270,f49294])).
fof(f49271,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262,f49270])).
fof(f49263,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252,f49262])).
fof(f49253,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243,f49252])).
fof(f49244,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216,f49243])).
fof(f49217,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209,f49216])).
fof(f49210,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f3129,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14499,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f21915,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34727,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37050,f28264,f28171,f27320,f26942,f26941,f26845,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f27292,f119,f29122,f893,f49205,f49209])).
fof(f49207,plain,(
  $false | ($spl18 | $spl155 | $spl272)),
  inference(subsumption_resolution,[],[f49206,f112])).
fof(f49206,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl155 | $spl272)),
  inference(forward_demodulation,[],[f114,f49205])).
fof(f49204,plain,(
  $false | ($spl20 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f49203,f112])).
fof(f49203,plain,(
  ~p(s(bool,'T_0')) | ($spl20 | $spl274 | $spl280)),
  inference(forward_demodulation,[],[f114,f49143])).
fof(f49143,plain,(
  ( ! [X23] : (s(bool,'T_0') = s(bool,X23)) ) | ($spl20 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f39680,f119,f29122])).
fof(f26846,plain,(
  ( ! [X273,X274] : (s(bool,X273) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X273) = s(bool,X274) | s(bool,'F_0') = s(bool,X274)) ) | $spl20),
  inference(subsumption_resolution,[],[f25674,f177])).
fof(f25674,plain,(
  ( ! [X273,X272,X274] : (s(bool,X273) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X272),s('type.num.num','const.num.|48|_0'))) | s(bool,X273) = s(bool,X274) | s(bool,'F_0') = s(bool,X274)) ) | $spl20),
  inference(superposition,[],[f3130,f5275])).
fof(f14497,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) ) | $spl20),
  inference(condensation,[],[f14496])).
fof(f14496,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X183) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,X184) | s(bool,X184) = s(bool,X185) | s(bool,'T_0') = s(bool,X185)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f13584])).
fof(f13584,plain,(
  ( ! [X185,X182,X184,X183] : (s(bool,X183) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X182) | s(bool,X183) = s(bool,X184) | s(bool,'T_0') = s(bool,X182) | s(bool,X184) = s(bool,X185) | s(bool,'T_0') = s(bool,X185)) ) | $spl20),
  inference(superposition,[],[f3130,f419])).
fof(f49202,plain,(
  $false | ($spl20 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f39680,f119,f29122,f49143,f49149,f49165,f49177,f49201])).
fof(f49201,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl20 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f49200,f49143])).
fof(f49200,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl20 | $spl274 | $spl280)),
  inference(forward_demodulation,[],[f124,f49143])).
fof(f49177,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl20 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f49176,f49143])).
fof(f49176,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl20 | $spl274 | $spl280)),
  inference(forward_demodulation,[],[f5609,f49143])).
fof(f49165,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl20 | $spl274 | $spl280)),
  inference(forward_demodulation,[],[f26139,f49143])).
fof(f49149,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl20 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f49146,f112])).
fof(f49146,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl20 | $spl274 | $spl280)),
  inference(backward_demodulation,[],[f49143,f119])).
fof(f49178,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154,f49165,f49177])).
fof(f49154,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(condensation,[],[f49153])).
fof(f49153,plain,(
  ( ! [X273,X274] : (s(bool,X273) = s(bool,X274) | s(bool,'F_0') = s(bool,X274)) ) | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f26846,f49095])).
fof(f49095,plain,(
  ( ! [X64] : (s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl155 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f39680,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292])).
fof(f49166,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154,f49165])).
fof(f49164,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl276 | $spl280)),
  inference(global_subsumption,[],[f49163,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154])).
fof(f49163,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl20 | $spl155 | $spl274 | $spl276)),
  inference(subsumption_resolution,[],[f49162,f49093])).
fof(f49093,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl20 | $spl155 | $spl274 | $spl276)),
  inference(global_subsumption,[],[f39678,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292])).
fof(f49162,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl20 | $spl155 | $spl274 | $spl276)),
  inference(forward_demodulation,[],[f26140,f49093])).
fof(f49161,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl276 | $spl280)),
  inference(global_subsumption,[],[f49160,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154])).
fof(f49160,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl20 | $spl155 | $spl274 | $spl276)),
  inference(condensation,[],[f49159])).
fof(f49159,plain,(
  ( ! [X206,X207] : (s(bool,X206) = s(bool,X207) | s(bool,'F_0') = s(bool,X207)) ) | ($spl20 | $spl155 | $spl274 | $spl276)),
  inference(subsumption_resolution,[],[f26830,f49093])).
fof(f49158,plain,(
  $false | ($spl18 | $spl20 | $spl155 | $spl274 | $spl278 | $spl280)),
  inference(global_subsumption,[],[f49157,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154])).
fof(f49157,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl18 | $spl20 | $spl155 | $spl274 | $spl278)),
  inference(condensation,[],[f49156])).
fof(f49156,plain,(
  ( ! [X271,X270] : (s(bool,X270) = s(bool,X271) | s(bool,'F_0') = s(bool,X271)) ) | ($spl18 | $spl20 | $spl155 | $spl274 | $spl278)),
  inference(subsumption_resolution,[],[f26845,f49094])).
fof(f49094,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl20 | $spl155 | $spl274 | $spl278)),
  inference(global_subsumption,[],[f39679,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292])).
fof(f49155,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f3130,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f14497,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34726,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37051,f28264,f28171,f27320,f26942,f26941,f26846,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f27292,f39680,f49095,f119,f29122,f49143,f49149,f49154])).
fof(f49147,plain,(
  $false | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(subsumption_resolution,[],[f49144,f49143])).
fof(f49144,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | ($spl20 | $spl155 | $spl274 | $spl280)),
  inference(backward_demodulation,[],[f49143,f27292])).
fof(f49092,plain,(
  $false | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f27292,f48822])).
fof(f48822,plain,(
  ( ! [X12] : (s(bool,'T_0') = s(bool,X12)) ) | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893])).
fof(f49086,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070,f49073,f49085])).
fof(f49085,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49084,f112])).
fof(f49084,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f164,f48822])).
fof(f49073,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49072,f112])).
fof(f49072,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f3725,f48822])).
fof(f49070,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49069,f112])).
fof(f49069,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK0)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11829,f48822])).
fof(f49067,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49066,f112])).
fof(f49066,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',sK1)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11874,f48822])).
fof(f49064,plain,(
  ( ! [X43,X41,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49063,f112])).
fof(f49063,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X42))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))),s('type.num.num',X42)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11786,f48822])).
fof(f49061,plain,(
  ( ! [X39,X38,X40] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49060,f112])).
fof(f49060,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X38))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))))),s('type.num.num',X39))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))),s('type.num.num',X38)))))),s('type.num.num',X39)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11925,f48822])).
fof(f49057,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49056,f112])).
fof(f49056,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X45),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))))),s('type.num.num',X46))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num',sK0))),s('type.num.num',X45))),s('type.num.num',sK0)))))),s('type.num.num',X46)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11101,f48822])).
fof(f49054,plain,(
  ( ! [X52,X50,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49053,f112])).
fof(f49053,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X51),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))))),s('type.num.num',X52))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',sK1))),s('type.num.num',X51))),s('type.num.num',sK1)))))),s('type.num.num',X52)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11366,f48822])).
fof(f49051,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49050,f112])).
fof(f49050,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f3726,f48822])).
fof(f49048,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49047,f112])).
fof(f49047,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f2215,f48822])).
fof(f49044,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49043,f112])).
fof(f49043,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f3254,f48822])).
fof(f49041,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49040,f112])).
fof(f49040,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK1))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11872,f48822])).
fof(f49038,plain,(
  ( ! [X45,X43,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49037,f112])).
fof(f49037,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X43),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X44))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X44),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num',sK1))),s('type.num.num',X43))),s('type.num.num',sK1))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11364,f48822])).
fof(f49035,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49034,f112])).
fof(f49034,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X32),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',sK0))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11827,f48822])).
fof(f49032,plain,(
  ( ! [X39,X37,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49031,f112])).
fof(f49031,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X37),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X38),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num',sK0))),s('type.num.num',X37))),s('type.num.num',sK0))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11099,f48822])).
fof(f49029,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49028,f112])).
fof(f49028,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f3229,f48822])).
fof(f49017,plain,(
  ( ! [X37,X35,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49016,f112])).
fof(f49016,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X36))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11784,f48822])).
fof(f49014,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49013,f112])).
fof(f49013,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X32))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X33),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))),s('type.num.num',X32))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11923,f48822])).
fof(f49011,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49010,f112])).
fof(f49010,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f3255,f48822])).
fof(f49006,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49005,f112])).
fof(f49005,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f119,f48822])).
fof(f49002,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49001,f112])).
fof(f49001,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f876,f48822])).
fof(f48999,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48998,f112])).
fof(f48998,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f8125,f48822])).
fof(f48996,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48995,f112])).
fof(f48995,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK1))),s('type.num.num',X30))),s('type.num.num',sK1))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11363,f48822])).
fof(f48993,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48992,f112])).
fof(f48992,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK1))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11871,f48822])).
fof(f48990,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48989,f112])).
fof(f48989,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X30),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X31),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0)))))))),s('type.num.num',X31))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num',sK0))),s('type.num.num',X30))),s('type.num.num',sK0))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11098,f48822])).
fof(f48987,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48986,f112])).
fof(f48986,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X19),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',sK0))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11826,f48822])).
fof(f48984,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48983,f112])).
fof(f48983,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f8088,f48822])).
fof(f48981,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48980,f112])).
fof(f48980,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',sK0))),s('type.num.num',sK2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X23),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))))))),s('type.num.num',X23))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11783,f48822])).
fof(f48978,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48977,f112])).
fof(f48977,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.num.num',X14))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14)))))))),s('type.num.num',X15))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',X14))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f8135,f48822])).
fof(f48975,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48974,f112])).
fof(f48974,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X19))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X20),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X21),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19)))))))),s('type.num.num',X20))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X19))),s('type.num.num',X19))))))))) ) | ($spl155 | $spl270)),
  inference(forward_demodulation,[],[f11922,f48822])).
fof(f48961,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X1))))))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f32597,f48822])).
fof(f48952,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f31106,f48822])).
fof(f48945,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X1))),s('type.num.num',X2))),s('type.num.num',X1)))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f29758,f48822])).
fof(f48937,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48887,f48822])).
fof(f48887,plain,(
  ( ! [X50] : (s(bool,'T_0') != s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f37049])).
fof(f48934,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48867,f48822])).
fof(f48867,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,'T_0') != s(bool,f(s(X458,sK4(X459,X460,bool,X458)))) | s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f26140])).
fof(f48866,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f26139])).
fof(f48931,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl155 | $spl270)),
  inference(condensation,[],[f48930])).
fof(f48930,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48861,f48822])).
fof(f48861,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f22283])).
fof(f48928,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl155 | $spl270)),
  inference(condensation,[],[f48927])).
fof(f48927,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48854,f872])).
fof(f48854,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f8058])).
fof(f48925,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48848,f48822])).
fof(f48848,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f5609])).
fof(f48918,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl155 | $spl270)),
  inference(condensation,[],[f48917])).
fof(f48917,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48830,f871])).
fof(f48830,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f1392])).
fof(f48915,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48824,f48822])).
fof(f48824,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f124])).
fof(f49083,plain,(
  $false | ($spl27 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49082,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070,f49073])).
fof(f49082,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49081,f112])).
fof(f49081,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f3765,f48822])).
fof(f49080,plain,(
  $false | ($spl47 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49079,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070,f49073])).
fof(f49079,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl47 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49078,f112])).
fof(f49078,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))),s('type.num.num',X11)))))) ) | ($spl47 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f10500,f48822])).
fof(f49077,plain,(
  $false | ($spl31 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49076,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070,f49073])).
fof(f49076,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl31 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49075,f112])).
fof(f49075,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))),s('type.num.num',X11)))))) ) | ($spl31 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f6030,f48822])).
fof(f49074,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070,f49073])).
fof(f49071,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067,f49070])).
fof(f49068,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064,f49067])).
fof(f49065,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061,f49064])).
fof(f49062,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057,f49061])).
fof(f49058,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054,f49057])).
fof(f49055,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051,f49054])).
fof(f49052,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048,f49051])).
fof(f49049,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044,f49048])).
fof(f49045,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041,f49044])).
fof(f49042,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038,f49041])).
fof(f49039,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035,f49038])).
fof(f49036,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032,f49035])).
fof(f49033,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029,f49032])).
fof(f49030,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017,f49029])).
fof(f49027,plain,(
  $false | ($spl31 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49026,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017])).
fof(f49026,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl31 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49025,f112])).
fof(f49025,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK0)))))))))))) ) | ($spl31 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f5820,f48822])).
fof(f49024,plain,(
  $false | ($spl47 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49023,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017])).
fof(f49023,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl47 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49022,f112])).
fof(f49022,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK1)))))))))))) ) | ($spl47 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f10048,f48822])).
fof(f49021,plain,(
  $false | ($spl27 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f49020,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017])).
fof(f49020,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f49019,f112])).
fof(f49019,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f3762,f48822])).
fof(f49018,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014,f49017])).
fof(f49015,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011,f49014])).
fof(f49012,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006,f49011])).
fof(f49007,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002,f49006])).
fof(f49003,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999,f49002])).
fof(f49000,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996,f48999])).
fof(f48997,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993,f48996])).
fof(f48994,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990,f48993])).
fof(f48991,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987,f48990])).
fof(f48988,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984,f48987])).
fof(f48985,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981,f48984])).
fof(f48982,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978,f48981])).
fof(f48979,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975,f48978])).
fof(f48976,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961,f48975])).
fof(f48972,plain,(
  $false | ($spl155 | $spl222 | $spl270)),
  inference(global_subsumption,[],[f48971,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961])).
fof(f48971,plain,(
  ( ! [X88,X87,X89] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | ($spl155 | $spl222 | $spl270)),
  inference(subsumption_resolution,[],[f33106,f48822])).
fof(f48970,plain,(
  $false | ($spl155 | $spl224 | $spl270)),
  inference(global_subsumption,[],[f48969,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961])).
fof(f48969,plain,(
  ( ! [X92,X93,X91] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) | ($spl155 | $spl224 | $spl270)),
  inference(subsumption_resolution,[],[f33107,f48822])).
fof(f48967,plain,(
  $false | ($spl155 | $spl220 | $spl270)),
  inference(global_subsumption,[],[f48966,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961])).
fof(f48966,plain,(
  ( ! [X70,X68,X69] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | ($spl155 | $spl220 | $spl270)),
  inference(subsumption_resolution,[],[f33103,f48822])).
fof(f48965,plain,(
  $false | ($spl22 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f48964,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961])).
fof(f48964,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl22 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48963,f48822])).
fof(f48963,plain,(
  ( ! [X557,X559,X555,X556,X558] : (s(bool,'T_0') != s(bool,X557) | s(bool,X557) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X558),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num',X556))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X559),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X556),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X555)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X555)) ) | ($spl22 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f32627,f48822])).
fof(f48962,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952,f48961])).
fof(f48956,plain,(
  $false | ($spl22 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f48955,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952])).
fof(f48955,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl22 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48954,f48822])).
fof(f48954,plain,(
  ( ! [X557,X555,X556,X558,X554] : (s(bool,'T_0') != s(bool,X556) | s(bool,X556) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X557),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num',X555))),s('type.num.num',X554))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X558),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X555),s('type.num.num',X554)))))) ) | ($spl22 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f31136,f48822])).
fof(f48953,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945,f48952])).
fof(f48949,plain,(
  $false | ($spl22 | $spl155 | $spl270)),
  inference(global_subsumption,[],[f48948,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945])).
fof(f48948,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl22 | $spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48947,f48822])).
fof(f48947,plain,(
  ( ! [X499,X500,X502,X501,X503] : (s(bool,'T_0') != s(bool,X500) | s(bool,X500) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X501),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X502),s('type.num.num',X499))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X503),s('type.num.num',X499))),s('type.num.num',X502))),s('type.num.num',X499)))) ) | ($spl22 | $spl155 | $spl270)),
  inference(forward_demodulation,[],[f29782,f48822])).
fof(f48946,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937,f48945])).
fof(f48942,plain,(
  $false | ($spl155 | $spl270 | $spl274)),
  inference(global_subsumption,[],[f48941,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937])).
fof(f48941,plain,(
  ( ! [X64] : (s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl155 | $spl270 | $spl274)),
  inference(subsumption_resolution,[],[f48889,f48822])).
fof(f48889,plain,(
  ( ! [X64] : (s(bool,'T_0') != s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl155 | $spl270 | $spl274)),
  inference(backward_demodulation,[],[f48822,f37051])).
fof(f48940,plain,(
  $false | ($spl155 | $spl270 | $spl272)),
  inference(global_subsumption,[],[f48939,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937])).
fof(f48939,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl155 | $spl270 | $spl272)),
  inference(subsumption_resolution,[],[f48888,f48822])).
fof(f48888,plain,(
  ( ! [X58] : (s(bool,'T_0') != s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl155 | $spl270 | $spl272)),
  inference(backward_demodulation,[],[f48822,f37050])).
fof(f48938,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934,f48937])).
fof(f48935,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866,f48934])).
fof(f48933,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931,f48866])).
fof(f48932,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928,f48931])).
fof(f48929,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925,f48928])).
fof(f48926,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918,f48925])).
fof(f48919,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915,f48918])).
fof(f48916,plain,(
  $false | ($spl155 | $spl270)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f3738,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f27086,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f27292,f37487,f37416,f37417,f37419,f37587,f37590,f37591,f37592,f37484,f37482,f37763,f37764,f37766,f37903,f37906,f37907,f37908,f37933,f37941,f38082,f38080,f38078,f38077,f38076,f38128,f38341,f38342,f38727,f38732,f38734,f38735,f39663,f39655,f39654,f39653,f39699,f39700,f39701,f39702,f39724,f39729,f39741,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3264,f3229,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8156,f8088,f876,f119,f28272,f28232,f28221,f27274,f27272,f13754,f13637,f13545,f13361,f783,f781,f42972,f37049,f28264,f28171,f27320,f26942,f26941,f26830,f26817,f26140,f26139,f25962,f25961,f25407,f22301,f22283,f21255,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f2927,f2651,f2650,f2532,f2531,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f38152,f38151,f1878,f2252,f3270,f8165,f29680,f31020,f32495,f893,f48822,f48915])).
fof(f48914,plain,(
  $false | ($spl155 | $spl270)),
  inference(subsumption_resolution,[],[f48823,f112])).
fof(f48823,plain,(
  ~p(s(bool,'T_0')) | ($spl155 | $spl270)),
  inference(backward_demodulation,[],[f48822,f114])).
fof(f48781,plain,(
  ( ! [X45,X46,X44,X42] : (s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X46) | s(bool,X45) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,X44)) ) | $spl282),
  inference(cnf_transformation,[],[f48781_D])).
fof(f48781_D,plain,(
  ( ! [X45,X46,X44,X42] : (s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,X46) | s(bool,X45) = s(bool,f(s(bool,X42))) | s(bool,X42) = s(bool,X44)) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f48782,plain,(
  ( ! [X54,X52,X56,X55,X53] : (p(s(bool,X53)) | s(bool,'F_0') = s(bool,X54) | s(bool,X52) = s(bool,X54) | s(bool,X55) = s(bool,f(s(bool,X52))) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) ) | $spl154),
  inference(subsumption_resolution,[],[f48664,f120])).
fof(f48664,plain,(
  ( ! [X54,X52,X56,X55,X53] : (p(s(bool,X53)) | s(bool,'F_0') = s(bool,X54) | s(bool,X52) = s(bool,X54) | s(bool,X55) = s(bool,f(s(bool,X52))) | s(bool,X55) = s(bool,X56) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,X53)) ) | $spl154),
  inference(superposition,[],[f41596,f419])).
fof(f48780,plain,(
  ( ! [X45,X43,X46,X44,X42] : (p(s(bool,X43)) | s(bool,'F_0') = s(bool,X44) | s(bool,X42) = s(bool,X44) | s(bool,X45) = s(bool,f(s(bool,X42))) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl154),
  inference(subsumption_resolution,[],[f48662,f120])).
fof(f48662,plain,(
  ( ! [X45,X43,X46,X44,X42] : (p(s(bool,X43)) | s(bool,'F_0') = s(bool,X44) | s(bool,X42) = s(bool,X44) | s(bool,X45) = s(bool,f(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl154),
  inference(superposition,[],[f41596,f419])).
fof(f27275,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X37) | s(bool,X37) = s(bool,g(s(bool,sK4(X35,X36,bool,bool))))) ) | $spl144),
  inference(cnf_transformation,[],[f27275_D])).
fof(f27275_D,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X39) | s(bool,'T_0') = s(bool,X37) | s(bool,X37) = s(bool,g(s(bool,sK4(X35,X36,bool,bool))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f38151,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,X37) = s(bool,g(s(bool,sK4(X35,X36,bool,bool)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f781,f419])).
fof(f38152,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,X43) = s(bool,g(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f781,f419])).
fof(f43795,plain,(
  $false | ($spl81 | $spl82 | $spl154)),
  inference(global_subsumption,[],[f43794,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505,f43782])).
fof(f43782,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43506,f43461])).
fof(f43506,plain,(
  ( ! [X461,X459,X460,X462,X458] : (s(bool,'T_0') != s(bool,f(s(X458,sK4(X459,X460,bool,X458)))) | s(fun(X458,bool),X459) = s(fun(X458,bool),X460) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X462),s('type.num.num','const.num.|48|_0'))) | s(bool,X461) = s(bool,g(s(X458,sK4(X459,X460,bool,X458))))) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f26140])).
fof(f43505,plain,(
  ( ! [X453,X455,X457,X454,X456] : (s(X455,f(s(bool,'T_0'))) != s(X455,g(s(bool,'T_0'))) | s(fun(bool,X455),X453) = s(fun(bool,X455),X454) | s(bool,X456) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) | s(bool,X456) = s(bool,sK4(X453,X454,X455,bool))) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f26139])).
fof(f43779,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl81 | $spl82)),
  inference(condensation,[],[f43778])).
fof(f43778,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43500,f43461])).
fof(f43500,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f22283])).
fof(f43776,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl81 | $spl82)),
  inference(condensation,[],[f43775])).
fof(f43775,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43493,f872])).
fof(f43493,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f8058])).
fof(f43773,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43487,f43461])).
fof(f43487,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f5609])).
fof(f43766,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl81 | $spl82)),
  inference(condensation,[],[f43765])).
fof(f43765,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43469,f871])).
fof(f43469,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f1392])).
fof(f43763,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43463,f43461])).
fof(f43463,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f124])).
fof(f43461,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43340,f24217])).
fof(f43340,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl81),
  inference(trivial_inequality_removal,[],[f43306])).
fof(f43306,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl81),
  inference(superposition,[],[f24216,f229])).
fof(f43460,plain,(
  ( ! [X61,X62] : (s(bool,X61) != s(bool,f(s(bool,X61))) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.num.|48|_0')))) ) | $spl81),
  inference(subsumption_resolution,[],[f43303,f176])).
fof(f43303,plain,(
  ( ! [X61,X62] : (s(bool,X61) != s(bool,f(s(bool,X61))) | s(bool,X61) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X62),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl81),
  inference(superposition,[],[f24216,f5275])).
fof(f43459,plain,(
  ( ! [X59] : (s(bool,X59) != s(bool,f(s(bool,X59))) | s(bool,'F_0') = s(bool,X59)) ) | $spl81),
  inference(subsumption_resolution,[],[f43302,f177])).
fof(f43302,plain,(
  ( ! [X59,X60] : (s(bool,X59) != s(bool,f(s(bool,X59))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X60),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X59)) ) | $spl81),
  inference(superposition,[],[f24216,f5275])).
fof(f43278,plain,(
  ( ! [X17,X16] : (s(bool,X16) != s(bool,f(s(bool,X16))) | s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X16) = s(bool,X17)) ) | $spl81),
  inference(superposition,[],[f24216,f873])).
fof(f43277,plain,(
  ( ! [X14,X15] : (s(bool,X14) != s(bool,f(s(bool,X14))) | s(bool,X15) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X14) = s(bool,X15)) ) | $spl81),
  inference(superposition,[],[f24216,f872])).
fof(f43276,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,f(s(bool,X12))) | s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X12) = s(bool,X13)) ) | $spl81),
  inference(superposition,[],[f24216,f871])).
fof(f43274,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) != s(bool,f(s(bool,X4))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X6) | s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl81),
  inference(superposition,[],[f24216,f419])).
fof(f43272,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl81),
  inference(superposition,[],[f24216,f229])).
fof(f43353,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl81),
  inference(forward_demodulation,[],[f43271,f216])).
fof(f43271,plain,(
  ( ! [X0] : (s(bool,f(s(bool,'T_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl81),
  inference(unit_resulting_resolution,[],[f176,f24216,f5275])).
fof(f43794,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl81 | $spl82 | $spl154)),
  inference(condensation,[],[f43793])).
fof(f43793,plain,(
  ( ! [X134,X133] : (s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | ($spl81 | $spl82 | $spl154)),
  inference(subsumption_resolution,[],[f43548,f43461])).
fof(f43548,plain,(
  ( ! [X134,X133] : (s(bool,'T_0') != s(bool,f(s(bool,X133))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134)) ) | ($spl81 | $spl82 | $spl154)),
  inference(backward_demodulation,[],[f43461,f42742])).
fof(f43790,plain,(
  $false | ($spl81 | $spl82 | $spl154 | $spl274)),
  inference(global_subsumption,[],[f43789,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505,f43782])).
fof(f43789,plain,(
  ( ! [X64] : (s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl81 | $spl82 | $spl154 | $spl274)),
  inference(subsumption_resolution,[],[f43530,f40973])).
fof(f43530,plain,(
  ( ! [X64] : (s(bool,'T_0') != s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | ($spl81 | $spl82 | $spl274)),
  inference(backward_demodulation,[],[f43461,f37051])).
fof(f43788,plain,(
  $false | ($spl81 | $spl82 | $spl154 | $spl272)),
  inference(global_subsumption,[],[f43787,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505,f43782])).
fof(f43787,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl81 | $spl82 | $spl154 | $spl272)),
  inference(subsumption_resolution,[],[f43529,f40972])).
fof(f43529,plain,(
  ( ! [X58] : (s(bool,'T_0') != s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl81 | $spl82 | $spl272)),
  inference(backward_demodulation,[],[f43461,f37050])).
fof(f43786,plain,(
  $false | ($spl81 | $spl82 | $spl154 | $spl270)),
  inference(global_subsumption,[],[f43785,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505,f43782])).
fof(f43785,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl81 | $spl82 | $spl154 | $spl270)),
  inference(subsumption_resolution,[],[f43528,f40971])).
fof(f43528,plain,(
  ( ! [X50] : (s(bool,'T_0') != s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl81 | $spl82 | $spl270)),
  inference(backward_demodulation,[],[f43461,f37049])).
fof(f43783,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505,f43782])).
fof(f43781,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779,f43505])).
fof(f43780,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776,f43779])).
fof(f43777,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773,f43776])).
fof(f43774,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766,f43773])).
fof(f43767,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763,f43766])).
fof(f43764,plain,(
  $false | ($spl81 | $spl82)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f24216,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f24217,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33366,f33365,f33361,f33359,f33358,f33353,f33343,f34767,f34768,f34775,f33277,f33276,f33275,f33269,f33266,f33260,f33259,f33258,f33252,f33249,f33171,f33179,f33178,f33177,f32127,f32126,f30650,f30649,f3699,f3233,f32119,f30642,f32104,f32114,f32122,f30627,f30637,f30645,f33168,f32030,f32014,f31932,f30556,f30541,f30465,f30450,f29294,f29293,f29292,f29291,f29279,f29278,f32381,f30898,f29570,f3254,f32504,f30468,f11872,f11364,f32506,f32508,f11827,f11099,f32505,f32507,f11784,f32516,f11923,f32517,f3255,f32515,f34815,f3725,f30453,f31935,f34812,f34814,f11101,f11829,f34811,f34813,f11366,f11874,f34803,f11786,f34804,f3726,f34802,f11925,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33364,f33363,f33347,f33346,f33341,f33339,f33338,f33337,f33336,f33335,f33334,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3270,f3264,f3229,f2252,f2246,f2215,f164,f8125,f29125,f11363,f11871,f11098,f11826,f11783,f8135,f11922,f33360,f33340,f32101,f30624,f29807,f29758,f29680,f29572,f29285,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f42972,f43353,f43272,f43274,f43276,f43277,f43278,f43459,f43460,f43461,f43763])).
fof(f43762,plain,(
  $false | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f43462,f112])).
fof(f43462,plain,(
  ~p(s(bool,'T_0')) | ($spl81 | $spl82)),
  inference(backward_demodulation,[],[f43461,f114])).
fof(f40655,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f40654,f40163])).
fof(f40163,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl16),
  inference(superposition,[],[f3128,f3128])).
fof(f40654,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,X30)) ) | $spl16),
  inference(subsumption_resolution,[],[f40267,f40092])).
fof(f40092,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(unit_resulting_resolution,[],[f3128,f124])).
fof(f40267,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,X30) | p(s(bool,'F_0'))) ) | $spl16),
  inference(superposition,[],[f120,f3128])).
fof(f40653,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f40258,f40163])).
fof(f40258,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3)) ) | $spl16),
  inference(superposition,[],[f176,f3128])).
fof(f40648,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f40131,f114])).
fof(f40131,plain,(
  p(s(bool,'F_0')) | $spl16),
  inference(unit_resulting_resolution,[],[f3128,f120])).
fof(f40647,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f40155,f114])).
fof(f40155,plain,(
  p(s(bool,'F_0')) | $spl16),
  inference(unit_resulting_resolution,[],[f176,f176,f3128,f487])).
fof(f40646,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f40158,f114])).
fof(f40158,plain,(
  p(s(bool,'F_0')) | $spl16),
  inference(unit_resulting_resolution,[],[f177,f177,f3128,f487])).
fof(f40645,plain,(
  $false | ($spl16 | $spl45)),
  inference(subsumption_resolution,[],[f40161,f114])).
fof(f40161,plain,(
  p(s(bool,'F_0')) | ($spl16 | $spl45)),
  inference(unit_resulting_resolution,[],[f11022,f11022,f3128,f487])).
fof(f11022,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl45),
  inference(unit_resulting_resolution,[],[f177,f177,f8130,f487])).
fof(f40162,plain,(
  $false | ($spl16 | $spl45)),
  inference(unit_resulting_resolution,[],[f114,f11022,f11022,f3128,f487])).
fof(f40159,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f114,f177,f177,f3128,f487])).
fof(f40156,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f114,f176,f176,f3128,f487])).
fof(f40147,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f176,f3128,f1622])).
fof(f40144,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f177,f3128,f5414])).
fof(f40132,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f114,f3128,f120])).
fof(f40129,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f176,f3128,f2587])).
fof(f40124,plain,(
  $false | ($spl16 | $spl20)),
  inference(unit_resulting_resolution,[],[f176,f3128,f3130])).
fof(f40118,plain,(
  $false | ($spl16 | $spl18)),
  inference(unit_resulting_resolution,[],[f176,f3128,f3129])).
fof(f40116,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f3128,f1169])).
fof(f40105,plain,(
  $false | ($spl16 | $spl45)),
  inference(unit_resulting_resolution,[],[f11022,f11022,f3128,f706])).
fof(f40103,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f177,f177,f3128,f706])).
fof(f40101,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f176,f3128,f706])).
fof(f40093,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f112,f3128,f124])).
fof(f40091,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f177,f3128,f5609])).
fof(f40071,plain,(
  $false | $spl16),
  inference(unit_resulting_resolution,[],[f176,f3128])).
fof(f1285,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,X21)) ) | $spl2),
  inference(cnf_transformation,[],[f1285_D])).
fof(f1285_D,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,X21)) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f39680,plain,(
  ( ! [X64] : (s(bool,'F_0') = s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl280),
  inference(cnf_transformation,[],[f39680_D])).
fof(f39680_D,plain,(
  ( ! [X64] : (s(bool,'F_0') = s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f39653,plain,(
  ( ! [X64,X63] : (s(bool,'F_0') = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl155),
  inference(duplicate_literal_removal,[],[f39453])).
fof(f39453,plain,(
  ( ! [X64,X63] : (s(bool,'F_0') = s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X63)) ) | $spl155),
  inference(superposition,[],[f38128,f873])).
fof(f39679,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl278),
  inference(cnf_transformation,[],[f39679_D])).
fof(f39679_D,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f39654,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl155),
  inference(duplicate_literal_removal,[],[f39450])).
fof(f39450,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X57)) ) | $spl155),
  inference(superposition,[],[f38128,f872])).
fof(f39678,plain,(
  ( ! [X50] : (s(bool,'F_0') = s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl276),
  inference(cnf_transformation,[],[f39678_D])).
fof(f39678_D,plain,(
  ( ! [X50] : (s(bool,'F_0') = s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f39655,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,f(s(bool,X50))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl155),
  inference(duplicate_literal_removal,[],[f39446])).
fof(f39446,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,f(s(bool,X50))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X49)) ) | $spl155),
  inference(superposition,[],[f38128,f871])).
fof(f37158,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637,f27292])).
fof(f37157,plain,(
  $false | ($spl155 | $spl174 | $spl178)),
  inference(global_subsumption,[],[f28986,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f37156,plain,(
  $false | ($spl155 | $spl178 | $spl220)),
  inference(global_subsumption,[],[f33103,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f37155,plain,(
  $false | ($spl155 | $spl178 | $spl222)),
  inference(global_subsumption,[],[f33106,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f37154,plain,(
  $false | ($spl155 | $spl178 | $spl224)),
  inference(global_subsumption,[],[f33107,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f37153,plain,(
  $false | ($spl45 | $spl155 | $spl178)),
  inference(global_subsumption,[],[f36635,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f36635,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl45 | $spl178)),
  inference(forward_demodulation,[],[f36467,f11041])).
fof(f11041,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | $spl45),
  inference(forward_demodulation,[],[f11020,f216])).
fof(f11020,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(unit_resulting_resolution,[],[f177,f8130,f278])).
fof(f36467,plain,(
  s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl45 | $spl178)),
  inference(unit_resulting_resolution,[],[f11022,f29081])).
fof(f37152,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465,f36637])).
fof(f37151,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634,f36465])).
fof(f37150,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641,f36634])).
fof(f37149,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616,f36641])).
fof(f37148,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615,f36616])).
fof(f37147,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614,f36615])).
fof(f37146,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647,f36614])).
fof(f37145,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651,f36647])).
fof(f37144,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654,f36651])).
fof(f37143,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675,f36654])).
fof(f37142,plain,(
  $false | ($spl18 | $spl155 | $spl178)),
  inference(global_subsumption,[],[f36657,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675])).
fof(f37141,plain,(
  $false | ($spl45 | $spl155 | $spl178)),
  inference(global_subsumption,[],[f36659,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675])).
fof(f36659,plain,(
  ( ! [X98] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X98)) ) | ($spl45 | $spl178)),
  inference(forward_demodulation,[],[f36613,f11041])).
fof(f36613,plain,(
  ( ! [X98] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X98)) ) | ($spl45 | $spl178)),
  inference(duplicate_literal_removal,[],[f36510])).
fof(f36510,plain,(
  ( ! [X98] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) ) | ($spl45 | $spl178)),
  inference(superposition,[],[f29081,f11043])).
fof(f11043,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl45),
  inference(subsumption_resolution,[],[f11024,f112])).
fof(f11024,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl45),
  inference(superposition,[],[f8130,f229])).
fof(f37140,plain,(
  $false | ($spl20 | $spl155 | $spl178)),
  inference(global_subsumption,[],[f36662,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675])).
fof(f36662,plain,(
  ( ! [X99] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl20 | $spl178)),
  inference(forward_demodulation,[],[f36661,f216])).
fof(f36661,plain,(
  ( ! [X99,X100] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X99)) ) | ($spl20 | $spl178)),
  inference(subsumption_resolution,[],[f36511,f3130])).
fof(f36511,plain,(
  ( ! [X99,X100] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X100),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X99) | s(bool,X99) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl178),
  inference(superposition,[],[f29081,f21962])).
fof(f37139,plain,(
  $false | ($spl45 | $spl155 | $spl178)),
  inference(global_subsumption,[],[f36672,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675])).
fof(f36672,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | ($spl45 | $spl178)),
  inference(subsumption_resolution,[],[f36529,f11022])).
fof(f36529,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | ($spl45 | $spl178)),
  inference(superposition,[],[f29081,f11041])).
fof(f37138,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677,f36675])).
fof(f37137,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679,f36677])).
fof(f37136,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681,f36679])).
fof(f37135,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691,f36681])).
fof(f37134,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694,f36691])).
fof(f37133,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697,f36694])).
fof(f37132,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700,f36697])).
fof(f37131,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705,f36700])).
fof(f37130,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708,f36705])).
fof(f37129,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713,f36708])).
fof(f37128,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717,f36713])).
fof(f37127,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125,f36717])).
fof(f37126,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721,f37125])).
fof(f37123,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121,f36721])).
fof(f37122,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725,f37121])).
fof(f37119,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727,f36725])).
fof(f37118,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728,f36727])).
fof(f37117,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729,f36728])).
fof(f37116,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730,f36729])).
fof(f37115,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607,f36730])).
fof(f37114,plain,(
  $false | ($spl155 | $spl178)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15961,f3732,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f2927,f2650,f2531,f1790,f1789,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27658,f27587,f27588,f27590,f27758,f27761,f27762,f27763,f27655,f27653,f27795,f27796,f27798,f27935,f27938,f27939,f27940,f27965,f27973,f28041,f28042,f28043,f28045,f28189,f28192,f28198,f28063,f28064,f28202,f28203,f28205,f28206,f28071,f28209,f28219,f28413,f28411,f28409,f28408,f28407,f28459,f28547,f28548,f28939,f28944,f28946,f28947,f28825,f28069,f29082,f29624,f29727,f29742,f29746,f29564,f29757,f29561,f29812,f30949,f30948,f31075,f30893,f31090,f31094,f30891,f31105,f30888,f31158,f27292,f31794,f31723,f31724,f31726,f31894,f31897,f31898,f31899,f31791,f31789,f32434,f32433,f32432,f32033,f32566,f32376,f32581,f32585,f32374,f32373,f32596,f32370,f32662,f32745,f32746,f32748,f32885,f32888,f32889,f32890,f32915,f32923,f33077,f33076,f33075,f33073,f33071,f33069,f33068,f33067,f33126,f33181,f33182,f33683,f33682,f33681,f33680,f33745,f33589,f34632,f34634,f34643,f34647,f34648,f34029,f34653,f33569,f34026,f33561,f33545,f33532,f34014,f33595,f34012,f33494,f33491,f33490,f33489,f33488,f34699,f33471,f33470,f33468,f34708,f34712,f34715,f34729,f34730,f34732,f33634,f34751,f33377,f33376,f33375,f33374,f33372,f33371,f33370,f33369,f33368,f33366,f33365,f33364,f33363,f33361,f33360,f33359,f33358,f33353,f33347,f33346,f33343,f33341,f33340,f33339,f33338,f33337,f33336,f33335,f33334,f34767,f34768,f34775,f34802,f33277,f33276,f33275,f34803,f34804,f33269,f34811,f34812,f33266,f34813,f34814,f34815,f33260,f33259,f33258,f33252,f33249,f3254,f32504,f30468,f33171,f11827,f11099,f32505,f32507,f11872,f11364,f32506,f32508,f11784,f32516,f3255,f32515,f11923,f32517,f3725,f30453,f31935,f11101,f11829,f11366,f11874,f11786,f11925,f3726,f33179,f33178,f33177,f32657,f32597,f32495,f32383,f32133,f32132,f32130,f32129,f32127,f32126,f32125,f32124,f32108,f32107,f32100,f32099,f32097,f32096,f32095,f32040,f32039,f32024,f32023,f32017,f31949,f31948,f31942,f31941,f31153,f31106,f31020,f30900,f30650,f30649,f30648,f30647,f30631,f30630,f30623,f30622,f30620,f30619,f30618,f30565,f30550,f30477,f30476,f30474,f30459,f15963,f15962,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2215,f164,f32119,f30642,f8125,f29125,f11098,f11826,f11363,f11871,f32104,f32114,f32122,f30627,f30637,f30645,f11783,f11922,f8135,f33168,f32101,f32030,f32014,f31932,f30624,f30556,f30541,f30465,f30450,f29807,f29758,f29680,f29572,f29294,f29293,f29292,f29291,f29285,f29279,f29278,f29275,f29202,f29122,f29117,f29116,f29101,f29100,f15949,f15948,f8165,f8156,f8088,f1878,f893,f876,f119,f32381,f30898,f29570,f28272,f28264,f28232,f28221,f28171,f27320,f27274,f27272,f26140,f25962,f13754,f13637,f13545,f13361,f2651,f2532,f1693,f788,f783,f781,f29081,f36624,f36664,f36665,f36674,f36541,f36542,f36544,f36686,f36687,f36688,f36689,f36607])).
fof(f37051,plain,(
  ( ! [X64] : (s(bool,'F_0') != s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl274),
  inference(cnf_transformation,[],[f37051_D])).
fof(f37051_D,plain,(
  ( ! [X64] : (s(bool,'F_0') != s(bool,f(s(bool,X64))) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f37020,plain,(
  ( ! [X64,X63] : (s(bool,'F_0') != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f36911])).
fof(f36911,plain,(
  ( ! [X64,X63] : (s(bool,'F_0') != s(bool,f(s(bool,X64))) | s(bool,'T_0') = s(bool,X63) | s(bool,X64) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X63)) ) | $spl154),
  inference(superposition,[],[f35488,f873])).
fof(f37050,plain,(
  ( ! [X58] : (s(bool,'F_0') != s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl272),
  inference(cnf_transformation,[],[f37050_D])).
fof(f37050_D,plain,(
  ( ! [X58] : (s(bool,'F_0') != s(bool,f(s(bool,X58))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f37021,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f36908])).
fof(f36908,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') != s(bool,f(s(bool,X58))) | s(bool,'T_0') = s(bool,X57) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X57)) ) | $spl154),
  inference(superposition,[],[f35488,f872])).
fof(f37049,plain,(
  ( ! [X50] : (s(bool,'F_0') != s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl270),
  inference(cnf_transformation,[],[f37049_D])).
fof(f37049_D,plain,(
  ( ! [X50] : (s(bool,'F_0') != s(bool,f(s(bool,X50))) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f37022,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') != s(bool,f(s(bool,X50))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f36904])).
fof(f36904,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') != s(bool,f(s(bool,X50))) | s(bool,'T_0') = s(bool,X49) | s(bool,X50) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X49)) ) | $spl154),
  inference(superposition,[],[f35488,f871])).
fof(f3128,plain,(
  ( ! [X43] : (s(bool,'F_0') = s(bool,X43)) ) | $spl16),
  inference(cnf_transformation,[],[f3128_D])).
fof(f3128_D,plain,(
  ( ! [X43] : (s(bool,'F_0') = s(bool,X43)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f29081,plain,(
  ( ! [X159] : (s(bool,X159) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X159)) ) | $spl178),
  inference(cnf_transformation,[],[f29081_D])).
fof(f29081_D,plain,(
  ( ! [X159] : (s(bool,X159) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X159)) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f36215,plain,(
  ( ! [X109,X108] : (s(bool,X109) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X109) | s(bool,'F_0') = s(bool,X108)) ) | $spl154),
  inference(duplicate_literal_removal,[],[f36065])).
fof(f36065,plain,(
  ( ! [X109,X108] : (s(bool,X109) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X109) | s(bool,'F_0') = s(bool,X108) | s(bool,'F_0') = s(bool,X108)) ) | $spl154),
  inference(superposition,[],[f1622,f35049])).
fof(f34709,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X5))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) ) | $spl266),
  inference(cnf_transformation,[],[f34709_D])).
fof(f34709_D,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X5))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f34669,plain,(
  ( ! [X257,X259,X260,X258] : (s(bool,X257) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X258))) | s(bool,'T_0') = s(bool,X257) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X259),s('type.num.num',X258))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X260),s('type.num.num',X258))),s('type.num.num',X259))),s('type.num.num',X258)))) ) | $spl246),
  inference(cnf_transformation,[],[f34669_D])).
fof(f34669_D,plain,(
  ( ! [X257,X259,X260,X258] : (s(bool,X257) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X258))) | s(bool,'T_0') = s(bool,X257) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X259),s('type.num.num',X258))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X260),s('type.num.num',X258))),s('type.num.num',X259))),s('type.num.num',X258)))) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f34775,plain,(
  ( ! [X177,X182,X180,X178,X176,X181,X179] : (s(bool,X179) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))))),s('type.num.num',X176))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))),s('type.num.num',X176))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X177) | s(bool,'T_0') = s(bool,X179) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X181),s('type.num.num',X178))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X182),s('type.num.num',X178))),s('type.num.num',X181))),s('type.num.num',X178)))) )),
  inference(subsumption_resolution,[],[f33312,f34730])).
fof(f33312,plain,(
  ( ! [X177,X182,X180,X178,X176,X181,X179] : (s(bool,X179) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))))),s('type.num.num',X176))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X180),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X177)))),s('type.num.num',X176))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X177) | s(bool,'T_0') = s(bool,X179) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X181),s('type.num.num',X178))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X182),s('type.num.num',X178))),s('type.num.num',X181))),s('type.num.num',X178))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X176),s('type.num.num',X177)))) )),
  inference(superposition,[],[f3732,f893])).
fof(f34657,plain,(
  ( ! [X335,X337,X334,X336] : (s(bool,X334) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X335),s('type.num.num',X336))) | s(bool,'T_0') = s(bool,X334) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))),s('type.num.num',X335))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X336),s('type.num.num',X335)))))) ) | $spl244),
  inference(cnf_transformation,[],[f34657_D])).
fof(f34657_D,plain,(
  ( ! [X335,X337,X334,X336] : (s(bool,X334) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X335),s('type.num.num',X336))) | s(bool,'T_0') = s(bool,X334) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))),s('type.num.num',X335))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X336),s('type.num.num',X335)))))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f34768,plain,(
  ( ! [X231,X229,X227,X225,X230,X228,X226] : (s(bool,X229) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X227),s('type.num.num',X228))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X226)))))),s('type.num.num',X225))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X226)))),s('type.num.num',X225))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X226) | s(bool,'T_0') = s(bool,X229) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X228))),s('type.num.num',X227))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X228),s('type.num.num',X227)))))) )),
  inference(subsumption_resolution,[],[f33322,f34730])).
fof(f33322,plain,(
  ( ! [X231,X229,X227,X225,X230,X228,X226] : (s(bool,X229) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X227),s('type.num.num',X228))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X226)))))),s('type.num.num',X225))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X226)))),s('type.num.num',X225))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X226) | s(bool,'T_0') = s(bool,X229) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X228))),s('type.num.num',X227))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X228),s('type.num.num',X227))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X225),s('type.num.num',X226)))) )),
  inference(superposition,[],[f3732,f2246])).
fof(f34655,plain,(
  ( ! [X377,X376,X378,X375] : (s(bool,X375) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X376),s('type.num.num',X377))) | s(bool,'T_0') = s(bool,X375) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X376) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',X377))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X377),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376))))))))) ) | $spl240),
  inference(cnf_transformation,[],[f34655_D])).
fof(f34655_D,plain,(
  ( ! [X377,X376,X378,X375] : (s(bool,X375) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X376),s('type.num.num',X377))) | s(bool,'T_0') = s(bool,X375) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X376) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',X377))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X377),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376))))))))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f34767,plain,(
  ( ! [X237,X235,X233,X238,X236,X234,X232] : (s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X234),s('type.num.num',X235))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X233)))))),s('type.num.num',X232))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X233)))),s('type.num.num',X232))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s(bool,'T_0') = s(bool,X236) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num',X235))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X234)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X235),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X234)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X234)) )),
  inference(subsumption_resolution,[],[f33323,f34730])).
fof(f33323,plain,(
  ( ! [X237,X235,X233,X238,X236,X234,X232] : (s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X234),s('type.num.num',X235))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X233)))))),s('type.num.num',X232))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X233)))),s('type.num.num',X232))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X233) | s(bool,'T_0') = s(bool,X236) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num',X235))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X234)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X235),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X234)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X234) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X232),s('type.num.num',X233)))) )),
  inference(superposition,[],[f3732,f3264])).
fof(f34692,plain,(
  ( ! [X650,X653,X651] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X650),s('type.num.num',X651)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X651) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))))),s('type.num.num',X650))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))),s('type.num.num',X650)))))) ) | $spl254),
  inference(cnf_transformation,[],[f34692_D])).
fof(f34692_D,plain,(
  ( ! [X650,X653,X651] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X650),s('type.num.num',X651)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X651) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))))),s('type.num.num',X650))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))),s('type.num.num',X650)))))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f34732,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))))),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X2)))),s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) )),
  inference(condensation,[],[f34731])).
fof(f34731,plain,(
  ( ! [X280,X277,X279,X276,X278] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278)))) | s(bool,X276) = s(bool,X279) | s(bool,'F_0') = s(bool,X279) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))),s('type.num.num',X277))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))),s('type.num.num',X277))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X278)) )),
  inference(subsumption_resolution,[],[f33436,f2587])).
fof(f33436,plain,(
  ( ! [X280,X277,X279,X276,X278] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num',X278)))) | s(bool,X276) = s(bool,X279) | s(bool,'F_0') = s(bool,X279) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))))),s('type.num.num',X277))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X278)))),s('type.num.num',X277))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X278) | s(bool,'T_0') = s(bool,X276)) )),
  inference(superposition,[],[f1673,f3732])).
fof(f34706,plain,(
  ( ! [X504,X506,X503] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X503),s('type.num.num',X504))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X504) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))))),s('type.num.num',X503))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))),s('type.num.num',X503)))))) ) | $spl264),
  inference(cnf_transformation,[],[f34706_D])).
fof(f34706_D,plain,(
  ( ! [X504,X506,X503] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X503),s('type.num.num',X504))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X504) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))))),s('type.num.num',X503))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))),s('type.num.num',X503)))))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f34727,plain,(
  ( ! [X308,X310,X309,X307] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X308),s('type.num.num',X309))) | s(bool,'T_0') = s(bool,X307) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))))),s('type.num.num',X308))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))),s('type.num.num',X308))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X309)) ) | $spl18),
  inference(forward_demodulation,[],[f33620,f181])).
fof(f33620,plain,(
  ( ! [X308,X310,X309,X307] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X308),s('type.num.num',X309))) | s(bool,'T_0') = s(bool,X307) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))))),s('type.num.num',X308))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))),s('type.num.num',X308))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X309)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f33442])).
fof(f33442,plain,(
  ( ! [X308,X310,X309,X307] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X308),s('type.num.num',X309))) | s(bool,'T_0') = s(bool,X307) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))))),s('type.num.num',X308))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X309)))),s('type.num.num',X308))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X309) | s(bool,'T_0') = s(bool,X307)) ) | $spl18),
  inference(superposition,[],[f3129,f3732])).
fof(f34726,plain,(
  ( ! [X313,X312,X314,X311] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X312),s('type.num.num',X313))) | s(bool,'T_0') = s(bool,X311) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))))),s('type.num.num',X312))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))),s('type.num.num',X312))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X313)) ) | $spl20),
  inference(forward_demodulation,[],[f33619,f182])).
fof(f33619,plain,(
  ( ! [X313,X312,X314,X311] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X312),s('type.num.num',X313))) | s(bool,'T_0') = s(bool,X311) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))))),s('type.num.num',X312))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))),s('type.num.num',X312))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X313)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f33443])).
fof(f33443,plain,(
  ( ! [X313,X312,X314,X311] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X312),s('type.num.num',X313))) | s(bool,'T_0') = s(bool,X311) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))))),s('type.num.num',X312))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X313)))),s('type.num.num',X312))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X313) | s(bool,'T_0') = s(bool,X311)) ) | $spl20),
  inference(superposition,[],[f3130,f3732])).
fof(f34715,plain,(
  ( ! [X397,X395,X396,X394] : (s(bool,'T_0') = s(bool,X394) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X395),s('type.num.num',X396))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))))),s('type.num.num',X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))),s('type.num.num',X395))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X396)) )),
  inference(forward_demodulation,[],[f34001,f181])).
fof(f34001,plain,(
  ( ! [X397,X395,X396,X394] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X395),s('type.num.num',X396))) | s(bool,X394) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))))),s('type.num.num',X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))),s('type.num.num',X395))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X396)) )),
  inference(subsumption_resolution,[],[f33458,f7994])).
fof(f33458,plain,(
  ( ! [X397,X395,X396,X394] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X395),s('type.num.num',X396))) | s(bool,X394) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))))),s('type.num.num',X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X396)))),s('type.num.num',X395))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X396) | s(bool,'T_0') = s(bool,X394)) )),
  inference(superposition,[],[f7994,f3732])).
fof(f34712,plain,(
  ( ! [X428,X426,X429,X427] : (s(bool,'T_0') = s(bool,X426) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428)) )),
  inference(forward_demodulation,[],[f34003,f182])).
fof(f34003,plain,(
  ( ! [X428,X426,X429,X427] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s(bool,X426) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428)) )),
  inference(subsumption_resolution,[],[f33465,f22201])).
fof(f33465,plain,(
  ( ! [X428,X426,X429,X427] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s(bool,X426) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428) | s(bool,'T_0') = s(bool,X426)) )),
  inference(superposition,[],[f22201,f3732])).
fof(f34710,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl268),
  inference(cnf_transformation,[],[f34710_D])).
fof(f34710_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f34708,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X5))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | s(bool,'T_0') = s(bool,f(s(X0,sK4(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f34707])).
fof(f34707,plain,(
  ( ! [X499,X494,X496,X498,X493,X495,X497] : (s(fun(X493,bool),X494) = s(fun(X493,bool),X495) | s(bool,'T_0') = s(bool,g(s(X493,sK4(X494,X495,bool,X493)))) | s(bool,'T_0') = s(bool,X498) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X499),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X497)))))),s('type.num.num',X496))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X499),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X497)))),s('type.num.num',X496))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X497) | s(bool,'T_0') = s(bool,f(s(X493,sK4(X494,X495,bool,X493))))) )),
  inference(subsumption_resolution,[],[f33467,f34632])).
fof(f33467,plain,(
  ( ! [X499,X494,X496,X498,X493,X495,X497] : (s(bool,X498) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X496),s('type.num.num',X497))) | s(fun(X493,bool),X494) = s(fun(X493,bool),X495) | s(bool,'T_0') = s(bool,g(s(X493,sK4(X494,X495,bool,X493)))) | s(bool,'T_0') = s(bool,X498) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X499),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X497)))))),s('type.num.num',X496))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X499),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X497)))),s('type.num.num',X496))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X497) | s(bool,'T_0') = s(bool,f(s(X493,sK4(X494,X495,bool,X493))))) )),
  inference(superposition,[],[f783,f3732])).
fof(f34705,plain,(
  ( ! [X505,X500,X502,X501] : (s(fun(X500,bool),X501) = s(fun(X500,bool),X502) | s(bool,'T_0') = s(bool,f(s(X500,sK4(X501,X502,bool,X500)))) | s(bool,'T_0') = s(bool,X505) | s(bool,X505) = s(bool,g(s(X500,sK4(X501,X502,bool,X500))))) ) | $spl262),
  inference(cnf_transformation,[],[f34705_D])).
fof(f34705_D,plain,(
  ( ! [X505,X500,X502,X501] : (s(fun(X500,bool),X501) = s(fun(X500,bool),X502) | s(bool,'T_0') = s(bool,f(s(X500,sK4(X501,X502,bool,X500)))) | s(bool,'T_0') = s(bool,X505) | s(bool,X505) = s(bool,g(s(X500,sK4(X501,X502,bool,X500))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f33468,plain,(
  ( ! [X505,X500,X502,X504,X506,X501,X503] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X503),s('type.num.num',X504))) | s(fun(X500,bool),X501) = s(fun(X500,bool),X502) | s(bool,X505) = s(bool,g(s(X500,sK4(X501,X502,bool,X500)))) | s(bool,'T_0') = s(bool,X505) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))))),s('type.num.num',X503))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X506),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X504)))),s('type.num.num',X503))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X504) | s(bool,'T_0') = s(bool,f(s(X500,sK4(X501,X502,bool,X500))))) )),
  inference(superposition,[],[f781,f3732])).
fof(f34704,plain,(
  ( ! [X518,X514,X517] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X517),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X518),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))),s('type.num.num',X517))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X514))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X514)) ) | $spl260),
  inference(cnf_transformation,[],[f34704_D])).
fof(f34704_D,plain,(
  ( ! [X518,X514,X517] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X517),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X518),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))),s('type.num.num',X517))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X514))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X514)) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f33470,plain,(
  ( ! [X516,X518,X514,X517,X519,X515] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X515),s('type.num.num',X516)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X517),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X518),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))),s('type.num.num',X517))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X514)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X514) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X519),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X516)))))),s('type.num.num',X515))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X519),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X516)))),s('type.num.num',X515))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X516) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X514)))) )),
  inference(superposition,[],[f876,f3732])).
fof(f34703,plain,(
  ( ! [X524,X520,X523] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X523),s('type.num.num',X520))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X524),s('type.num.num',X520))),s('type.num.num',X523))),s('type.num.num',X520))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X520)))) ) | $spl258),
  inference(cnf_transformation,[],[f34703_D])).
fof(f34703_D,plain,(
  ( ! [X524,X520,X523] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X523),s('type.num.num',X520))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X524),s('type.num.num',X520))),s('type.num.num',X523))),s('type.num.num',X520))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X520)))) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f33471,plain,(
  ( ! [X524,X520,X522,X525,X521,X523] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X521),s('type.num.num',X522)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X523),s('type.num.num',X520))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X524),s('type.num.num',X520))),s('type.num.num',X523))),s('type.num.num',X520))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X525),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X522)))))),s('type.num.num',X521))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X525),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X522)))),s('type.num.num',X521))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X522) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X520)))) )),
  inference(superposition,[],[f119,f3732])).
fof(f34654,plain,(
  ( ! [X379,X374,X373] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X373),s('type.num.num',X374))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X374) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))))),s('type.num.num',X373))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))),s('type.num.num',X373)))))) ) | $spl238),
  inference(cnf_transformation,[],[f34654_D])).
fof(f34654_D,plain,(
  ( ! [X379,X374,X373] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X373),s('type.num.num',X374))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X374) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))))),s('type.num.num',X373))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))),s('type.num.num',X373)))))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f33488,plain,(
  ( ! [X639,X640,X636,X638,X641,X637] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X638),s('type.num.num',X639)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X640),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X637)))))),s('type.num.num',X636))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X640),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X637)))),s('type.num.num',X636))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X637) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X641),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X639)))))),s('type.num.num',X638))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X641),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X639)))),s('type.num.num',X638))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X639) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X636),s('type.num.num',X637)))) )),
  inference(superposition,[],[f2219,f3732])).
fof(f34693,plain,(
  ( ! [X646,X642,X643] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num',X643))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X643),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X642),s('type.num.num',X643))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X642)) ) | $spl256),
  inference(cnf_transformation,[],[f34693_D])).
fof(f34693_D,plain,(
  ( ! [X646,X642,X643] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num',X643))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X643),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X642),s('type.num.num',X643))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X642)) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f33489,plain,(
  ( ! [X644,X646,X642,X645,X647,X643] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X644),s('type.num.num',X645)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num',X643))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X646),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X643),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X642)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X642) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X647),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X645)))))),s('type.num.num',X644))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X647),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X645)))),s('type.num.num',X644))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X645) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X642),s('type.num.num',X643)))) )),
  inference(superposition,[],[f2215,f3732])).
fof(f34691,plain,(
  ( ! [X652,X648,X649] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num',X649))),s('type.num.num',X648))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X649),s('type.num.num',X648))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X648),s('type.num.num',X649)))) ) | $spl252),
  inference(cnf_transformation,[],[f34691_D])).
fof(f34691_D,plain,(
  ( ! [X652,X648,X649] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num',X649))),s('type.num.num',X648))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X649),s('type.num.num',X648))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X648),s('type.num.num',X649)))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f33490,plain,(
  ( ! [X652,X648,X650,X653,X649,X651] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X650),s('type.num.num',X651)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num',X649))),s('type.num.num',X648))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X652),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X649),s('type.num.num',X648))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))))),s('type.num.num',X650))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X653),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X651)))),s('type.num.num',X650))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X651) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X648),s('type.num.num',X649)))) )),
  inference(superposition,[],[f164,f3732])).
fof(f34677,plain,(
  ( ! [X167,X165,X169,X164,X168] : (s(bool,X167) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X164),s('type.num.num',X165))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X165) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))),s('type.num.num',X164))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))),s('type.num.num',X164))))) | s(bool,'T_0') = s(bool,X168) | s(bool,X167) = s(bool,X168)) ) | $spl250),
  inference(cnf_transformation,[],[f34677_D])).
fof(f34677_D,plain,(
  ( ! [X167,X165,X169,X164,X168] : (s(bool,X167) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X164),s('type.num.num',X165))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X165) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))),s('type.num.num',X164))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))),s('type.num.num',X164))))) | s(bool,'T_0') = s(bool,X168) | s(bool,X167) = s(bool,X168)) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f34014,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (p(s(bool,X166)) | s(bool,X167) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X164),s('type.num.num',X165))) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))),s('type.num.num',X164))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))),s('type.num.num',X164))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X165)) )),
  inference(subsumption_resolution,[],[f33528,f120])).
fof(f33528,plain,(
  ( ! [X167,X165,X169,X166,X164,X168] : (p(s(bool,X166)) | s(bool,X167) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X164),s('type.num.num',X165))) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))))),s('type.num.num',X164))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X165)))),s('type.num.num',X164))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X165) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f487,f3732])).
fof(f34676,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,X190) != s(bool,f(s(X191,sK4(X192,X193,bool,X191)))) | s(bool,'T_0') = s(bool,X190) | s(bool,'T_0') = s(bool,g(s(X191,sK4(X192,X193,bool,X191)))) | s(fun(X191,bool),X192) = s(fun(X191,bool),X193)) ) | $spl248),
  inference(cnf_transformation,[],[f34676_D])).
fof(f34676_D,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,X190) != s(bool,f(s(X191,sK4(X192,X193,bool,X191)))) | s(bool,'T_0') = s(bool,X190) | s(bool,'T_0') = s(bool,g(s(X191,sK4(X192,X193,bool,X191)))) | s(fun(X191,bool),X192) = s(fun(X191,bool),X193)) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f33532,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X193] : (s(bool,X190) != s(bool,f(s(X191,sK4(X192,X193,bool,X191)))) | s(fun(X191,bool),X192) = s(fun(X191,bool),X193) | s(bool,'T_0') = s(bool,g(s(X191,sK4(X192,X193,bool,X191)))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X188),s('type.num.num',X189))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X189)))))),s('type.num.num',X188))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X189)))),s('type.num.num',X188))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X189) | s(bool,'T_0') = s(bool,X190)) )),
  inference(superposition,[],[f783,f3732])).
fof(f33545,plain,(
  ( ! [X255,X261,X257,X259,X260,X256,X258] : (s(bool,X257) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X258))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X259),s('type.num.num',X258))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X260),s('type.num.num',X258))),s('type.num.num',X259))),s('type.num.num',X258))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X255),s('type.num.num',X256))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X261),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X256)))))),s('type.num.num',X255))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X261),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X256)))),s('type.num.num',X255))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X256) | s(bool,'T_0') = s(bool,X257)) )),
  inference(superposition,[],[f893,f3732])).
fof(f33561,plain,(
  ( ! [X333,X335,X337,X332,X334,X336,X338] : (s(bool,X334) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X335),s('type.num.num',X336))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))),s('type.num.num',X335))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X336),s('type.num.num',X335))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X332),s('type.num.num',X333))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))))),s('type.num.num',X332))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X338),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X333)))),s('type.num.num',X332))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X333) | s(bool,'T_0') = s(bool,X334)) )),
  inference(superposition,[],[f2246,f3732])).
fof(f34656,plain,(
  ( ! [X344,X349,X345,X347,X348] : (s(bool,X347) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X345) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))))),s('type.num.num',X344))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))),s('type.num.num',X344))))) | s(bool,'F_0') = s(bool,X348) | s(bool,X347) = s(bool,X348)) ) | $spl242),
  inference(cnf_transformation,[],[f34656_D])).
fof(f34656_D,plain,(
  ( ! [X344,X349,X345,X347,X348] : (s(bool,X347) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X345) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))))),s('type.num.num',X344))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))),s('type.num.num',X344))))) | s(bool,'F_0') = s(bool,X348) | s(bool,X347) = s(bool,X348)) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f34026,plain,(
  ( ! [X344,X346,X349,X345,X347,X348] : (p(s(bool,X346)) | s(bool,X347) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))) | s(bool,X347) = s(bool,X348) | s(bool,'F_0') = s(bool,X348) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))))),s('type.num.num',X344))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))),s('type.num.num',X344))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X345)) )),
  inference(subsumption_resolution,[],[f33563,f120])).
fof(f33563,plain,(
  ( ! [X344,X346,X349,X345,X347,X348] : (p(s(bool,X346)) | s(bool,X347) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))) | s(bool,X347) = s(bool,X348) | s(bool,'F_0') = s(bool,X348) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))))),s('type.num.num',X344))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X345)))),s('type.num.num',X344))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X345) | s(bool,'T_0') = s(bool,X346)) )),
  inference(superposition,[],[f2927,f3732])).
fof(f33569,plain,(
  ( ! [X377,X379,X374,X376,X378,X373,X375] : (s(bool,X375) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X376),s('type.num.num',X377))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',X377))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X377),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X376)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X376) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X373),s('type.num.num',X374))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))))),s('type.num.num',X373))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X374)))),s('type.num.num',X373))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X374) | s(bool,'T_0') = s(bool,X375)) )),
  inference(superposition,[],[f3264,f3732])).
fof(f34635,plain,(
  ( ! [X465,X468,X464] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464)))))) ) | $spl234),
  inference(cnf_transformation,[],[f34635_D])).
fof(f34635_D,plain,(
  ( ! [X465,X468,X464] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464)))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f34029,plain,(
  ( ! [X4,X2,X5,X3,X1] : (s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X4)))),s('type.num.num',X3))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4)) )),
  inference(condensation,[],[f34028])).
fof(f34028,plain,(
  ( ! [X399,X401,X403,X398,X400,X402] : (s(bool,X400) = s(bool,X401) | s(bool,X401) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X402),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X398),s('type.num.num',X399))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X403),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X399)))))),s('type.num.num',X398))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X403),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X399)))),s('type.num.num',X398))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X399)) )),
  inference(subsumption_resolution,[],[f33573,f25967])).
fof(f33573,plain,(
  ( ! [X399,X401,X403,X398,X400,X402] : (s(bool,X400) = s(bool,X401) | s(bool,X401) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X402),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X398),s('type.num.num',X399))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X403),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X399)))))),s('type.num.num',X398))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X403),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X399)))),s('type.num.num',X398))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X399) | s(bool,'T_0') = s(bool,X400)) )),
  inference(superposition,[],[f5275,f3732])).
fof(f34648,plain,(
  ( ! [X4,X2,X0,X3] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(forward_demodulation,[],[f34031,f216])).
fof(f34031,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X3)))),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X3)) )),
  inference(condensation,[],[f34030])).
fof(f34030,plain,(
  ( ! [X408,X405,X407,X409,X404,X406] : (s(bool,'T_0') = s(bool,X407) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X408),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X404),s('type.num.num',X405))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X409),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X405)))))),s('type.num.num',X404))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X409),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X405)))),s('type.num.num',X404))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X405) | s(bool,'T_0') = s(bool,X406)) )),
  inference(subsumption_resolution,[],[f33574,f229])).
fof(f33574,plain,(
  ( ! [X408,X405,X407,X409,X404,X406] : (s(bool,X406) != s(bool,X407) | s(bool,'T_0') = s(bool,X407) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X408),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X404),s('type.num.num',X405))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X409),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X405)))))),s('type.num.num',X404))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X409),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X405)))),s('type.num.num',X404))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X405) | s(bool,'T_0') = s(bool,X406)) )),
  inference(superposition,[],[f5414,f3732])).
fof(f34647,plain,(
  ( ! [X420,X416,X418,X417] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X416),s('type.num.num',X417))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))))),s('type.num.num',X416))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))),s('type.num.num',X416))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X417) | s(bool,'T_0') = s(bool,X418)) )),
  inference(forward_demodulation,[],[f34646,f216])).
fof(f34646,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X419),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X416),s('type.num.num',X417))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))))),s('type.num.num',X416))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))),s('type.num.num',X416))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X417) | s(bool,'T_0') = s(bool,X418)) )),
  inference(subsumption_resolution,[],[f33576,f116])).
fof(f33576,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,'F_0') != s(bool,X418) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X419),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X416),s('type.num.num',X417))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))))),s('type.num.num',X416))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X420),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X417)))),s('type.num.num',X416))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X417) | s(bool,'T_0') = s(bool,X418)) )),
  inference(superposition,[],[f5609,f3732])).
fof(f34645,plain,(
  ( ! [X422,X426,X421,X423] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X421),s('type.num.num',X422))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))))),s('type.num.num',X421))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))),s('type.num.num',X421))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X422) | s(bool,'T_0') = s(bool,X423)) ) | $spl22),
  inference(forward_demodulation,[],[f34644,f216])).
fof(f34644,plain,(
  ( ! [X422,X426,X421,X423,X425] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X425),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X421),s('type.num.num',X422))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))))),s('type.num.num',X421))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))),s('type.num.num',X421))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X422) | s(bool,'T_0') = s(bool,X423)) ) | $spl22),
  inference(subsumption_resolution,[],[f33577,f319])).
fof(f33577,plain,(
  ( ! [X422,X424,X426,X421,X423,X425] : (s(bool,X423) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X424),s('type.num.num','const.num.|48|_0'))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X425),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X421),s('type.num.num',X422))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))))),s('type.num.num',X421))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X422)))),s('type.num.num',X421))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X422) | s(bool,'T_0') = s(bool,X423)) ) | $spl22),
  inference(superposition,[],[f5697,f3732])).
fof(f34643,plain,(
  ( ! [X428,X429,X431,X427] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s(bool,'T_0') = s(bool,X429) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428)) )),
  inference(forward_demodulation,[],[f34642,f216])).
fof(f34642,plain,(
  ( ! [X428,X430,X429,X431,X427] : (s(bool,'T_0') = s(bool,X429) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X430),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428)) )),
  inference(forward_demodulation,[],[f34032,f181])).
fof(f34032,plain,(
  ( ! [X428,X430,X429,X431,X427] : (s(bool,X429) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X430),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428)) )),
  inference(subsumption_resolution,[],[f33578,f7994])).
fof(f33578,plain,(
  ( ! [X428,X430,X429,X431,X427] : (s(bool,X429) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X430),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num',X428))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))))),s('type.num.num',X427))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X431),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X428)))),s('type.num.num',X427))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X428) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f7818,f3732])).
fof(f34638,plain,(
  ( ! [X447,X449,X446,X448] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X446),s('type.num.num',X447))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X449),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X447)))))),s('type.num.num',X446))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X449),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X447)))),s('type.num.num',X446))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X447) | s(bool,'T_0') = s(bool,X448)) ) | ($spl45 | $spl52)),
  inference(subsumption_resolution,[],[f33582,f11043])).
fof(f33582,plain,(
  ( ! [X447,X449,X446,X448] : (s(bool,X448) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X446),s('type.num.num',X447))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X449),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X447)))))),s('type.num.num',X446))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X449),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X447)))),s('type.num.num',X446))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X447) | s(bool,'T_0') = s(bool,X448)) ) | $spl52),
  inference(superposition,[],[f10409,f3732])).
fof(f34637,plain,(
  ( ! [X455,X454,X456,X458] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X454),s('type.num.num',X455))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))))),s('type.num.num',X454))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))),s('type.num.num',X454))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X455) | s(bool,'T_0') = s(bool,X456)) ) | ($spl22 | $spl45)),
  inference(forward_demodulation,[],[f34636,f216])).
fof(f34636,plain,(
  ( ! [X455,X457,X454,X456,X458] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X454),s('type.num.num',X455))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))))),s('type.num.num',X454))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))),s('type.num.num',X454))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X455) | s(bool,'T_0') = s(bool,X456)) ) | ($spl22 | $spl45)),
  inference(subsumption_resolution,[],[f33584,f11043])).
fof(f33584,plain,(
  ( ! [X455,X457,X454,X456,X458] : (s(bool,X456) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X457),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X454),s('type.num.num',X455))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))))),s('type.num.num',X454))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X455)))),s('type.num.num',X454))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X455) | s(bool,'T_0') = s(bool,X456)) ) | ($spl22 | $spl45)),
  inference(superposition,[],[f11618,f3732])).
fof(f11618,plain,(
  ( ! [X85,X84] : (s(bool,X84) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0')))) ) | ($spl22 | $spl45)),
  inference(subsumption_resolution,[],[f11463,f177])).
fof(f11463,plain,(
  ( ! [X85,X83,X84] : (s(bool,X84) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X85),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X83),s('type.num.num','const.num.|48|_0')))) ) | ($spl22 | $spl45)),
  inference(superposition,[],[f5697,f11043])).
fof(f34634,plain,(
  ( ! [X466,X465,X468,X464] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s(bool,'T_0') = s(bool,X466) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465)) )),
  inference(forward_demodulation,[],[f34633,f216])).
fof(f34633,plain,(
  ( ! [X466,X465,X467,X468,X464] : (s(bool,'T_0') = s(bool,X466) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X467),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465)) )),
  inference(forward_demodulation,[],[f34033,f182])).
fof(f34033,plain,(
  ( ! [X466,X465,X467,X468,X464] : (s(bool,X466) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X467),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465)) )),
  inference(subsumption_resolution,[],[f33586,f22201])).
fof(f33586,plain,(
  ( ! [X466,X465,X467,X468,X464] : (s(bool,X466) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'const.prim_rec.<_2'(s('type.num.num',X467),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X464),s('type.num.num',X465))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))))),s('type.num.num',X464))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X468),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X465)))),s('type.num.num',X464))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X465) | s(bool,'T_0') = s(bool,X466)) )),
  inference(superposition,[],[f21962,f3732])).
fof(f34618,plain,(
  $false | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34617,f34126])).
fof(f34126,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | ($spl154 | $spl174)),
  inference(superposition,[],[f33746,f33746])).
fof(f33746,plain,(
  ( ! [X335] : (s(bool,'F_0') = s(bool,X335)) ) | ($spl154 | $spl174)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8038,f8018,f8017,f7994,f7818,f7808,f7526,f7424,f7119,f892,f872,f181,f111,f11066,f11067,f11076,f11328,f11329,f11339,f11753,f11779,f11756,f11799,f11843,f11876,f11917,f15292,f13040,f13042,f13360,f15778,f15782,f15800,f13544,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f13753,f16148,f14094,f15963,f15962,f15961,f3732,f3264,f2246,f15949,f15948,f8156,f893,f13754,f13637,f13545,f13361,f783,f781,f8165,f8058,f7801,f7432,f6448,f5842,f5609,f5275,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1790,f1789,f1776,f1693,f1692,f1673,f1392,f1292,f788,f787,f216,f125,f124,f114,f11363,f11098,f8135,f11922,f11783,f8088,f11871,f11826,f8125,f876,f119,f3233,f11923,f11784,f3255,f3229,f11872,f11827,f11364,f11099,f3254,f2215,f11366,f11101,f3726,f164,f11925,f11786,f3699,f11874,f11829,f3725,f2219,f19241,f19655,f21705,f21698,f21864,f21868,f21668,f21652,f21908,f20816,f20820,f21617,f21962,f22200,f22201,f21466,f22223,f22224,f21244,f22254,f21255,f22283,f22301,f21385,f22460,f22464,f23892,f24080,f24139,f24141,f24142,f24143,f24167,f24168,f24169,f24170,f24171,f24172,f24173,f24174,f24175,f24176,f24177,f24178,f24179,f24180,f24223,f24182,f24183,f24226,f24185,f24228,f24187,f24188,f24189,f24190,f24191,f24192,f24362,f24628,f24740,f24741,f24742,f24743,f24744,f24829,f24746,f24747,f24748,f24749,f24750,f24751,f24752,f24753,f24834,f24755,f24836,f24757,f24838,f24759,f24840,f24761,f24842,f24843,f24764,f24765,f24846,f24849,f24851,f24769,f24770,f24771,f24772,f24854,f24855,f24857,f24859,f24862,f24864,f26590,f26591,f26592,f26593,f25406,f25407,f26817,f26830,f26941,f26942,f27086,f25961,f25962,f25967,f25968,f25969,f25972,f25973,f25974,f27132,f26139,f26140,f27188,f27189,f27190,f27192,f27284,f27287,f27209,f27210,f27211,f27212,f27294,f27295,f27296,f27216,f27298,f27218,f27301,f27307,f27274,f27272,f27320,f28171,f28041,f28042,f28043,f28045,f28189,f28192,f28063,f28064,f28202,f28203,f28206,f28071,f28209,f28219,f28221,f28232,f28264,f28272,f28069,f29082,f29100,f29101,f29116,f29117,f29122,f29125,f29624,f29680,f29202,f29275,f29278,f29279,f29285,f29291,f29292,f29293,f29294,f29727,f29572,f29570,f29742,f29746,f29564,f29757,f29758,f29561,f29807,f29812,f29887,f29888,f29890,f30048,f30052,f30053,f30054,f30030,f30088,f30345,f30337,f30403,f30404,f30318,f30409,f30410,f30450,f30453,f30459,f30465,f30468,f30474,f30476,f30477,f30949,f30948,f31020,f30541,f30550,f30556,f30565,f30618,f30619,f30620,f30622,f30623,f30624,f30627,f30630,f30631,f30637,f30642,f30645,f30647,f30648,f30649,f30650,f31075,f30900,f30898,f30893,f31090,f31094,f30891,f31105,f31106,f30888,f30886,f31153,f31158,f31368,f31357,f31356,f31414,f28986,f31932,f31935,f31941,f31942,f31948,f31949,f32434,f32433,f32432,f32495,f32504,f32505,f32506,f32014,f32507,f32508,f32017,f32515,f32516,f32023,f32024,f32517,f32030,f32033,f32039,f32040,f32095,f32096,f32097,f32099,f32100,f32101,f32104,f32107,f32108,f32114,f32119,f32122,f32124,f32125,f32126,f32127,f32129,f32130,f32132,f32133,f32566,f32383,f32381,f32376,f32581,f32585,f32374,f32373,f32596,f32597,f32370,f32657,f32662,f27291,f33168,f33171,f33177,f33178,f33179,f33181,f33182,f33683,f33682,f33681,f33680,f33745])).
fof(f34617,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,X30)) ) | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34230,f34055])).
fof(f34055,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f33746,f124])).
fof(f34230,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,X30) | p(s(bool,'F_0'))) ) | ($spl154 | $spl174)),
  inference(superposition,[],[f120,f33746])).
fof(f34616,plain,(
  $false | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34221,f34126])).
fof(f34221,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3)) ) | ($spl154 | $spl174)),
  inference(superposition,[],[f176,f33746])).
fof(f34611,plain,(
  $false | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34094,f114])).
fof(f34094,plain,(
  p(s(bool,'F_0')) | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f33746,f120])).
fof(f34610,plain,(
  $false | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34118,f114])).
fof(f34118,plain,(
  p(s(bool,'F_0')) | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f176,f33746,f487])).
fof(f34609,plain,(
  $false | ($spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34121,f114])).
fof(f34121,plain,(
  p(s(bool,'F_0')) | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f177,f177,f33746,f487])).
fof(f34608,plain,(
  $false | ($spl45 | $spl154 | $spl174)),
  inference(subsumption_resolution,[],[f34124,f114])).
fof(f34124,plain,(
  p(s(bool,'F_0')) | ($spl45 | $spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f11022,f11022,f33746,f487])).
fof(f34125,plain,(
  $false | ($spl45 | $spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f114,f11022,f11022,f33746,f487])).
fof(f34122,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f114,f177,f177,f33746,f487])).
fof(f34119,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f114,f176,f176,f33746,f487])).
fof(f34110,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f176,f33746,f1622])).
fof(f34107,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f177,f33746,f5414])).
fof(f34095,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f114,f33746,f120])).
fof(f34092,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f176,f33746,f2587])).
fof(f34087,plain,(
  $false | ($spl20 | $spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f33746,f3130])).
fof(f34081,plain,(
  $false | ($spl18 | $spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f33746,f3129])).
fof(f34079,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f33746,f1169])).
fof(f34068,plain,(
  $false | ($spl45 | $spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f11022,f11022,f33746,f706])).
fof(f34066,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f177,f177,f33746,f706])).
fof(f34064,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f176,f33746,f706])).
fof(f34056,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f112,f33746,f124])).
fof(f34054,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f177,f33746,f5609])).
fof(f34034,plain,(
  $false | ($spl154 | $spl174)),
  inference(unit_resulting_resolution,[],[f176,f33746])).
fof(f33736,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X209),s('type.num.num',X210))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X211),s('type.num.num',X212))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X210) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))))),s('type.num.num',X209))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))),s('type.num.num',X209))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))))),s('type.num.num',X211))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))),s('type.num.num',X211)))))) ) | $spl232),
  inference(cnf_transformation,[],[f33736_D])).
fof(f33736_D,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X209),s('type.num.num',X210))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X211),s('type.num.num',X212))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X210) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))))),s('type.num.num',X209))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))),s('type.num.num',X209))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))))),s('type.num.num',X211))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))),s('type.num.num',X211)))))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f33680,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X214] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X209),s('type.num.num',X210))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X211),s('type.num.num',X212))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))))),s('type.num.num',X211))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))),s('type.num.num',X211))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s(bool,'T_0') = s(bool,X208) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))))),s('type.num.num',X209))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))),s('type.num.num',X209))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X210)) )),
  inference(duplicate_literal_removal,[],[f33221])).
fof(f33221,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X214] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X209),s('type.num.num',X210))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X211),s('type.num.num',X212))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))))),s('type.num.num',X211))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X212)))),s('type.num.num',X211))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X212) | s(bool,'T_0') = s(bool,X208) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))))),s('type.num.num',X209))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X210)))),s('type.num.num',X209))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X210) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f3732,f3732])).
fof(f33735,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X205) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X204)))))) ) | $spl230),
  inference(cnf_transformation,[],[f33735_D])).
fof(f33735_D,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X205) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X204)))))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f33681,plain,(
  ( ! [X206,X204,X202,X207,X205,X203,X201] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X204))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X205) | s(bool,'T_0') = s(bool,X201) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202)) )),
  inference(duplicate_literal_removal,[],[f33220])).
fof(f33220,plain,(
  ( ! [X206,X204,X202,X207,X205,X203,X201] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))))),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X205)))),s('type.num.num',X204))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X205) | s(bool,'T_0') = s(bool,X201) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s(bool,'T_0') = s(bool,X201)) )),
  inference(superposition,[],[f3732,f3264])).
fof(f33734,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X198) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X197)))))) ) | $spl228),
  inference(cnf_transformation,[],[f33734_D])).
fof(f33734_D,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X198) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X197)))))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f33682,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X197))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X198) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195)))))) )),
  inference(duplicate_literal_removal,[],[f33219])).
fof(f33219,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X198)))),s('type.num.num',X197))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X198) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f3732,f2246])).
fof(f33725,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X148) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))),s('type.num.num',X147)))))) ) | $spl226),
  inference(cnf_transformation,[],[f33725_D])).
fof(f33725_D,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X148) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))),s('type.num.num',X147)))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f33683,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))),s('type.num.num',X147))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X148) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146)))) )),
  inference(duplicate_literal_removal,[],[f33209])).
fof(f33209,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X148)))),s('type.num.num',X147))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X148) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f3732,f893])).
fof(f33107,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X91),s('type.num.num',X92))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) | $spl224),
  inference(cnf_transformation,[],[f33107_D])).
fof(f33107_D,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X91),s('type.num.num',X92))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91))))))))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f33075,plain,(
  ( ! [X92,X90,X93,X91] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X91),s('type.num.num',X92))))) | s(bool,'T_0') = s(bool,X90) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X91)) ) | $spl155),
  inference(duplicate_literal_removal,[],[f32974])).
fof(f32974,plain,(
  ( ! [X92,X90,X93,X91] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X91),s('type.num.num',X92))))) | s(bool,'T_0') = s(bool,X90) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X92))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X92),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X91)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X91) | s(bool,'T_0') = s(bool,X90)) ) | $spl155),
  inference(superposition,[],[f31726,f3264])).
fof(f33106,plain,(
  ( ! [X88,X87,X89] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | $spl222),
  inference(cnf_transformation,[],[f33106_D])).
fof(f33106_D,plain,(
  ( ! [X88,X87,X89] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f33076,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s(bool,'T_0') = s(bool,X86) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | $spl155),
  inference(duplicate_literal_removal,[],[f32973])).
fof(f32973,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s(bool,'T_0') = s(bool,X86) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87))))) | s(bool,'T_0') = s(bool,X86)) ) | $spl155),
  inference(superposition,[],[f31726,f2246])).
fof(f33103,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | $spl220),
  inference(cnf_transformation,[],[f33103_D])).
fof(f33103_D,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f33077,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | $spl155),
  inference(duplicate_literal_removal,[],[f32963])).
fof(f32963,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) ) | $spl155),
  inference(superposition,[],[f31726,f893])).
fof(f32663,plain,(
  ( ! [X158,X163,X161,X159,X162] : (s(bool,X161) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X158),s('type.num.num',X159))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X158) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X159))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))))) | s(bool,'T_0') = s(bool,X162) | s(bool,X161) = s(bool,X162)) ) | $spl218),
  inference(cnf_transformation,[],[f32663_D])).
fof(f32663_D,plain,(
  ( ! [X158,X163,X161,X159,X162] : (s(bool,X161) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X158),s('type.num.num',X159))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X158) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X159))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))))) | s(bool,'T_0') = s(bool,X162) | s(bool,X161) = s(bool,X162)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f32662,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (p(s(bool,X160)) | s(bool,X161) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X158),s('type.num.num',X159))) | s(bool,X161) = s(bool,X162) | s(bool,'T_0') = s(bool,X162) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X159))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X158)) )),
  inference(subsumption_resolution,[],[f32282,f120])).
fof(f32282,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (p(s(bool,X160)) | s(bool,X161) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X158),s('type.num.num',X159))) | s(bool,X161) = s(bool,X162) | s(bool,'T_0') = s(bool,X162) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',X159))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X159),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X158)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X158) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f487,f3264])).
fof(f32609,plain,(
  ( ! [X364,X362,X365,X361,X363] : (s(bool,X363) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X361),s('type.num.num',X362))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X361) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num',X362))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))))) | s(bool,X363) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X364),s('type.num.num','const.num.|48|_0')))) ) | $spl216),
  inference(cnf_transformation,[],[f32609_D])).
fof(f32609_D,plain,(
  ( ! [X364,X362,X365,X361,X363] : (s(bool,X363) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X361),s('type.num.num',X362))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X361) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num',X362))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))))) | s(bool,X363) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X364),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f32370,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s(bool,X363) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X361),s('type.num.num',X362))) | s(bool,'T_0') = s(bool,X360) | s(bool,X363) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X364),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num',X362))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X361)) )),
  inference(duplicate_literal_removal,[],[f32209])).
fof(f32209,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s(bool,X363) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X361),s('type.num.num',X362))) | s(bool,'T_0') = s(bool,X360) | s(bool,X363) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X364),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num',X362))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X362),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X361)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X361) | s(bool,'T_0') = s(bool,X360)) )),
  inference(superposition,[],[f5414,f3264])).
fof(f32592,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X272) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))))) | s(bool,'F_0') = s(bool,X274)) ) | $spl214),
  inference(cnf_transformation,[],[f32592_D])).
fof(f32592_D,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X272) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))))) | s(bool,'F_0') = s(bool,X274)) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f32602,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s(bool,'T_0') = s(bool,X320) | s(bool,X323) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X321),s('type.num.num',X322))) | s(bool,'F_0') = s(bool,X323) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num',X322))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X322),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X321)) ) | $spl24),
  inference(forward_demodulation,[],[f32601,f180])).
fof(f32601,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s(bool,X323) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X321),s('type.num.num',X322))) | s(bool,X320) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X323) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num',X322))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X322),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X321)) ) | $spl24),
  inference(subsumption_resolution,[],[f32202,f1370])).
fof(f32202,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s(bool,X323) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X321),s('type.num.num',X322))) | s(bool,X320) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X323) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num',X322))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X322),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X321)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X321) | s(bool,'T_0') = s(bool,X320)) ) | $spl24),
  inference(superposition,[],[f3138,f3264])).
fof(f32485,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X197) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197))))))))) ) | $spl208),
  inference(cnf_transformation,[],[f32485_D])).
fof(f32485_D,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X197) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197))))))))) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f32373,plain,(
  ( ! [X292,X294,X290,X293,X295,X289,X291] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X290),s('type.num.num',X291))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X292),s('type.num.num',X293))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num',X293))),s('type.num.num',X292))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X293),s('type.num.num',X292))))) | s(bool,'T_0') = s(bool,X289) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X291))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X290)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X291),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X290)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X290)) )),
  inference(duplicate_literal_removal,[],[f32196])).
fof(f32196,plain,(
  ( ! [X292,X294,X290,X293,X295,X289,X291] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X290),s('type.num.num',X291))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X292),s('type.num.num',X293))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num',X293))),s('type.num.num',X292))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X293),s('type.num.num',X292))))) | s(bool,'T_0') = s(bool,X289) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X291))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X290)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X291),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X290)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X290) | s(bool,'T_0') = s(bool,X289)) )),
  inference(superposition,[],[f2246,f3264])).
fof(f32374,plain,(
  ( ! [X271,X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s(bool,'T_0') = s(bool,X271) | s(bool,'F_0') = s(bool,X274) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X272)) )),
  inference(duplicate_literal_removal,[],[f32192])).
fof(f32192,plain,(
  ( ! [X271,X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s(bool,'T_0') = s(bool,X271) | s(bool,'F_0') = s(bool,X274) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X272)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X272) | s(bool,'T_0') = s(bool,X271)) )),
  inference(superposition,[],[f1622,f3264])).
fof(f32567,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5))))))))) ) | $spl212),
  inference(cnf_transformation,[],[f32567_D])).
fof(f32567_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5))))))))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f32585,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') = s(bool,X237) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X238)) )),
  inference(forward_demodulation,[],[f32584,f180])).
fof(f32584,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s(bool,X237) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X238)) )),
  inference(subsumption_resolution,[],[f32185,f1370])).
fof(f32185,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s(bool,X237) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X238)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X238) | s(bool,'T_0') = s(bool,X237)) )),
  inference(superposition,[],[f1370,f3264])).
fof(f32581,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X220)) )),
  inference(forward_demodulation,[],[f32375,f180])).
fof(f32375,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X220)) )),
  inference(duplicate_literal_removal,[],[f32181])).
fof(f32181,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X220)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X220) | s(bool,'T_0') = s(bool,X219)) )),
  inference(superposition,[],[f1169,f3264])).
fof(f32476,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X147) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147))))))))) ) | $spl206),
  inference(cnf_transformation,[],[f32476_D])).
fof(f32476_D,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X147) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147))))))))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f32376,plain,(
  ( ! [X212,X218,X216,X215,X213,X217,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X215))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X213),s('type.num.num',X214))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X216),s('type.num.num',X215))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X215))),s('type.num.num',X216))),s('type.num.num',X215))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X214))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X213)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X213)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X213)) )),
  inference(duplicate_literal_removal,[],[f32180])).
fof(f32180,plain,(
  ( ! [X212,X218,X216,X215,X213,X217,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X215))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X213),s('type.num.num',X214))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X216),s('type.num.num',X215))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X215))),s('type.num.num',X216))),s('type.num.num',X215))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X214))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X213)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X214),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X213)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X213) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f893,f3264])).
fof(f32566,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5)) )),
  inference(subsumption_resolution,[],[f32142,f120])).
fof(f32142,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X5)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f120,f3264])).
fof(f32486,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X204) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X205))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X205),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204))))))))) ) | $spl210),
  inference(cnf_transformation,[],[f32486_D])).
fof(f32486_D,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X204) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X205))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X205),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204))))))))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f32432,plain,(
  ( ! [X206,X204,X202,X207,X205,X203,X201] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X205))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X205),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X204) | s(bool,'T_0') = s(bool,X201) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202)) )),
  inference(duplicate_literal_removal,[],[f31987])).
fof(f31987,plain,(
  ( ! [X206,X204,X202,X207,X205,X203,X201] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X205))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X205),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X204)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X204) | s(bool,'T_0') = s(bool,X201) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X203))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X203),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X202)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X202) | s(bool,'T_0') = s(bool,X201)) )),
  inference(superposition,[],[f3264,f3264])).
fof(f32433,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X197) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195)))))) )),
  inference(duplicate_literal_removal,[],[f31986])).
fof(f31986,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X197)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X197) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f3264,f2246])).
fof(f32434,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X147) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146)))) )),
  inference(duplicate_literal_removal,[],[f31976])).
fof(f31976,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X147)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X147) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f3264,f893])).
fof(f31397,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | $spl204),
  inference(cnf_transformation,[],[f31397_D])).
fof(f31397_D,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88)))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f31356,plain,(
  ( ! [X88,X87,X89,X86] : (p(s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88)))))) | s(bool,'T_0') = s(bool,X86) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87)))))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f31261])).
fof(f31261,plain,(
  ( ! [X88,X87,X89,X86] : (p(s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X87),s('type.num.num',X88)))))) | s(bool,'T_0') = s(bool,X86) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num',X88))),s('type.num.num',X87))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X89),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X88),s('type.num.num',X87))))) | s(bool,'T_0') = s(bool,X86)) ) | $spl154),
  inference(superposition,[],[f30318,f2246])).
fof(f31393,plain,(
  ( ! [X70,X68,X69] : (p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | $spl202),
  inference(cnf_transformation,[],[f31393_D])).
fof(f31393_D,plain,(
  ( ! [X70,X68,X69] : (p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f31357,plain,(
  ( ! [X70,X68,X69,X67] : (p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68)))) ) | $spl154),
  inference(duplicate_literal_removal,[],[f31251])).
fof(f31251,plain,(
  ( ! [X70,X68,X69,X67] : (p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X69),s('type.num.num',X68))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X68))),s('type.num.num',X69))),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) ) | $spl154),
  inference(superposition,[],[f30318,f893])).
fof(f31159,plain,(
  ( ! [X156,X152,X157,X155,X153] : (s(bool,X155) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num',X153))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X153))),s('type.num.num',X152))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X152))))) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,X156)) ) | $spl200),
  inference(cnf_transformation,[],[f31159_D])).
fof(f31159_D,plain,(
  ( ! [X156,X152,X157,X155,X153] : (s(bool,X155) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num',X153))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X153))),s('type.num.num',X152))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X152))))) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,X156)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f31158,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (p(s(bool,X154)) | s(bool,X155) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num',X153))) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X153))),s('type.num.num',X152))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X152)))))) )),
  inference(subsumption_resolution,[],[f30799,f120])).
fof(f30799,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (p(s(bool,X154)) | s(bool,X155) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X152),s('type.num.num',X153))) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X153))),s('type.num.num',X152))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X153),s('type.num.num',X152))))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f487,f2246])).
fof(f31118,plain,(
  ( ! [X356,X358,X354,X357,X355] : (s(bool,X356) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X354),s('type.num.num',X355))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num',X355))),s('type.num.num',X354))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X355),s('type.num.num',X354))))) | s(bool,X356) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X357),s('type.num.num','const.num.|48|_0')))) ) | $spl198),
  inference(cnf_transformation,[],[f31118_D])).
fof(f31118_D,plain,(
  ( ! [X356,X358,X354,X357,X355] : (s(bool,X356) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X354),s('type.num.num',X355))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num',X355))),s('type.num.num',X354))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X355),s('type.num.num',X354))))) | s(bool,X356) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X357),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f30888,plain,(
  ( ! [X356,X358,X354,X357,X353,X355] : (s(bool,X356) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X354),s('type.num.num',X355))) | s(bool,'T_0') = s(bool,X353) | s(bool,X356) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X357),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num',X355))),s('type.num.num',X354))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X355),s('type.num.num',X354)))))) )),
  inference(duplicate_literal_removal,[],[f30726])).
fof(f30726,plain,(
  ( ! [X356,X358,X354,X357,X353,X355] : (s(bool,X356) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X354),s('type.num.num',X355))) | s(bool,'T_0') = s(bool,X353) | s(bool,X356) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X357),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num',X355))),s('type.num.num',X354))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X355),s('type.num.num',X354))))) | s(bool,'T_0') = s(bool,X353)) )),
  inference(superposition,[],[f5414,f2246])).
fof(f31101,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num',X272))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X272))))) | s(bool,'F_0') = s(bool,X274)) ) | $spl196),
  inference(cnf_transformation,[],[f31101_D])).
fof(f31101_D,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num',X272))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X272))))) | s(bool,'F_0') = s(bool,X274)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f31111,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s(bool,'T_0') = s(bool,X313) | s(bool,X316) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X314),s('type.num.num',X315))) | s(bool,'F_0') = s(bool,X316) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num',X315))),s('type.num.num',X314))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X315),s('type.num.num',X314)))))) ) | $spl24),
  inference(forward_demodulation,[],[f31110,f180])).
fof(f31110,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s(bool,X316) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X314),s('type.num.num',X315))) | s(bool,X313) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X316) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num',X315))),s('type.num.num',X314))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X315),s('type.num.num',X314)))))) ) | $spl24),
  inference(subsumption_resolution,[],[f30719,f1370])).
fof(f30719,plain,(
  ( ! [X313,X315,X316,X314,X317] : (s(bool,X316) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X314),s('type.num.num',X315))) | s(bool,X313) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X316) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num',X315))),s('type.num.num',X314))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X315),s('type.num.num',X314))))) | s(bool,'T_0') = s(bool,X313)) ) | $spl24),
  inference(superposition,[],[f3138,f2246])).
fof(f30891,plain,(
  ( ! [X271,X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s(bool,'T_0') = s(bool,X271) | s(bool,'F_0') = s(bool,X274) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num',X272))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X272)))))) )),
  inference(duplicate_literal_removal,[],[f30710])).
fof(f30710,plain,(
  ( ! [X271,X273,X275,X272,X274] : (s(bool,X274) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X272),s('type.num.num',X273))) | s(bool,'T_0') = s(bool,X271) | s(bool,'F_0') = s(bool,X274) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num',X273))),s('type.num.num',X272))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X275),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X273),s('type.num.num',X272))))) | s(bool,'T_0') = s(bool,X271)) )),
  inference(superposition,[],[f1622,f2246])).
fof(f31076,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X5)))))) ) | $spl194),
  inference(cnf_transformation,[],[f31076_D])).
fof(f31076_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X5)))))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f31094,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') = s(bool,X237) | s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num',X238))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num',X238)))))) )),
  inference(forward_demodulation,[],[f31093,f180])).
fof(f31093,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s(bool,X237) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num',X238))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num',X238)))))) )),
  inference(subsumption_resolution,[],[f30703,f1370])).
fof(f30703,plain,(
  ( ! [X239,X237,X240,X238] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X238),s('type.num.num',X239))) | s(bool,X237) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',X239))),s('type.num.num',X238))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X239),s('type.num.num',X238))))) | s(bool,'T_0') = s(bool,X237)) )),
  inference(superposition,[],[f1370,f2246])).
fof(f31090,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num',X220))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num',X220)))))) )),
  inference(forward_demodulation,[],[f30892,f180])).
fof(f30892,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num',X220))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num',X220)))))) )),
  inference(duplicate_literal_removal,[],[f30699])).
fof(f30699,plain,(
  ( ! [X222,X220,X219,X221] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X220),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,X219) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num',X221))),s('type.num.num',X220))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X222),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X221),s('type.num.num',X220))))) | s(bool,'T_0') = s(bool,X219)) )),
  inference(superposition,[],[f1169,f2246])).
fof(f31002,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num',X147)))))) ) | $spl190),
  inference(cnf_transformation,[],[f31002_D])).
fof(f31002_D,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num',X147)))))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f30893,plain,(
  ( ! [X212,X218,X216,X215,X213,X217,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X215))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X213),s('type.num.num',X214))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X216),s('type.num.num',X215))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X215))),s('type.num.num',X216))),s('type.num.num',X215))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X214))),s('type.num.num',X213))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X214),s('type.num.num',X213)))))) )),
  inference(duplicate_literal_removal,[],[f30698])).
fof(f30698,plain,(
  ( ! [X212,X218,X216,X215,X213,X217,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X215))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X213),s('type.num.num',X214))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X216),s('type.num.num',X215))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X215))),s('type.num.num',X216))),s('type.num.num',X215))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X214))),s('type.num.num',X213))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X214),s('type.num.num',X213))))) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f893,f2246])).
fof(f31075,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X5)))))) )),
  inference(subsumption_resolution,[],[f30660,f120])).
fof(f30660,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num',X6))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X6),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f120,f2246])).
fof(f31011,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num',X197)))))) ) | $spl192),
  inference(cnf_transformation,[],[f31011_D])).
fof(f31011_D,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num',X197)))))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f30948,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num',X197))))) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195)))))) )),
  inference(duplicate_literal_removal,[],[f30514])).
fof(f30514,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X195),s('type.num.num',X196))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X197),s('type.num.num',X198))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X198))),s('type.num.num',X197))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X198),s('type.num.num',X197))))) | s(bool,'T_0') = s(bool,X194) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X196))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X196),s('type.num.num',X195))))) | s(bool,'T_0') = s(bool,X194)) )),
  inference(superposition,[],[f2246,f2246])).
fof(f30949,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num',X147))))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146)))) )),
  inference(duplicate_literal_removal,[],[f30504])).
fof(f30504,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num',X148))),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X148),s('type.num.num',X147))))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f2246,f893])).
fof(f29813,plain,(
  ( ! [X235,X233,X230,X234,X232] : (s(bool,X232) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X234),s('type.num.num',X230))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X235),s('type.num.num',X230))),s('type.num.num',X234))),s('type.num.num',X230))) | s(bool,'T_0') = s(bool,X233) | s(bool,X232) = s(bool,X233)) ) | $spl188),
  inference(cnf_transformation,[],[f29813_D])).
fof(f29813_D,plain,(
  ( ! [X235,X233,X230,X234,X232] : (s(bool,X232) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X234),s('type.num.num',X230))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X235),s('type.num.num',X230))),s('type.num.num',X234))),s('type.num.num',X230))) | s(bool,'T_0') = s(bool,X233) | s(bool,X232) = s(bool,X233)) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f29812,plain,(
  ( ! [X231,X235,X233,X230,X234,X232] : (p(s(bool,X231)) | s(bool,X232) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s(bool,X232) = s(bool,X233) | s(bool,'T_0') = s(bool,X233) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X234),s('type.num.num',X230))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X235),s('type.num.num',X230))),s('type.num.num',X234))),s('type.num.num',X230)))) )),
  inference(subsumption_resolution,[],[f29472,f120])).
fof(f29472,plain,(
  ( ! [X231,X235,X233,X230,X234,X232] : (p(s(bool,X231)) | s(bool,X232) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s(bool,X232) = s(bool,X233) | s(bool,'T_0') = s(bool,X233) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X234),s('type.num.num',X230))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X235),s('type.num.num',X230))),s('type.num.num',X234))),s('type.num.num',X230))) | s(bool,'T_0') = s(bool,X231)) )),
  inference(superposition,[],[f487,f893])).
fof(f29768,plain,(
  ( ! [X350,X349,X351,X347,X348] : (s(bool,X348) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X347))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X350),s('type.num.num',X347))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X351),s('type.num.num',X347))),s('type.num.num',X350))),s('type.num.num',X347))) | s(bool,X348) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X349),s('type.num.num','const.num.|48|_0')))) ) | $spl186),
  inference(cnf_transformation,[],[f29768_D])).
fof(f29768_D,plain,(
  ( ! [X350,X349,X351,X347,X348] : (s(bool,X348) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X347))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X350),s('type.num.num',X347))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X351),s('type.num.num',X347))),s('type.num.num',X350))),s('type.num.num',X347))) | s(bool,X348) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X349),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f29561,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s(bool,X348) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X347))) | s(bool,'T_0') = s(bool,X346) | s(bool,X348) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X349),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X350),s('type.num.num',X347))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X351),s('type.num.num',X347))),s('type.num.num',X350))),s('type.num.num',X347)))) )),
  inference(duplicate_literal_removal,[],[f29369])).
fof(f29369,plain,(
  ( ! [X350,X346,X349,X351,X347,X348] : (s(bool,X348) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X347))) | s(bool,'T_0') = s(bool,X346) | s(bool,X348) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X349),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X350),s('type.num.num',X347))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X351),s('type.num.num',X347))),s('type.num.num',X350))),s('type.num.num',X347))) | s(bool,'T_0') = s(bool,X346)) )),
  inference(superposition,[],[f5414,f893])).
fof(f29753,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,X266) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X267),s('type.num.num',X265))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X265))),s('type.num.num',X267))),s('type.num.num',X265))) | s(bool,'F_0') = s(bool,X266)) ) | $spl184),
  inference(cnf_transformation,[],[f29753_D])).
fof(f29753_D,plain,(
  ( ! [X265,X267,X268,X266] : (s(bool,X266) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X267),s('type.num.num',X265))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X265))),s('type.num.num',X267))),s('type.num.num',X265))) | s(bool,'F_0') = s(bool,X266)) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f29763,plain,(
  ( ! [X308,X310,X306,X309,X307] : (s(bool,'T_0') = s(bool,X306) | s(bool,X308) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X307))) | s(bool,'F_0') = s(bool,X308) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X309),s('type.num.num',X307))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X310),s('type.num.num',X307))),s('type.num.num',X309))),s('type.num.num',X307)))) ) | $spl24),
  inference(forward_demodulation,[],[f29762,f180])).
fof(f29762,plain,(
  ( ! [X308,X310,X306,X309,X307] : (s(bool,X308) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X307))) | s(bool,X306) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X308) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X309),s('type.num.num',X307))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X310),s('type.num.num',X307))),s('type.num.num',X309))),s('type.num.num',X307)))) ) | $spl24),
  inference(subsumption_resolution,[],[f29362,f1370])).
fof(f29362,plain,(
  ( ! [X308,X310,X306,X309,X307] : (s(bool,X308) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X307))) | s(bool,X306) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X308) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X309),s('type.num.num',X307))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X310),s('type.num.num',X307))),s('type.num.num',X309))),s('type.num.num',X307))) | s(bool,'T_0') = s(bool,X306)) ) | $spl24),
  inference(superposition,[],[f3138,f893])).
fof(f29564,plain,(
  ( ! [X265,X267,X268,X264,X266] : (s(bool,X266) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))) | s(bool,'T_0') = s(bool,X264) | s(bool,'F_0') = s(bool,X266) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X267),s('type.num.num',X265))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X265))),s('type.num.num',X267))),s('type.num.num',X265)))) )),
  inference(duplicate_literal_removal,[],[f29353])).
fof(f29353,plain,(
  ( ! [X265,X267,X268,X264,X266] : (s(bool,X266) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))) | s(bool,'T_0') = s(bool,X264) | s(bool,'F_0') = s(bool,X266) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X267),s('type.num.num',X265))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X265))),s('type.num.num',X267))),s('type.num.num',X265))) | s(bool,'T_0') = s(bool,X264)) )),
  inference(superposition,[],[f1622,f893])).
fof(f29728,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num',X5)))) ) | $spl182),
  inference(cnf_transformation,[],[f29728_D])).
fof(f29728_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num',X5)))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f29746,plain,(
  ( ! [X231,X233,X230,X232] : (s(bool,'T_0') = s(bool,X230) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X231))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X232),s('type.num.num',X231))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num',X231))),s('type.num.num',X232))),s('type.num.num',X231)))) )),
  inference(forward_demodulation,[],[f29745,f180])).
fof(f29745,plain,(
  ( ! [X231,X233,X230,X232] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X231))) | s(bool,X230) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X232),s('type.num.num',X231))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num',X231))),s('type.num.num',X232))),s('type.num.num',X231)))) )),
  inference(subsumption_resolution,[],[f29346,f1370])).
fof(f29346,plain,(
  ( ! [X231,X233,X230,X232] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X231))) | s(bool,X230) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X232),s('type.num.num',X231))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num',X231))),s('type.num.num',X232))),s('type.num.num',X231))) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f1370,f893])).
fof(f29742,plain,(
  ( ! [X212,X215,X213,X214] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X213))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X214),s('type.num.num',X213))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X215),s('type.num.num',X213))),s('type.num.num',X214))),s('type.num.num',X213)))) )),
  inference(forward_demodulation,[],[f29565,f180])).
fof(f29565,plain,(
  ( ! [X212,X215,X213,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X213))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X214),s('type.num.num',X213))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X215),s('type.num.num',X213))),s('type.num.num',X214))),s('type.num.num',X213)))) )),
  inference(duplicate_literal_removal,[],[f29342])).
fof(f29342,plain,(
  ( ! [X212,X215,X213,X214] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X213))) | s(bool,'T_0') = s(bool,X212) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X214),s('type.num.num',X213))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X215),s('type.num.num',X213))),s('type.num.num',X214))),s('type.num.num',X213))) | s(bool,'T_0') = s(bool,X212)) )),
  inference(superposition,[],[f1169,f893])).
fof(f29727,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num',X5)))) )),
  inference(subsumption_resolution,[],[f29304,f120])).
fof(f29304,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) | p(s(bool,X4)) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f120,f893])).
fof(f29663,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X147))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X148),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X149),s('type.num.num',X147))),s('type.num.num',X148))),s('type.num.num',X147)))) ) | $spl180),
  inference(cnf_transformation,[],[f29663_D])).
fof(f29663_D,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X147))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X148),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X149),s('type.num.num',X147))),s('type.num.num',X148))),s('type.num.num',X147)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f29624,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X147))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X148),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X149),s('type.num.num',X147))),s('type.num.num',X148))),s('type.num.num',X147))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146)))) )),
  inference(duplicate_literal_removal,[],[f29158])).
fof(f29158,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X147))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X148),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X149),s('type.num.num',X147))),s('type.num.num',X148))),s('type.num.num',X147))) | s(bool,'T_0') = s(bool,X145) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X150),s('type.num.num',X146))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num',X146))),s('type.num.num',X150))),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f893,f893])).
fof(f29080,plain,(
  ( ! [X158,X161,X157,X160] : (s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool)) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X157,X158,bool,bool))))) ) | $spl176),
  inference(cnf_transformation,[],[f29080_D])).
fof(f29080_D,plain,(
  ( ! [X158,X161,X157,X160] : (s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool)) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X157,X158,bool,bool))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f28069,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,X159) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X157,X158,bool,bool)))) | s(bool,'T_0') = s(bool,X159) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool))) )),
  inference(superposition,[],[f783,f5275])).
fof(f28986,plain,(
  ( ! [X115] : (s(bool,X115) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X115)) ) | $spl174),
  inference(cnf_transformation,[],[f28986_D])).
fof(f28986_D,plain,(
  ( ! [X115] : (s(bool,X115) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X115)) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f28825,plain,(
  ( ! [X114,X115] : (s(bool,X115) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X114) | s(bool,'F_0') = s(bool,X115)) ) | $spl155),
  inference(duplicate_literal_removal,[],[f28662])).
fof(f28662,plain,(
  ( ! [X114,X115] : (s(bool,X115) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X114) | s(bool,'F_0') = s(bool,X115) | s(bool,'T_0') = s(bool,X114)) ) | $spl155),
  inference(superposition,[],[f1622,f27655])).
fof(f28190,plain,(
  ( ! [X120,X119] : (s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X119,X120,bool,bool))))) ) | $spl168),
  inference(cnf_transformation,[],[f28190_D])).
fof(f28190_D,plain,(
  ( ! [X120,X119] : (s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X119,X120,bool,bool))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f28219,plain,(
  ( ! [X189,X187,X188] : (s(bool,'F_0') = s(bool,sK4(X187,X188,bool,bool)) | s(bool,X189) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189)) )),
  inference(forward_demodulation,[],[f28218,f216])).
fof(f28218,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,X189) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189) | s(bool,sK4(X187,X188,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X190),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f28076,f182])).
fof(f28076,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,X189) != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189) | s(bool,sK4(X187,X188,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X190),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f783,f21962])).
fof(f28209,plain,(
  ( ! [X173,X174,X172] : (s(bool,'F_0') = s(bool,sK4(X172,X173,bool,bool)) | s(bool,X174) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174)) )),
  inference(forward_demodulation,[],[f28208,f216])).
fof(f28208,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,X174) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174) | s(bool,sK4(X172,X173,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X175),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f28072,f181])).
fof(f28072,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,X174) != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174) | s(bool,sK4(X172,X173,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X175),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f783,f7818])).
fof(f28207,plain,(
  ( ! [X171,X169,X170] : (s(bool,X170) != s(bool,f(s(bool,X169))) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X170)) ) | $spl172),
  inference(cnf_transformation,[],[f28207_D])).
fof(f28207_D,plain,(
  ( ! [X171,X169,X170] : (s(bool,X170) != s(bool,f(s(bool,X169))) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X170)) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f28071,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,X170) != s(bool,f(s(bool,X169))) | s(fun(bool,bool),X167) = s(fun(bool,bool),X168) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X167,X168,bool,bool)))) | s(bool,'T_0') = s(bool,X170) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,sK4(X167,X168,bool,bool))) )),
  inference(superposition,[],[f783,f5275])).
fof(f28199,plain,(
  ( ! [X136,X137] : (s(bool,X137) != s(bool,f(s(bool,X136))) | s(bool,'F_0') = s(bool,X136) | s(bool,'T_0') = s(bool,X137)) ) | $spl170),
  inference(cnf_transformation,[],[f28199_D])).
fof(f28199_D,plain,(
  ( ! [X136,X137] : (s(bool,X137) != s(bool,f(s(bool,X136))) | s(bool,'F_0') = s(bool,X136) | s(bool,'T_0') = s(bool,X137)) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f28206,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,'F_0') = s(bool,sK4(X162,X163,bool,bool)) | s(bool,X165) != s(bool,f(s(bool,X164))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X162,X163,bool,bool)))) | s(bool,'T_0') = s(bool,X165) | s(bool,'F_0') = s(bool,X164)) )),
  inference(forward_demodulation,[],[f28070,f216])).
fof(f28070,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(bool,X165) != s(bool,f(s(bool,X164))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X162,X163,bool,bool)))) | s(bool,'T_0') = s(bool,X165) | s(bool,sK4(X162,X163,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X166),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X164)) )),
  inference(superposition,[],[f783,f5275])).
fof(f28203,plain,(
  ( ! [X151,X149,X150] : (s(bool,X151) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X149) = s(fun(bool,bool),X150) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X149,X150,bool,bool)))) | s(bool,'T_0') = s(bool,X151) | s(bool,'F_0') = s(bool,sK4(X149,X150,bool,bool))) )),
  inference(forward_demodulation,[],[f28067,f182])).
fof(f28067,plain,(
  ( ! [X151,X149,X150] : (s(bool,X151) != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s(fun(bool,bool),X149) = s(fun(bool,bool),X150) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X149,X150,bool,bool)))) | s(bool,'T_0') = s(bool,X151) | s(bool,'F_0') = s(bool,sK4(X149,X150,bool,bool))) )),
  inference(superposition,[],[f783,f1790])).
fof(f28202,plain,(
  ( ! [X146,X147,X148] : (s(bool,X148) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X146) = s(fun(bool,bool),X147) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X146,X147,bool,bool)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,sK4(X146,X147,bool,bool))) )),
  inference(forward_demodulation,[],[f28066,f181])).
fof(f28066,plain,(
  ( ! [X146,X147,X148] : (s(bool,X148) != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s(fun(bool,bool),X146) = s(fun(bool,bool),X147) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X146,X147,bool,bool)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,sK4(X146,X147,bool,bool))) )),
  inference(superposition,[],[f783,f1789])).
fof(f28064,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,X141) != s(bool,f(s(bool,X140))) | s(fun(bool,bool),X138) = s(fun(bool,bool),X139) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X138,X139,bool,bool)))) | s(bool,'T_0') = s(bool,X141) | s(bool,'F_0') = s(bool,sK4(X138,X139,bool,bool)) | s(bool,'F_0') = s(bool,X140)) )),
  inference(superposition,[],[f783,f1579])).
fof(f28063,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,X137) != s(bool,f(s(bool,X136))) | s(fun(bool,bool),X134) = s(fun(bool,bool),X135) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X134,X135,bool,bool)))) | s(bool,'T_0') = s(bool,X137) | s(bool,'F_0') = s(bool,X136) | s(bool,'F_0') = s(bool,sK4(X134,X135,bool,bool))) )),
  inference(superposition,[],[f783,f1579])).
fof(f28192,plain,(
  ( ! [X123,X124,X122] : (s(bool,'F_0') = s(bool,sK4(X122,X123,bool,bool)) | s(bool,X124) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(forward_demodulation,[],[f28191,f216])).
fof(f28191,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,X124) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124) | s(bool,sK4(X122,X123,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f28060,f180])).
fof(f28060,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,X124) != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124) | s(bool,sK4(X122,X123,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f783,f1293])).
fof(f28189,plain,(
  ( ! [X121,X120,X119] : (s(bool,X121) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X119,X120,bool,bool)))) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool))) )),
  inference(forward_demodulation,[],[f28059,f180])).
fof(f28059,plain,(
  ( ! [X121,X120,X119] : (s(bool,X121) != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X119,X120,bool,bool)))) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool))) )),
  inference(superposition,[],[f783,f1292])).
fof(f28181,plain,(
  ( ! [X47,X52,X48,X51] : (s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X47,X48,bool,bool))))) ) | $spl164),
  inference(cnf_transformation,[],[f28181_D])).
fof(f28181_D,plain,(
  ( ! [X47,X52,X48,X51] : (s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X47,X48,bool,bool))))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f28182,plain,(
  ( ! [X50,X49] : (s(bool,X50) != s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X50)) ) | $spl166),
  inference(cnf_transformation,[],[f28182_D])).
fof(f28182_D,plain,(
  ( ! [X50,X49] : (s(bool,X50) != s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X50)) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f28045,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s(bool,X62) != s(bool,f(s(bool,X61))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X59,X60,bool,bool)))) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,sK4(X59,X60,bool,bool)) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f783,f419])).
fof(f28043,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X50) != s(bool,f(s(bool,X49))) | s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X47,X48,bool,bool)))) | s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f783,f419])).
fof(f28042,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,X43) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f783,f419])).
fof(f28041,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,X37) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,'T_0') = s(bool,g(s(bool,sK4(X35,X36,bool,bool)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f783,f419])).
fof(f27285,plain,(
  ( ! [X121,X120,X119] : (s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool)) | s(bool,'T_0') = s(bool,X121) | s(bool,X121) = s(bool,g(s(bool,sK4(X119,X120,bool,bool))))) ) | $spl150),
  inference(cnf_transformation,[],[f27285_D])).
fof(f27285_D,plain,(
  ( ! [X121,X120,X119] : (s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool)) | s(bool,'T_0') = s(bool,X121) | s(bool,X121) = s(bool,g(s(bool,sK4(X119,X120,bool,bool))))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f27307,plain,(
  ( ! [X189,X187,X188] : (s(bool,'F_0') = s(bool,sK4(X187,X188,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,X189) = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189)) )),
  inference(forward_demodulation,[],[f27306,f216])).
fof(f27306,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,X189) = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189) | s(bool,sK4(X187,X188,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X190),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f27223,f182])).
fof(f27223,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s(fun(bool,bool),X187) = s(fun(bool,bool),X188) | s(bool,X189) = s(bool,g(s(bool,sK4(X187,X188,bool,bool)))) | s(bool,'T_0') = s(bool,X189) | s(bool,sK4(X187,X188,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X190),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f781,f21962])).
fof(f27301,plain,(
  ( ! [X173,X174,X172] : (s(bool,'F_0') = s(bool,sK4(X172,X173,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,X174) = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174)) )),
  inference(forward_demodulation,[],[f27300,f216])).
fof(f27300,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,X174) = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174) | s(bool,sK4(X172,X173,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X175),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f27219,f181])).
fof(f27219,plain,(
  ( ! [X175,X173,X174,X172] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s(fun(bool,bool),X172) = s(fun(bool,bool),X173) | s(bool,X174) = s(bool,g(s(bool,sK4(X172,X173,bool,bool)))) | s(bool,'T_0') = s(bool,X174) | s(bool,sK4(X172,X173,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X175),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f781,f7818])).
fof(f27299,plain,(
  ( ! [X171,X169] : (s(bool,'T_0') != s(bool,f(s(bool,X169))) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0')))) ) | $spl160),
  inference(cnf_transformation,[],[f27299_D])).
fof(f27299_D,plain,(
  ( ! [X171,X169] : (s(bool,'T_0') != s(bool,f(s(bool,X169))) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f27218,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,'T_0') != s(bool,f(s(bool,X169))) | s(fun(bool,bool),X167) = s(fun(bool,bool),X168) | s(bool,X170) = s(bool,g(s(bool,sK4(X167,X168,bool,bool)))) | s(bool,'T_0') = s(bool,X170) | s(bool,X169) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X171),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,sK4(X167,X168,bool,bool))) )),
  inference(superposition,[],[f781,f5275])).
fof(f27293,plain,(
  ( ! [X136] : (s(bool,'T_0') != s(bool,f(s(bool,X136))) | s(bool,'F_0') = s(bool,X136)) ) | $spl156),
  inference(cnf_transformation,[],[f27293_D])).
fof(f27293_D,plain,(
  ( ! [X136] : (s(bool,'T_0') != s(bool,f(s(bool,X136))) | s(bool,'F_0') = s(bool,X136)) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f27298,plain,(
  ( ! [X165,X163,X164,X162] : (s(bool,'F_0') = s(bool,sK4(X162,X163,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,X164))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,X165) = s(bool,g(s(bool,sK4(X162,X163,bool,bool)))) | s(bool,'T_0') = s(bool,X165) | s(bool,'F_0') = s(bool,X164)) )),
  inference(forward_demodulation,[],[f27217,f216])).
fof(f27217,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(bool,'T_0') != s(bool,f(s(bool,X164))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,X165) = s(bool,g(s(bool,sK4(X162,X163,bool,bool)))) | s(bool,'T_0') = s(bool,X165) | s(bool,sK4(X162,X163,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X166),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X164)) )),
  inference(superposition,[],[f781,f5275])).
fof(f27297,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool)) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X159) | s(bool,X159) = s(bool,g(s(bool,sK4(X157,X158,bool,bool))))) ) | $spl158),
  inference(cnf_transformation,[],[f27297_D])).
fof(f27297_D,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool)) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X159) | s(bool,X159) = s(bool,g(s(bool,sK4(X157,X158,bool,bool))))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f27292,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl155),
  inference(cnf_transformation,[],[f27292_D])).
fof(f27292_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f27216,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X157) = s(fun(bool,bool),X158) | s(bool,X159) = s(bool,g(s(bool,sK4(X157,X158,bool,bool)))) | s(bool,'T_0') = s(bool,X159) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X161),s('type.num.num','const.num.|48|_0'))) | s(bool,X160) = s(bool,sK4(X157,X158,bool,bool))) )),
  inference(superposition,[],[f781,f5275])).
fof(f27290,plain,(
  ( ! [X132,X130,X133,X131] : (s(fun(bool,bool),X130) = s(fun(bool,bool),X131) | s(bool,'F_0') = s(bool,X133) | s(bool,X133) = s(bool,sK4(X130,X131,bool,bool)) | s(bool,'T_0') = s(bool,X132) | s(bool,X132) = s(bool,g(s(bool,sK4(X130,X131,bool,bool))))) ) | $spl152),
  inference(cnf_transformation,[],[f27290_D])).
fof(f27290_D,plain,(
  ( ! [X132,X130,X133,X131] : (s(fun(bool,bool),X130) = s(fun(bool,bool),X131) | s(bool,'F_0') = s(bool,X133) | s(bool,X133) = s(bool,sK4(X130,X131,bool,bool)) | s(bool,'T_0') = s(bool,X132) | s(bool,X132) = s(bool,g(s(bool,sK4(X130,X131,bool,bool))))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f27296,plain,(
  ( ! [X156,X152,X155,X153] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153) | s(bool,X155) = s(bool,g(s(bool,sK4(X152,X153,bool,bool)))) | s(bool,'T_0') = s(bool,X155) | s(bool,X156) = s(bool,sK4(X152,X153,bool,bool)) | s(bool,'F_0') = s(bool,X156)) )),
  inference(forward_demodulation,[],[f27215,f216])).
fof(f27215,plain,(
  ( ! [X156,X154,X152,X155,X153] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num',X154),s('type.num.num','const.num.|48|_0'))))) | s(fun(bool,bool),X152) = s(fun(bool,bool),X153) | s(bool,X155) = s(bool,g(s(bool,sK4(X152,X153,bool,bool)))) | s(bool,'T_0') = s(bool,X155) | s(bool,X156) = s(bool,sK4(X152,X153,bool,bool)) | s(bool,'F_0') = s(bool,X156)) )),
  inference(superposition,[],[f781,f5275])).
fof(f27295,plain,(
  ( ! [X151,X149,X150] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X149) = s(fun(bool,bool),X150) | s(bool,X151) = s(bool,g(s(bool,sK4(X149,X150,bool,bool)))) | s(bool,'T_0') = s(bool,X151) | s(bool,'F_0') = s(bool,sK4(X149,X150,bool,bool))) )),
  inference(forward_demodulation,[],[f27214,f182])).
fof(f27214,plain,(
  ( ! [X151,X149,X150] : (s(bool,'T_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))))) | s(fun(bool,bool),X149) = s(fun(bool,bool),X150) | s(bool,X151) = s(bool,g(s(bool,sK4(X149,X150,bool,bool)))) | s(bool,'T_0') = s(bool,X151) | s(bool,'F_0') = s(bool,sK4(X149,X150,bool,bool))) )),
  inference(superposition,[],[f781,f1790])).
fof(f27294,plain,(
  ( ! [X146,X147,X148] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X146) = s(fun(bool,bool),X147) | s(bool,X148) = s(bool,g(s(bool,sK4(X146,X147,bool,bool)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,sK4(X146,X147,bool,bool))) )),
  inference(forward_demodulation,[],[f27213,f181])).
fof(f27213,plain,(
  ( ! [X146,X147,X148] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | s(fun(bool,bool),X146) = s(fun(bool,bool),X147) | s(bool,X148) = s(bool,g(s(bool,sK4(X146,X147,bool,bool)))) | s(bool,'T_0') = s(bool,X148) | s(bool,'F_0') = s(bool,sK4(X146,X147,bool,bool))) )),
  inference(superposition,[],[f781,f1789])).
fof(f27212,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X142) = s(fun(bool,bool),X143) | s(bool,X144) = s(bool,g(s(bool,sK4(X142,X143,bool,bool)))) | s(bool,'T_0') = s(bool,X144) | s(bool,X145) = s(bool,sK4(X142,X143,bool,bool)) | s(bool,'F_0') = s(bool,X145)) )),
  inference(superposition,[],[f781,f1579])).
fof(f27211,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,'T_0') != s(bool,f(s(bool,X140))) | s(fun(bool,bool),X138) = s(fun(bool,bool),X139) | s(bool,X141) = s(bool,g(s(bool,sK4(X138,X139,bool,bool)))) | s(bool,'T_0') = s(bool,X141) | s(bool,'F_0') = s(bool,sK4(X138,X139,bool,bool)) | s(bool,'F_0') = s(bool,X140)) )),
  inference(superposition,[],[f781,f1579])).
fof(f27210,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,'T_0') != s(bool,f(s(bool,X136))) | s(fun(bool,bool),X134) = s(fun(bool,bool),X135) | s(bool,X137) = s(bool,g(s(bool,sK4(X134,X135,bool,bool)))) | s(bool,'T_0') = s(bool,X137) | s(bool,'F_0') = s(bool,X136) | s(bool,'F_0') = s(bool,sK4(X134,X135,bool,bool))) )),
  inference(superposition,[],[f781,f1579])).
fof(f27209,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X130) = s(fun(bool,bool),X131) | s(bool,X132) = s(bool,g(s(bool,sK4(X130,X131,bool,bool)))) | s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,sK4(X130,X131,bool,bool)) | s(bool,'F_0') = s(bool,X133)) )),
  inference(superposition,[],[f781,f1579])).
fof(f27287,plain,(
  ( ! [X123,X124,X122] : (s(bool,'F_0') = s(bool,sK4(X122,X123,bool,bool)) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,X124) = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(forward_demodulation,[],[f27286,f216])).
fof(f27286,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,X124) = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124) | s(bool,sK4(X122,X123,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f27207,f180])).
fof(f27207,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(bool,X124) = s(bool,g(s(bool,sK4(X122,X123,bool,bool)))) | s(bool,'T_0') = s(bool,X124) | s(bool,sK4(X122,X123,bool,bool)) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f781,f1293])).
fof(f27284,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,X121) = s(bool,g(s(bool,sK4(X119,X120,bool,bool)))) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool))) )),
  inference(forward_demodulation,[],[f27206,f180])).
fof(f27206,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))))) | s(fun(bool,bool),X119) = s(fun(bool,bool),X120) | s(bool,X121) = s(bool,g(s(bool,sK4(X119,X120,bool,bool)))) | s(bool,'T_0') = s(bool,X121) | s(bool,'F_0') = s(bool,sK4(X119,X120,bool,bool))) )),
  inference(superposition,[],[f781,f1292])).
fof(f27276,plain,(
  ( ! [X47,X52,X50,X48,X51] : (s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X50) | s(bool,X50) = s(bool,g(s(bool,sK4(X47,X48,bool,bool))))) ) | $spl146),
  inference(cnf_transformation,[],[f27276_D])).
fof(f27276_D,plain,(
  ( ! [X47,X52,X50,X48,X51] : (s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X50) | s(bool,X50) = s(bool,g(s(bool,sK4(X47,X48,bool,bool))))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f27277,plain,(
  ( ! [X49] : (s(bool,'T_0') != s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X49)) ) | $spl148),
  inference(cnf_transformation,[],[f27277_D])).
fof(f27277_D,plain,(
  ( ! [X49] : (s(bool,'T_0') != s(bool,f(s(bool,X49))) | s(bool,'T_0') = s(bool,X49)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f27192,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s(bool,'T_0') != s(bool,f(s(bool,X61))) | s(fun(bool,bool),X59) = s(fun(bool,bool),X60) | s(bool,X62) = s(bool,g(s(bool,sK4(X59,X60,bool,bool)))) | s(bool,'T_0') = s(bool,X62) | s(bool,X63) = s(bool,sK4(X59,X60,bool,bool)) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X61)) )),
  inference(superposition,[],[f781,f419])).
fof(f27190,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,'T_0') != s(bool,f(s(bool,X49))) | s(fun(bool,bool),X47) = s(fun(bool,bool),X48) | s(bool,X50) = s(bool,g(s(bool,sK4(X47,X48,bool,bool)))) | s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,sK4(X47,X48,bool,bool)) | s(bool,'T_0') = s(bool,X49) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f781,f419])).
fof(f27189,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X41) = s(fun(bool,bool),X42) | s(bool,X43) = s(bool,g(s(bool,sK4(X41,X42,bool,bool)))) | s(bool,'T_0') = s(bool,X43) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,sK4(X41,X42,bool,bool))) )),
  inference(superposition,[],[f781,f419])).
fof(f27188,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X35) = s(fun(bool,bool),X36) | s(bool,X37) = s(bool,g(s(bool,sK4(X35,X36,bool,bool)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,sK4(X35,X36,bool,bool)) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f781,f419])).
fof(f24825,plain,(
  ( ! [X2,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,sK4(X1,X2,bool,bool))) ) | $spl110),
  inference(cnf_transformation,[],[f24825_D])).
fof(f24825_D,plain,(
  ( ! [X2,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,sK4(X1,X2,bool,bool))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f24847,plain,(
  ( ! [X119] : (s(bool,'T_0') != s(bool,f(s(bool,X119))) | s(bool,'F_0') = s(bool,g(s(bool,X119))) | s(bool,'T_0') = s(bool,X119)) ) | $spl138),
  inference(cnf_transformation,[],[f24847_D])).
fof(f24847_D,plain,(
  ( ! [X119] : (s(bool,'T_0') != s(bool,f(s(bool,X119))) | s(bool,'F_0') = s(bool,g(s(bool,X119))) | s(bool,'T_0') = s(bool,X119)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f24864,plain,(
  ( ! [X167,X169,X168] : (s(bool,'F_0') = s(bool,g(s(bool,X167))) | s(bool,'T_0') != s(bool,f(s(bool,X167))) | s(fun(bool,bool),X168) = s(fun(bool,bool),X169) | s(bool,'T_0') = s(bool,sK4(X168,X169,bool,bool)) | s(bool,'T_0') = s(bool,X167)) )),
  inference(forward_demodulation,[],[f24863,f216])).
fof(f24863,plain,(
  ( ! [X167,X169,X170,X168] : (s(bool,'T_0') != s(bool,f(s(bool,X167))) | s(fun(bool,bool),X168) = s(fun(bool,bool),X169) | s(bool,'T_0') = s(bool,sK4(X168,X169,bool,bool)) | s(bool,'T_0') = s(bool,X167) | s(bool,g(s(bool,X167))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X170),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f24779,f182])).
fof(f24779,plain,(
  ( ! [X167,X169,X170,X168] : (s(bool,f(s(bool,X167))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(fun(bool,bool),X168) = s(fun(bool,bool),X169) | s(bool,'T_0') = s(bool,sK4(X168,X169,bool,bool)) | s(bool,'T_0') = s(bool,X167) | s(bool,g(s(bool,X167))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X170),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f777,f21962])).
fof(f24826,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl112),
  inference(cnf_transformation,[],[f24826_D])).
fof(f24826_D,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f24862,plain,(
  ( ! [X165,X163,X166] : (s(bool,'T_0') = s(bool,g(s(bool,X163))) | s(bool,'F_0') != s(bool,f(s(bool,X163))) | s(fun(bool,bool),X165) = s(fun(bool,bool),X166) | s(bool,'T_0') = s(bool,sK4(X165,X166,bool,bool)) | s(bool,'T_0') = s(bool,X163)) )),
  inference(forward_demodulation,[],[f24861,f182])).
fof(f24861,plain,(
  ( ! [X165,X163,X166] : (s(bool,'F_0') != s(bool,f(s(bool,X163))) | s(fun(bool,bool),X165) = s(fun(bool,bool),X166) | s(bool,'T_0') = s(bool,sK4(X165,X166,bool,bool)) | s(bool,'T_0') = s(bool,X163) | s(bool,g(s(bool,X163))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(forward_demodulation,[],[f24778,f216])).
fof(f24778,plain,(
  ( ! [X165,X163,X166,X164] : (s(bool,f(s(bool,X163))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X164),s('type.num.num','const.num.|48|_0'))) | s(fun(bool,bool),X165) = s(fun(bool,bool),X166) | s(bool,'T_0') = s(bool,sK4(X165,X166,bool,bool)) | s(bool,'T_0') = s(bool,X163) | s(bool,g(s(bool,X163))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f777,f21962])).
fof(f24860,plain,(
  ( ! [X161,X162,X160] : (s(bool,'F_0') != s(bool,f(s(bool,X160))) | s(fun(bool,bool),X161) = s(fun(bool,bool),X162) | s(bool,'T_0') = s(bool,sK4(X161,X162,bool,bool)) | s(bool,'T_0') = s(bool,X160) | s(bool,'T_0') = s(bool,g(s(bool,X160)))) ) | $spl45),
  inference(forward_demodulation,[],[f24777,f11041])).
fof(f24777,plain,(
  ( ! [X161,X162,X160] : (s(bool,f(s(bool,X160))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(fun(bool,bool),X161) = s(fun(bool,bool),X162) | s(bool,'T_0') = s(bool,sK4(X161,X162,bool,bool)) | s(bool,'T_0') = s(bool,X160) | s(bool,'T_0') = s(bool,g(s(bool,X160)))) ) | $spl45),
  inference(superposition,[],[f777,f11043])).
fof(f24859,plain,(
  ( ! [X158,X156,X159] : (s(bool,'T_0') = s(bool,g(s(bool,X156))) | s(bool,'F_0') != s(bool,f(s(bool,X156))) | s(fun(bool,bool),X158) = s(fun(bool,bool),X159) | s(bool,'T_0') = s(bool,sK4(X158,X159,bool,bool)) | s(bool,'T_0') = s(bool,X156)) )),
  inference(forward_demodulation,[],[f24858,f181])).
fof(f24858,plain,(
  ( ! [X158,X156,X159] : (s(bool,'F_0') != s(bool,f(s(bool,X156))) | s(fun(bool,bool),X158) = s(fun(bool,bool),X159) | s(bool,'T_0') = s(bool,sK4(X158,X159,bool,bool)) | s(bool,'T_0') = s(bool,X156) | s(bool,g(s(bool,X156))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(forward_demodulation,[],[f24776,f216])).
fof(f24776,plain,(
  ( ! [X158,X156,X159,X157] : (s(bool,f(s(bool,X156))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X157),s('type.num.num','const.num.|48|_0'))) | s(fun(bool,bool),X158) = s(fun(bool,bool),X159) | s(bool,'T_0') = s(bool,sK4(X158,X159,bool,bool)) | s(bool,'T_0') = s(bool,X156) | s(bool,g(s(bool,X156))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f777,f7818])).
fof(f24857,plain,(
  ( ! [X154,X152,X153] : (s(bool,'F_0') = s(bool,g(s(bool,X152))) | s(bool,'T_0') != s(bool,f(s(bool,X152))) | s(fun(bool,bool),X153) = s(fun(bool,bool),X154) | s(bool,'T_0') = s(bool,sK4(X153,X154,bool,bool)) | s(bool,'T_0') = s(bool,X152)) )),
  inference(forward_demodulation,[],[f24856,f216])).
fof(f24856,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,'T_0') != s(bool,f(s(bool,X152))) | s(fun(bool,bool),X153) = s(fun(bool,bool),X154) | s(bool,'T_0') = s(bool,sK4(X153,X154,bool,bool)) | s(bool,'T_0') = s(bool,X152) | s(bool,g(s(bool,X152))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X155),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f24775,f181])).
fof(f24775,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,f(s(bool,X152))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(fun(bool,bool),X153) = s(fun(bool,bool),X154) | s(bool,'T_0') = s(bool,sK4(X153,X154,bool,bool)) | s(bool,'T_0') = s(bool,X152) | s(bool,g(s(bool,X152))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X155),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f777,f7818])).
fof(f24855,plain,(
  ( ! [X151,X149,X150] : (s(bool,'T_0') != s(bool,f(s(bool,X149))) | s(fun(bool,bool),X150) = s(fun(bool,bool),X151) | s(bool,'T_0') = s(bool,sK4(X150,X151,bool,bool)) | s(bool,'T_0') = s(bool,X149) | s(bool,'F_0') = s(bool,g(s(bool,X149)))) )),
  inference(forward_demodulation,[],[f24774,f182])).
fof(f24774,plain,(
  ( ! [X151,X149,X150] : (s(bool,f(s(bool,X149))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(fun(bool,bool),X150) = s(fun(bool,bool),X151) | s(bool,'T_0') = s(bool,sK4(X150,X151,bool,bool)) | s(bool,'T_0') = s(bool,X149) | s(bool,'F_0') = s(bool,g(s(bool,X149)))) )),
  inference(superposition,[],[f777,f1790])).
fof(f24854,plain,(
  ( ! [X146,X147,X148] : (s(bool,'T_0') != s(bool,f(s(bool,X146))) | s(fun(bool,bool),X147) = s(fun(bool,bool),X148) | s(bool,'T_0') = s(bool,sK4(X147,X148,bool,bool)) | s(bool,'T_0') = s(bool,X146) | s(bool,'F_0') = s(bool,g(s(bool,X146)))) )),
  inference(forward_demodulation,[],[f24773,f181])).
fof(f24773,plain,(
  ( ! [X146,X147,X148] : (s(bool,f(s(bool,X146))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(fun(bool,bool),X147) = s(fun(bool,bool),X148) | s(bool,'T_0') = s(bool,sK4(X147,X148,bool,bool)) | s(bool,'T_0') = s(bool,X146) | s(bool,'F_0') = s(bool,g(s(bool,X146)))) )),
  inference(superposition,[],[f777,f1789])).
fof(f24852,plain,(
  ( ! [X130,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X130))) | s(bool,'F_0') = s(bool,X133) | s(bool,X133) = s(bool,g(s(bool,X130))) | s(bool,'T_0') = s(bool,X130)) ) | $spl140),
  inference(cnf_transformation,[],[f24852_D])).
fof(f24852_D,plain,(
  ( ! [X130,X133] : (s(bool,'F_0') != s(bool,f(s(bool,X130))) | s(bool,'F_0') = s(bool,X133) | s(bool,X133) = s(bool,g(s(bool,X130))) | s(bool,'T_0') = s(bool,X130)) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f24772,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,'F_0') != s(bool,f(s(bool,X142))) | s(fun(bool,bool),X143) = s(fun(bool,bool),X144) | s(bool,'T_0') = s(bool,sK4(X143,X144,bool,bool)) | s(bool,'T_0') = s(bool,X142) | s(bool,X145) = s(bool,g(s(bool,X142))) | s(bool,'F_0') = s(bool,X145)) )),
  inference(superposition,[],[f777,f1579])).
fof(f24853,plain,(
  ( ! [X134,X135] : (s(bool,X135) != s(bool,f(s(bool,X134))) | s(bool,'F_0') = s(bool,g(s(bool,X134))) | s(bool,'F_0') = s(bool,X135) | s(bool,'T_0') = s(bool,X134)) ) | $spl142),
  inference(cnf_transformation,[],[f24853_D])).
fof(f24853_D,plain,(
  ( ! [X134,X135] : (s(bool,X135) != s(bool,f(s(bool,X134))) | s(bool,'F_0') = s(bool,g(s(bool,X134))) | s(bool,'F_0') = s(bool,X135) | s(bool,'T_0') = s(bool,X134)) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f24771,plain,(
  ( ! [X140,X138,X141,X139] : (s(bool,X139) != s(bool,f(s(bool,X138))) | s(fun(bool,bool),X140) = s(fun(bool,bool),X141) | s(bool,'T_0') = s(bool,sK4(X140,X141,bool,bool)) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,g(s(bool,X138))) | s(bool,'F_0') = s(bool,X139)) )),
  inference(superposition,[],[f777,f1579])).
fof(f24770,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,X135) != s(bool,f(s(bool,X134))) | s(fun(bool,bool),X136) = s(fun(bool,bool),X137) | s(bool,'T_0') = s(bool,sK4(X136,X137,bool,bool)) | s(bool,'T_0') = s(bool,X134) | s(bool,'F_0') = s(bool,X135) | s(bool,'F_0') = s(bool,g(s(bool,X134)))) )),
  inference(superposition,[],[f777,f1579])).
fof(f24769,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'F_0') != s(bool,f(s(bool,X130))) | s(fun(bool,bool),X131) = s(fun(bool,bool),X132) | s(bool,'T_0') = s(bool,sK4(X131,X132,bool,bool)) | s(bool,'T_0') = s(bool,X130) | s(bool,X133) = s(bool,g(s(bool,X130))) | s(bool,'F_0') = s(bool,X133)) )),
  inference(superposition,[],[f777,f1579])).
fof(f24851,plain,(
  ( ! [X128,X126,X129] : (s(bool,'T_0') = s(bool,g(s(bool,X126))) | s(bool,'F_0') != s(bool,f(s(bool,X126))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129) | s(bool,'T_0') = s(bool,sK4(X128,X129,bool,bool)) | s(bool,'T_0') = s(bool,X126)) )),
  inference(forward_demodulation,[],[f24850,f180])).
fof(f24850,plain,(
  ( ! [X128,X126,X129] : (s(bool,'F_0') != s(bool,f(s(bool,X126))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129) | s(bool,'T_0') = s(bool,sK4(X128,X129,bool,bool)) | s(bool,'T_0') = s(bool,X126) | s(bool,g(s(bool,X126))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(forward_demodulation,[],[f24768,f216])).
fof(f24768,plain,(
  ( ! [X127,X128,X126,X129] : (s(bool,f(s(bool,X126))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X127),s('type.num.num','const.num.|48|_0'))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129) | s(bool,'T_0') = s(bool,sK4(X128,X129,bool,bool)) | s(bool,'T_0') = s(bool,X126) | s(bool,g(s(bool,X126))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f777,f1293])).
fof(f24849,plain,(
  ( ! [X123,X124,X122] : (s(bool,'F_0') = s(bool,g(s(bool,X122))) | s(bool,'T_0') != s(bool,f(s(bool,X122))) | s(fun(bool,bool),X123) = s(fun(bool,bool),X124) | s(bool,'T_0') = s(bool,sK4(X123,X124,bool,bool)) | s(bool,'T_0') = s(bool,X122)) )),
  inference(forward_demodulation,[],[f24848,f216])).
fof(f24848,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,'T_0') != s(bool,f(s(bool,X122))) | s(fun(bool,bool),X123) = s(fun(bool,bool),X124) | s(bool,'T_0') = s(bool,sK4(X123,X124,bool,bool)) | s(bool,'T_0') = s(bool,X122) | s(bool,g(s(bool,X122))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f24767,f180])).
fof(f24767,plain,(
  ( ! [X125,X123,X124,X122] : (s(bool,f(s(bool,X122))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(bool,bool),X123) = s(fun(bool,bool),X124) | s(bool,'T_0') = s(bool,sK4(X123,X124,bool,bool)) | s(bool,'T_0') = s(bool,X122) | s(bool,g(s(bool,X122))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X125),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f777,f1293])).
fof(f24846,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') != s(bool,f(s(bool,X119))) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121) | s(bool,'T_0') = s(bool,sK4(X120,X121,bool,bool)) | s(bool,'T_0') = s(bool,X119) | s(bool,'F_0') = s(bool,g(s(bool,X119)))) )),
  inference(forward_demodulation,[],[f24766,f180])).
fof(f24766,plain,(
  ( ! [X121,X120,X119] : (s(bool,f(s(bool,X119))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(bool,bool),X120) = s(fun(bool,bool),X121) | s(bool,'T_0') = s(bool,sK4(X120,X121,bool,bool)) | s(bool,'T_0') = s(bool,X119) | s(bool,'F_0') = s(bool,g(s(bool,X119)))) )),
  inference(superposition,[],[f777,f1292])).
fof(f24845,plain,(
  ( ! [X118,X115] : (s(bool,'T_0') != s(bool,f(s(bool,X115))) | s(bool,X118) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X118) = s(bool,g(s(bool,X115))) | s(bool,'T_0') = s(bool,X115)) ) | $spl136),
  inference(cnf_transformation,[],[f24845_D])).
fof(f24845_D,plain,(
  ( ! [X118,X115] : (s(bool,'T_0') != s(bool,f(s(bool,X115))) | s(bool,X118) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X118) = s(bool,g(s(bool,X115))) | s(bool,'T_0') = s(bool,X115)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f24765,plain,(
  ( ! [X118,X116,X117,X115] : (s(bool,'T_0') != s(bool,f(s(bool,X115))) | s(fun(bool,bool),X116) = s(fun(bool,bool),X117) | s(bool,'T_0') = s(bool,sK4(X116,X117,bool,bool)) | s(bool,'T_0') = s(bool,X115) | s(bool,X118) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X118) = s(bool,g(s(bool,X115)))) )),
  inference(superposition,[],[f777,f873])).
fof(f24844,plain,(
  ( ! [X111,X112] : (s(bool,X112) != s(bool,f(s(bool,X111))) | s(bool,'T_0') = s(bool,g(s(bool,X111))) | s(bool,X112) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X111)) ) | $spl134),
  inference(cnf_transformation,[],[f24844_D])).
fof(f24844_D,plain,(
  ( ! [X111,X112] : (s(bool,X112) != s(bool,f(s(bool,X111))) | s(bool,'T_0') = s(bool,g(s(bool,X111))) | s(bool,X112) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X111)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f24764,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,X112) != s(bool,f(s(bool,X111))) | s(fun(bool,bool),X113) = s(fun(bool,bool),X114) | s(bool,'T_0') = s(bool,sK4(X113,X114,bool,bool)) | s(bool,'T_0') = s(bool,X111) | s(bool,X112) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,g(s(bool,X111)))) )),
  inference(superposition,[],[f777,f873])).
fof(f24828,plain,(
  ( ! [X8,X7] : (s(bool,X8) != s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,g(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl116),
  inference(cnf_transformation,[],[f24828_D])).
fof(f24828_D,plain,(
  ( ! [X8,X7] : (s(bool,X8) != s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,g(s(bool,X7))) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f24843,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,'T_0') = s(bool,g(s(bool,X107))) | s(bool,X108) != s(bool,f(s(bool,X107))) | s(fun(bool,bool),X109) = s(fun(bool,bool),X110) | s(bool,'T_0') = s(bool,sK4(X109,X110,bool,bool)) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,X108)) )),
  inference(forward_demodulation,[],[f24763,f182])).
fof(f24763,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X108) != s(bool,f(s(bool,X107))) | s(fun(bool,bool),X109) = s(fun(bool,bool),X110) | s(bool,'T_0') = s(bool,sK4(X109,X110,bool,bool)) | s(bool,'T_0') = s(bool,X107) | s(bool,g(s(bool,X107))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f777,f873])).
fof(f24827,plain,(
  ( ! [X6,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X6) | s(bool,X6) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) | $spl114),
  inference(cnf_transformation,[],[f24827_D])).
fof(f24827_D,plain,(
  ( ! [X6,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(bool,'T_0') = s(bool,X6) | s(bool,X6) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X3)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f24842,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') != s(bool,f(s(bool,X103))) | s(fun(bool,bool),X104) = s(fun(bool,bool),X105) | s(bool,'T_0') = s(bool,sK4(X104,X105,bool,bool)) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,g(s(bool,X103))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(forward_demodulation,[],[f24762,f182])).
fof(f24762,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,f(s(bool,X103))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(fun(bool,bool),X104) = s(fun(bool,bool),X105) | s(bool,'T_0') = s(bool,sK4(X104,X105,bool,bool)) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,g(s(bool,X103))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f777,f873])).
fof(f24841,plain,(
  ( ! [X99,X100] : (s(bool,X100) != s(bool,f(s(bool,X99))) | s(bool,'T_0') = s(bool,g(s(bool,X99))) | s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X99)) ) | $spl132),
  inference(cnf_transformation,[],[f24841_D])).
fof(f24841_D,plain,(
  ( ! [X99,X100] : (s(bool,X100) != s(bool,f(s(bool,X99))) | s(bool,'T_0') = s(bool,g(s(bool,X99))) | s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X99)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f24761,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,X100) != s(bool,f(s(bool,X99))) | s(fun(bool,bool),X101) = s(fun(bool,bool),X102) | s(bool,'T_0') = s(bool,sK4(X101,X102,bool,bool)) | s(bool,'T_0') = s(bool,X99) | s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,g(s(bool,X99)))) )),
  inference(superposition,[],[f777,f872])).
fof(f24840,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,'T_0') = s(bool,g(s(bool,X95))) | s(bool,X96) != s(bool,f(s(bool,X95))) | s(fun(bool,bool),X97) = s(fun(bool,bool),X98) | s(bool,'T_0') = s(bool,sK4(X97,X98,bool,bool)) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96)) )),
  inference(forward_demodulation,[],[f24760,f181])).
fof(f24760,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,X96) != s(bool,f(s(bool,X95))) | s(fun(bool,bool),X97) = s(fun(bool,bool),X98) | s(bool,'T_0') = s(bool,sK4(X97,X98,bool,bool)) | s(bool,'T_0') = s(bool,X95) | s(bool,g(s(bool,X95))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f777,f872])).
fof(f24839,plain,(
  ( ! [X94,X91] : (s(bool,'T_0') != s(bool,f(s(bool,X91))) | s(bool,X94) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X94) = s(bool,g(s(bool,X91))) | s(bool,'T_0') = s(bool,X91)) ) | $spl130),
  inference(cnf_transformation,[],[f24839_D])).
fof(f24839_D,plain,(
  ( ! [X94,X91] : (s(bool,'T_0') != s(bool,f(s(bool,X91))) | s(bool,X94) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X94) = s(bool,g(s(bool,X91))) | s(bool,'T_0') = s(bool,X91)) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f24759,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,'T_0') != s(bool,f(s(bool,X91))) | s(fun(bool,bool),X92) = s(fun(bool,bool),X93) | s(bool,'T_0') = s(bool,sK4(X92,X93,bool,bool)) | s(bool,'T_0') = s(bool,X91) | s(bool,X94) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X94) = s(bool,g(s(bool,X91)))) )),
  inference(superposition,[],[f777,f872])).
fof(f24838,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,'T_0') != s(bool,f(s(bool,X87))) | s(fun(bool,bool),X88) = s(fun(bool,bool),X89) | s(bool,'T_0') = s(bool,sK4(X88,X89,bool,bool)) | s(bool,'T_0') = s(bool,X87) | s(bool,X90) = s(bool,g(s(bool,X87))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(forward_demodulation,[],[f24758,f181])).
fof(f24758,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,f(s(bool,X87))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(fun(bool,bool),X88) = s(fun(bool,bool),X89) | s(bool,'T_0') = s(bool,sK4(X88,X89,bool,bool)) | s(bool,'T_0') = s(bool,X87) | s(bool,X90) = s(bool,g(s(bool,X87))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f777,f872])).
fof(f24837,plain,(
  ( ! [X83,X84] : (s(bool,X84) != s(bool,f(s(bool,X83))) | s(bool,'T_0') = s(bool,g(s(bool,X83))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X83)) ) | $spl128),
  inference(cnf_transformation,[],[f24837_D])).
fof(f24837_D,plain,(
  ( ! [X83,X84] : (s(bool,X84) != s(bool,f(s(bool,X83))) | s(bool,'T_0') = s(bool,g(s(bool,X83))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X83)) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f24757,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,X84) != s(bool,f(s(bool,X83))) | s(fun(bool,bool),X85) = s(fun(bool,bool),X86) | s(bool,'T_0') = s(bool,sK4(X85,X86,bool,bool)) | s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,g(s(bool,X83)))) )),
  inference(superposition,[],[f777,f871])).
fof(f24836,plain,(
  ( ! [X80,X81,X79,X82] : (s(bool,'T_0') = s(bool,g(s(bool,X79))) | s(bool,X80) != s(bool,f(s(bool,X79))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(bool,'T_0') = s(bool,sK4(X81,X82,bool,bool)) | s(bool,'T_0') = s(bool,X79) | s(bool,'T_0') = s(bool,X80)) )),
  inference(forward_demodulation,[],[f24756,f180])).
fof(f24756,plain,(
  ( ! [X80,X81,X79,X82] : (s(bool,X80) != s(bool,f(s(bool,X79))) | s(fun(bool,bool),X81) = s(fun(bool,bool),X82) | s(bool,'T_0') = s(bool,sK4(X81,X82,bool,bool)) | s(bool,'T_0') = s(bool,X79) | s(bool,g(s(bool,X79))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f777,f871])).
fof(f24835,plain,(
  ( ! [X78,X75] : (s(bool,'T_0') != s(bool,f(s(bool,X75))) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X78) = s(bool,g(s(bool,X75))) | s(bool,'T_0') = s(bool,X75)) ) | $spl126),
  inference(cnf_transformation,[],[f24835_D])).
fof(f24835_D,plain,(
  ( ! [X78,X75] : (s(bool,'T_0') != s(bool,f(s(bool,X75))) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X78) = s(bool,g(s(bool,X75))) | s(bool,'T_0') = s(bool,X75)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f24755,plain,(
  ( ! [X78,X76,X77,X75] : (s(bool,'T_0') != s(bool,f(s(bool,X75))) | s(fun(bool,bool),X76) = s(fun(bool,bool),X77) | s(bool,'T_0') = s(bool,sK4(X76,X77,bool,bool)) | s(bool,'T_0') = s(bool,X75) | s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X78) = s(bool,g(s(bool,X75)))) )),
  inference(superposition,[],[f777,f871])).
fof(f24834,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'T_0') != s(bool,f(s(bool,X71))) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73) | s(bool,'T_0') = s(bool,sK4(X72,X73,bool,bool)) | s(bool,'T_0') = s(bool,X71) | s(bool,X74) = s(bool,g(s(bool,X71))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(forward_demodulation,[],[f24754,f180])).
fof(f24754,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,f(s(bool,X71))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73) | s(bool,'T_0') = s(bool,sK4(X72,X73,bool,bool)) | s(bool,'T_0') = s(bool,X71) | s(bool,X74) = s(bool,g(s(bool,X71))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f777,f871])).
fof(f24833,plain,(
  ( ! [X57,X54,X58,X53] : (s(bool,X54) != s(bool,f(s(bool,X53))) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,g(s(bool,X53))) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X53)) ) | $spl124),
  inference(cnf_transformation,[],[f24833_D])).
fof(f24833_D,plain,(
  ( ! [X57,X54,X58,X53] : (s(bool,X54) != s(bool,f(s(bool,X53))) | s(bool,'T_0') = s(bool,X58) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,g(s(bool,X53))) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,X53)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f24753,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (s(bool,X66) != s(bool,f(s(bool,X65))) | s(fun(bool,bool),X67) = s(fun(bool,bool),X68) | s(bool,'T_0') = s(bool,sK4(X67,X68,bool,bool)) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,X69) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,g(s(bool,X65)))) )),
  inference(superposition,[],[f777,f419])).
fof(f24832,plain,(
  ( ! [X47,X52,X48,X51] : (s(bool,X48) != s(bool,f(s(bool,X47))) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X48) | s(bool,X51) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X47)) ) | $spl122),
  inference(cnf_transformation,[],[f24832_D])).
fof(f24832_D,plain,(
  ( ! [X47,X52,X48,X51] : (s(bool,X48) != s(bool,f(s(bool,X47))) | s(bool,'T_0') = s(bool,X52) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X48) | s(bool,X51) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X47)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f24752,plain,(
  ( ! [X61,X59,X64,X62,X60,X63] : (s(bool,X60) != s(bool,f(s(bool,X59))) | s(fun(bool,bool),X61) = s(fun(bool,bool),X62) | s(bool,'T_0') = s(bool,sK4(X61,X62,bool,bool)) | s(bool,'T_0') = s(bool,X59) | s(bool,X63) = s(bool,g(s(bool,X59))) | s(bool,X63) = s(bool,X64) | s(bool,'T_0') = s(bool,X64) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f777,f419])).
fof(f24751,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,X54) != s(bool,f(s(bool,X53))) | s(fun(bool,bool),X55) = s(fun(bool,bool),X56) | s(bool,'T_0') = s(bool,sK4(X55,X56,bool,bool)) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,X57) | s(bool,'T_0') = s(bool,g(s(bool,X53))) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f777,f419])).
fof(f24750,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X48) != s(bool,f(s(bool,X47))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50) | s(bool,'T_0') = s(bool,sK4(X49,X50,bool,bool)) | s(bool,'T_0') = s(bool,X47) | s(bool,X51) = s(bool,g(s(bool,X47))) | s(bool,'T_0') = s(bool,X48) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f777,f419])).
fof(f24831,plain,(
  ( ! [X39,X35,X38,X40] : (s(bool,'T_0') != s(bool,f(s(bool,X35))) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X35)) ) | $spl120),
  inference(cnf_transformation,[],[f24831_D])).
fof(f24831_D,plain,(
  ( ! [X39,X35,X38,X40] : (s(bool,'T_0') != s(bool,f(s(bool,X35))) | s(bool,'T_0') = s(bool,X40) | s(bool,X38) = s(bool,X40) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,g(s(bool,X35))) | s(bool,'T_0') = s(bool,X35)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f24749,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') != s(bool,f(s(bool,X41))) | s(fun(bool,bool),X42) = s(fun(bool,bool),X43) | s(bool,'T_0') = s(bool,sK4(X42,X43,bool,bool)) | s(bool,'T_0') = s(bool,X41) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,X46) | s(bool,'T_0') = s(bool,X46) | s(bool,X44) = s(bool,g(s(bool,X41)))) )),
  inference(superposition,[],[f777,f419])).
fof(f24748,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'T_0') != s(bool,f(s(bool,X35))) | s(fun(bool,bool),X36) = s(fun(bool,bool),X37) | s(bool,'T_0') = s(bool,sK4(X36,X37,bool,bool)) | s(bool,'T_0') = s(bool,X35) | s(bool,X38) = s(bool,X39) | s(bool,X39) = s(bool,g(s(bool,X35))) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f777,f419])).
fof(f24830,plain,(
  ( ! [X28,X24,X23,X27] : (s(bool,X24) != s(bool,f(s(bool,X23))) | s(bool,'T_0') = s(bool,X28) | s(bool,X28) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X23)) ) | $spl118),
  inference(cnf_transformation,[],[f24830_D])).
fof(f24830_D,plain,(
  ( ! [X28,X24,X23,X27] : (s(bool,X24) != s(bool,f(s(bool,X23))) | s(bool,'T_0') = s(bool,X28) | s(bool,X28) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X23)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f24747,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(bool,X30) != s(bool,f(s(bool,X29))) | s(fun(bool,bool),X31) = s(fun(bool,bool),X32) | s(bool,'T_0') = s(bool,sK4(X31,X32,bool,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,X33) = s(bool,g(s(bool,X29))) | s(bool,'T_0') = s(bool,X33) | s(bool,X30) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f777,f419])).
fof(f24746,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X24) != s(bool,f(s(bool,X23))) | s(fun(bool,bool),X25) = s(fun(bool,bool),X26) | s(bool,'T_0') = s(bool,sK4(X25,X26,bool,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f777,f419])).
fof(f24829,plain,(
  ( ! [X21,X19,X22] : (s(bool,'F_0') != s(bool,f(s(bool,X19))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK4(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,g(s(bool,X19)))) )),
  inference(forward_demodulation,[],[f24745,f216])).
fof(f24745,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,f(s(bool,X19))) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK4(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,g(s(bool,X19)))) )),
  inference(superposition,[],[f777,f319])).
fof(f24744,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,'T_0') != s(bool,f(s(bool,X15))) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17) | s(bool,'T_0') = s(bool,sK4(X16,X17,bool,bool)) | s(bool,'T_0') = s(bool,X15) | s(bool,X18) = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f777,f229])).
fof(f24743,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X12) != s(bool,f(s(bool,X11))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,sK4(X13,X14,bool,bool)) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,g(s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f777,f229])).
fof(f24742,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X8) != s(bool,f(s(bool,X7))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK4(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,g(s(bool,X7)))) )),
  inference(superposition,[],[f777,f229])).
fof(f24741,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,X3))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,sK4(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X6) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f777,f229])).
fof(f24740,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,sK4(X1,X2,bool,bool)) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) )),
  inference(superposition,[],[f777,f116])).
fof(f24231,plain,(
  ( ! [X108] : (s(bool,X108) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X108)) ) | $spl104),
  inference(cnf_transformation,[],[f24231_D])).
fof(f24231_D,plain,(
  ( ! [X108] : (s(bool,X108) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X108)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f24211,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK4(X0,X1,bool,bool))) ) | $spl74),
  inference(cnf_transformation,[],[f24211_D])).
fof(f24211_D,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X2) = s(bool,sK4(X0,X1,bool,bool))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f24213,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl77),
  inference(cnf_transformation,[],[f24213_D])).
fof(f24213_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f24192,plain,(
  ( ! [X118,X120,X119,X117] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X117) = s(fun(bool,bool),X118) | s(bool,X119) = s(bool,sK4(X117,X118,bool,bool)) | s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X120)) )),
  inference(superposition,[],[f775,f1579])).
fof(f24233,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl106),
  inference(cnf_transformation,[],[f24233_D])).
fof(f24233_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f24234,plain,(
  ( ! [X109] : (s(bool,X109) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X109)) ) | $spl108),
  inference(cnf_transformation,[],[f24234_D])).
fof(f24234_D,plain,(
  ( ! [X109] : (s(bool,X109) != s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X109)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f24191,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X113) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X114) = s(fun(bool,bool),X115) | s(bool,X116) = s(bool,sK4(X114,X115,bool,bool)) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X113)) )),
  inference(superposition,[],[f775,f1579])).
fof(f24190,plain,(
  ( ! [X111,X109,X112,X110] : (s(bool,X109) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X110) = s(fun(bool,bool),X111) | s(bool,X112) = s(bool,sK4(X110,X111,bool,bool)) | s(bool,'T_0') = s(bool,X112) | s(bool,'F_0') = s(bool,X109) | s(bool,'F_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f1579])).
fof(f24189,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X105) = s(fun(bool,bool),X106) | s(bool,X107) = s(bool,sK4(X105,X106,bool,bool)) | s(bool,'T_0') = s(bool,X107) | s(bool,X108) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X108)) )),
  inference(superposition,[],[f775,f1579])).
fof(f24230,plain,(
  ( ! [X103] : (s(bool,X103) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X103) = s(bool,g(s(bool,'T_0')))) ) | $spl102),
  inference(cnf_transformation,[],[f24230_D])).
fof(f24230_D,plain,(
  ( ! [X103] : (s(bool,X103) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X103) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f24188,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X100) = s(fun(bool,bool),X101) | s(bool,X102) = s(bool,sK4(X100,X101,bool,bool)) | s(bool,'T_0') = s(bool,X102) | s(bool,X103) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X103) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f873])).
fof(f24210,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl72),
  inference(cnf_transformation,[],[f24210_D])).
fof(f24210_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f24229,plain,(
  ( ! [X96] : (s(bool,X96) != s(bool,f(s(bool,'T_0'))) | s(bool,X96) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl100),
  inference(cnf_transformation,[],[f24229_D])).
fof(f24229_D,plain,(
  ( ! [X96] : (s(bool,X96) != s(bool,f(s(bool,'T_0'))) | s(bool,X96) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f24187,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,X96) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X97) = s(fun(bool,bool),X98) | s(bool,X99) = s(bool,sK4(X97,X98,bool,bool)) | s(bool,'T_0') = s(bool,X99) | s(bool,X96) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f873])).
fof(f24228,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X92) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X93) = s(fun(bool,bool),X94) | s(bool,X95) = s(bool,sK4(X93,X94,bool,bool)) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X92)) )),
  inference(forward_demodulation,[],[f24186,f182])).
fof(f24186,plain,(
  ( ! [X94,X92,X95,X93] : (s(bool,X92) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X93) = s(fun(bool,bool),X94) | s(bool,X95) = s(bool,sK4(X93,X94,bool,bool)) | s(bool,'T_0') = s(bool,X95) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f775,f873])).
fof(f24227,plain,(
  ( ! [X88] : (s(bool,X88) != s(bool,f(s(bool,'T_0'))) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl98),
  inference(cnf_transformation,[],[f24227_D])).
fof(f24227_D,plain,(
  ( ! [X88] : (s(bool,X88) != s(bool,f(s(bool,'T_0'))) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f24185,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,X88) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X89) = s(fun(bool,bool),X90) | s(bool,X91) = s(bool,sK4(X89,X90,bool,bool)) | s(bool,'T_0') = s(bool,X91) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f872])).
fof(f24226,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X84) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X85) = s(fun(bool,bool),X86) | s(bool,X87) = s(bool,sK4(X85,X86,bool,bool)) | s(bool,'T_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X84)) )),
  inference(forward_demodulation,[],[f24184,f181])).
fof(f24184,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X84) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X85) = s(fun(bool,bool),X86) | s(bool,X87) = s(bool,sK4(X85,X86,bool,bool)) | s(bool,'T_0') = s(bool,X87) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f775,f872])).
fof(f24225,plain,(
  ( ! [X83] : (s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X83) = s(bool,g(s(bool,'T_0')))) ) | $spl96),
  inference(cnf_transformation,[],[f24225_D])).
fof(f24225_D,plain,(
  ( ! [X83] : (s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X83) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f24183,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X80) = s(fun(bool,bool),X81) | s(bool,X82) = s(bool,sK4(X80,X81,bool,bool)) | s(bool,'T_0') = s(bool,X82) | s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X83) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f872])).
fof(f24224,plain,(
  ( ! [X76] : (s(bool,X76) != s(bool,f(s(bool,'T_0'))) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl94),
  inference(cnf_transformation,[],[f24224_D])).
fof(f24224_D,plain,(
  ( ! [X76] : (s(bool,X76) != s(bool,f(s(bool,'T_0'))) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f24182,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X76) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X77) = s(fun(bool,bool),X78) | s(bool,X79) = s(bool,sK4(X77,X78,bool,bool)) | s(bool,'T_0') = s(bool,X79) | s(bool,X76) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f871])).
fof(f24223,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X72) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X73) = s(fun(bool,bool),X74) | s(bool,X75) = s(bool,sK4(X73,X74,bool,bool)) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X72)) )),
  inference(forward_demodulation,[],[f24181,f180])).
fof(f24181,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X72) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X73) = s(fun(bool,bool),X74) | s(bool,X75) = s(bool,sK4(X73,X74,bool,bool)) | s(bool,'T_0') = s(bool,X75) | s(bool,g(s(bool,'T_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f775,f871])).
fof(f24222,plain,(
  ( ! [X71] : (s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X71) = s(bool,g(s(bool,'T_0')))) ) | $spl92),
  inference(cnf_transformation,[],[f24222_D])).
fof(f24222_D,plain,(
  ( ! [X71] : (s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X71) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f24180,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X68) = s(fun(bool,bool),X69) | s(bool,X70) = s(bool,sK4(X68,X69,bool,bool)) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X71) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f871])).
fof(f24221,plain,(
  ( ! [X54,X50,X55] : (s(bool,X50) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X55) | s(bool,X54) = s(bool,X55) | s(bool,X50) = s(bool,X54)) ) | $spl90),
  inference(cnf_transformation,[],[f24221_D])).
fof(f24221_D,plain,(
  ( ! [X54,X50,X55] : (s(bool,X50) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X55) | s(bool,X54) = s(bool,X55) | s(bool,X50) = s(bool,X54)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f24179,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s(bool,X62) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X63) = s(fun(bool,bool),X64) | s(bool,X65) = s(bool,sK4(X63,X64,bool,bool)) | s(bool,'T_0') = s(bool,X65) | s(bool,X62) = s(bool,X66) | s(bool,X66) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f419])).
fof(f24220,plain,(
  ( ! [X48,X49] : (s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X49) | s(bool,X48) = s(bool,X49)) ) | $spl88),
  inference(cnf_transformation,[],[f24220_D])).
fof(f24220_D,plain,(
  ( ! [X48,X49] : (s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X49) | s(bool,X48) = s(bool,X49)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f24178,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(bool,X56) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X57) = s(fun(bool,bool),X58) | s(bool,X59) = s(bool,sK4(X57,X58,bool,bool)) | s(bool,'T_0') = s(bool,X59) | s(bool,X60) = s(bool,g(s(bool,'T_0'))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f775,f419])).
fof(f24177,plain,(
  ( ! [X54,X52,X50,X55,X53,X51] : (s(bool,X50) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52) | s(bool,X53) = s(bool,sK4(X51,X52,bool,bool)) | s(bool,'T_0') = s(bool,X53) | s(bool,X50) = s(bool,X54) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X54) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f775,f419])).
fof(f24176,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s(bool,X44) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X45) = s(fun(bool,bool),X46) | s(bool,X47) = s(bool,sK4(X45,X46,bool,bool)) | s(bool,'T_0') = s(bool,X47) | s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X44) | s(bool,X48) = s(bool,X49) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f775,f419])).
fof(f24219,plain,(
  ( ! [X37,X35,X36] : (s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X37) | s(bool,X35) = s(bool,X37) | s(bool,X36) = s(bool,g(s(bool,'T_0')))) ) | $spl86),
  inference(cnf_transformation,[],[f24219_D])).
fof(f24219_D,plain,(
  ( ! [X37,X35,X36] : (s(bool,X35) = s(bool,X36) | s(bool,'T_0') = s(bool,X37) | s(bool,X35) = s(bool,X37) | s(bool,X36) = s(bool,g(s(bool,'T_0')))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f24175,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X38) = s(fun(bool,bool),X39) | s(bool,X40) = s(bool,sK4(X38,X39,bool,bool)) | s(bool,'T_0') = s(bool,X40) | s(bool,X41) = s(bool,X42) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s(bool,X41) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f419])).
fof(f24174,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33) | s(bool,X34) = s(bool,sK4(X32,X33,bool,bool)) | s(bool,'T_0') = s(bool,X34) | s(bool,X35) = s(bool,X36) | s(bool,X36) = s(bool,g(s(bool,'T_0'))) | s(bool,X35) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f775,f419])).
fof(f24214,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl78),
  inference(cnf_transformation,[],[f24214_D])).
fof(f24214_D,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f24218,plain,(
  ( ! [X24,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X24) | s(bool,X20) = s(bool,X24)) ) | $spl84),
  inference(cnf_transformation,[],[f24218_D])).
fof(f24218_D,plain,(
  ( ! [X24,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X24) | s(bool,X20) = s(bool,X24)) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f24173,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(bool,X26) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X27) = s(fun(bool,bool),X28) | s(bool,X29) = s(bool,sK4(X27,X28,bool,bool)) | s(bool,'T_0') = s(bool,X29) | s(bool,X30) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X30) | s(bool,X26) = s(bool,X31) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f775,f419])).
fof(f24172,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,X23) = s(bool,sK4(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X23) | s(bool,X20) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f775,f419])).
fof(f24171,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK4(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f775,f229])).
fof(f24170,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,X14) = s(bool,sK4(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f775,f229])).
fof(f24169,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X7) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,X10) = s(bool,sK4(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f229])).
fof(f24168,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,X5) = s(bool,sK4(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f775,f229])).
fof(f24167,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK4(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f775,f116])).
fof(f22211,plain,(
  ( ! [X140,X141] : (s(bool,X140) != s(bool,X141) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X141)) ) | $spl70),
  inference(cnf_transformation,[],[f22211_D])).
fof(f22211_D,plain,(
  ( ! [X140,X141] : (s(bool,X140) != s(bool,X141) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X141)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f21466,plain,(
  ( ! [X140,X141,X139] : (s(bool,X140) != s(bool,X141) | s(bool,'T_0') = s(bool,X139) | s(bool,'F_0') = s(bool,X141) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f21181])).
fof(f21181,plain,(
  ( ! [X140,X141,X139] : (s(bool,X140) != s(bool,X141) | s(bool,'T_0') = s(bool,X139) | s(bool,'F_0') = s(bool,X141) | s(bool,X140) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f1622,f873])).
fof(f21861,plain,(
  ( ! [X92,X90] : (s(bool,X90) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) | $spl66),
  inference(cnf_transformation,[],[f21861_D])).
fof(f21861_D,plain,(
  ( ! [X92,X90] : (s(bool,X90) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f21617,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X68) = s(bool,X70) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f20861])).
fof(f20861,plain,(
  ( ! [X70,X68,X69] : (s(bool,'T_0') = s(bool,X69) | s(bool,X70) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X68) = s(bool,X70) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f873,f873])).
fof(f21865,plain,(
  ( ! [X97,X95] : (s(bool,X95) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) ) | $spl68),
  inference(cnf_transformation,[],[f21865_D])).
fof(f21865_D,plain,(
  ( ! [X97,X95] : (s(bool,X95) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f21915,plain,(
  ( ! [X121,X122,X120] : (s(bool,X122) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X121),s('type.num.num','const.num.|48|_0'))) | s(bool,X122) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X120)) ) | $spl18),
  inference(subsumption_resolution,[],[f20785,f3129])).
fof(f20785,plain,(
  ( ! [X121,X122,X120] : (s(bool,X122) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X121),s('type.num.num','const.num.|48|_0'))) | s(bool,X122) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X120) | s(bool,X120) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(superposition,[],[f873,f7818])).
fof(f21908,plain,(
  ( ! [X99,X100,X98] : (s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.num.|48|_0'))) | s(bool,X100) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(subsumption_resolution,[],[f20777,f1169])).
fof(f20777,plain,(
  ( ! [X99,X100,X98] : (s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X99),s('type.num.num','const.num.|48|_0'))) | s(bool,X100) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X98) | s(bool,X98) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f873,f1293])).
fof(f21652,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) = s(bool,X89) | s(bool,X89) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f20773])).
fof(f20773,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) = s(bool,X89) | s(bool,X89) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f873,f873])).
fof(f21668,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(duplicate_literal_removal,[],[f20754])).
fof(f20754,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f873,f319])).
fof(f21868,plain,(
  ( ! [X118,X119,X117] : (s(bool,'T_0') = s(bool,X118) | s(bool,X117) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X119),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f21867,f181])).
fof(f21867,plain,(
  ( ! [X118,X119,X117] : (s(bool,X118) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X117) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X119),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f20719,f7994])).
fof(f20719,plain,(
  ( ! [X118,X119,X117] : (s(bool,X118) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X117) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X118) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X119),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f873,f7818])).
fof(f21864,plain,(
  ( ! [X97,X95,X96] : (s(bool,'T_0') = s(bool,X96) | s(bool,X95) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f21863,f180])).
fof(f21863,plain,(
  ( ! [X97,X95,X96] : (s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f20711,f1370])).
fof(f20711,plain,(
  ( ! [X97,X95,X96] : (s(bool,X96) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X95) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X96) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f873,f1293])).
fof(f21698,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') = s(bool,X91) | s(bool,X90) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92)) )),
  inference(duplicate_literal_removal,[],[f20709])).
fof(f20709,plain,(
  ( ! [X92,X90,X91] : (s(bool,'T_0') = s(bool,X91) | s(bool,X90) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,X90) = s(bool,X92)) )),
  inference(superposition,[],[f873,f873])).
fof(f16429,plain,(
  $false | ($spl22 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8156,f8088,f893,f876,f119,f8165,f6448,f5842,f5609,f5275,f3135,f2927,f2650,f2531,f1878,f1790,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f3254,f3255,f3725,f3726,f3738,f3732,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2219,f2215,f164,f8125,f8135,f783,f781,f2651,f2532,f1693,f788,f8058,f8038,f8022,f8018,f8017,f7994,f7818,f7808,f7801,f7526,f7432,f7424,f7119,f1789,f892,f872,f181,f111,f11066,f11067,f11076,f11098,f11099,f11101,f11328,f11329,f11339,f11363,f11364,f11366,f11753,f11779,f11756,f11783,f11784,f11786,f11799,f11826,f11827,f11829,f11843,f11871,f11872,f11874,f11876,f11917,f11922,f11923,f11925,f15292,f13040,f13042,f13360,f13361,f15778,f15782,f15800,f13544,f13545,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13637,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f15948,f15949,f15961,f15962,f15963,f13753,f13754,f16148,f14094,f15784,f16236,f16229,f16224,f16397,f16403,f16406,f16211,f16197,f16162])).
fof(f16162,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f124])).
fof(f16197,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f15784,f168])).
fof(f16211,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f15784,f168])).
fof(f16406,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl58),
  inference(condensation,[],[f16405])).
fof(f16405,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | $spl58),
  inference(subsumption_resolution,[],[f16350,f872])).
fof(f16350,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X6) = s(bool,X7)) ) | $spl58),
  inference(backward_demodulation,[],[f16224,f8058])).
fof(f16403,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl58),
  inference(subsumption_resolution,[],[f16344,f16224])).
fof(f16344,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | $spl58),
  inference(backward_demodulation,[],[f16224,f5609])).
fof(f16397,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl58),
  inference(condensation,[],[f16396])).
fof(f16396,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | $spl58),
  inference(subsumption_resolution,[],[f16325,f871])).
fof(f16325,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | $spl58),
  inference(backward_demodulation,[],[f16224,f1392])).
fof(f16224,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f121])).
fof(f16229,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))),s('type.num.num',X1)))) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f119])).
fof(f16236,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X2)))))) ) | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f164])).
fof(f16421,plain,(
  $false | ($spl22 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8156,f8088,f893,f876,f119,f8165,f6448,f5842,f5609,f5275,f3135,f2927,f2650,f2531,f1878,f1790,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f3254,f3255,f3725,f3726,f3738,f3732,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2219,f2215,f164,f8125,f8135,f783,f781,f2651,f2532,f1693,f788,f8058,f8038,f8022,f8018,f8017,f7994,f7818,f7808,f7801,f7526,f7432,f7424,f7119,f1789,f892,f872,f181,f111,f11066,f11067,f11076,f11098,f11099,f11101,f11328,f11329,f11339,f11363,f11364,f11366,f11753,f11779,f11756,f11783,f11784,f11786,f11799,f11826,f11827,f11829,f11843,f11871,f11872,f11874,f11876,f11917,f11922,f11923,f11925,f15292,f13040,f13042,f13360,f13361,f15778,f15782,f15800,f13544,f13545,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13637,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f15948,f15949,f15961,f15962,f15963,f13753,f13754,f16148,f14094,f15784,f16236,f16229,f16224,f16397,f16403,f16406,f16211,f16197])).
fof(f16420,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16198,f112])).
fof(f16198,plain,(
  ~p(s(bool,'T_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f176,f15784,f168])).
fof(f16419,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16200,f112])).
fof(f16200,plain,(
  ~p(s(bool,'T_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f177,f15784,f168])).
fof(f16418,plain,(
  $false | ($spl45 | $spl58)),
  inference(subsumption_resolution,[],[f16202,f112])).
fof(f16202,plain,(
  ~p(s(bool,'T_0')) | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f11022,f15784,f168])).
fof(f16417,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16204,f15784])).
fof(f16204,plain,(
  ~p(s(bool,'F_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f176,f15784,f168])).
fof(f16416,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16206,f15784])).
fof(f16206,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl58),
  inference(unit_resulting_resolution,[],[f177,f15784,f168])).
fof(f16415,plain,(
  $false | ($spl45 | $spl58)),
  inference(subsumption_resolution,[],[f16208,f15784])).
fof(f16208,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f11022,f15784,f168])).
fof(f16414,plain,(
  $false | ($spl22 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8156,f8088,f893,f876,f119,f8165,f6448,f5842,f5609,f5275,f3135,f2927,f2650,f2531,f1878,f1790,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f3254,f3255,f3725,f3726,f3738,f3732,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2219,f2215,f164,f8125,f8135,f783,f781,f2651,f2532,f1693,f788,f8058,f8038,f8022,f8018,f8017,f7994,f7818,f7808,f7801,f7526,f7432,f7424,f7119,f1789,f892,f872,f181,f111,f11066,f11067,f11076,f11098,f11099,f11101,f11328,f11329,f11339,f11363,f11364,f11366,f11753,f11779,f11756,f11783,f11784,f11786,f11799,f11826,f11827,f11829,f11843,f11871,f11872,f11874,f11876,f11917,f11922,f11923,f11925,f15292,f13040,f13042,f13360,f13361,f15778,f15782,f15800,f13544,f13545,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13637,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f15948,f15949,f15961,f15962,f15963,f13753,f13754,f16148,f14094,f15784,f16236,f16229,f16224,f16397,f16403,f16406,f16211])).
fof(f16413,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16212,f112])).
fof(f16212,plain,(
  ~p(s(bool,'T_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f176,f15784,f168])).
fof(f16412,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16214,f112])).
fof(f16214,plain,(
  ~p(s(bool,'T_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f177,f15784,f168])).
fof(f16411,plain,(
  $false | ($spl45 | $spl58)),
  inference(subsumption_resolution,[],[f16216,f112])).
fof(f16216,plain,(
  ~p(s(bool,'T_0')) | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f11022,f15784,f168])).
fof(f16410,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16218,f15784])).
fof(f16218,plain,(
  ~p(s(bool,'F_0')) | $spl58),
  inference(unit_resulting_resolution,[],[f176,f15784,f168])).
fof(f16409,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16220,f15784])).
fof(f16220,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl58),
  inference(unit_resulting_resolution,[],[f177,f15784,f168])).
fof(f16408,plain,(
  $false | ($spl45 | $spl58)),
  inference(subsumption_resolution,[],[f16222,f15784])).
fof(f16222,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f11022,f15784,f168])).
fof(f16407,plain,(
  $false | ($spl22 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8156,f8088,f893,f876,f119,f8165,f6448,f5842,f5609,f5275,f3135,f2927,f2650,f2531,f1878,f1790,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f3254,f3255,f3725,f3726,f3738,f3732,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2219,f2215,f164,f8125,f8135,f783,f781,f2651,f2532,f1693,f788,f8058,f8038,f8022,f8018,f8017,f7994,f7818,f7808,f7801,f7526,f7432,f7424,f7119,f1789,f892,f872,f181,f111,f11066,f11067,f11076,f11098,f11099,f11101,f11328,f11329,f11339,f11363,f11364,f11366,f11753,f11779,f11756,f11783,f11784,f11786,f11799,f11826,f11827,f11829,f11843,f11871,f11872,f11874,f11876,f11917,f11922,f11923,f11925,f15292,f13040,f13042,f13360,f13361,f15778,f15782,f15800,f13544,f13545,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13637,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f15948,f15949,f15961,f15962,f15963,f13753,f13754,f16148,f14094,f15784,f16236,f16229,f16224,f16397,f16403,f16406])).
fof(f16404,plain,(
  $false | ($spl22 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3131,f2245,f1794,f1370,f1369,f1293,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f5298,f5633,f5414,f5697,f5943,f7680,f7762,f7662,f7659,f7794,f7648,f7817,f7993,f7584,f8137,f8141,f8142,f8143,f8156,f8088,f893,f876,f119,f8165,f6448,f5842,f5609,f5275,f3135,f2927,f2650,f2531,f1878,f1790,f1776,f1692,f1673,f1392,f1292,f787,f216,f125,f124,f114,f3254,f3255,f3725,f3726,f3738,f3732,f3699,f3270,f3264,f3233,f3229,f2252,f2246,f2219,f2215,f164,f8125,f8135,f783,f781,f2651,f2532,f1693,f788,f8058,f8038,f8022,f8018,f8017,f7994,f7818,f7808,f7801,f7526,f7432,f7424,f7119,f1789,f892,f872,f181,f111,f11066,f11067,f11076,f11098,f11099,f11101,f11328,f11329,f11339,f11363,f11364,f11366,f11753,f11779,f11756,f11783,f11784,f11786,f11799,f11826,f11827,f11829,f11843,f11871,f11872,f11874,f11876,f11917,f11922,f11923,f11925,f15292,f13040,f13042,f13360,f13361,f15778,f15782,f15800,f13544,f13545,f15842,f14503,f15853,f14501,f15871,f15882,f15884,f15885,f13636,f13637,f13639,f13643,f13644,f13645,f15926,f15927,f15933,f15948,f15949,f15961,f15962,f15963,f13753,f13754,f16148,f14094,f15784,f16236,f16229,f16224,f16397,f16403])).
fof(f16395,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16394,f15784])).
fof(f16394,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl58),
  inference(subsumption_resolution,[],[f16319,f16224])).
fof(f16319,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl58),
  inference(backward_demodulation,[],[f16224,f124])).
fof(f16393,plain,(
  $false | $spl58),
  inference(subsumption_resolution,[],[f16318,f112])).
fof(f16318,plain,(
  ~p(s(bool,'T_0')) | $spl58),
  inference(backward_demodulation,[],[f16224,f114])).
fof(f16225,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f176,f15784,f121])).
fof(f16223,plain,(
  $false | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f15784,f11022,f15784,f168])).
fof(f16221,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f177,f15784,f168])).
fof(f16219,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f176,f15784,f168])).
fof(f16217,plain,(
  $false | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f112,f11022,f15784,f168])).
fof(f16215,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f112,f177,f15784,f168])).
fof(f16213,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f112,f176,f15784,f168])).
fof(f16209,plain,(
  $false | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f15784,f11022,f15784,f168])).
fof(f16207,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f177,f15784,f168])).
fof(f16205,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f15784,f176,f15784,f168])).
fof(f16203,plain,(
  $false | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f112,f11022,f15784,f168])).
fof(f16201,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f112,f177,f15784,f168])).
fof(f16199,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f112,f176,f15784,f168])).
fof(f16195,plain,(
  $false | ($spl45 | $spl58)),
  inference(unit_resulting_resolution,[],[f176,f11022,f11022,f15784,f707])).
fof(f16187,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f176,f177,f177,f15784,f707])).
fof(f16179,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f176,f176,f176,f15784,f707])).
fof(f16163,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f216,f15784,f124])).
fof(f16161,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f176,f176,f15784,f1673])).
fof(f16153,plain,(
  $false | $spl58),
  inference(unit_resulting_resolution,[],[f114,f15784])).
fof(f15883,plain,(
  ( ! [X212] : (s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl64),
  inference(cnf_transformation,[],[f15883_D])).
fof(f15883_D,plain,(
  ( ! [X212] : (s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f15843,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) | $spl62),
  inference(cnf_transformation,[],[f15843_D])).
fof(f15843_D,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X5) = s(bool,X6)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f15882,plain,(
  ( ! [X212,X215,X213,X214] : (s(bool,'T_0') != s(bool,X213) | s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X213) = s(bool,X214) | s(bool,X214) = s(bool,X215) | s(bool,'T_0') = s(bool,X215)) )),
  inference(subsumption_resolution,[],[f13590,f7994])).
fof(f13590,plain,(
  ( ! [X212,X215,X213,X214] : (s(bool,'T_0') != s(bool,X213) | s(bool,X212) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X213) = s(bool,X214) | s(bool,'T_0') = s(bool,X212) | s(bool,X214) = s(bool,X215) | s(bool,'T_0') = s(bool,X215)) )),
  inference(superposition,[],[f7994,f419])).
fof(f15871,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(condensation,[],[f15870])).
fof(f15870,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,'T_0') != s(bool,X168) | s(bool,X167) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X168) = s(bool,X170) | s(bool,X170) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(subsumption_resolution,[],[f13581,f2587])).
fof(f13581,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,'T_0') != s(bool,X168) | s(bool,X167) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X168) = s(bool,X170) | s(bool,'T_0') = s(bool,X167) | s(bool,X170) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f2587,f419])).
fof(f1400,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl8),
  inference(cnf_transformation,[],[f1400_D])).
fof(f1400_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f15853,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,'T_0') != s(bool,X121) | s(bool,X120) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X121) = s(bool,X122) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(subsumption_resolution,[],[f13571,f1370])).
fof(f13571,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,'T_0') != s(bool,X121) | s(bool,X120) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X121) = s(bool,X122) | s(bool,'T_0') = s(bool,X120) | s(bool,X122) = s(bool,X123) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f1370,f419])).
fof(f15842,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f13547,f120])).
fof(f13547,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'T_0') != s(bool,X5) | p(s(bool,X4)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f120,f419])).
fof(f15801,plain,(
  ( ! [X177,X175,X176,X174,X172] : (s(bool,X172) = s(bool,X174) | s(bool,'T_0') = s(bool,X177) | s(bool,X176) = s(bool,X177) | s(bool,X172) = s(bool,X176) | s(bool,'F_0') = s(bool,X175) | s(bool,X174) = s(bool,X175)) ) | $spl60),
  inference(cnf_transformation,[],[f15801_D])).
fof(f15801_D,plain,(
  ( ! [X177,X175,X176,X174,X172] : (s(bool,X172) = s(bool,X174) | s(bool,'T_0') = s(bool,X177) | s(bool,X176) = s(bool,X177) | s(bool,X172) = s(bool,X176) | s(bool,'F_0') = s(bool,X175) | s(bool,X174) = s(bool,X175)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f15800,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (p(s(bool,X173)) | s(bool,X172) = s(bool,X174) | s(bool,X174) = s(bool,X175) | s(bool,'F_0') = s(bool,X175) | s(bool,X172) = s(bool,X176) | s(bool,X176) = s(bool,X177) | s(bool,'T_0') = s(bool,X177)) )),
  inference(subsumption_resolution,[],[f13490,f120])).
fof(f13490,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (p(s(bool,X173)) | s(bool,X172) = s(bool,X174) | s(bool,X174) = s(bool,X175) | s(bool,'F_0') = s(bool,X175) | s(bool,X172) = s(bool,X176) | s(bool,'T_0') = s(bool,X173) | s(bool,X176) = s(bool,X177) | s(bool,'T_0') = s(bool,X177)) )),
  inference(superposition,[],[f2927,f419])).
fof(f15783,plain,(
  ( ! [X70,X68,X69,X67,X65] : (s(bool,X65) != s(bool,X67) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X70) | s(bool,X65) = s(bool,X69) | s(bool,'T_0') = s(bool,X68) | s(bool,X67) = s(bool,X68)) ) | $spl56),
  inference(cnf_transformation,[],[f15783_D])).
fof(f15783_D,plain,(
  ( ! [X70,X68,X69,X67,X65] : (s(bool,X65) != s(bool,X67) | s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,X70) | s(bool,X65) = s(bool,X69) | s(bool,'T_0') = s(bool,X68) | s(bool,X67) = s(bool,X68)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f15782,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (p(s(bool,X66)) | s(bool,X65) != s(bool,X67) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,X65) = s(bool,X69) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f13468,f120])).
fof(f13468,plain,(
  ( ! [X70,X68,X66,X69,X67,X65] : (p(s(bool,X66)) | s(bool,X65) != s(bool,X67) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68) | s(bool,X65) = s(bool,X69) | s(bool,'T_0') = s(bool,X66) | s(bool,X69) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f487,f419])).
fof(f10966,plain,(
  ( ! [X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X55)) ) | $spl54),
  inference(cnf_transformation,[],[f10966_D])).
fof(f10966_D,plain,(
  ( ! [X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X55)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f10893,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f10811])).
fof(f10811,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X54)) ) | $spl44),
  inference(superposition,[],[f1622,f10560])).
fof(f10560,plain,(
  ( ! [X11] : (s(bool,X11) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X11)) ) | $spl44),
  inference(subsumption_resolution,[],[f10541,f114])).
fof(f10541,plain,(
  ( ! [X11] : (p(s(bool,'F_0')) | s(bool,X11) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X11)) ) | $spl44),
  inference(superposition,[],[f8129,f1579])).
fof(f8129,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl44),
  inference(cnf_transformation,[],[f8129_D])).
fof(f8129_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f10409,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X57)) ) | $spl52),
  inference(cnf_transformation,[],[f10409_D])).
fof(f10409_D,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'F_0') = s(bool,X57)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f10337,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57)) ) | $spl45),
  inference(duplicate_literal_removal,[],[f10258])).
fof(f10258,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56)) ) | $spl45),
  inference(superposition,[],[f1622,f8405])).
fof(f8405,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl45),
  inference(subsumption_resolution,[],[f8388,f112])).
fof(f8388,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl45),
  inference(superposition,[],[f8130,f229])).
fof(f8296,plain,(
  $false | ($spl18 | $spl45 | $spl46)),
  inference(subsumption_resolution,[],[f8295,f112])).
fof(f8295,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl45 | $spl46)),
  inference(forward_demodulation,[],[f8294,f8246])).
fof(f8246,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,X44)) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8177,f319])).
fof(f8177,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X44)) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8139,f3129])).
fof(f8294,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | ($spl45 | $spl46)),
  inference(forward_demodulation,[],[f8130,f8197])).
fof(f8197,plain,(
  ( ! [X48] : (s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl46),
  inference(subsumption_resolution,[],[f8176,f5609])).
fof(f8176,plain,(
  ( ! [X48] : (s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X48)) ) | $spl46),
  inference(backward_demodulation,[],[f8139,f1789])).
fof(f8293,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278,f8281,f8286,f8288,f8290,f8292])).
fof(f8292,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8273,f112])).
fof(f8273,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f8088])).
fof(f8290,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8271,f112])).
fof(f8271,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f876])).
fof(f8288,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8270,f112])).
fof(f8270,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f119])).
fof(f8286,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8265,f8246])).
fof(f8265,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f5609])).
fof(f8281,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | ($spl18 | $spl46)),
  inference(condensation,[],[f8280])).
fof(f8280,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8253,f871])).
fof(f8253,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f1392])).
fof(f8278,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8248,f8246])).
fof(f8248,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f124])).
fof(f8227,plain,(
  ( ! [X116,X114,X115,X113] : (s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,X116) = s(bool,g(s(X113,sK4(X114,X115,bool,X113)))) | s(bool,'F_0') = s(bool,X116)) ) | $spl46),
  inference(subsumption_resolution,[],[f8201,f216])).
fof(f8201,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(fun(X113,bool),X114) = s(fun(X113,bool),X115) | s(bool,X116) = s(bool,g(s(X113,sK4(X114,X115,bool,X113)))) | s(bool,'F_0') = s(bool,X116)) ) | $spl46),
  inference(backward_demodulation,[],[f8197,f2651])).
fof(f8226,plain,(
  ( ! [X17,X18,X16] : (s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl46),
  inference(subsumption_resolution,[],[f8198,f216])).
fof(f8198,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl46),
  inference(backward_demodulation,[],[f8197,f788])).
fof(f8175,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X2))),s('type.num.num','const.num.|48|_0')))) ) | $spl46),
  inference(backward_demodulation,[],[f8139,f892])).
fof(f8193,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) | $spl46),
  inference(forward_demodulation,[],[f8172,f115])).
fof(f8172,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))),s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))),s('type.num.num',sK2))),s('type.num.num',sK0))) | $spl46),
  inference(backward_demodulation,[],[f8139,f111])).
fof(f8291,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278,f8281,f8286,f8288,f8290])).
fof(f8289,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278,f8281,f8286,f8288])).
fof(f8287,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278,f8281,f8286])).
fof(f8282,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278,f8281])).
fof(f8279,plain,(
  $false | ($spl18 | $spl46)),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3129,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141,f8142,f8143,f8156,f8165,f8139,f8193,f8195,f8175,f8197,f8226,f8227,f8246,f8278])).
fof(f8277,plain,(
  $false | ($spl18 | $spl46)),
  inference(subsumption_resolution,[],[f8247,f112])).
fof(f8247,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl46)),
  inference(backward_demodulation,[],[f8246,f114])).
fof(f8196,plain,(
  ( ! [X36] : (s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl50),
  inference(cnf_transformation,[],[f8196_D])).
fof(f8196_D,plain,(
  ( ! [X36] : (s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f8195,plain,(
  ( ! [X37,X36] : (s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X37)) ) | $spl46),
  inference(subsumption_resolution,[],[f8174,f5414])).
fof(f8174,plain,(
  ( ! [X37,X36] : (s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X36) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl46),
  inference(backward_demodulation,[],[f8139,f872])).
fof(f8194,plain,(
  $false | $spl46),
  inference(subsumption_resolution,[],[f8173,f177])).
fof(f8173,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl46),
  inference(backward_demodulation,[],[f8139,f181])).
fof(f8139,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | $spl46),
  inference(cnf_transformation,[],[f8139_D])).
fof(f8139_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f8140,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1))))))) ) | $spl48),
  inference(cnf_transformation,[],[f8140_D])).
fof(f8140_D,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1))))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f8143,plain,(
  ( ! [X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)) )),
  inference(subsumption_resolution,[],[f8094,f112])).
fof(f8094,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)) )),
  inference(superposition,[],[f876,f181])).
fof(f8142,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X5))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1))))))) )),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f872,f892,f1257,f1247,f1242,f1240,f1231,f1228,f1141,f1579,f1580,f1622,f2242,f2408,f2585,f2587,f3110,f3109,f3103,f3102,f3259,f3263,f3841,f3254,f3255,f3725,f3726,f3732,f3699,f3264,f3233,f3229,f2246,f2219,f2215,f164,f893,f876,f119,f783,f781,f3738,f3270,f2927,f2651,f2650,f2532,f2531,f2252,f1878,f1789,f1693,f1692,f1673,f788,f787,f216,f125,f124,f114,f3131,f2245,f1794,f1790,f1776,f1392,f1370,f1369,f1293,f1292,f1169,f1139,f1094,f963,f962,f891,f873,f871,f182,f180,f111,f5275,f5298,f5609,f5633,f5414,f5842,f6448,f7680,f7762,f7662,f7659,f7794,f7801,f7119,f7808,f7648,f7817,f7818,f7993,f7994,f7584,f8017,f8018,f7424,f8038,f7432,f8058,f7526,f8125,f8088,f8135,f8137,f8141])).
fof(f8137,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1)) )),
  inference(condensation,[],[f8136])).
fof(f8136,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f8092,f278])).
fof(f8092,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f876,f872])).
fof(f8128,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))) ) | $spl42),
  inference(cnf_transformation,[],[f8128_D])).
fof(f8128_D,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f8130,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | $spl45),
  inference(cnf_transformation,[],[f8130_D])).
fof(f8130_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f8127,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))) ) | $spl27),
  inference(subsumption_resolution,[],[f8126,f3260])).
fof(f8126,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))) ) | $spl27),
  inference(forward_demodulation,[],[f8089,f3741])).
fof(f8089,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2))))) ) | $spl27),
  inference(superposition,[],[f876,f3741])).
fof(f8005,plain,(
  ( ! [X88,X89] : (s(bool,X88) != s(bool,X89) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,X89)) ) | $spl40),
  inference(cnf_transformation,[],[f8005_D])).
fof(f8005_D,plain,(
  ( ! [X88,X89] : (s(bool,X88) != s(bool,X89) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,X89)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f7584,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) != s(bool,X89) | s(bool,'T_0') = s(bool,X87) | s(bool,'F_0') = s(bool,X89) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(duplicate_literal_removal,[],[f7378])).
fof(f7378,plain,(
  ( ! [X88,X87,X89] : (s(bool,X88) != s(bool,X89) | s(bool,'T_0') = s(bool,X87) | s(bool,'F_0') = s(bool,X89) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X87)) )),
  inference(superposition,[],[f1622,f872])).
fof(f7763,plain,(
  ( ! [X45,X43] : (s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) ) | $spl38),
  inference(cnf_transformation,[],[f7763_D])).
fof(f7763_D,plain,(
  ( ! [X45,X43] : (s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f7817,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f7162,f1169])).
fof(f7162,plain,(
  ( ! [X83,X84,X82] : (s(bool,'T_0') = s(bool,X83) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X84) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X82),s('type.num.num','const.num.|48|_0'))) | s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f872,f1293])).
fof(f7759,plain,(
  ( ! [X34,X32] : (s(bool,X32) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X32) = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl36),
  inference(cnf_transformation,[],[f7759_D])).
fof(f7759_D,plain,(
  ( ! [X34,X32] : (s(bool,X32) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X32) = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f7648,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X27) = s(bool,X29) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(duplicate_literal_removal,[],[f7143])).
fof(f7143,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,X28) | s(bool,X29) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X27) = s(bool,X29) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f872,f872])).
fof(f7794,plain,(
  ( ! [X47,X48,X46] : (s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0'))) | s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f7093,f1169])).
fof(f7093,plain,(
  ( ! [X47,X48,X46] : (s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X47),s('type.num.num','const.num.|48|_0'))) | s(bool,X48) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X46) | s(bool,X46) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(superposition,[],[f872,f1293])).
fof(f7659,plain,(
  ( ! [X39,X38,X40] : (s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) )),
  inference(duplicate_literal_removal,[],[f7090])).
fof(f7090,plain,(
  ( ! [X39,X38,X40] : (s(bool,X39) = s(bool,X40) | s(bool,X40) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X38) | s(bool,X39) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f872,f872])).
fof(f7662,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(duplicate_literal_removal,[],[f7082])).
fof(f7082,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f872,f319])).
fof(f7762,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') = s(bool,X44) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f7761,f180])).
fof(f7761,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) )),
  inference(subsumption_resolution,[],[f7050,f1370])).
fof(f7050,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f872,f1293])).
fof(f7680,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X32) = s(bool,X34)) )),
  inference(duplicate_literal_removal,[],[f7046])).
fof(f7046,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,X33) | s(bool,X32) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,X32) = s(bool,X34)) )),
  inference(superposition,[],[f872,f872])).
fof(f3983,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864,f3868,f3883,f3974,f3978,f3879])).
fof(f3879,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2)))))) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f2245])).
fof(f3978,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(condensation,[],[f3977])).
fof(f3977,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X6) = s(bool,X7)) ) | $spl30),
  inference(subsumption_resolution,[],[f3976,f3886])).
fof(f3976,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X6) = s(bool,X7)) ) | $spl30),
  inference(forward_demodulation,[],[f3875,f3886])).
fof(f3875,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f1392])).
fof(f3974,plain,(
  ( ! [X65] : (s(bool,X65) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(subsumption_resolution,[],[f3874,f3886])).
fof(f3874,plain,(
  ( ! [X65] : (s(bool,X65) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') != s(bool,X65)) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f1370])).
fof(f3883,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(condensation,[],[f3872])).
fof(f3872,plain,(
  ( ! [X35,X34] : (s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X35) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X34),s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f1293])).
fof(f3868,plain,(
  ( ! [X78,X76,X77,X75] : (s(bool,X78) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(X77,f(s(bool,'T_0'))) != s(X77,g(s(bool,'T_0'))) | s(fun(bool,X77),X75) = s(fun(bool,X77),X76) | s(bool,X78) = s(bool,sK4(X75,X76,X77,bool))) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f1139])).
fof(f3864,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f891])).
fof(f3964,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | $spl30),
  inference(subsumption_resolution,[],[f3925,f112])).
fof(f3925,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3))))))))))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3254])).
fof(f3962,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | $spl30),
  inference(subsumption_resolution,[],[f3924,f112])).
fof(f3924,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10))))))))))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3255])).
fof(f3958,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | $spl30),
  inference(subsumption_resolution,[],[f3922,f112])).
fof(f3922,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X3))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))))),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X3)))))),s('type.num.num',X4)))))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3725])).
fof(f3956,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | $spl30),
  inference(subsumption_resolution,[],[f3921,f112])).
fof(f3921,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))),s('type.num.num',X10))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))))),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num',X10)))))),s('type.num.num',X11)))))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3726])).
fof(f3954,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3919,f112])).
fof(f3919,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3699])).
fof(f3952,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3917,f112])).
fof(f3917,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X7)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3233])).
fof(f3950,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3916,f112])).
fof(f3916,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(X6))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f3229])).
fof(f3948,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3914,f112])).
fof(f3914,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))),s('type.num.num',X7))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f2219])).
fof(f3946,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3913,f112])).
fof(f3913,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f2215])).
fof(f3944,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl30),
  inference(subsumption_resolution,[],[f3912,f112])).
fof(f3912,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f164])).
fof(f3942,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(subsumption_resolution,[],[f3910,f112])).
fof(f3910,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f876])).
fof(f3940,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl30),
  inference(subsumption_resolution,[],[f3909,f112])).
fof(f3909,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f119])).
fof(f3933,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl30),
  inference(subsumption_resolution,[],[f3888,f3886])).
fof(f3888,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl30),
  inference(backward_demodulation,[],[f3886,f124])).
fof(f3886,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl30),
  inference(condensation,[],[f3885])).
fof(f3885,plain,(
  ( ! [X35,X34] : (s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl30),
  inference(subsumption_resolution,[],[f3862,f826])).
fof(f3862,plain,(
  ( ! [X35,X34] : (s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X34) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl30),
  inference(backward_demodulation,[],[f3729,f871])).
fof(f3861,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(backward_demodulation,[],[f3729,f182])).
fof(f3859,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK2))),s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(backward_demodulation,[],[f3729,f111])).
fof(f3979,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864,f3868,f3883,f3974,f3978])).
fof(f3975,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864,f3868,f3883,f3974])).
fof(f3973,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864,f3868,f3883])).
fof(f3970,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864,f3868])).
fof(f3968,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964,f3864])).
fof(f3967,plain,(
  $false | ($spl27 | $spl30)),
  inference(global_subsumption,[],[f3966,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964])).
fof(f3966,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl30)),
  inference(subsumption_resolution,[],[f3926,f112])).
fof(f3926,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))))))) ) | ($spl27 | $spl30)),
  inference(backward_demodulation,[],[f3886,f3762])).
fof(f3965,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962,f3964])).
fof(f3963,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958,f3962])).
fof(f3961,plain,(
  $false | ($spl27 | $spl30)),
  inference(global_subsumption,[],[f3960,f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958])).
fof(f3960,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl30)),
  inference(subsumption_resolution,[],[f3923,f112])).
fof(f3923,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3('const.num.SUC_1'(s('type.num.num',sK3(sK2))))))),s('type.num.num',X13)))))) ) | ($spl27 | $spl30)),
  inference(backward_demodulation,[],[f3886,f3765])).
fof(f3959,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956,f3958])).
fof(f3957,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954,f3956])).
fof(f3955,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952,f3954])).
fof(f3953,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950,f3952])).
fof(f3951,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948,f3950])).
fof(f3949,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946,f3948])).
fof(f3947,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944,f3946])).
fof(f3945,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942,f3944])).
fof(f3943,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940,f3942])).
fof(f3941,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933,f3940])).
fof(f3934,plain,(
  $false | $spl30),
  inference(global_subsumption,[],[f110,f109,f108,f112,f115,f116,f117,f121,f120,f158,f163,f168,f165,f169,f177,f176,f181,f180,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f826,f871,f872,f891,f892,f1257,f1247,f1242,f1240,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1139,f1141,f1169,f788,f783,f781,f164,f114,f124,f125,f216,f787,f1292,f1392,f893,f876,f119,f1579,f1580,f1673,f1692,f1693,f1622,f1776,f1789,f1794,f1878,f2215,f2219,f2242,f2246,f2252,f2408,f2531,f2532,f2585,f2587,f2927,f2650,f2651,f3110,f3109,f3131,f3103,f3102,f3254,f3229,f3255,f3233,f3259,f3263,f3264,f3270,f3725,f3699,f3726,f3732,f3738,f111,f182,f873,f1790,f2245,f3841,f3729,f3859,f3861,f3886,f3933])).
fof(f3932,plain,(
  $false | $spl30),
  inference(subsumption_resolution,[],[f3887,f112])).
fof(f3887,plain,(
  ~p(s(bool,'T_0')) | $spl30),
  inference(backward_demodulation,[],[f3886,f114])).
fof(f3884,plain,(
  $false | $spl30),
  inference(subsumption_resolution,[],[f3860,f177])).
fof(f3860,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl30),
  inference(backward_demodulation,[],[f3729,f180])).
fof(f3729,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | $spl30),
  inference(cnf_transformation,[],[f3729_D])).
fof(f3729_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f3842,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num',sK2)))))) ) | $spl34),
  inference(cnf_transformation,[],[f3842_D])).
fof(f3842_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num',sK2)))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f3841,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num',sK2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0)) )),
  inference(subsumption_resolution,[],[f3785,f112])).
fof(f3785,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num',sK2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0)) )),
  inference(superposition,[],[f2219,f182])).
fof(f3730,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0')))))) ) | $spl32),
  inference(cnf_transformation,[],[f3730_D])).
fof(f3730_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3731,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0)) ) | $spl26),
  inference(subsumption_resolution,[],[f3703,f112])).
fof(f3703,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0)) ) | $spl26),
  inference(superposition,[],[f2219,f3277])).
fof(f3277,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | $spl26),
  inference(backward_demodulation,[],[f3261,f182])).
fof(f2244,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl14),
  inference(cnf_transformation,[],[f2244_D])).
fof(f2244_D,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f3727,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0)) ) | $spl26),
  inference(subsumption_resolution,[],[f3702,f124])).
fof(f3702,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))))),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK0)))),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK0) | s(bool,'F_0') = s(bool,X0)) ) | $spl26),
  inference(superposition,[],[f2219,f3275])).
fof(f3275,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X52)) ) | $spl26),
  inference(backward_demodulation,[],[f3261,f1790])).
fof(f3261,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl26),
  inference(cnf_transformation,[],[f3261_D])).
fof(f3261_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f3262,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) ) | $spl28),
  inference(cnf_transformation,[],[f3262_D])).
fof(f3262_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2))))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f3263,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2)) )),
  inference(subsumption_resolution,[],[f3236,f112])).
fof(f3236,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2)) )),
  inference(superposition,[],[f2215,f182])).
fof(f3259,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2)) )),
  inference(subsumption_resolution,[],[f3235,f124])).
fof(f3235,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(sK2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f2215,f1790])).
fof(f3138,plain,(
  ( ! [X28,X27] : (s(bool,X27) != s(bool,X28) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X28)) ) | $spl24),
  inference(cnf_transformation,[],[f3138_D])).
fof(f3138_D,plain,(
  ( ! [X28,X27] : (s(bool,X27) != s(bool,X28) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'F_0') = s(bool,X28)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f3102,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X28) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f3078])).
fof(f3078,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) != s(bool,X28) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,X28) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f1622,f871])).
fof(f3135,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl22),
  inference(cnf_transformation,[],[f3135_D])).
fof(f3135_D,plain,(
  ( ! [X15,X16] : (s(bool,X16) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X16)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f3103,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16)) )),
  inference(duplicate_literal_removal,[],[f3074])).
fof(f3074,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) != s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f1622,f319])).
fof(f3130,plain,(
  ( ! [X46] : (s(bool,X46) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X46)) ) | $spl20),
  inference(cnf_transformation,[],[f3130_D])).
fof(f3130_D,plain,(
  ( ! [X46] : (s(bool,X46) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X46)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f3109,plain,(
  ( ! [X45,X46] : (s(bool,X46) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X45)) )),
  inference(duplicate_literal_removal,[],[f3053])).
fof(f3053,plain,(
  ( ! [X45,X46] : (s(bool,X46) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X46) | s(bool,'F_0') = s(bool,X45) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f1622,f1790])).
fof(f3129,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44)) ) | $spl18),
  inference(cnf_transformation,[],[f3129_D])).
fof(f3129_D,plain,(
  ( ! [X44] : (s(bool,X44) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f3110,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43)) )),
  inference(duplicate_literal_removal,[],[f3052])).
fof(f3052,plain,(
  ( ! [X43,X44] : (s(bool,X44) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,X43) | s(bool,'F_0') = s(bool,X43)) )),
  inference(superposition,[],[f1622,f1789])).
fof(f2340,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2290,f2244])).
fof(f2290,plain,(
  p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f176,f2244,f165])).
fof(f2339,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2292,f2244])).
fof(f2292,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f177,f2244,f165])).
fof(f2338,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2300,f2244])).
fof(f2300,plain,(
  p(s(bool,'F_0')) | $spl14),
  inference(unit_resulting_resolution,[],[f176,f2244,f165])).
fof(f2337,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f2302,f2244])).
fof(f2302,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f177,f2244,f165])).
fof(f2305,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f180,f2244,f120])).
fof(f2303,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f177,f2244,f165])).
fof(f2301,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f114,f176,f2244,f165])).
fof(f2299,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f177,f2244,f165])).
fof(f2297,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f176,f2244,f165])).
fof(f2293,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f177,f2244,f165])).
fof(f2291,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f114,f176,f2244,f165])).
fof(f2289,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f177,f2244,f165])).
fof(f2287,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f2244,f176,f2244,f165])).
fof(f2283,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f177,f177,f2244,f278])).
fof(f2281,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f176,f176,f2244,f278])).
fof(f2275,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f180,f177,f177,f2244,f487])).
fof(f2267,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f180,f176,f176,f2244,f487])).
fof(f2255,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f176,f2244,f125])).
fof(f2253,plain,(
  $false | $spl14),
  inference(unit_resulting_resolution,[],[f112,f2244])).
fof(f2243,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) | $spl12),
  inference(cnf_transformation,[],[f2243_D])).
fof(f2243_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2242,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2)))))) )),
  inference(subsumption_resolution,[],[f2221,f124])).
fof(f2221,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK0))),s('type.num.num',sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK0),s('type.num.num',sK2))))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f164,f1790])).
fof(f1446,plain,(
  $false | $spl2),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1285,f1433,f1436,f1440,f1445])).
fof(f1445,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f1444,f112])).
fof(f1444,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl2),
  inference(forward_demodulation,[],[f164,f1285])).
fof(f1440,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl2),
  inference(subsumption_resolution,[],[f1439,f1285])).
fof(f1439,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl2),
  inference(forward_demodulation,[],[f124,f1285])).
fof(f1436,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl2),
  inference(condensation,[],[f1435])).
fof(f1435,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | $spl2),
  inference(subsumption_resolution,[],[f1434,f1285])).
fof(f1434,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X6) = s(bool,X7)) ) | $spl2),
  inference(forward_demodulation,[],[f1392,f1285])).
fof(f1433,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl2),
  inference(subsumption_resolution,[],[f1432,f112])).
fof(f1432,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl2),
  inference(forward_demodulation,[],[f119,f1285])).
fof(f1443,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f1442,f112])).
fof(f1442,plain,(
  ~p(s(bool,'T_0')) | $spl2),
  inference(forward_demodulation,[],[f114,f1285])).
fof(f1441,plain,(
  $false | $spl2),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1285,f1433,f1436,f1440])).
fof(f1431,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1400,f1408,f1409,f1410,f1423,f1425,f1427,f1430])).
fof(f1430,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl8),
  inference(subsumption_resolution,[],[f1429,f112])).
fof(f1429,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl8),
  inference(forward_demodulation,[],[f1407,f180])).
fof(f1407,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) | s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X1),s('type.num.num',X0)))))) ) | $spl8),
  inference(backward_demodulation,[],[f1400,f164])).
fof(f1427,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl8),
  inference(subsumption_resolution,[],[f1420,f112])).
fof(f1420,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))),s('type.num.num',X0)))) ) | $spl8),
  inference(backward_demodulation,[],[f1410,f119])).
fof(f1425,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl8),
  inference(subsumption_resolution,[],[f1419,f112])).
fof(f1419,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))),s('type.num.num',X7))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK3(X6)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X6)) ) | $spl8),
  inference(backward_demodulation,[],[f1410,f876])).
fof(f1423,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl8),
  inference(subsumption_resolution,[],[f1412,f1410])).
fof(f1412,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl8),
  inference(backward_demodulation,[],[f1410,f124])).
fof(f1410,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | $spl8),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1400,f1408,f1409])).
fof(f1409,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl8),
  inference(subsumption_resolution,[],[f1406,f180])).
fof(f1406,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK4(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) ) | $spl8),
  inference(backward_demodulation,[],[f1400,f781])).
fof(f1408,plain,(
  ( ! [X17,X18,X16] : (s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl8),
  inference(subsumption_resolution,[],[f1404,f1400])).
fof(f1404,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK4(X17,X18,bool,X16))))) ) | $spl8),
  inference(backward_demodulation,[],[f1400,f788])).
fof(f1428,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1400,f1408,f1409,f1410,f1423,f1425,f1427])).
fof(f1426,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1400,f1408,f1409,f1410,f1423,f1425])).
fof(f1424,plain,(
  $false | $spl8),
  inference(global_subsumption,[],[f111,f110,f109,f108,f112,f114,f115,f116,f117,f119,f121,f120,f125,f124,f158,f163,f164,f168,f165,f169,f177,f176,f182,f181,f180,f216,f229,f278,f319,f419,f487,f706,f707,f715,f728,f768,f775,f777,f787,f781,f783,f788,f826,f871,f872,f873,f876,f891,f892,f893,f1257,f1247,f1242,f1240,f1292,f962,f963,f1231,f1228,f1293,f1369,f1370,f1094,f1392,f1139,f1141,f1169,f1400,f1408,f1409,f1410,f1423])).
fof(f1422,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f1411,f112])).
fof(f1411,plain,(
  ~p(s(bool,'T_0')) | $spl8),
  inference(backward_demodulation,[],[f1410,f114])).
fof(f1401,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X1)) ) | $spl10),
  inference(cnf_transformation,[],[f1401_D])).
fof(f1401_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1141,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f871])).
fof(f1291,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl6),
  inference(cnf_transformation,[],[f1291_D])).
fof(f1291_D,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1228,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')))) )),
  inference(duplicate_literal_removal,[],[f981])).
fof(f981,plain,(
  ( ! [X33,X31,X32] : (s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f871,f319])).
fof(f1284,plain,(
  ( ! [X22,X20] : (s(bool,X20) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl0),
  inference(cnf_transformation,[],[f1284_D])).
fof(f1284_D,plain,(
  ( ! [X22,X20] : (s(bool,X20) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1231,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X17) = s(bool,X19) | s(bool,X17) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f977])).
fof(f977,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X17) = s(bool,X19) | s(bool,X17) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f871,f871])).
fof(f1240,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) = s(bool,X28) | s(bool,X28) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) )),
  inference(duplicate_literal_removal,[],[f951])).
fof(f951,plain,(
  ( ! [X28,X26,X27] : (s(bool,X27) = s(bool,X28) | s(bool,X28) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f871,f871])).
fof(f1242,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(duplicate_literal_removal,[],[f947])).
fof(f947,plain,(
  ( ! [X14,X15,X16] : (s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.num.|48|_0'))) | s(bool,X16) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f871,f319])).
fof(f1290,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) | $spl4),
  inference(cnf_transformation,[],[f1290_D])).
fof(f1290_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1247,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f942])).
fof(f942,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f871,f116])).
fof(f1257,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22)) )),
  inference(duplicate_literal_removal,[],[f929])).
fof(f929,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK0))) | s(bool,X20) = s(bool,X22)) )),
  inference(superposition,[],[f871,f871])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 281
% Passive clauses: 2156
% Generated clauses: 61985
% Final active clauses: 92
% Final passive clauses: 267
% Input formulas: 30
% Initial clauses: 62
% 
% Duplicate literals: 4206
% Trivial inequalities: 621
% Fw subsumption resolutions: 6691
% Fw demodulations: 6607
% Bw demodulations: 1284
% Condensations: 8016
% Global subsumptions: 285
% 
% Simple tautologies: 783
% Equational tautologies: 945
% Forward subsumptions: 31169
% Bw demodulations to eq. taut.: 98
% 
% Unit resulting resolution: 2950
% Factoring: 1
% Forward superposition: 15964
% Backward superposition: 11495
% Self superposition: 454
% Equality factoring: 336
% Equality resolution: 46
% 
% Split clauses: 234
% Split components: 497
% SAT solver clauses: 3282
% SAT solver unit clauses: 150
% SAT solver binary clauses: 526
% 
% Sat splits: 234
% Sat splitting refutations: 371
% 
% Memory used [KB]: 19189
% Time elapsed: 3.614 s
% ------------------------------
% ------------------------------
% Success in time 4.924 s
