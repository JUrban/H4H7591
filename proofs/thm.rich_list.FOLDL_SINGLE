Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f4016,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f4015])).
fof(f4015,plain,(
  s(sK0,happ(s(fun(sK1,sK0),happ(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3))),s(sK1,sK4))) != s(sK0,happ(s(fun(sK1,sK0),happ(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3))),s(sK1,sK4)))),
  inference(superposition,[],[f31,f1483])).
fof(f1483,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(X132,happ(s(fun(X133,X132),happ(s(fun(X132,fun(X133,X132)),X134),s(X132,X135))),s(X133,X136))) = s(X132,'const.list.FOLDL_3'(s(fun(X132,fun(X133,X132)),X134),s(X132,X135),s('type.list.list'(X133),'const.list.CONS_2'(s(X133,X136),s('type.list.list'(X133),'const.list.NIL_0')))))) )),
  inference(superposition,[],[f42,f40])).
fof(f40,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.list.FOLDL_3'(s(fun(X1,fun(X0,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.list.FOLDL_3'(s(fun(X1,fun(X0,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.list.FOLDL_3'(s(fun(X1,fun(X0,X1)),X2),s(X1,X3),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X8,X9] : s(X7,X9) = s(X7,'const.list.FOLDL_3'(s(fun(X7,fun(X6,X7)),X8),s(X7,X9),s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.rich_list.FOLDL_SINGLE','thm.list.FOLDL|split|0')).
fof(f42,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))),s('type.list.list'(X1),X5)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X7,X6] : ! [X8,X9,X10,X12] : s(X7,'const.list.FOLDL_3'(s(fun(X7,fun(X6,X7)),X8),s(X7,X9),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),X12))))) = s(X7,'const.list.FOLDL_3'(s(fun(X7,fun(X6,X7)),X8),s(X7,happ(s(fun(X6,X7),happ(s(fun(X7,fun(X6,X7)),X8),s(X7,X9))),s(X6,X10))),s('type.list.list'(X6),X12)))),
  file('thm.rich_list.FOLDL_SINGLE','thm.list.FOLDL|split|1')).
fof(f31,plain,(
  s(sK0,happ(s(fun(sK1,sK0),happ(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3))),s(sK1,sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  s(sK0,happ(s(fun(sK1,sK0),happ(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3))),s(sK1,sK4))) != s(sK0,'const.list.FOLDL_3'(s(fun(sK0,fun(sK1,sK0)),sK2),s(sK0,sK3),s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))) != s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),happ(s(fun(X0,fun(X1,X0)),X2),s(X0,X3))),s(X1,X4))) = s(X0,'const.list.FOLDL_3'(s(fun(X0,fun(X1,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10] : s(X6,happ(s(fun(X7,X6),happ(s(fun(X6,fun(X7,X6)),X8),s(X6,X9))),s(X7,X10))) = s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X7,X6)),X8),s(X6,X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10] : s(X6,happ(s(fun(X7,X6),happ(s(fun(X6,fun(X7,X6)),X8),s(X6,X9))),s(X7,X10))) = s(X6,'const.list.FOLDL_3'(s(fun(X6,fun(X7,X6)),X8),s(X6,X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0')))))),
  file('thm.rich_list.FOLDL_SINGLE','thm.rich_list.FOLDL_SINGLE')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 529
% Generated clauses: 3612
% Final active clauses: 27
% Final passive clauses: 468
% Input formulas: 10
% Initial clauses: 12
% 
% Duplicate literals: 474
% Trivial inequalities: 45
% Fw subsumption resolutions: 213
% Fw demodulations: 58
% 
% Simple tautologies: 95
% Equational tautologies: 71
% Forward subsumptions: 1706
% 
% Binary resolution: 12
% Forward superposition: 1254
% Backward superposition: 1267
% Self superposition: 225
% Equality factoring: 194
% Equality resolution: 2
% 
% Split clauses: 256
% Split components: 515
% SAT solver clauses: 434
% SAT solver unit clauses: 105
% SAT solver binary clauses: 171
% 
% Sat splits: 256
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 432
% TWLsolver calls for satisfiability: 20
% 
% Memory used [KB]: 2686
% Time elapsed: 0.144 s
% ------------------------------
% ------------------------------
% Success in time 0.146 s
