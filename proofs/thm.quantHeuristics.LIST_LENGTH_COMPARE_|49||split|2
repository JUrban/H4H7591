Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f11823,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11817,f365,f633,f631,f11471,f366,f634,f632,f627,f635])).
fof(f635,plain,(
  p(s(bool,'T_0')) | $spl4),
  inference(cnf_transformation,[],[f635_D])).
fof(f635_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f627,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f466])).
fof(f466,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f300])).
fof(f300,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f171])).
fof(f171,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X12] : (s(X6,X12) = s(X6,X12) <=> p(s(bool,'T_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2','thm.bool.REFL_CLAUSE')).
fof(f632,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) | $spl1),
  inference(cnf_transformation,[],[f632_D])).
fof(f632_D,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f634,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) | $spl3),
  inference(cnf_transformation,[],[f634_D])).
fof(f634_D,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f366,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11) | ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))))))),
  inference(cnf_transformation,[],[f265])).
fof(f265,plain,(
  (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) | s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11)) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) | s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),sK11))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f264])).
fof(f264,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)))),
  inference(nnf_transformation,[],[f231])).
fof(f231,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <~> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(ennf_transformation,[],[f108])).
fof(f108,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2','thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2')).
fof(f11471,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f11470,f635])).
fof(f11470,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f11327,f389])).
fof(f389,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f84])).
fof(f84,axiom,(
  ! [X9] : s(bool,'T_0') = s(bool,'const.arithmetic.>=_2'(s('type.num.num',X9),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2','thm.numeral.numeral_distrib|split|29')).
fof(f11327,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | ($spl1 | $spl2)),
  inference(backward_demodulation,[],[f11324,f2374])).
fof(f2374,plain,(
  ~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),'const.list.NIL_0')))))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f632,f633])).
fof(f11324,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),'const.list.NIL_0'))) | $spl2),
  inference(forward_demodulation,[],[f11323,f633])).
fof(f11323,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) | $spl2),
  inference(trivial_inequality_removal,[],[f11321])).
fof(f11321,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') != s('type.list.list'(sK10),'const.list.NIL_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) | $spl2),
  inference(superposition,[],[f469,f633])).
fof(f469,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f301])).
fof(f301,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f173])).
fof(f173,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2','thm.list.LENGTH_NIL')).
fof(f631,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) | $spl0),
  inference(cnf_transformation,[],[f631_D])).
fof(f631_D,plain,(
  p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f633,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | $spl2),
  inference(cnf_transformation,[],[f633_D])).
fof(f633_D,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f365,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))))))),
  inference(cnf_transformation,[],[f265])).
fof(f11817,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f11815,f634])).
fof(f11815,plain,(
  s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | $spl0),
  inference(trivial_inequality_removal,[],[f11673])).
fof(f11673,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK10),'const.list.NIL_0') = s('type.list.list'(sK10),sK11) | $spl0),
  inference(superposition,[],[f468,f11624])).
fof(f11624,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK10),sK11))) | $spl0),
  inference(resolution,[],[f631,f425])).
fof(f425,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X0))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X9] : (p(s(bool,'const.arithmetic.>=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num',X9))),
  file('thm.quantHeuristics.LIST_LENGTH_COMPARE_|49||split|2','thm.numeral.numeral_distrib|split|30')).
fof(f468,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f301])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 564
% Passive clauses: 2453
% Generated clauses: 11446
% Final active clauses: 482
% Final passive clauses: 1643
% Input formulas: 105
% Initial clauses: 260
% 
% Duplicate literals: 149
% Trivial inequalities: 53
% Fw subsumption resolutions: 967
% Fw demodulations: 630
% Bw demodulations: 69
% 
% Simple tautologies: 166
% Equational tautologies: 22
% Forward subsumptions: 6965
% 
% Binary resolution: 3239
% Factoring: 698
% Forward superposition: 2367
% Backward superposition: 2904
% Self superposition: 15
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 132
% Split components: 264
% SAT solver clauses: 234
% SAT solver unit clauses: 14
% SAT solver binary clauses: 49
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 132
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 232
% TWLsolver calls for satisfiability: 203
% 
% Memory used [KB]: 5373
% Time elapsed: 0.186 s
% ------------------------------
% ------------------------------
% Success in time 0.192 s
