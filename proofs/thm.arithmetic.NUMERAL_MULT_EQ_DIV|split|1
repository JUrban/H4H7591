Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% (57503)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 190
% Passive clauses: 1775
% Generated clauses: 26542
% Final active clauses: 173
% Final passive clauses: 1343
% Input formulas: 19
% Initial clauses: 27
% 
% Duplicate literals: 745
% Trivial inequalities: 171
% Fw subsumption resolutions: 2415
% Fw demodulations: 8008
% Bw demodulations: 16
% 
% Simple tautologies: 334
% Equational tautologies: 22
% Forward subsumptions: 12338
% Fw demodulations to eq. taut.: 92
% 
% Binary resolution: 185
% Forward superposition: 8925
% Backward superposition: 5679
% Self superposition: 159
% Equality factoring: 53
% Equality resolution: 43
% 
% Split clauses: 376
% Split components: 761
% SAT solver clauses: 784
% SAT solver unit clauses: 3
% SAT solver binary clauses: 112
% 
% Sat splits: 376
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 783
% TWLsolver calls for satisfiability: 127
% 
% Memory used [KB]: 13432
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f2458,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2314,f2437,f55,f85,f83,f81,f2178,f2179,f113,f115,f54,f84,f2202,f117,f119,f53,f82,f80,f121,f123,f59,f90,f890,f913,f71,f99,f79,f104,f177,f180,f178,f65,f96,f66,f98,f187,f58,f89,f444,f459,f148,f154,f62,f93,f67,f97,f422,f423,f396,f414,f75,f102,f124,f125,f61,f92,f110,f111,f63,f94,f415,f416,f126,f127,f108,f109,f64,f95,f2236,f114,f2361,f2239,f2275,f2276,f550,f569,f78,f105,f2272,f2273,f694,f715,f77,f106])).
fof(f106,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2)))) ) | $spl42),
  inference(cnf_transformation,[],[f106_D])).
fof(f106_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f77,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & (s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | ((s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))) & ((s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) => (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X8)))) => (s('type.num.num',X6) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X8),s('type.num.num',X7))) <=> (s('type.num.num',X7) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X6),s('type.num.num',X8))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num',X8))))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.MULT_EQ_DIV')).
fof(f715,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl176),
  inference(cnf_transformation,[],[f715_D])).
fof(f715_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f694,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl28 | $spl42)),
  inference(resolution,[],[f106,f99])).
fof(f2273,plain,(
  ( ! [X0] : (s('type.num.num',sK0) != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | $spl336),
  inference(cnf_transformation,[],[f2273_D])).
fof(f2273_D,plain,(
  ( ! [X0] : (s('type.num.num',sK0) != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f2272,plain,(
  ( ! [X0] : (s('type.num.num',sK0) != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl67 | $spl122 | $spl176)),
  inference(subsumption_resolution,[],[f2271,f180])).
fof(f2271,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num',sK0) != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl122 | $spl176)),
  inference(forward_demodulation,[],[f2240,f459])).
fof(f2240,plain,(
  ( ! [X0] : (s('type.num.num',sK0) != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl176)),
  inference(superposition,[],[f715,f122])).
fof(f122,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | $spl52),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f105,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))) ) | $spl40),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f569,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl152),
  inference(cnf_transformation,[],[f569_D])).
fof(f569_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f550,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl28 | $spl40)),
  inference(resolution,[],[f105,f99])).
fof(f2276,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | $spl338),
  inference(cnf_transformation,[],[f2276_D])).
fof(f2276_D,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f2275,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl67 | $spl122 | $spl152)),
  inference(subsumption_resolution,[],[f2274,f180])).
fof(f2274,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num',sK0) != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl122 | $spl152)),
  inference(forward_demodulation,[],[f2241,f459])).
fof(f2241,plain,(
  ( ! [X1] : (s('type.num.num',sK0) != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl52 | $spl152)),
  inference(superposition,[],[f569,f122])).
fof(f2239,plain,(
  $false | ($spl0 | $spl10 | $spl53)),
  inference(subsumption_resolution,[],[f2238,f123])).
fof(f2238,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f2237,f90])).
fof(f2237,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f80,f90])).
fof(f2361,plain,(
  $false | ($spl49 | $spl52 | $spl338)),
  inference(subsumption_resolution,[],[f2360,f114])).
fof(f2360,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl52 | $spl338)),
  inference(forward_demodulation,[],[f2358,f122])).
fof(f2358,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl52 | $spl338)),
  inference(trivial_inequality_removal,[],[f2340])).
fof(f2340,plain,(
  s('type.num.num',sK0) != s('type.num.num',sK0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl52 | $spl338)),
  inference(superposition,[],[f2276,f122])).
fof(f114,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | $spl49),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f2236,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl5 | $spl10)),
  inference(forward_demodulation,[],[f2235,f90])).
fof(f2235,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl5 | $spl10)),
  inference(forward_demodulation,[],[f85,f90])).
fof(f95,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) | $spl20),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f64,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X9] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.BIT2')).
fof(f109,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) | $spl44),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f108,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))))) ) | ($spl20 | $spl34)),
  inference(forward_demodulation,[],[f107,f102])).
fof(f107,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))))) ) | ($spl20 | $spl34)),
  inference(forward_demodulation,[],[f95,f102])).
fof(f127,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | $spl56),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f126,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))))) ) | ($spl14 | $spl44)),
  inference(forward_demodulation,[],[f109,f92])).
fof(f416,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) | $spl108),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f415,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X2)))))))) ) | ($spl34 | $spl56)),
  inference(forward_demodulation,[],[f397,f102])).
fof(f397,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))))) ) | ($spl34 | $spl56)),
  inference(superposition,[],[f102,f127])).
fof(f94,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl18),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f63,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.BIT|49|')).
fof(f111,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | $spl46),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f110,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) ) | ($spl18 | $spl34)),
  inference(forward_demodulation,[],[f94,f102])).
fof(f92,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl14),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f61,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.ADD_|48|')).
fof(f125,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl54),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f124,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl14 | $spl46)),
  inference(forward_demodulation,[],[f111,f92])).
fof(f102,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl34),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f75,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X9,X10] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f414,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | $spl106),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f396,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X1)))))) ) | ($spl34 | $spl54)),
  inference(superposition,[],[f102,f125])).
fof(f423,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | $spl112),
  inference(cnf_transformation,[],[f423_D])).
fof(f423_D,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f422,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))) ) | ($spl106 | $spl108)),
  inference(backward_demodulation,[],[f414,f416])).
fof(f97,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl24),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f67,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.bool.EQ_CLAUSES|split|0')).
fof(f93,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) | $spl16),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f62,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X9] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.prim_rec.LESS_|48|')).
fof(f154,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | $spl58),
  inference(cnf_transformation,[],[f154_D])).
fof(f154_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f148,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) ) | ($spl16 | $spl24)),
  inference(resolution,[],[f93,f97])).
fof(f459,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4)))))) ) | $spl122),
  inference(cnf_transformation,[],[f459_D])).
fof(f459_D,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4)))))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f444,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4)))))) ) | ($spl58 | $spl112)),
  inference(superposition,[],[f154,f423])).
fof(f89,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f58,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1',aHL_FALSITY)).
fof(f187,plain,(
  $false | ($spl9 | $spl64)),
  inference(resolution,[],[f178,f89])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) ) | $spl26),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f66,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f46])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl22),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f65,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1',aHL_BOOL_CASES)).
fof(f178,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) | $spl64),
  inference(cnf_transformation,[],[f178_D])).
fof(f178_D,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f180,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl67),
  inference(cnf_transformation,[],[f180_D])).
fof(f180_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f177,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X2))) ) | ($spl22 | $spl26)),
  inference(subsumption_resolution,[],[f166,f98])).
fof(f166,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'F_0') | p(s(bool,X2)) | s(bool,'T_0') = s(bool,X2)) ) | ($spl22 | $spl26)),
  inference(superposition,[],[f98,f96])).
fof(f104,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) | $spl38),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f79,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X2))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f99,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl28),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f71,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X11] : (s(bool,'F_0') = s(bool,X11) <=> ~p(s(bool,X11)))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.bool.EQ_CLAUSES|split|2')).
fof(f913,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl194),
  inference(cnf_transformation,[],[f913_D])).
fof(f913_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f890,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | ($spl28 | $spl38)),
  inference(resolution,[],[f104,f99])).
fof(f90,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl10),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f59,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : s('type.num.num',X8) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.NUMERAL_DEF')).
fof(f123,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | $spl53),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f121,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f120,f90])).
fof(f120,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f81,f90])).
fof(f80,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) | $spl0),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f82,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | $spl2),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f53,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) | (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))))) & (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f44])).
fof(f44,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))) & (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))) & (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) | (s('type.num.num',X1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) <~> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))),s('type.num.num',X1))) <=> (s('type.num.num',X1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.num.num',X7))) <=> (s('type.num.num',X7) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))),s('type.num.num',X7))) <=> (s('type.num.num',X7) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8))))))) & s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X8)))))))))),
  file('thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1','thm.arithmetic.NUMERAL_MULT_EQ_DIV|split|1')).
fof(f119,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | $spl50),
  inference(cnf_transformation,[],[f119_D])).
fof(f119_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f117,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl2 | $spl10)),
  inference(forward_demodulation,[],[f116,f90])).
fof(f116,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl2 | $spl10)),
  inference(forward_demodulation,[],[f82,f90])).
fof(f2202,plain,(
  $false | ($spl50 | $spl53 | $spl332)),
  inference(subsumption_resolution,[],[f2201,f123])).
fof(f2201,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',sK1))) | ($spl50 | $spl332)),
  inference(forward_demodulation,[],[f2197,f119])).
fof(f2197,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | ($spl50 | $spl332)),
  inference(trivial_inequality_removal,[],[f2181])).
fof(f2181,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | ($spl50 | $spl332)),
  inference(superposition,[],[f2179,f119])).
fof(f84,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | $spl4),
  inference(cnf_transformation,[],[f84_D])).
fof(f84_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f54,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f45])).
fof(f115,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | $spl48),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f113,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl4 | $spl10)),
  inference(forward_demodulation,[],[f112,f90])).
fof(f112,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl4 | $spl10)),
  inference(forward_demodulation,[],[f84,f90])).
fof(f2179,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0)))) ) | $spl332),
  inference(cnf_transformation,[],[f2179_D])).
fof(f2179_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0)))) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f2178,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0)))) ) | ($spl48 | $spl67 | $spl122 | $spl194)),
  inference(subsumption_resolution,[],[f2177,f180])).
fof(f2177,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0)))) ) | ($spl48 | $spl122 | $spl194)),
  inference(forward_demodulation,[],[f2083,f459])).
fof(f2083,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl48 | $spl194)),
  inference(trivial_inequality_removal,[],[f2082])).
fof(f2082,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X0) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | s('type.num.num',sK0) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))),s('type.num.num',X0))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2)))))) ) | ($spl48 | $spl194)),
  inference(superposition,[],[f913,f115])).
fof(f81,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) | $spl1),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | $spl3),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f85,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | $spl5),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f55,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))) != s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f45])).
fof(f2437,plain,(
  $false | ($spl3 | $spl10 | $spl50)),
  inference(subsumption_resolution,[],[f2436,f119])).
fof(f2436,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl3 | $spl10)),
  inference(forward_demodulation,[],[f2435,f90])).
fof(f2435,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | ($spl3 | $spl10)),
  inference(forward_demodulation,[],[f83,f90])).
fof(f2314,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK2))))) | $spl336),
  inference(equality_resolution,[],[f2273])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 64
% Passive clauses: 157
% Generated clauses: 2432
% Final active clauses: 51
% Final passive clauses: 76
% Input formulas: 19
% Initial clauses: 27
% 
% Duplicate literals: 93
% Trivial inequalities: 30
% Fw subsumption resolutions: 117
% Fw demodulations: 601
% Bw demodulations: 21
% Condensations: 94
% 
% Simple tautologies: 41
% Equational tautologies: 17
% Forward subsumptions: 988
% Fw demodulations to eq. taut.: 12
% 
% Binary resolution: 19
% Forward superposition: 675
% Backward superposition: 423
% Self superposition: 40
% Equality factoring: 28
% Equality resolution: 11
% 
% Split clauses: 29
% Split components: 64
% SAT solver clauses: 293
% SAT solver unit clauses: 36
% SAT solver binary clauses: 28
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 29
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 290
% TWLsolver calls for satisfiability: 185
% 
% Memory used [KB]: 2430
% Time elapsed: 0.061 s
% ------------------------------
% ------------------------------
% Success in time 0.685 s
