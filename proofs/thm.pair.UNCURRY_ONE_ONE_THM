Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pair
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pair
% SZS output start Proof for thm.pair
fof(f2018,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2017,f122,f175,f173,f2000,f121,f174,f172])).
fof(f172,plain,(
  s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) = s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) | $spl0),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) = s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f174,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) = s(fun(sK0,fun(sK1,sK2)),sK4) | $spl2),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) = s(fun(sK0,fun(sK1,sK2)),sK4) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f121,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) = s(fun(sK0,fun(sK1,sK2)),sK4) | s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) = s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4)))),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  (s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) = s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) | s(fun(sK0,fun(sK1,sK2)),sK3) = s(fun(sK0,fun(sK1,sK2)),sK4)) & (s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) != s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) | s(fun(sK0,fun(sK1,sK2)),sK3) != s(fun(sK0,fun(sK1,sK2)),sK4))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f103])).
fof(f103,plain,(
  ? [X0,X1,X2,X3,X4] : ((s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3))) = s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X4))) | s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),X4)) & (s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3))) != s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X4))) | s(fun(X0,fun(X1,X2)),X3) != s(fun(X0,fun(X1,X2)),X4)))),
  inference(nnf_transformation,[],[f99])).
fof(f99,plain,(
  ? [X0,X1,X2,X3,X4] : (s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3))) = s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X4))) <~> s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),X4))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4] : (s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3))) = s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X4))) <=> s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),X4))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2] : ! [X3,X4] : (s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3))) = s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X4))) <=> s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),X4))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : ! [X9,X10] : (s(fun('type.pair.prod'(X6,X7),X8),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,X8)),X9))) = s(fun('type.pair.prod'(X6,X7),X8),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,X8)),X10))) <=> s(fun(X6,fun(X7,X8)),X9) = s(fun(X6,fun(X7,X8)),X10))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : ! [X9,X10] : (s(fun('type.pair.prod'(X6,X7),X8),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,X8)),X9))) = s(fun('type.pair.prod'(X6,X7),X8),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,X8)),X10))) <=> s(fun(X6,fun(X7,X8)),X9) = s(fun(X6,fun(X7,X8)),X10))),
  file('thm.pair.UNCURRY_ONE_ONE_THM','thm.pair.UNCURRY_ONE_ONE_THM')).
fof(f2000,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f1999,f175])).
fof(f1999,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) = s(fun(sK0,fun(sK1,sK2)),sK4) | $spl0),
  inference(forward_demodulation,[],[f1991,f151])).
fof(f151,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),'const.pair.CURRY_1'(s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3)))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2,X3] : s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),'const.pair.CURRY_1'(s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3)))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : ! [X3] : s(fun(X0,fun(X1,X2)),X3) = s(fun(X0,fun(X1,X2)),'const.pair.CURRY_1'(s(fun('type.pair.prod'(X0,X1),X2),'const.pair.UNCURRY_1'(s(fun(X0,fun(X1,X2)),X3)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6,X7,X8] : ! [X10] : s(fun(X6,fun(X7,X8)),X10) = s(fun(X6,fun(X7,X8)),'const.pair.CURRY_1'(s(fun('type.pair.prod'(X6,X7),X8),'const.pair.UNCURRY_1'(s(fun(X6,fun(X7,X8)),X10)))))),
  file('thm.pair.UNCURRY_ONE_ONE_THM','thm.pair.CURRY_UNCURRY_THM')).
fof(f1991,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK4) = s(fun(sK0,fun(sK1,sK2)),'const.pair.CURRY_1'(s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))))) | $spl0),
  inference(superposition,[],[f151,f172])).
fof(f173,plain,(
  s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) != s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) | $spl1),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) != s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f175,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) != s(fun(sK0,fun(sK1,sK2)),sK4) | $spl3),
  inference(cnf_transformation,[],[f175_D])).
fof(f175_D,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) != s(fun(sK0,fun(sK1,sK2)),sK4) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f122,plain,(
  s(fun(sK0,fun(sK1,sK2)),sK3) != s(fun(sK0,fun(sK1,sK2)),sK4) | s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) != s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK4)))),
  inference(cnf_transformation,[],[f104])).
fof(f2017,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f2016])).
fof(f2016,plain,(
  s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) != s(fun('type.pair.prod'(sK0,sK1),sK2),'const.pair.UNCURRY_1'(s(fun(sK0,fun(sK1,sK2)),sK3))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f173,f174])).
% SZS output end Proof for thm.pair
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 436
% Generated clauses: 1846
% Final active clauses: 34
% Final passive clauses: 333
% Input formulas: 37
% Initial clauses: 50
% 
% Duplicate literals: 127
% Trivial inequalities: 13
% Fw subsumption resolutions: 205
% Fw demodulations: 121
% Bw demodulations: 6
% 
% Simple tautologies: 36
% Equational tautologies: 31
% Forward subsumptions: 833
% 
% Binary resolution: 98
% Factoring: 1
% Forward superposition: 622
% Backward superposition: 467
% Self superposition: 55
% Equality factoring: 52
% Equality resolution: 1
% 
% Split clauses: 46
% Split components: 92
% SAT solver clauses: 99
% SAT solver unit clauses: 9
% SAT solver binary clauses: 43
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 46
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 97
% TWLsolver calls for satisfiability: 51
% 
% Memory used [KB]: 1791
% Time elapsed: 0.047 s
% ------------------------------
% ------------------------------
% Success in time 0.05 s
