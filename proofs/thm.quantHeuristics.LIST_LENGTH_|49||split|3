Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 44
dis+11_7_41 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f182173,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f182070,f48027,f1878,f2881,f2877,f1879,f2879,f2878])).
fof(f2878,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) | $spl1),
  inference(cnf_transformation,[],[f2878_D])).
fof(f2878_D,plain,(
  ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f2879,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK16),sK17) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,X3),s('type.list.list'(sK16),X2)))) ) | $spl2),
  inference(cnf_transformation,[],[f2879_D])).
fof(f2879_D,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK16),sK17) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,X3),s('type.list.list'(sK16),X2)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1879,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK16),sK17) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,X3),s('type.list.list'(sK16),X2))) | ~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(cnf_transformation,[],[f1483])).
fof(f1483,plain,(
  (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(sK16),sK17) = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18)))) & (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) | ! [X2,X3] : s('type.list.list'(sK16),sK17) != s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,X3),s('type.list.list'(sK16),X2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17,sK18,sK19])],[f1482])).
fof(f1482,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f1481])).
fof(f1481,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | ! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(nnf_transformation,[],[f1345])).
fof(f1345,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <~> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(ennf_transformation,[],[f520])).
fof(f520,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f519])).
fof(f519,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.num.|48|_0')))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))),s('type.num.num','const.num.|48|_0')))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.quantHeuristics.LIST_LENGTH_|49||split|3')).
fof(f2877,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) | $spl0),
  inference(cnf_transformation,[],[f2877_D])).
fof(f2877_D,plain,(
  p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0')))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2881,plain,(
  s('type.list.list'(sK16),sK17) = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18))) | $spl4),
  inference(cnf_transformation,[],[f2881_D])).
fof(f2881_D,plain,(
  s('type.list.list'(sK16),sK17) = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1878,plain,(
  s('type.list.list'(sK16),sK17) = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18))) | p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))),s('type.num.num','const.num.|48|_0'))))),
  inference(cnf_transformation,[],[f1483])).
fof(f48027,plain,(
  $false | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f48026,f2296])).
fof(f2296,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f939])).
fof(f939,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f938])).
fof(f938,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f310])).
fof(f310,axiom,(
  ! [X6] : ! [X25,X24] : ~s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X24),s('type.list.list'(X6),X25)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.list.NOT_CONS_NIL')).
fof(f48026,plain,(
  s('type.list.list'(sK16),'const.list.NIL_0') = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18))) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f47988,f46246])).
fof(f46246,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))) | $spl1),
  inference(resolution,[],[f44666,f2878])).
fof(f44666,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(backward_demodulation,[],[f2434,f1970])).
fof(f1970,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f595])).
fof(f595,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.arithmetic.LESS_|48|_CASES')).
fof(f2434,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f1093])).
fof(f1093,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X10,X11] : s(bool,'const.arithmetic.>_2'(s('type.num.num',X10),s('type.num.num',X11))) = s(bool,'const.prim_rec.<_2'(s('type.num.num',X11),s('type.num.num',X10)))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.arithmetic.GREATER_DEF')).
fof(f47988,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK16),sK17))) | s('type.list.list'(sK16),'const.list.NIL_0') = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK19),s('type.list.list'(sK16),sK18))) | $spl4),
  inference(superposition,[],[f2134,f2881])).
fof(f2134,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f1564])).
fof(f1564,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f755])).
fof(f755,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f754])).
fof(f754,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f170])).
fof(f170,axiom,(
  ! [X6] : ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X7))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.list.LENGTH_NIL')).
fof(f182070,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f181936,f2879])).
fof(f181936,plain,(
  s('type.list.list'(sK16),sK17) = s('type.list.list'(sK16),'const.list.CONS_2'(s(sK16,sK42(sK17,sK16)),s('type.list.list'(sK16),sK41(sK17,sK16)))) | $spl0),
  inference(resolution,[],[f161720,f2877])).
fof(f161720,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.>_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))),s('type.num.num','const.num.|48|_0')))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),sK41(X1,X0))))) )),
  inference(forward_demodulation,[],[f2144,f2434])).
fof(f2144,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),sK41(X1,X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))) )),
  inference(cnf_transformation,[],[f1571])).
fof(f1571,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK42(X1,X0)),s('type.list.list'(X0),sK41(X1,X0))))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41,sK42])],[f1570])).
fof(f1570,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X4,X5] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),X4)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(rectify,[],[f1569])).
fof(f1569,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) | ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))) & (! [X2,X3] : s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))))))))),
  inference(nnf_transformation,[],[f765])).
fof(f765,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(flattening,[],[f764])).
fof(f764,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))) <=> ? [X2,X3] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))))),
  inference(rectify,[],[f212])).
fof(f212,axiom,(
  ! [X6] : ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7)))))) <=> ? [X8,X9] : s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8))))),
  file('thm.quantHeuristics.LIST_LENGTH_|49||split|3','thm.quantHeuristics.LIST_LENGTH_|49||split|2')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 2963
% Passive clauses: 38366
% Generated clauses: 180140
% Final active clauses: 2881
% Final passive clauses: 34298
% Input formulas: 517
% Initial clauses: 988
% 
% Duplicate literals: 325
% Trivial inequalities: 225
% Fw subsumption resolutions: 6770
% Fw demodulations: 25269
% Bw demodulations: 60
% 
% Simple tautologies: 528
% Equational tautologies: 51
% Forward subsumptions: 107735
% Fw demodulations to eq. taut.: 29
% 
% Binary resolution: 24189
% Factoring: 1500
% Forward superposition: 52035
% Backward superposition: 68199
% Self superposition: 176
% Equality factoring: 2
% Equality resolution: 35
% 
% Split clauses: 1346
% Split components: 2695
% SAT solver clauses: 1906
% SAT solver unit clauses: 53
% SAT solver binary clauses: 252
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 1346
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 1903
% TWLsolver calls for satisfiability: 880
% 
% Memory used [KB]: 147119
% Time elapsed: 4.104 s
% ------------------------------
% ------------------------------
% Success in time 4.141 s
