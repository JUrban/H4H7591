Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (139547)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 772
% Passive clauses: 9328
% Generated clauses: 23421
% Final active clauses: 763
% Final passive clauses: 8184
% Input formulas: 132
% Initial clauses: 305
% 
% Duplicate literals: 143
% Trivial inequalities: 94
% Fw subsumption resolutions: 1169
% Fw demodulations: 2947
% Bw demodulations: 8
% 
% Simple tautologies: 205
% Equational tautologies: 32
% Forward subsumptions: 9530
% Fw demodulations to eq. taut.: 6
% 
% Binary resolution: 6998
% Factoring: 592
% Forward superposition: 4881
% Backward superposition: 6147
% Self superposition: 44
% Equality factoring: 2
% Equality resolution: 21
% 
% Split clauses: 142
% Split components: 286
% SAT solver clauses: 280
% SAT solver unit clauses: 9
% SAT solver binary clauses: 68
% 
% Sat splits: 142
% 
% TWLsolver clauses: 280
% TWLsolver calls for satisfiability: 246
% 
% Memory used [KB]: 16758
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (139566)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 392
% Passive clauses: 3315
% Generated clauses: 14166
% Final active clauses: 374
% Final passive clauses: 2770
% Input formulas: 132
% Initial clauses: 305
% 
% Duplicate literals: 81
% Trivial inequalities: 27
% Fw subsumption resolutions: 440
% Fw demodulations: 1779
% Bw demodulations: 163
% Condensations: 75
% Global subsumptions: 18
% 
% Simple tautologies: 204
% Equational tautologies: 13
% Forward subsumptions: 4299
% Fw demodulations to eq. taut.: 7
% Bw demodulations to eq. taut.: 5
% 
% Binary resolution: 2088
% Factoring: 87
% Forward superposition: 2922
% Backward superposition: 2704
% Self superposition: 51
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 4158
% SAT solver unit clauses: 344
% SAT solver binary clauses: 146
% SAT solver learnt clauses: 36
% SAT solver learnt literals: 10
% 
% Sat splits: 11
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 4086
% TWLsolver calls for satisfiability: 2078
% 
% Memory used [KB]: 21108
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f25494,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f25493])).
fof(f25493,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12)))))),
  inference(backward_demodulation,[],[f25488,f7519])).
fof(f7519,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK10,sK11),'_dst_x0x1_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK10,'type.pair.prod'(sK10,'type.one.one')),'_dst_x1x0_2'(s(fun(sK10,fun('type.one.one','type.pair.prod'(sK10,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(sK11,bool),sK12)))))),
  inference(unit_resulting_resolution,[],[f588,f695])).
fof(f695,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f476])).
fof(f476,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f217])).
fof(f217,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f103])).
fof(f103,axiom,(
  ! [X6] : ! [X10,X11] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X10))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X11))) <=> s(X6,X10) = s(X6,X11))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|5','thm.option.SOME_|49||49|')).
fof(f588,plain,(
  s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))) != s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK10,sK11),'_dst_x0x1_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK10,'type.pair.prod'(sK10,'type.one.one')),'_dst_x1x0_2'(s(fun(sK10,fun('type.one.one','type.pair.prod'(sK10,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(sK11,bool),sK12)))),
  inference(cnf_transformation,[],[f420])).
fof(f420,plain,(
  s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK11,bool),sK12))) != s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(sK10,sK11),'_dst_x0x1_2'(s(fun('type.pair.prod'(sK10,'type.one.one'),sK11),sK13),s(fun(sK10,'type.pair.prod'(sK10,'type.one.one')),'_dst_x1x0_2'(s(fun(sK10,fun('type.one.one','type.pair.prod'(sK10,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(sK11,bool),sK12)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13])],[f348])).
fof(f348,plain,(
  ? [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) != s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|5','thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|5')).
fof(f25488,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X5,bool),X7))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X4,X5),'_dst_x0x1_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X4,'type.pair.prod'(X4,'type.one.one')),'_dst_x1x0_2'(s(fun(X4,fun('type.one.one','type.pair.prod'(X4,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X5,bool),X7)))) )),
  inference(forward_demodulation,[],[f25097,f764])).
fof(f764,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))) )),
  inference(cnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))),
  inference(flattening,[],[f257])).
fof(f257,plain,(
  ! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),X2),s(fun(X1,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X1,bool),X3)))))),
  inference(rectify,[],[f82])).
fof(f82,axiom,(
  ! [X6,X7] : ! [X9,X12] : s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X6,X7),X9),s(fun(X7,bool),X12))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X6,X7),X9),s(fun(X7,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X7,bool),X12)))))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|5','thm.quantHeuristics.GUESSES_NEG_REWRITE|split|2')).
fof(f25097,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X5,bool),'_dst_x0x1_2'(s(fun(bool,bool),'~_0'),s(fun(X5,bool),X7))))) = s(bool,'const.quantHeuristics.GUESS_FORALL_GAP_2'(s(fun(X4,X5),'_dst_x0x1_2'(s(fun('type.pair.prod'(X4,'type.one.one'),X5),X6),s(fun(X4,'type.pair.prod'(X4,'type.one.one')),'_dst_x1x0_2'(s(fun(X4,fun('type.one.one','type.pair.prod'(X4,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X5,bool),X7)))) )),
  inference(superposition,[],[f772,f764])).
fof(f772,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))) )),
  inference(cnf_transformation,[],[f274])).
fof(f274,plain,(
  ! [X0,X1,X2,X3] : s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(flattening,[],[f273])).
fof(f273,plain,(
  ! [X0,X1] : ! [X2,X3] : s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X1,bool),X2))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun('type.pair.prod'(X0,'type.one.one'),X1),X3),s(fun(X0,'type.pair.prod'(X0,'type.one.one')),'_dst_x1x0_2'(s(fun(X0,fun('type.one.one','type.pair.prod'(X0,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X1,bool),X2)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X8,X9] : s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X7,bool),X8))) = s(bool,'const.quantHeuristics.GUESS_EXISTS_GAP_2'(s(fun(X6,X7),'_dst_x0x1_2'(s(fun('type.pair.prod'(X6,'type.one.one'),X7),X9),s(fun(X6,'type.pair.prod'(X6,'type.one.one')),'_dst_x1x0_2'(s(fun(X6,fun('type.one.one','type.pair.prod'(X6,'type.one.one'))),'const.pair.,_0'),s('type.one.one','const.one.one_0'))))),s(fun(X7,bool),X8)))),
  file('thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|5','thm.quantHeuristics.GUESS_RULES_ELIM_UNIT|split|4')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 455
% Passive clauses: 3746
% Generated clauses: 24922
% Final active clauses: 433
% Final passive clauses: 3067
% Input formulas: 132
% Initial clauses: 305
% 
% Duplicate literals: 6
% Trivial inequalities: 7
% Fw subsumption resolutions: 358
% Fw demodulations: 7741
% Bw demodulations: 98
% Condensations: 15
% 
% Simple tautologies: 119
% Equational tautologies: 41
% Forward subsumptions: 8566
% Fw demodulations to eq. taut.: 3797
% Bw demodulations to eq. taut.: 26
% 
% Unit resulting resolution: 9977
% Factoring: 1
% Forward superposition: 3481
% Backward superposition: 2829
% Self superposition: 44
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 13
% Split components: 26
% SAT solver clauses: 4188
% SAT solver unit clauses: 998
% SAT solver binary clauses: 2343
% 
% Sat splits: 13
% Sat splitting refutations: 414
% 
% Memory used [KB]: 25969
% Time elapsed: 0.984 s
% ------------------------------
% ------------------------------
% Success in time 2.31 s
