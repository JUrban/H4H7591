Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.numeral
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.numeral
% SZS output start Proof for thm.numeral
fof(f1847,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f1846])).
fof(f1846,plain,(
  s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s(sK0,sK1))) != s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s(sK0,sK1)))),
  inference(forward_demodulation,[],[f1841,f811])).
fof(f811,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(backward_demodulation,[],[f788,f727])).
fof(f727,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f701,f64])).
fof(f64,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  ! [X0,X1] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X8,X10] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8)))))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.ADD_CLAUSES|split|3')).
fof(f701,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f196,f269])).
fof(f269,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(forward_demodulation,[],[f260,f53])).
fof(f53,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.num.|48|_0')))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.ADD_|48|')).
fof(f260,plain,(
  ( ! [X2] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(superposition,[],[f64,f180])).
fof(f180,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),
  inference(superposition,[],[f170,f54])).
fof(f54,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.ADD_CLAUSES|split|0')).
fof(f170,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(superposition,[],[f56,f54])).
fof(f56,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X8] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.BIT|49|')).
fof(f196,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(backward_demodulation,[],[f180,f56])).
fof(f788,plain,(
  ( ! [X5] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X5)))) )),
  inference(superposition,[],[f55,f727])).
fof(f55,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X10] : s('type.num.num',X10) = s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X10)))))),
  file('thm.numeral.numeral_funpow|split|1','thm.prim_rec.PRE|split|1')).
fof(f1841,plain,(
  s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s(sK0,sK1))) != s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))),s(sK0,sK1)))),
  inference(superposition,[],[f1834,f63])).
fof(f63,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s(X0,X3))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num',X2),s(X0,happ(s(fun(X0,X0),X1),s(X0,X3)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X9,X8,X7] : s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num','const.num.SUC_1'(s('type.num.num',X8))),s(X6,X7))) = s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num',X8),s(X6,happ(s(fun(X6,X6),X9),s(X6,X7)))))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.FUNPOW|split|1')).
fof(f1834,plain,(
  s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))),s(sK0,sK1))) != s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))),s(sK0,happ(s(fun(sK0,sK0),sK3),s(sK0,sK1)))))),
  inference(forward_demodulation,[],[f47,f52])).
fof(f52,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : s('type.num.num',X7) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))),
  file('thm.numeral.numeral_funpow|split|1','thm.arithmetic.NUMERAL_DEF')).
fof(f47,plain,(
  s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))),s(sK0,sK1))) != s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))),s(sK0,happ(s(fun(sK0,sK0),sK3),s(sK0,sK1)))))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))),s(sK0,sK1))) != s(sK0,'const.arithmetic.FUNPOW_3'(s(fun(sK0,sK0),sK3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK2))))))),s(sK0,happ(s(fun(sK0,sK0),sK3),s(sK0,sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s(X0,X1))) != s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))))),s(X0,happ(s(fun(X0,X0),X3),s(X0,X1)))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s(X0,X1))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))))),s(X0,happ(s(fun(X0,X0),X3),s(X0,X1)))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1,X2,X3] : s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s(X0,X1))) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X3),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))))),s(X0,happ(s(fun(X0,X0),X3),s(X0,X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s(X6,X7))) = s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))),s(X6,happ(s(fun(X6,X6),X9),s(X6,X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s(X6,X7))) = s(X6,'const.arithmetic.FUNPOW_3'(s(fun(X6,X6),X9),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))))),s(X6,happ(s(fun(X6,X6),X9),s(X6,X7)))))),
  file('thm.numeral.numeral_funpow|split|1','thm.numeral.numeral_funpow|split|1')).
% SZS output end Proof for thm.numeral
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 57
% Passive clauses: 240
% Generated clauses: 1753
% Final active clauses: 51
% Final passive clauses: 155
% Input formulas: 19
% Initial clauses: 20
% 
% Duplicate literals: 39
% Trivial inequalities: 4
% Fw demodulations: 194
% Bw demodulations: 4
% 
% Simple tautologies: 16
% Equational tautologies: 15
% Forward subsumptions: 1229
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 4
% Forward superposition: 605
% Backward superposition: 785
% Self superposition: 54
% Equality factoring: 26
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 24
% SAT solver unit clauses: 2
% SAT solver binary clauses: 12
% 
% Sat splits: 22
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 24
% TWLsolver calls for satisfiability: 15
% 
% Memory used [KB]: 2046
% Time elapsed: 0.042 s
% ------------------------------
% ------------------------------
% Success in time 0.047 s
