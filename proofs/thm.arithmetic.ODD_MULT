Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.arithmetic
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.arithmetic
% SZS output start Proof for thm.arithmetic
fof(f321,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f320,f43,f70,f195,f199,f197,f44,f71,f69,f67,f221,f208,f259,f42,f68,f66])).
fof(f66,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) | $spl0),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f68,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl2),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) | (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f31])).
fof(f31,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ? [X0,X1] : ((p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))))) & (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1)))))))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <~> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7)))))) <=> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7)))))) <=> (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X6)))) & p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7))))))),
  file('thm.arithmetic.ODD_MULT','thm.arithmetic.ODD_MULT')).
fof(f259,plain,(
  $false | ($spl0 | $spl3)),
  inference(resolution,[],[f251,f66])).
fof(f251,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X5))))))) ) | $spl3),
  inference(resolution,[],[f233,f49])).
fof(f49,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : ((~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0))))) & (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X7)))) <=> ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X7)))))),
  file('thm.arithmetic.ODD_MULT','thm.arithmetic.ODD_EVEN')).
fof(f233,plain,(
  ( ! [X1] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))))))) ) | $spl3),
  inference(subsumption_resolution,[],[f227,f45])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.arithmetic.ODD_MULT',aHL_TRUTH)).
fof(f227,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',X1))))))) ) | $spl3),
  inference(superposition,[],[f54,f223])).
fof(f223,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0))) | $spl3),
  inference(resolution,[],[f69,f122])).
fof(f122,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(subsumption_resolution,[],[f121,f47])).
fof(f47,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.arithmetic.ODD_MULT',aHL_FALSITY)).
fof(f121,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0)))) | s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) )),
  inference(superposition,[],[f50,f48])).
fof(f48,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.arithmetic.ODD_MULT',aHL_BOOL_CASES)).
fof(f50,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f54,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))))) & ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) & ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1)))))) & ((~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) & ~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) <=> (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num',X7)))))) <=> (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X6)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X7))))))),
  file('thm.arithmetic.ODD_MULT','thm.arithmetic.EVEN_MULT')).
fof(f208,plain,(
  $false | ($spl4 | $spl10)),
  inference(subsumption_resolution,[],[f207,f45])).
fof(f207,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl10)),
  inference(forward_demodulation,[],[f203,f82])).
fof(f82,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) | $spl4),
  inference(subsumption_resolution,[],[f77,f47])).
fof(f77,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f70,f48])).
fof(f203,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl10),
  inference(resolution,[],[f197,f49])).
fof(f221,plain,(
  $false | ($spl2 | $spl12)),
  inference(subsumption_resolution,[],[f220,f45])).
fof(f220,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f216,f81])).
fof(f81,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl2),
  inference(subsumption_resolution,[],[f76,f47])).
fof(f76,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0))) | $spl2),
  inference(superposition,[],[f68,f48])).
fof(f216,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl12),
  inference(resolution,[],[f199,f49])).
fof(f67,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) | $spl1),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f69,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | $spl3),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f71,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl5),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f44,plain,(
  ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK0)))) | ~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))),
  inference(cnf_transformation,[],[f32])).
fof(f197,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK1)))) | $spl10),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK1)))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f199,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | $spl12),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f195,plain,(
  p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK1)))) | $spl1),
  inference(subsumption_resolution,[],[f190,f45])).
fof(f190,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK1)))) | $spl1),
  inference(superposition,[],[f53,f123])).
fof(f123,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) | $spl1),
  inference(resolution,[],[f122,f67])).
fof(f53,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X0)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f70,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | $spl4),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f43,plain,(
  p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num',sK1)))) | p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))))),
  inference(cnf_transformation,[],[f32])).
fof(f320,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f318,f45])).
fof(f318,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl5)),
  inference(superposition,[],[f297,f236])).
fof(f236,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) | $spl0),
  inference(subsumption_resolution,[],[f235,f47])).
fof(f235,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK0),s('type.num.num',sK1))))) | $spl0),
  inference(superposition,[],[f66,f48])).
fof(f297,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.ODD_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X5),s('type.num.num',sK1))))))) ) | $spl5),
  inference(resolution,[],[f292,f49])).
fof(f292,plain,(
  ( ! [X0] : (p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK1))))))) ) | $spl5),
  inference(subsumption_resolution,[],[f286,f45])).
fof(f286,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',sK1))))))) ) | $spl5),
  inference(superposition,[],[f55,f266])).
fof(f266,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',sK1))) | $spl5),
  inference(resolution,[],[f71,f122])).
fof(f55,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.EVEN_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f36])).
% SZS output end Proof for thm.arithmetic
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 49
% Passive clauses: 122
% Generated clauses: 285
% Final active clauses: 23
% Final passive clauses: 28
% Input formulas: 11
% Initial clauses: 23
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% Fw subsumption resolutions: 36
% Fw demodulations: 9
% Bw demodulations: 8
% 
% Simple tautologies: 11
% Equational tautologies: 3
% Forward subsumptions: 102
% 
% Binary resolution: 72
% Forward superposition: 67
% Backward superposition: 43
% Self superposition: 4
% Equality factoring: 2
% 
% Split clauses: 5
% Split components: 11
% SAT solver clauses: 15
% SAT solver unit clauses: 1
% SAT solver binary clauses: 11
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 3
% 
% Sat splits: 5
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 12
% TWLsolver calls for satisfiability: 8
% 
% Memory used [KB]: 767
% Time elapsed: 0.021 s
% ------------------------------
% ------------------------------
% Success in time 0.023 s
