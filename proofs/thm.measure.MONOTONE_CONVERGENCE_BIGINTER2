Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.measure
% (94609)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 824
% Passive clauses: 9246
% Generated clauses: 22091
% Final active clauses: 759
% Final passive clauses: 7759
% Input formulas: 35
% Initial clauses: 154
% 
% Duplicate literals: 619
% Trivial inequalities: 158
% Fw subsumption resolutions: 2227
% Fw demodulations: 451
% Bw demodulations: 64
% 
% Simple tautologies: 231
% Equational tautologies: 68
% Forward subsumptions: 8348
% 
% Binary resolution: 10776
% Factoring: 1435
% Forward superposition: 3426
% Backward superposition: 2402
% Self superposition: 26
% Equality factoring: 28
% Equality resolution: 47
% 
% Split clauses: 635
% Split components: 1279
% SAT solver clauses: 1189
% SAT solver unit clauses: 31
% SAT solver binary clauses: 212
% 
% Sat splits: 635
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1187
% TWLsolver calls for satisfiability: 523
% 
% Memory used [KB]: 9338
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.measure
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.measure
% SZS output start Proof for thm.measure
fof(f6950,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6945,f204,f370,f371,f373,f485,f487,f200,f368,f218,f378,f855,f863,f202,f364,f1824,f1840,f201,f366,f2038,f2062,f203,f363,f222,f380,f2169,f2170,f247,f388])).
fof(f388,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) | p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X3,X2,X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',sK15(X3,X2,X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) | $spl26),
  inference(cnf_transformation,[],[f388_D])).
fof(f388_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) | p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X3,X2,X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',sK15(X3,X2,X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f247,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))) | s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X3,X2,X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',sK15(X3,X2,X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X3,X2,X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',sK15(X3,X2,X1,X0))))))) | s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) | p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ? [X4] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',X4)))))) | s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))) | p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ? [X4] : ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',X4)))))) | s(fun(X0,bool),X2) != s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))) | p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))))),
  inference(ennf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X4] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',X4)))))) & s(fun(X0,bool),X2) = s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X4] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num','const.num.SUC_1'(s('type.num.num',X4))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X3),s('type.num.num',X4)))))) & s(fun(X0,bool),X2) = s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X3),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X3))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),X2)))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X7,X15,X8] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9)))))) & s(fun(X6,bool),X15) = s(fun(X6,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun('type.num.num',fun(X6,bool)),X8))),s('type.realax.real',happ(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun(X6,bool),X15)))))))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.measure.MONOTONE_CONVERGENCE_BIGINTER')).
fof(f2170,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) | $spl920),
  inference(cnf_transformation,[],[f2170_D])).
fof(f2170_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) <=> ~$spl920),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl920])])).
fof(f2169,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0)))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',sK15(X2,'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),X1,X0))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))))) ) | $spl26),
  inference(equality_resolution,[],[f388])).
fof(f380,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(cnf_transformation,[],[f380_D])).
fof(f380_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f222,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.bool.EQ_CLAUSES|split|3')).
fof(f363,plain,(
  ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))) | $spl1),
  inference(cnf_transformation,[],[f363_D])).
fof(f363_D,plain,(
  ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f203,plain,(
  ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X3)))))) & ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14])],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3)))))) & ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))))))) & ~p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun(fun('type.num.num',fun(X0,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X0,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1)))))))) & ! [X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(X0,bool),happ(s(fun('type.num.num',fun(X0,bool)),X2),s('type.num.num',X3))))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun('type.num.num',fun(X0,bool)),X2))),s('type.realax.real',happ(s(fun(fun(X0,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X0,bool),'type.pair.prod'(fun(fun(X0,bool),bool),fun(fun(X0,bool),'type.realax.real'))),X1))),s(fun(X0,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X0,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X0,bool)),X2),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9))))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun('type.num.num',fun(X6,bool)),X8))),s('type.realax.real',happ(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun(X6,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))) & p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun(fun('type.num.num',fun(X6,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(X6,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7)))))))) & ! [X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9))))),s(fun(X6,bool),happ(s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num',X9))))))) => p(s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun('type.num.num',fun(X6,bool)),X8))),s('type.realax.real',happ(s(fun(fun(X6,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(X6,bool),'type.pair.prod'(fun(fun(X6,bool),bool),fun(fun(X6,bool),'type.realax.real'))),X7))),s(fun(X6,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(X6,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(X6,bool)),X8),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))))))))))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.measure.MONOTONE_CONVERGENCE_BIGINTER2')).
fof(f2062,plain,(
  s(bool,'F_0') = s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))) | $spl848),
  inference(cnf_transformation,[],[f2062_D])).
fof(f2062_D,plain,(
  s(bool,'F_0') = s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))) <=> ~$spl848),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl848])])).
fof(f2038,plain,(
  s(bool,'F_0') = s(bool,'const.seq.-->_2'(s(fun('type.num.num','type.realax.real'),'const.combin.o_2'(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun('type.num.num',fun(sK12,bool)),sK14))),s('type.realax.real',happ(s(fun(fun(sK12,bool),'type.realax.real'),'const.measure.measure_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))),s(fun(sK12,bool),'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0'))))))))) | ($spl1 | $spl18)),
  inference(resolution,[],[f363,f380])).
fof(f366,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) | $spl4),
  inference(cnf_transformation,[],[f366_D])).
fof(f366_D,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f201,plain,(
  p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))))),
  inference(cnf_transformation,[],[f134])).
fof(f1840,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))) | $spl708),
  inference(cnf_transformation,[],[f1840_D])).
fof(f1840_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))) <=> ~$spl708),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl708])])).
fof(f1824,plain,(
  s(bool,'T_0') = s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))))) | ($spl4 | $spl14)),
  inference(resolution,[],[f366,f378])).
fof(f364,plain,(
  ( ! [X3] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X3))))))) ) | $spl2),
  inference(cnf_transformation,[],[f364_D])).
fof(f364_D,plain,(
  ( ! [X3] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X3))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f202,plain,(
  ( ! [X3] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X3))))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f863,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X0)))))) ) | $spl370),
  inference(cnf_transformation,[],[f863_D])).
fof(f863_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X0)))))) ) <=> ~$spl370),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl370])])).
fof(f855,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',X0)))))) ) | ($spl2 | $spl14)),
  inference(resolution,[],[f364,f378])).
fof(f378,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f378_D])).
fof(f378_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f218,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.bool.EQ_CLAUSES|split|1')).
fof(f368,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | $spl6),
  inference(cnf_transformation,[],[f368_D])).
fof(f368_D,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f200,plain,(
  p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))))),
  inference(cnf_transformation,[],[f134])).
fof(f487,plain,(
  s(bool,'T_0') = s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) | $spl192),
  inference(cnf_transformation,[],[f487_D])).
fof(f487_D,plain,(
  s(bool,'T_0') = s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f485,plain,(
  s(bool,'T_0') = s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13))) | ($spl6 | $spl14)),
  inference(resolution,[],[f378,f368])).
fof(f373,plain,(
  ~p(s(bool,'F_0')) | $spl11),
  inference(cnf_transformation,[],[f373_D])).
fof(f373_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f371,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f207,f204])).
fof(f207,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f18])).
fof(f18,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.bool.NOT_CLAUSES|split|2')).
fof(f370,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f370_D])).
fof(f370_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f204,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f9])).
fof(f9,axiom,(
  p(s(bool,'T_0'))),
  file('thm.measure.MONOTONE_CONVERGENCE_BIGINTER2','thm.bool.TRUTH')).
fof(f6945,plain,(
  $false | ($spl8 | $spl11 | $spl192 | $spl370 | $spl708 | $spl848 | $spl920)),
  inference(subsumption_resolution,[],[f6944,f370])).
fof(f6944,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl11 | $spl192 | $spl370 | $spl708 | $spl848 | $spl920)),
  inference(forward_demodulation,[],[f6943,f487])).
fof(f6943,plain,(
  ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl8 | $spl11 | $spl370 | $spl708 | $spl848 | $spl920)),
  inference(subsumption_resolution,[],[f6942,f370])).
fof(f6942,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl8 | $spl11 | $spl370 | $spl708 | $spl848 | $spl920)),
  inference(forward_demodulation,[],[f6941,f1840])).
fof(f6941,plain,(
  ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl8 | $spl11 | $spl370 | $spl848 | $spl920)),
  inference(subsumption_resolution,[],[f6940,f370])).
fof(f6940,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl11 | $spl370 | $spl848 | $spl920)),
  inference(forward_demodulation,[],[f6939,f863])).
fof(f6939,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(sK14,'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),sK13,sK12)))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',sK15(sK14,'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),sK13,sK12))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl11 | $spl848 | $spl920)),
  inference(subsumption_resolution,[],[f6913,f373])).
fof(f6913,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK15(sK14,'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),sK13,sK12)))))),s(fun(sK12,bool),happ(s(fun('type.num.num',fun(sK12,bool)),sK14),s('type.num.num',sK15(sK14,'const.pred_set.BIGINTER_1'(s(fun(fun(sK12,bool),bool),'const.pred_set.IMAGE_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun('type.num.num',bool),'const.pred_set.UNIV_0')))),sK13,sK12))))))) | ~p(s(bool,'const.bool.IN_2'(s(fun('type.num.num',fun(sK12,bool)),sK14),s(fun(fun('type.num.num',fun(sK12,bool)),bool),'const.util_prob.FUNSET_2'(s(fun('type.num.num',bool),'const.pred_set.UNIV_0'),s(fun(fun(sK12,bool),bool),'const.measure.measurable_sets_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))))))) | ~p(s(bool,'const.measure.measure_space_1'(s('type.pair.prod'(fun(sK12,bool),'type.pair.prod'(fun(fun(sK12,bool),bool),fun(fun(sK12,bool),'type.realax.real'))),sK13)))) | ($spl848 | $spl920)),
  inference(superposition,[],[f2170,f2062])).
% SZS output end Proof for thm.measure
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 335
% Passive clauses: 1030
% Generated clauses: 6669
% Final active clauses: 324
% Final passive clauses: 572
% Input formulas: 35
% Initial clauses: 154
% 
% Duplicate literals: 227
% Trivial inequalities: 46
% Fw subsumption resolutions: 713
% Fw demodulations: 181
% Bw demodulations: 131
% Condensations: 235
% Global subsumptions: 13
% 
% Simple tautologies: 243
% Equational tautologies: 18
% Forward subsumptions: 2763
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 1717
% Factoring: 170
% Forward superposition: 564
% Backward superposition: 1395
% Self superposition: 26
% Equality factoring: 28
% Equality resolution: 10
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 1393
% SAT solver unit clauses: 174
% SAT solver binary clauses: 62
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 26
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1340
% TWLsolver calls for satisfiability: 1622
% 
% Memory used [KB]: 6268
% Time elapsed: 0.239 s
% ------------------------------
% ------------------------------
% Success in time 0.87 s
