Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f3857,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f3856])).
fof(f3856,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),sK2)))),
  inference(superposition,[],[f50,f824])).
fof(f824,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X3))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(superposition,[],[f73,f72])).
fof(f72,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X12,X10] : s('type.list.list'(X6),X10) = s('type.list.list'(X6),'const.list.TL_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),X10)))))),
  file('thm.list.EL_simp_restricted|split|1','thm.list.TL')).
fof(f73,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1,X2] : s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.TL_1'(s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X7,X9] : s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.list.list'(X6),X9))) = s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.list.list'(X6),'const.list.TL_1'(s('type.list.list'(X6),X9)))))),
  file('thm.list.EL_simp_restricted|split|1','thm.list.EL_simp|split|1')).
fof(f50,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2)))))),
  inference(cnf_transformation,[],[f37])).
fof(f37,plain,(
  s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),sK2))) != s(sK0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK3),s('type.list.list'(sK0),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f35])).
fof(f35,plain,(
  ? [X0,X1,X2,X3] : s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) != s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1,X2,X3] : s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ~! [X0] : ! [X1,X2,X3] : s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.list.list'(X0),X2))) = s(X0,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.list.list'(X6),X8))) = s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.list.list'(X6),X8))) = s(X6,'const.list.EL_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X8)))))),
  file('thm.list.EL_simp_restricted|split|1','thm.list.EL_simp_restricted|split|1')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 30
% Passive clauses: 740
% Generated clauses: 3536
% Final active clauses: 29
% Final passive clauses: 687
% Input formulas: 15
% Initial clauses: 26
% 
% Duplicate literals: 366
% Trivial inequalities: 41
% Fw subsumption resolutions: 264
% Fw demodulations: 25
% 
% Simple tautologies: 114
% Equational tautologies: 81
% Forward subsumptions: 1375
% 
% Binary resolution: 15
% Forward superposition: 1307
% Backward superposition: 1152
% Self superposition: 234
% Equality factoring: 204
% Equality resolution: 3
% 
% Split clauses: 199
% Split components: 399
% SAT solver clauses: 549
% SAT solver unit clauses: 234
% SAT solver binary clauses: 142
% 
% Sat splits: 199
% 
% TWLsolver clauses: 549
% TWLsolver calls for satisfiability: 22
% 
% Memory used [KB]: 2302
% Time elapsed: 0.101 s
% ------------------------------
% ------------------------------
% Success in time 0.103 s
