Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.integer
% (75144)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 181
% Passive clauses: 1684
% Generated clauses: 23616
% Final active clauses: 165
% Final passive clauses: 1305
% Input formulas: 16
% Initial clauses: 33
% 
% Duplicate literals: 893
% Trivial inequalities: 885
% Fw subsumption resolutions: 2938
% Fw demodulations: 5253
% Bw demodulations: 10
% 
% Simple tautologies: 326
% Equational tautologies: 25
% Forward subsumptions: 10330
% 
% Binary resolution: 363
% Factoring: 2
% Forward superposition: 7272
% Backward superposition: 5647
% Self superposition: 90
% Equality factoring: 59
% Equality resolution: 24
% 
% Split clauses: 673
% Split components: 1360
% SAT solver clauses: 1475
% SAT solver unit clauses: 13
% SAT solver binary clauses: 153
% 
% Sat splits: 673
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1472
% TWLsolver calls for satisfiability: 152
% 
% Memory used [KB]: 12409
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 294 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.integer
% (75156)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 324
% Generated clauses: 10216
% Final active clauses: 90
% Final passive clauses: 193
% Input formulas: 16
% Initial clauses: 33
% 
% Duplicate literals: 1042
% Trivial inequalities: 137
% Fw subsumption resolutions: 1063
% Fw demodulations: 619
% Bw demodulations: 40
% Condensations: 1740
% Global subsumptions: 4
% 
% Simple tautologies: 253
% Equational tautologies: 40
% Forward subsumptions: 3663
% 
% Binary resolution: 83
% Forward superposition: 2313
% Backward superposition: 2563
% Self superposition: 136
% Equality factoring: 124
% Equality resolution: 16
% 
% Split clauses: 185
% Split components: 382
% SAT solver clauses: 1397
% SAT solver unit clauses: 40
% SAT solver binary clauses: 69
% SAT solver learnt clauses: 8
% 
% Sat splits: 185
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1381
% TWLsolver calls for satisfiability: 367
% 
% Memory used [KB]: 7547
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 287 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.integer
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.integer
% SZS output start Proof for thm.integer
fof(f1340,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f63,f96,f62,f97,f95,f61,f98,f93,f60,f99,f94,f92,f1083,f1103,f1140,f1246,f1266,f1320])).
fof(f1320,plain,(
  $false | $spl4),
  inference(unit_resulting_resolution,[],[f64,f64,f82,f96])).
fof(f82,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK2(X1,X0))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,sK2(X1,X0))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ? [X2] : s(X0,X1) = s(X0,X2)),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1] : ? [X2] : s(X0,X1) = s(X0,X2)),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X12] : ! [X17] : ? [X15] : s(X12,X15) = s(X12,X17)),
  file('thm.integer.integer_259_prove_ltb','thm.bool.EXISTS_REFL')).
fof(f64,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.integer.integer_259_prove_ltb','thm.bool.TRUTH')).
fof(f1266,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f1244,f1245])).
fof(f1245,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f64,f82,f98])).
fof(f1244,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl8),
  inference(unit_resulting_resolution,[],[f100,f82,f98])).
fof(f100,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f67,f64])).
fof(f67,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f10])).
fof(f10,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.integer.integer_259_prove_ltb','thm.bool.NOT_CLAUSES|split|2')).
fof(f1246,plain,(
  $false | $spl8),
  inference(unit_resulting_resolution,[],[f100,f64,f82,f98])).
fof(f1140,plain,(
  $false | $spl10),
  inference(unit_resulting_resolution,[],[f100,f100,f82,f99])).
fof(f1103,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1081,f1082])).
fof(f1082,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f100,f82,f97])).
fof(f1081,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl6),
  inference(unit_resulting_resolution,[],[f64,f82,f97])).
fof(f1083,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f64,f100,f82,f97])).
fof(f92,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | $spl0),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f94,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | $spl2),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f99,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | p(s(bool,X3)) | p(s(bool,X4))) ) | $spl10),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | p(s(bool,X3)) | p(s(bool,X4))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f60,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | p(s(bool,X3))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X2] : (s('type.integer.int',sK1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & ! [X3] : (((p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))) & (~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))) | ! [X4] : (((p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1)))))) & (~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f42])).
fof(f42,plain,(
  ? [X0,X1] : ! [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & ! [X3] : (((p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & (~p(s(bool,X3)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))) | ! [X4] : (((p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & (~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ? [X0,X1] : ! [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) & ! [X3] : ((p(s(bool,X3)) <~> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) | ! [X4] : ((p(s(bool,X4)) <~> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : ? [X2] : (s('type.integer.int',X1) != s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ? [X2] : (~s('type.integer.int',X1) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X3] : ((p(s(bool,X3)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1)))))))) & ? [X4] : ((p(s(bool,X4)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1)))))) & s('type.integer.int',X2) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X1))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ? [X8] : (~s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X9] : ((p(s(bool,X9)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7)))))))) & ? [X10] : ((p(s(bool,X10)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7)))))) & s('type.integer.int',X8) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ? [X8] : (~s('type.integer.int',X7) = s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))) => ? [X9] : ((p(s(bool,X9)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7)))))))) & ? [X10] : ((p(s(bool,X10)) <=> s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7)))))) & s('type.integer.int',X8) = s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X7))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',X7))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X10),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',X6))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',X6))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X9),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X6))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',X7))))))))))))))))),
  file('thm.integer.integer_259_prove_ltb','thm.integer.integer_259_prove_ltb')).
fof(f93,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | $spl1),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f98,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | p(s(bool,X4))) ) | $spl8),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | p(s(bool,X4))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f61,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | ~p(s(bool,X3))) )),
  inference(cnf_transformation,[],[f43])).
fof(f95,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | $spl3),
  inference(cnf_transformation,[],[f95_D])).
fof(f95_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f97,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X4)) | p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))))))))) ) | $spl6),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X4)) | p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))))))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f62,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | ~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | p(s(bool,X3))) )),
  inference(cnf_transformation,[],[f43])).
fof(f96,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X4)) | ~p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))))))))) ) | $spl4),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X4)) | ~p(s(bool,X3)) | s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1)))))))))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f63,plain,(
  ( ! [X4,X2,X3] : (s('type.integer.int',X2) != s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_lt_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK1))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X4),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,'const.integer.int_le_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int',sK0))),s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))),s('type.integer.int','const.bool.COND_3'(s(bool,X3),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))),s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK0))))),s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK1))))) | ~p(s(bool,X4)) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.integer.Num_1'(s('type.integer.int',sK0))),s('type.num.num','const.integer.Num_1'(s('type.integer.int','const.integer.int_neg_1'(s('type.integer.int',sK1))))))) | ~p(s(bool,X3))) )),
  inference(cnf_transformation,[],[f43])).
% SZS output end Proof for thm.integer
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 87
% Generated clauses: 1256
% Final active clauses: 32
% Final passive clauses: 43
% Input formulas: 16
% Initial clauses: 33
% 
% Duplicate literals: 117
% Trivial inequalities: 21
% Fw subsumption resolutions: 56
% Fw demodulations: 54
% Condensations: 170
% 
% Simple tautologies: 47
% Equational tautologies: 37
% Forward subsumptions: 657
% 
% Unit resulting resolution: 84
% Forward superposition: 376
% Backward superposition: 254
% Self superposition: 38
% Equality factoring: 40
% Equality resolution: 4
% 
% Split clauses: 4
% Split components: 12
% SAT solver clauses: 103
% SAT solver unit clauses: 16
% SAT solver binary clauses: 31
% 
% Sat splits: 4
% Sat splitting refutations: 6
% 
% Memory used [KB]: 1663
% Time elapsed: 0.064 s
% ------------------------------
% ------------------------------
% Success in time 1.341 s
