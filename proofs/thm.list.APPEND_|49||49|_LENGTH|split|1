Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% (101149)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 117
% Passive clauses: 2147
% Generated clauses: 14016
% Final active clauses: 108
% Final passive clauses: 1911
% Input formulas: 8
% Initial clauses: 28
% 
% Duplicate literals: 937
% Trivial inequalities: 178
% Fw subsumption resolutions: 2064
% Fw demodulations: 673
% 
% Simple tautologies: 290
% Equational tautologies: 102
% Forward subsumptions: 5721
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 174
% Forward superposition: 5747
% Backward superposition: 3555
% Self superposition: 331
% Equality factoring: 272
% Equality resolution: 27
% 
% Split clauses: 716
% Split components: 1440
% SAT solver clauses: 2019
% SAT solver unit clauses: 247
% SAT solver binary clauses: 566
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 716
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2010
% TWLsolver calls for satisfiability: 102
% 
% Memory used [KB]: 5628
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f1462,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1461,f102,f42,f72,f43,f74,f70,f1449,f1450,f1371,f1385,f41,f77,f55,f89,f103,f105,f1297,f1306,f721,f726,f53,f91,f1315,f1453,f1456,f44,f75,f73,f71,f1316,f1320,f1459])).
fof(f1459,plain,(
  $false | $spl196),
  inference(equality_resolution,[],[f1456])).
fof(f1320,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) | $spl176),
  inference(cnf_transformation,[],[f1320_D])).
fof(f1320_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f1316,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK5))) | ($spl0 | $spl2)),
  inference(backward_demodulation,[],[f72,f70])).
fof(f71,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | $spl1),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f73,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | $spl3),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f75,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) | $spl5),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f44,plain,(
  s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK5))) & (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | (s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) & s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5))) & (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),sK3) != s('type.list.list'(sK1),sK5))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5])],[f27])).
fof(f27,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <~> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(flattening,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  file('thm.list.APPEND_|49||49|_LENGTH|split|1','thm.list.APPEND_|49||49|_LENGTH|split|1')).
fof(f1456,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3)))) ) | $spl196),
  inference(cnf_transformation,[],[f1456_D])).
fof(f1456_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3)))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f1453,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3)))) ) | ($spl176 | $spl194)),
  inference(superposition,[],[f1450,f1320])).
fof(f1315,plain,(
  $false | ($spl3 | $spl174)),
  inference(subsumption_resolution,[],[f1312,f73])).
fof(f1312,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) | $spl174),
  inference(equality_resolution,[],[f1306])).
fof(f91,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) | $spl30),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f53,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | ((s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) | (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(ennf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) => (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) <=> (s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X7,X8,X9,X10] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X10)))) => (s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X7),s('type.list.list'(X6),X8))) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X9),s('type.list.list'(X6),X10))) <=> (s('type.list.list'(X6),X7) = s('type.list.list'(X6),X9) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),X10))))),
  file('thm.list.APPEND_|49||49|_LENGTH|split|1','thm.list.list_|49||48|8_prove_ltb')).
fof(f726,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) | $spl136),
  inference(cnf_transformation,[],[f726_D])).
fof(f726_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f721,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X3)) ) | $spl30),
  inference(equality_resolution,[],[f91])).
fof(f1306,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) | $spl174),
  inference(cnf_transformation,[],[f1306_D])).
fof(f1306_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f1297,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK3))) | s('type.list.list'(sK1),sK4) = s('type.list.list'(sK1),X0)) ) | ($spl46 | $spl136)),
  inference(superposition,[],[f726,f105])).
fof(f105,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | $spl46),
  inference(cnf_transformation,[],[f105_D])).
fof(f105_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f103,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f70,f74])).
fof(f89,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) ) | $spl26),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f55,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X3),s('type.list.list'(X0),X4))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f77,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK5))) | $spl6),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK5))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f41,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f1385,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X13),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X14),s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X12)) ) | $spl182),
  inference(cnf_transformation,[],[f1385_D])).
fof(f1385_D,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X13),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X14),s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X12)) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f1371,plain,(
  ( ! [X14,X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X13),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X14),s('type.list.list'(sK1),X12))) | s('type.list.list'(sK1),sK5) = s('type.list.list'(sK1),X12)) ) | ($spl6 | $spl26)),
  inference(superposition,[],[f89,f77])).
fof(f1450,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X1),s('type.list.list'(sK1),sK3)))) ) | $spl194),
  inference(cnf_transformation,[],[f1450_D])).
fof(f1450_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X1),s('type.list.list'(sK1),sK3)))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f1449,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X1),s('type.list.list'(sK1),sK3)))) ) | ($spl5 | $spl182)),
  inference(subsumption_resolution,[],[f1444,f75])).
fof(f1444,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X0),s('type.list.list'(sK1),sK5))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),X1),s('type.list.list'(sK1),sK3))) | s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5)) ) | $spl182),
  inference(equality_resolution,[],[f1385])).
fof(f70,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) | $spl0),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f74,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) | $spl4),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f43,plain,(
  s('type.list.list'(sK1),sK3) = s('type.list.list'(sK1),sK5) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f72,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) | $spl2),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),sK4) | s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) = s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK5)))),
  inference(cnf_transformation,[],[f28])).
fof(f102,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f101])).
fof(f101,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f100,f72])).
fof(f100,plain,(
  s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK2),s('type.list.list'(sK1),sK3))) != s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK4),s('type.list.list'(sK1),sK3))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f71,f74])).
fof(f1461,plain,(
  $false | ($spl0 | $spl194)),
  inference(subsumption_resolution,[],[f70,f1450])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 58
% Passive clauses: 97
% Generated clauses: 1381
% Final active clauses: 49
% Final passive clauses: 33
% Input formulas: 8
% Initial clauses: 28
% 
% Duplicate literals: 130
% Trivial inequalities: 12
% Fw subsumption resolutions: 44
% Fw demodulations: 132
% Bw demodulations: 7
% Condensations: 145
% Global subsumptions: 1
% 
% Simple tautologies: 50
% Equational tautologies: 20
% Forward subsumptions: 590
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 38
% Forward superposition: 368
% Backward superposition: 298
% Self superposition: 32
% Equality factoring: 30
% Equality resolution: 12
% 
% Split clauses: 20
% Split components: 46
% SAT solver clauses: 194
% SAT solver unit clauses: 35
% SAT solver binary clauses: 24
% SAT solver learnt clauses: 5
% SAT solver learnt literals: 4
% 
% Sat splits: 20
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 187
% TWLsolver calls for satisfiability: 346
% 
% Memory used [KB]: 1791
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 0.697 s
