Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (101022)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1038
% Passive clauses: 7667
% Generated clauses: 45377
% Final active clauses: 984
% Final passive clauses: 6219
% Input formulas: 515
% Initial clauses: 908
% 
% Duplicate literals: 145
% Trivial inequalities: 80
% Fw subsumption resolutions: 1702
% Fw demodulations: 8204
% Bw demodulations: 53
% 
% Simple tautologies: 335
% Equational tautologies: 25
% Forward subsumptions: 27077
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 6592
% Factoring: 409
% Forward superposition: 14516
% Backward superposition: 12528
% Self superposition: 51
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 353
% Split components: 708
% SAT solver clauses: 519
% SAT solver unit clauses: 26
% SAT solver binary clauses: 117
% 
% Sat splits: 353
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 519
% TWLsolver calls for satisfiability: 366
% 
% Memory used [KB]: 22899
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (101035)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 626
% Passive clauses: 3257
% Generated clauses: 29117
% Final active clauses: 608
% Final passive clauses: 2466
% Input formulas: 515
% Initial clauses: 908
% 
% Duplicate literals: 102
% Trivial inequalities: 28
% Fw subsumption resolutions: 840
% Fw demodulations: 3437
% Bw demodulations: 181
% Condensations: 127
% Global subsumptions: 38
% 
% Simple tautologies: 339
% Equational tautologies: 16
% Forward subsumptions: 16867
% Fw demodulations to eq. taut.: 10
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 2597
% Factoring: 266
% Forward superposition: 10135
% Backward superposition: 6992
% Self superposition: 79
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 5006
% SAT solver unit clauses: 1208
% SAT solver binary clauses: 242
% SAT solver learnt clauses: 76
% SAT solver learnt literals: 16
% 
% Sat splits: 11
% 
% TWLsolver clauses: 4854
% TWLsolver calls for satisfiability: 5031
% 
% Memory used [KB]: 24818
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f103444,plain,(
  $false),
  inference(subsumption_resolution,[],[f48192,f48938])).
fof(f48938,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.combin.C_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f48523,f2005])).
fof(f2005,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.|48|_0'),s(X0,X2)))) )),
  inference(cnf_transformation,[],[f777])).
fof(f777,plain,(
  ! [X0,X1,X2] : s(X0,X2) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.|48|_0'),s(X0,X2)))),
  inference(flattening,[],[f776])).
fof(f776,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X2) = s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X1),s('type.num.num','const.num.|48|_0'),s(X0,X2)))),
  inference(rectify,[],[f300])).
fof(f300,axiom,(
  ! [X8] : ! [X10,X19] : s(X8,X19) = s(X8,'const.arithmetic.FUNPOW_3'(s(fun(X8,X8),X10),s('type.num.num','const.num.|48|_0'),s(X8,X19)))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.arithmetic.FUNPOW|split|0')).
fof(f48523,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.combin.C_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1),s(X0,'const.arithmetic.FUNPOW_3'(s(fun(X0,X0),X2),s('type.num.num','const.num.|48|_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f2005,f2952])).
fof(f2952,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.combin.C_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2),s(X0,X1)))) | s(X0,X1) != s(X0,X2)) )),
  inference(backward_demodulation,[],[f2556,f2422])).
fof(f2422,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f1641])).
fof(f1641,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f1149])).
fof(f1149,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f381])).
fof(f381,axiom,(
  ! [X71,X72,X73] : (p(s(bool,happ(s(fun(X71,bool),happ(s(fun(X71,fun(X71,bool)),'=_0'),s(X71,X72))),s(X71,X73)))) <=> s(X71,X72) = s(X71,X73))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2',arity_0_HL_EQ)).
fof(f2556,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f1177])).
fof(f1177,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f1176])).
fof(f1176,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,'const.combin.C_3'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f215])).
fof(f215,axiom,(
  ! [X54,X8,X20] : ! [X10,X19,X21] : s(X54,'const.combin.C_3'(s(fun(X8,fun(X20,X54)),X10),s(X20,X19),s(X8,X21))) = s(X54,happ(s(fun(X20,X54),happ(s(fun(X8,fun(X20,X54)),X10),s(X8,X21))),s(X20,X19)))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.combin.C_THM')).
fof(f48192,plain,(
  ~p(s(bool,'const.combin.C_3'(s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),bool)),'=_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))))))),
  inference(forward_demodulation,[],[f48191,f1769])).
fof(f1769,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f560])).
fof(f560,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f374])).
fof(f374,axiom,(
  ! [X6] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.numeral.numeral_suc|split|1')).
fof(f48191,plain,(
  ~p(s(bool,'const.combin.C_3'(s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),bool)),'=_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17))))))),
  inference(forward_demodulation,[],[f47967,f2190])).
fof(f2190,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))) )),
  inference(cnf_transformation,[],[f980])).
fof(f980,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X0),s('type.list.list'('type.num.num'),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num',X6),s('type.list.list'('type.num.num'),X7)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.rich_list.COUNT_LIST_AUX_def|split|1')).
fof(f47967,plain,(
  ~p(s(bool,'const.combin.C_3'(s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),bool)),'=_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))))))))),
  inference(unit_resulting_resolution,[],[f2667,f2951])).
fof(f2951,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.combin.C_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X2),s(X0,X1)))) | s(X0,X1) = s(X0,X2)) )),
  inference(backward_demodulation,[],[f2556,f2421])).
fof(f2421,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f1641])).
fof(f2667,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17)))))),
  inference(forward_demodulation,[],[f2663,f1734])).
fof(f1734,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f525])).
fof(f525,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X19] : s('type.num.num',X19) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X19)))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.arithmetic.NUMERAL_DEF')).
fof(f2663,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))),s('type.list.list'('type.num.num'),sK17)))))),
  inference(backward_demodulation,[],[f1734,f1707])).
fof(f1707,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17)))))),
  inference(cnf_transformation,[],[f1392])).
fof(f1392,plain,(
  s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK16))))),s('type.list.list'('type.num.num'),sK17)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f1241])).
fof(f1241,plain,(
  ? [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1))) != s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1)))))),
  inference(ennf_transformation,[],[f517])).
fof(f517,plain,(
  ~! [X0,X1] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.list.list'('type.num.num'),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7))) = s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_AUX_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),'const.list.CONS_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.list.list'('type.num.num'),X7)))))),
  file('thm.rich_list.COUNT_LIST_AUX_def_compute|split|2','thm.rich_list.COUNT_LIST_AUX_def_compute|split|2')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 996
% Passive clauses: 15726
% Generated clauses: 106854
% Final active clauses: 675
% Final passive clauses: 7226
% Input formulas: 515
% Initial clauses: 908
% 
% Duplicate literals: 15
% Trivial inequalities: 122
% Fw subsumption resolutions: 2883
% Fw demodulations: 22556
% Bw demodulations: 5655
% Condensations: 53
% Global subsumptions: 8
% 
% Simple tautologies: 214
% Equational tautologies: 76
% Forward subsumptions: 59942
% Fw demodulations to eq. taut.: 1087
% Bw demodulations to eq. taut.: 64
% 
% Unit resulting resolution: 25743
% Factoring: 1
% Forward superposition: 23835
% Backward superposition: 19763
% Self superposition: 134
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 17
% Split components: 34
% SAT solver clauses: 18306
% SAT solver unit clauses: 8430
% SAT solver binary clauses: 8065
% 
% Sat splits: 17
% Sat splitting refutations: 2536
% 
% Memory used [KB]: 63069
% Time elapsed: 3.602 s
% ------------------------------
% ------------------------------
% Success in time 4.95 s
