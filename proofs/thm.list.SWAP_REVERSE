Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f257,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f255,f92,f159,f157,f254,f93,f160,f158])).
fof(f158,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) | $spl1),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f160,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl3),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f93,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  (s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1)))) & (s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f61])).
fof(f61,plain,(
  ? [X0,X1,X2] : ((s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))) & (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f49])).
fof(f49,plain,(
  ? [X0,X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <~> s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0,X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X7))))),
  file('thm.list.SWAP_REVERSE','thm.list.SWAP_REVERSE')).
fof(f254,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f253,f158])).
fof(f253,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) | $spl2),
  inference(superposition,[],[f128,f159])).
fof(f128,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1] : s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),'const.list.REVERSE_1'(s('type.list.list'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X17] : s('type.list.list'(X6),X17) = s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),'const.list.REVERSE_1'(s('type.list.list'(X6),X17)))))),
  file('thm.list.SWAP_REVERSE','thm.list.REVERSE_REVERSE')).
fof(f157,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) | $spl0),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f159,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl2),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f92,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f62])).
fof(f255,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.REVERSE_1'(s('type.list.list'(sK0),sK1))) | $spl0),
  inference(superposition,[],[f128,f157])).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 17
% Passive clauses: 41
% Generated clauses: 157
% Final active clauses: 12
% Final passive clauses: 13
% Input formulas: 22
% Initial clauses: 62
% 
% Duplicate literals: 5
% Trivial inequalities: 2
% Fw subsumption resolutions: 6
% Bw demodulations: 1
% 
% Simple tautologies: 33
% Equational tautologies: 5
% Forward subsumptions: 33
% 
% Binary resolution: 17
% Factoring: 1
% Forward superposition: 23
% Backward superposition: 18
% Self superposition: 7
% Equality factoring: 2
% Equality resolution: 1
% 
% Split clauses: 23
% Split components: 48
% SAT solver clauses: 41
% SAT solver unit clauses: 7
% SAT solver binary clauses: 26
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 23
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 39
% TWLsolver calls for satisfiability: 14
% 
% Memory used [KB]: 639
% Time elapsed: 0.014 s
% ------------------------------
% ------------------------------
% Success in time 0.016 s
