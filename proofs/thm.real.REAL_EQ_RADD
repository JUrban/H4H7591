Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.real
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.real
% SZS output start Proof for thm.real
fof(f335,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f334,f22,f33,f31,f311,f21,f32,f30])).
fof(f30,plain,(
  s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) | $spl0),
  inference(cnf_transformation,[],[f30_D])).
fof(f30_D,plain,(
  s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f32,plain,(
  s('type.realax.real',sK0) = s('type.realax.real',sK1) | $spl2),
  inference(cnf_transformation,[],[f32_D])).
fof(f32_D,plain,(
  s('type.realax.real',sK0) = s('type.realax.real',sK1) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f21,plain,(
  s('type.realax.real',sK0) = s('type.realax.real',sK1) | s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2)))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) | s('type.realax.real',sK0) = s('type.realax.real',sK1)) & (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) | s('type.realax.real',sK0) != s('type.realax.real',sK1))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2] : ((s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X2))) | s('type.realax.real',X0) = s('type.realax.real',X1)) & (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X2))) | s('type.realax.real',X0) != s('type.realax.real',X1)))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X2))) <~> s('type.realax.real',X0) = s('type.realax.real',X1))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X2))) <=> s('type.realax.real',X0) = s('type.realax.real',X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X6),s('type.realax.real',X8))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X7),s('type.realax.real',X8))) <=> s('type.realax.real',X6) = s('type.realax.real',X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X6),s('type.realax.real',X8))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X7),s('type.realax.real',X8))) <=> s('type.realax.real',X6) = s('type.realax.real',X7))),
  file('thm.real.REAL_EQ_RADD','thm.real.REAL_EQ_RADD')).
fof(f311,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f309,f33])).
fof(f309,plain,(
  s('type.realax.real',sK0) = s('type.realax.real',sK1) | $spl0),
  inference(equality_resolution,[],[f288])).
fof(f288,plain,(
  ( ! [X0] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',sK2))) | s('type.realax.real',sK1) = s('type.realax.real',X0)) ) | $spl0),
  inference(superposition,[],[f252,f30])).
fof(f252,plain,(
  ( ! [X2,X3,X1] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X2),s('type.realax.real',X1))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X3),s('type.realax.real',X1))) | s('type.realax.real',X2) = s('type.realax.real',X3)) )),
  inference(superposition,[],[f208,f26])).
fof(f26,plain,(
  ( ! [X0,X1] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X0)))) )),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ! [X0,X1] : s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X6),s('type.realax.real',X7))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X7),s('type.realax.real',X6)))),
  file('thm.real.REAL_EQ_RADD','thm.realax.REAL_ADD_SYM')).
fof(f208,plain,(
  ( ! [X2,X3,X1] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X1),s('type.realax.real',X3))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X2),s('type.realax.real',X1))) | s('type.realax.real',X2) = s('type.realax.real',X3)) )),
  inference(superposition,[],[f28,f26])).
fof(f28,plain,(
  ( ! [X2,X0,X1] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) | s('type.realax.real',X1) = s('type.realax.real',X2)) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1,X2] : ((s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) | s('type.realax.real',X1) = s('type.realax.real',X2)) & (s('type.realax.real',X1) != s('type.realax.real',X2) | s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2)))))),
  inference(nnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X1))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X0),s('type.realax.real',X2))) <=> s('type.realax.real',X1) = s('type.realax.real',X2))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6,X7,X8] : (s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X6),s('type.realax.real',X7))) = s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',X6),s('type.realax.real',X8))) <=> s('type.realax.real',X7) = s('type.realax.real',X8))),
  file('thm.real.REAL_EQ_RADD','thm.real.REAL_EQ_LADD')).
fof(f31,plain,(
  s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) | $spl1),
  inference(cnf_transformation,[],[f31_D])).
fof(f31_D,plain,(
  s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f33,plain,(
  s('type.realax.real',sK0) != s('type.realax.real',sK1) | $spl3),
  inference(cnf_transformation,[],[f33_D])).
fof(f33_D,plain,(
  s('type.realax.real',sK0) != s('type.realax.real',sK1) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f22,plain,(
  s('type.realax.real',sK0) != s('type.realax.real',sK1) | s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK1),s('type.realax.real',sK2)))),
  inference(cnf_transformation,[],[f18])).
fof(f334,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f333])).
fof(f333,plain,(
  s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) != s('type.realax.real','const.realax.real_add_2'(s('type.realax.real',sK0),s('type.realax.real',sK2))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f31,f32])).
% SZS output end Proof for thm.real
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 22
% Passive clauses: 73
% Generated clauses: 299
% Final active clauses: 15
% Final passive clauses: 30
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 42
% Trivial inequalities: 3
% Fw subsumption resolutions: 1
% Fw demodulations: 20
% 
% Simple tautologies: 16
% Equational tautologies: 18
% Forward subsumptions: 129
% 
% Binary resolution: 4
% Forward superposition: 106
% Backward superposition: 49
% Self superposition: 28
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 8
% SAT solver unit clauses: 2
% SAT solver binary clauses: 5
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 3
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 6
% TWLsolver calls for satisfiability: 4
% 
% Memory used [KB]: 767
% Time elapsed: 0.019 s
% ------------------------------
% ------------------------------
% Success in time 0.021 s
