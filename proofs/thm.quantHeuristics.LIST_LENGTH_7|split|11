Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% (90563)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 517
% Passive clauses: 5977
% Generated clauses: 48430
% Final active clauses: 388
% Final passive clauses: 4812
% Input formulas: 69
% Initial clauses: 90
% 
% Duplicate literals: 540
% Trivial inequalities: 247
% Fw subsumption resolutions: 1764
% Fw demodulations: 8628
% Bw demodulations: 115
% 
% Simple tautologies: 323
% Equational tautologies: 43
% Forward subsumptions: 30623
% Fw demodulations to eq. taut.: 18
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 253
% Factoring: 1
% Forward superposition: 16806
% Backward superposition: 19619
% Self superposition: 128
% Equality factoring: 74
% Equality resolution: 17
% 
% Split clauses: 175
% Split components: 350
% SAT solver clauses: 451
% SAT solver unit clauses: 12
% SAT solver binary clauses: 52
% 
% Sat splits: 175
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 451
% TWLsolver calls for satisfiability: 102
% 
% Memory used [KB]: 28528
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.quantHeuristics
% (90578)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 271
% Passive clauses: 2169
% Generated clauses: 20216
% Final active clauses: 195
% Final passive clauses: 1479
% Input formulas: 69
% Initial clauses: 90
% 
% Duplicate literals: 139
% Trivial inequalities: 270
% Fw subsumption resolutions: 375
% Fw demodulations: 3347
% Bw demodulations: 450
% Condensations: 117
% 
% Simple tautologies: 39
% Equational tautologies: 22
% Forward subsumptions: 11005
% Fw demodulations to eq. taut.: 5
% Bw demodulations to eq. taut.: 39
% 
% Binary resolution: 129
% Factoring: 1
% Forward superposition: 5424
% Backward superposition: 7537
% Self superposition: 89
% Equality factoring: 32
% Equality resolution: 16
% 
% Split clauses: 52
% Split components: 104
% SAT solver clauses: 2808
% SAT solver unit clauses: 136
% SAT solver binary clauses: 45
% 
% Sat splits: 52
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 2808
% TWLsolver calls for satisfiability: 482
% 
% Memory used [KB]: 26481
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.quantHeuristics
% (90593)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1188
% Passive clauses: 14548
% Generated clauses: 124505
% Final active clauses: 223
% Final passive clauses: 2097
% Input formulas: 69
% Initial clauses: 90
% Discarded non-redundant clauses: 29565
% 
% Duplicate literals: 531
% Trivial inequalities: 2184
% Fw subsumption resolutions: 2002
% Fw demodulations: 32621
% Bw demodulations: 1227
% Condensations: 489
% Global subsumptions: 22
% 
% Simple tautologies: 142
% Equational tautologies: 190
% Forward subsumptions: 63621
% Fw demodulations to eq. taut.: 1245
% Bw demodulations to eq. taut.: 29
% 
% Unit resulting resolution: 19197
% Factoring: 1
% Forward superposition: 20125
% Backward superposition: 44889
% Self superposition: 182
% Equality factoring: 104
% Equality resolution: 46
% 
% Split clauses: 127
% Split components: 254
% SAT solver clauses: 14885
% SAT solver unit clauses: 162
% SAT solver binary clauses: 932
% 
% Sat splits: 127
% Sat splitting refutations: 59
% 
% Memory used [KB]: 101192
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f109641,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f164,f168,f166,f120,f172,f170,f173,f174,f288,f289,f294,f291,f297,f302,f191,f192,f307,f312,f313,f318,f228,f230,f232,f334,f234,f473,f476,f293,f475,f479,f482,f299,f483,f484,f304,f371,f372,f309,f375,f376,f315,f379,f380,f486,f286,f416,f418,f420,f513,f422,f335,f554,f555,f570,f571,f574,f575,f563,f590,f609,f608,f592,f612,f611,f595,f614,f613,f597,f616,f615,f599,f618,f617,f601,f619,f603,f621,f605,f623,f607,f627,f625,f652,f671,f669,f957,f583,f1056,f581,f1206,f1210,f1209,f1169,f512,f1174,f333,f1175,f1214,f1181,f1216,f1217,f1218,f1221,f1718,f1719,f306,f1720,f1721,f1731,f1768,f1896,f1897,f1918,f1916,f1901,f1902,f1921,f1905,f1906,f1924,f1922,f2003,f2061,f2059,f2004,f2065,f2063,f2005,f2069,f2067,f2006,f2073,f2071,f2007,f2077,f2075,f2008,f2081,f2079,f2009,f2085,f2083,f2012,f2089,f2013,f2092,f2014,f2095,f2015,f2098,f2016,f2018,f2321,f2320,f2325,f2400,f2399,f2404,f2882,f2883,f1648,f2894,f3569,f3571,f1484,f1578,f1576,f3554,f3622,f4733,f4734,f4746,f4773,f5576,f5578,f5601,f5602,f1765,f5652,f5795,f5896,f6400,f6401,f6451,f6449,f6404,f6405,f6452,f6419,f6454,f6463,f6657,f6656,f6661,f7379,f7866,f7847,f7868,f7870,f7984,f8024,f8129,f8097,f8131,f8133,f8152,f8153,f1072,f8421,f8422,f8453,f8451,f8468,f8469,f8748,f8761,f8759,f8749,f8760,f8758,f8821,f8822,f8841,f8970,f8973,f8972,f8161,f9048,f9052,f9051,f8984,f8985,f9053,f8997,f9062,f6009,f5898,f9108,f9236,f9371,f9377,f9381,f9384,f9478,f9395,f9402,f9631,f9637,f9641,f9644,f9771,f9655,f9662,f336,f9875,f9876,f9886,f9888,f9925,f9889,f9919,f9930,f9933,f9911,f9939,f10623,f10653,f10769,f9941,f10950,f10953,f8971,f10952,f11955,f11956,f11999,f11959,f11960,f12002,f12001,f11961,f11962,f11975,f12005,f12534,f12537,f12543,f12536,f12547,f12549,f958,f13032,f13031,f13034,f14909,f14910,f301,f14846,f14847,f14911,f14859,f9055,f14918,f15114,f15234,f15346,f15347,f1766,f15358,f15420,f1773,f15799,f15801,f317,f15800,f15728,f15729,f15802,f15739,f15809,f16358,f16359,f16418,f16373,f16420,f16432,f16444,f16447,f16446,f16633,f16634,f16644,f9464,f17075,f17076,f481,f17262,f15236,f17446,f17875,f17876,f17886,f15804,f19060,f19061,f19070,f9752,f19846,f19883,f19881,f19901,f20804,f20805,f20854,f20971,f20972,f21018,f11997,f20977,f20978,f12003,f20994,f21020,f12013,f21892,f21893,f21909,f21945,f21954,f21957,f21955,f21959,f21932,f21961,f10781,f22541,f2104,f22544,f2101,f24005,f24009,f23973,f24008,f25161,f25162,f25201,f25178,f25203,f25215,f30200,f30203,f30216,f30202,f30556,f30568,f30567,f30560,f30569,f7394,f31344,f31392,f31391,f31967,f31968,f32025,f32024,f31969,f31970,f32026,f31986,f32028,f32042,f32054,f32058,f32056,f32060,f32062,f32719,f32720,f2090,f32722,f32723,f32725,f32726,f32728,f32729,f32731,f32732,f32711,f624,f32733,f32734,f32736,f32735,f32890,f32891,f32942,f32897,f32898,f32945,f32934,f32935,f32954,f33095,f33097,f33280,f33281,f33330,f33287,f33288,f33331,f33324,f33325,f33336,f33813,f33823,f33822,f33818,f33824,f22560,f36200,f36204,f36209,f36213,f36215,f36216,f36221,f36224,f36226,f36228,f36229,f36234,f36236,f36240,f36243,f36242,f36244,f36245,f36247,f36253,f36256,f36257,f36258,f36260,f36261,f36263,f36266,f36267,f36271,f36270,f36274,f9927,f36280,f36281,f36265,f36282,f36269,f36284,f36283,f36273,f36286,f36275,f9923,f36291,f36293,f36294,f36296,f36298,f36303,f36307,f36309,f36310,f36305,f36311,f36206,f36312,f36315,f36316,f36317,f36319,f36320,f36322,f36325,f36328,f36327,f36329,f36211,f36330,f36332,f36335,f36218,f36337,f36202,f36339,f36341,f36342,f36346,f36347,f36348,f36350,f36354,f36235,f36356,f36358,f36344,f36360,f36238,f36361,f36203,f36364,f36340,f36223,f36365,f36367,f36369,f36212,f36314,f36371,f36373,f36375,f36377,f36378,f36239,f36231,f36380,f36383,f36385,f36386,f36207,f36382,f36387,f36297,f36255,f17732,f17727,f15416,f15412,f311,f36390,f37230,f37231,f37232,f38246,f38247,f2093,f38249,f38250,f38235,f622,f38251,f38252,f38254,f38253,f38818,f38827,f38824,f38830,f38916,f38918,f38917,f38862,f38863,f38920,f38922,f38926,f38923,f38928,f38932,f38934,f38936,f38939,f38941,f38944,f33329,f38949,f38951,f38953,f32939,f38955,f38957,f38958,f38959,f38961,f38963,f38971,f38972,f38976,f38977,f38979,f38983,f38990,f38991,f287,f38906,f38996,f38994,f39388,f39391,f39389,f39393,f39396,f39394,f39549,f39560,f39559,f39555,f39561,f39556,f39563,f40195,f40207,f40206,f40201,f40208,f40202,f40209,f40203,f40211,f40429,f40442,f40441,f40435,f40443,f40436,f40444,f39562,f40437,f40445,f40210,f40438,f40447,f40446,f40626,f40737,f40633,f40640,f2096,f40738,f40641,f2099,f40739,f40642,f2102,f40740,f40643,f2105,f40741,f40646,f40742,f40649,f40743,f40746,f40674,f40753,f40675,f40755,f40676,f40757,f40759,f40765,f40690,f40767,f40695,f40768,f40756,f40696,f40769,f40754,f40697,f40770,f40774,f40760,f40782,f40761,f40766,f40712,f40783,f41171,f620,f38829,f41603,f41555,f41606,f41556,f41607,f41562,f41563,f41608,f41599,f41600,f41613,f41815,f41767,f41818,f41768,f32944,f41819,f41774,f41775,f32947,f41820,f41811,f41812,f41825,f32953,f42271,f42272,f38921,f42329,f42330,f42332,f42331,f42333,f42335,f42336,f42338,f42339,f42341,f42342,f41817,f42344,f42346,f42347,f41605,f42348,f32941,f42350,f42351,f42352,f42353,f42355,f42360,f42361,f42363,f38930,f42364,f42365,f38981,f42367,f43334,f43336,f43341,f43343,f43481,f43484,f43482,f45386,f45388,f45393,f38925,f45395,f45536,f45539,f45537,f48636,f48637,f48701,f1919,f48638,f48639,f48702,f48650,f48709,f48654,f48711,f48716,f48657,f48704,f48719,f48730,f48733,f48731,f47940,f48739,f47922,f47921,f48741,f46999,f17951,f46981,f46980,f17946,f45782,f45781,f48758,f48824,f48825,f48826,f48827,f48893,f48894,f48895,f48896,f42595,f42594,f48897,f48898,f42492,f48905,f42476,f42475,f48907,f39335,f48918,f39319,f39318,f48920,f39265,f36363,f37960,f37959,f48923,f37373,f37372,f48900,f48924,f48925,f48926,f48927,f48930,f48933,f48934,f36523,f36522,f48936,f48937,f48939,f48938,f48940,f48942,f48941,f34077,f34076,f33863,f48953,f33847,f33846,f48955,f33802,f33801,f48957,f33725,f33724,f48960,f32642,f32370,f48975,f48979,f48983,f48981,f48984,f48985,f32064,f25234,f25233,f48989,f25109,f48992,f25093,f25092,f48995,f25040,f48998,f25024,f25023,f49000,f24971,f49003,f24955,f24954,f49006,f49011,f49015,f49013,f23762,f23760,f23453,f23122,f22937,f49026,f49041,f49042,f22399,f48972,f22282,f49051,f22266,f22265,f49053,f22203,f49029,f4780,f49055,f49057,f49056,f49062,f49065,f49064,f21843,f21842,f49066,f21584,f21583,f20855,f49068,f49072,f49074,f49076,f49077,f20465,f20464,f49078,f49079,f19943,f19941,f19939,f578,f2896,f19937,f2895,f19372,f19371,f19308,f19307,f49116,f18886,f18885,f49119,f49129,f49132,f49131,f49133,f49136,f49135,f49139,f49141,f49140,f16165,f49143,f16150,f16149,f49145,f49146,f49149,f49148,f49150,f49153,f49152,f14691,f49155,f14678,f14677,f49157,f14021,f49162,f14008,f14007,f49164,f13535,f49167,f13522,f13521,f49169,f49172,f49174,f49173,f13056,f13055,f49176,f12760,f49178,f12747,f12746,f49180,f49181,f49184,f49183,f49187,f49189,f49188,f12322,f49191,f12309,f12308,f49193,f12139,f49195,f12126,f12125,f49197,f11932,f11931,f49198,f11470,f24020,f10939,f10938,f49202,f10869,f10868,f49203,f10783,f10782,f49205,f10514,f49207,f10501,f10500,f49209,f10342,f49211,f10329,f10328,f49213,f49214,f49217,f49216,f49218,f49221,f49220,f10062,f10061,f49222,f49225,f49228,f49227,f8962,f8961,f49232,f8884,f8883,f24006,f8763,f8762,f49234,f49245,f49246,f7645,f49250,f7631,f7630,f49251,f6927,f21949,f6913,f6912,f21943,f6516,f49271,f12544,f49276,f49279,f49278,f2801,f49285,f2791,f2790,f49286,f2702,f49288,f2692,f2691,f49289,f2604,f49292,f49295,f49294,f1949,f1948,f1930,f1929,f49297,f579,f50164,f50166,f51306,f51308,f1219,f55802,f55805,f55803,f57602,f57605,f57603,f59029,f59031,f59033,f63590,f63593,f63591,f63676,f63677,f63691,f63738,f65393,f65396,f65394,f65870,f65871,f65889,f65940,f65950,f65951,f66165,f66168,f66230,f66169,f66170,f66232,f66172,f49291,f66253,f66255,f66254,f66257,f66208,f66258,f49017,f66263,f14469,f14470,f66271,f14514,f14515,f66272,f16623,f16624,f17773,f17774,f66278,f18185,f18186,f66281,f18233,f18234,f66282,f18528,f18529,f19301,f19302,f66289,f19450,f19451,f21290,f21291,f66293,f21435,f21436,f24560,f24561,f66297,f31423,f31424,f39053,f39054,f40460,f40461,f66314,f40928,f40929,f66316,f41758,f41759,f66318,f42701,f42702,f66319,f42752,f42753,f66320,f45648,f45649,f66327,f45701,f45702,f66328,f47822,f47823,f66338,f47878,f47879,f66339,f52119,f52120,f66343,f52176,f52177,f66344,f58130,f58131,f66358,f60312,f60313,f66359,f60373,f60374,f66360,f66033,f66034,f66370,f561,f66097,f66098,f66274,f66371,f66380,f66382,f66381,f62101,f62100,f66383,f61324,f61323,f66385,f66295,f60125,f60124,f66404,f59215,f59214,f48950,f32703,f32702,f66276,f32250,f32249,f66553,f21831,f21830,f66587,f18737,f18736,f66595,f18723,f18722,f66596,f17940,f17939,f66597,f17906,f17905,f66598,f66604,f17234,f66608,f17228,f66610,f17069,f17068,f66611,f17047,f17046,f66612,f16409,f16408,f66622,f66291,f16395,f16394,f66623,f15793,f15792,f66630,f66299,f15759,f15758,f66600,f66631,f15089,f66635,f15083,f66637,f14903,f14902,f66638,f66309,f14881,f14880,f66614,f66639,f14386,f14385,f66648,f13637,f13636,f66657,f4771,f10114,f10113,f66695,f8839,f9657,f9762,f9652,f9766,f9397,f9472,f9392,f1213,f9475,f68454,f68455,f16701,f68468,f66606,f16708,f69226,f69227,f69241,f69294,f69243,f69296,f9050,f69245,f69289,f69299,f69301,f69534,f69535,f9917,f69553,f66542,f9928,f69614,f69616,f69682,f69683,f69701,f66285,f71895,f71898,f71896,f78248,f78249,f78335,f78333,f78252,f78253,f78336,f78271,f78338,f78353,f78931,f9773,f78934,f78997,f78935,f9480,f78936,f78999,f78938,f66234,f49260,f79458,f79515,f79514,f79973,f79974,f79992,f80053,f80371,f80372,f80390,f80449,f80993,f80994,f81065,f81063,f80997,f80998,f81068,f81067,f81839,f81840,f81858,f81927,f83257,f83312,f83261,f83259,f83651,f83657,f83660,f83663,f83596,f83597,f83598,f83599,f83653,f84975,f85026,f84989,f85030,f85032,f85028,f9931,f85199,f85203,f87192,f87195,f87193,f87724,f88365,f87725,f88368,f87726,f88369,f87727,f87751,f88373,f87768,f87769,f88375,f87770,f88377,f88428,f88432,f87917,f88436,f88013,f88029,f88498,f88030,f88032,f88371,f88036,f88506,f88037,f88039,f88510,f88528,f88539,f88507,f88098,f88111,f88367,f88617,f88207,f88619,f88500,f88255,f88288,f88508,f88314,f88491,f88636,f88341,f88342,f89502,f89504,f89004,f88430,f89508,f89574,f89584,f89576,f89185,f88543,f89342,f89375,f88630,f89575,f89428,f88647,f89429,f88651,f89931,f89930,f485,f90717,f90720,f83658,f90722,f90724,f83661,f90663,f83665,f90664,f83652,f83654,f91150,f91158,f91154,f91152,f91897,f91896,f91903,f1207,f97074,f89658,f97090,f97131,f88489,f97158,f9756,f97164,f66226,f9468,f97179,f89672,f97195,f97234,f88649,f97243,f97244,f49115,f97311,f97306,f97307,f97342,f97341,f97668,f97730,f97684,f97731,f98385,f38828,f40736,f99113,f99175,f99129,f88530,f99176,f99276,f9774,f99280,f99336,f99282,f9481,f99284,f85254,f99339,f100847,f100850,f100853,f100849,f100854,f100386,f100402,f100897,f100412,f100893,f100902,f100477,f100927,f100925,f100977,f100981,f100979,f100651,f100992,f100989,f100994,f100746,f101003,f100766,f101013,f100891,f102647,f102648,f69759,f102666,f102729,f69774,f102829,f102830,f80447,f102848,f102908,f80464,f102955,f102969,f102959,f102957,f105854,f105857,f105855,f106292,f106295,f106294,f9049,f107737,f107444,f107762,f107760,f109633,f109634])).
fof(f109634,plain,(
  $false | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f109624,f168])).
fof(f109624,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl5),
  inference(superposition,[],[f169,f135])).
fof(f135,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X26,X23] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X26))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X23)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.arithmetic.ADD_SYM')).
fof(f169,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl5),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f109633,plain,(
  $false | ($spl2 | $spl5)),
  inference(subsumption_resolution,[],[f109623,f168])).
fof(f109623,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl5),
  inference(superposition,[],[f169,f135])).
fof(f107760,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | $spl1373),
  inference(cnf_transformation,[],[f107760_D])).
fof(f107760_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) <=> ~$spl1373),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1373])])).
fof(f107762,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl1375),
  inference(cnf_transformation,[],[f107762_D])).
fof(f107762_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))))) <=> ~$spl1375),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1375])])).
fof(f107444,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | $spl653),
  inference(superposition,[],[f39391,f161])).
fof(f161,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),X8))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.list.LENGTH_NIL')).
fof(f107737,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f107735,f170])).
fof(f107735,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(trivial_inequality_removal,[],[f107725])).
fof(f107725,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f23250,f1466])).
fof(f1466,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) | $spl4),
  inference(equality_resolution,[],[f391])).
fof(f391,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,sK1,X0))))) ) | $spl4),
  inference(superposition,[],[f123,f170])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X2,X1,X0)))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),sK11(X2,X1,X0)))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X11))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X11))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(rectify,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X9)))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.quantHeuristics.LIST_LENGTH_7|split|10')).
fof(f23250,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,X0,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0)))) )),
  inference(equality_resolution,[],[f606])).
fof(f606,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X0) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(X0,X1,sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f163,f124])).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X2,X1,X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X2,X1,X0)),s('type.list.list'(X0),sK11(X2,X1,X0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f163,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X3))))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) )),
  inference(subsumption_resolution,[],[f122,f125])).
fof(f125,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f122,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X3))))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) & s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),X3)))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f107])).
fof(f107,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X11))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X14),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X15),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X18),s('type.list.list'(X0),X11))))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))))),
  inference(rectify,[],[f106])).
fof(f106,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | ! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3))))))))))))))))))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <~> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) <=> ? [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X9),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X10),s('type.list.list'(X0),X3)))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X9)))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) <=> ? [X9,X10,X11,X12,X13,X14,X15,X16] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X9))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X10),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X11),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X14),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X15),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X16),s('type.list.list'(X6),X9)))))))))))))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.quantHeuristics.LIST_LENGTH_7|split|11')).
fof(f9049,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl254),
  inference(cnf_transformation,[],[f9049_D])).
fof(f9049_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f106294,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1371),
  inference(cnf_transformation,[],[f106294_D])).
fof(f106294_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl1371),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1371])])).
fof(f106295,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl41),
  inference(forward_demodulation,[],[f106201,f140])).
fof(f140,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f50])).
fof(f50,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|13')).
fof(f106201,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl41),
  inference(superposition,[],[f90108,f130])).
fof(f130,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X23] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X23))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|18')).
fof(f90108,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl41),
  inference(superposition,[],[f485,f126])).
fof(f126,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X23,X26] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26))) <=> s('type.num.num',X23) = s('type.num.num',X26))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|19')).
fof(f106292,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl41),
  inference(forward_demodulation,[],[f106200,f140])).
fof(f106200,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl41),
  inference(superposition,[],[f90108,f132])).
fof(f132,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X23] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X23))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|17')).
fof(f105855,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0))))))))))))))))) ) | $spl1366),
  inference(cnf_transformation,[],[f105855_D])).
fof(f105855_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0))))))))))))))))) ) <=> ~$spl1366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1366])])).
fof(f105857,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))))) | $spl1369),
  inference(cnf_transformation,[],[f105857_D])).
fof(f105857_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))))) <=> ~$spl1369),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1369])])).
fof(f105854,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0))))))))))))))))) ) | ($spl4 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f105853,f37300])).
fof(f37300,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f5652,f8452])).
fof(f8452,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl242),
  inference(cnf_transformation,[],[f8452_D])).
fof(f8452_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f105853,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0))))))))))))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f105724,f26854])).
fof(f26854,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f26523])).
fof(f26523,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f5915,f26494])).
fof(f26494,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f26486])).
fof(f26486,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f5915,f1466])).
fof(f5915,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20(sK1,'const.num.|48|_0',X3,X2))))) ) | $spl208),
  inference(superposition,[],[f158,f5808])).
fof(f5808,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl208),
  inference(trivial_inequality_removal,[],[f5678])).
fof(f5678,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl208),
  inference(superposition,[],[f5652,f131])).
fof(f131,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f113])).
fof(f158,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)),s('type.list.list'(X0),sK20(X3,X2,X1,X0)))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20])],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X6,X7] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X6))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X7))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X6),s('type.list.list'(X0),X7))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3] : ((s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))))) & (! [X4,X5] : (s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))),
  inference(nnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1,X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) <=> ? [X4,X5] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4))) & s('type.num.num',X3) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) & s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X8,X17,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) <=> ? [X19,X20] : (s('type.num.num',X17) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X19))) & s('type.num.num',X18) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) & s('type.list.list'(X6),X8) = s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X19),s('type.list.list'(X6),X20)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.list.LENGTH_EQ_SUM')).
fof(f105724,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0))))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f593,f105557])).
fof(f105557,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f104815])).
fof(f104815,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)) | ($spl4 | $spl208)),
  inference(superposition,[],[f161,f27907])).
fof(f27907,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f27572])).
fof(f27572,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f5914,f26854])).
fof(f5914,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(sK1,'const.num.|48|_0',X1,X0))))) ) | $spl208),
  inference(superposition,[],[f157,f5808])).
fof(f157,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X2) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f593,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X25,X34,X32] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X25,X26,X27,sK0)),s('type.list.list'(sK0),sK20(X25,X26,X27,sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X28),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X29),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X30),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X31),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X33),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X34),s('type.list.list'(sK0),X27))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X27))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X25)))) )),
  inference(superposition,[],[f163,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),sK19(X3,X2,X1,X0)),s('type.list.list'(X0),sK20(X3,X2,X1,X0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f102957,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1363),
  inference(cnf_transformation,[],[f102957_D])).
fof(f102957_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1363),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1363])])).
fof(f102959,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1365),
  inference(cnf_transformation,[],[f102959_D])).
fof(f102959_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl1365),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1365])])).
fof(f102969,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl11),
  inference(forward_demodulation,[],[f102893,f140])).
fof(f102893,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl11),
  inference(superposition,[],[f39014,f140])).
fof(f39014,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl11),
  inference(superposition,[],[f287,f126])).
fof(f102955,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl11),
  inference(forward_demodulation,[],[f102954,f140])).
fof(f102954,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl11),
  inference(forward_demodulation,[],[f102953,f151])).
fof(f151,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(cnf_transformation,[],[f59])).
fof(f59,axiom,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_suc|split|0')).
fof(f102953,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl11),
  inference(forward_demodulation,[],[f102880,f140])).
fof(f102880,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl11),
  inference(superposition,[],[f39014,f151])).
fof(f80464,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl1200),
  inference(cnf_transformation,[],[f80464_D])).
fof(f80464_D,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) <=> ~$spl1200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1200])])).
fof(f102908,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1361),
  inference(cnf_transformation,[],[f102908_D])).
fof(f102908_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1361),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1361])])).
fof(f102848,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl11),
  inference(superposition,[],[f39014,f162])).
fof(f162,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f119])).
fof(f80447,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl1196),
  inference(cnf_transformation,[],[f80447_D])).
fof(f80447_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl1196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1196])])).
fof(f102830,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl11),
  inference(superposition,[],[f39014,f131])).
fof(f102829,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl11),
  inference(superposition,[],[f39014,f133])).
fof(f133,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f114])).
fof(f69774,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl1170),
  inference(cnf_transformation,[],[f69774_D])).
fof(f69774_D,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) <=> ~$spl1170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1170])])).
fof(f102729,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1359),
  inference(cnf_transformation,[],[f102729_D])).
fof(f102729_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1359),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1359])])).
fof(f102666,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl11),
  inference(superposition,[],[f39010,f162])).
fof(f39010,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl11),
  inference(superposition,[],[f287,f126])).
fof(f69759,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl1168),
  inference(cnf_transformation,[],[f69759_D])).
fof(f69759_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl1168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1168])])).
fof(f102648,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl11),
  inference(superposition,[],[f39010,f131])).
fof(f102647,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl11),
  inference(superposition,[],[f39010,f133])).
fof(f100891,plain,(
  ( ! [X601] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X601),'const.list.NIL_0')))))) ) | $spl1334),
  inference(cnf_transformation,[],[f100891_D])).
fof(f100891_D,plain,(
  ( ! [X601] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X601),'const.list.NIL_0')))))) ) <=> ~$spl1334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1334])])).
fof(f101013,plain,(
  ( ! [X1037] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1037),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl1356),
  inference(cnf_transformation,[],[f101013_D])).
fof(f101013_D,plain,(
  ( ! [X1037] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1037),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl1356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1356])])).
fof(f100766,plain,(
  ( ! [X1037,X1036] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1037),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1036),'const.list.NIL_0')))))) ) | ($spl45 | $spl378)),
  inference(superposition,[],[f97011,f99897])).
fof(f99897,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl378),
  inference(equality_resolution,[],[f20578])).
fof(f20578,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))))) ) | $spl378),
  inference(subsumption_resolution,[],[f20532,f19882])).
fof(f19882,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl378),
  inference(cnf_transformation,[],[f19882_D])).
fof(f19882_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl378),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl378])])).
fof(f20532,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl378),
  inference(superposition,[],[f19929,f162])).
fof(f19929,plain,(
  ( ! [X57] : (s('type.num.num',X57) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X57)))) ) | $spl378),
  inference(superposition,[],[f127,f19882])).
fof(f127,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f112])).
fof(f97011,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))))) | s('type.num.num',sK1) != s('type.num.num',X2)) ) | $spl45),
  inference(superposition,[],[f96963,f127])).
fof(f96963,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(equality_resolution,[],[f87603])).
fof(f87603,plain,(
  ( ! [X39,X38] : (s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(trivial_inequality_removal,[],[f87554])).
fof(f87554,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl45),
  inference(superposition,[],[f80353,f162])).
fof(f80353,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(superposition,[],[f80314,f127])).
fof(f80314,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl45),
  inference(equality_resolution,[],[f66761])).
fof(f66761,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))))) ) | $spl45),
  inference(superposition,[],[f561,f126])).
fof(f101003,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1355),
  inference(cnf_transformation,[],[f101003_D])).
fof(f101003_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1355),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1355])])).
fof(f100746,plain,(
  ( ! [X1016] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1016),'const.list.NIL_0')))))) ) | ($spl378 | $spl875)),
  inference(superposition,[],[f84925,f99897])).
fof(f84925,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num',sK1) != s('type.num.num',X0)) ) | $spl875),
  inference(superposition,[],[f84907,f127])).
fof(f84907,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl875),
  inference(forward_demodulation,[],[f84906,f140])).
fof(f84906,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl875),
  inference(forward_demodulation,[],[f84896,f151])).
fof(f84896,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl875),
  inference(trivial_inequality_removal,[],[f84877])).
fof(f84877,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl875),
  inference(superposition,[],[f66864,f151])).
fof(f66864,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl875),
  inference(superposition,[],[f49017,f126])).
fof(f100994,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1353),
  inference(cnf_transformation,[],[f100994_D])).
fof(f100994_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1353),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1353])])).
fof(f100989,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1351),
  inference(cnf_transformation,[],[f100989_D])).
fof(f100989_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1351),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1351])])).
fof(f100992,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl378 | $spl875)),
  inference(forward_demodulation,[],[f100991,f99897])).
fof(f100991,plain,(
  ( ! [X941] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X941),'const.list.NIL_0')))))))) ) | ($spl378 | $spl875)),
  inference(forward_demodulation,[],[f100683,f135])).
fof(f100683,plain,(
  ( ! [X941] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X941),'const.list.NIL_0')))))))) ) | ($spl378 | $spl875)),
  inference(superposition,[],[f69235,f99897])).
fof(f69235,plain,(
  ( ! [X24] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24)))) ) | $spl875),
  inference(superposition,[],[f66860,f136])).
fof(f136,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X23] : s('type.num.num',X23) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|1')).
fof(f66860,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) != s('type.num.num',X0)) ) | $spl875),
  inference(superposition,[],[f49017,f127])).
fof(f100651,plain,(
  ( ! [X906] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X906),'const.list.NIL_0')))))) ) | ($spl378 | $spl875)),
  inference(superposition,[],[f66860,f99897])).
fof(f100979,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1347),
  inference(cnf_transformation,[],[f100979_D])).
fof(f100979_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1347),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1347])])).
fof(f100981,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1349),
  inference(cnf_transformation,[],[f100981_D])).
fof(f100981_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1349),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1349])])).
fof(f100977,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl49 | $spl242 | $spl378)),
  inference(forward_demodulation,[],[f100976,f99897])).
fof(f100976,plain,(
  ( ! [X857] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X857),'const.list.NIL_0')))))))))) ) | ($spl49 | $spl242 | $spl378)),
  inference(forward_demodulation,[],[f100613,f139])).
fof(f139,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|14')).
fof(f100613,plain,(
  ( ! [X857] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X857),'const.list.NIL_0')))))))))) ) | ($spl49 | $spl242 | $spl378)),
  inference(superposition,[],[f52602,f99897])).
fof(f52602,plain,(
  ( ! [X158] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X158))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X158)))))) ) | ($spl49 | $spl242)),
  inference(forward_demodulation,[],[f52569,f152])).
fof(f152,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X1),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X1),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X27] : s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.numeral.iSUB_3'(s(bool,X27),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7)))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.iSUB_THM|split|0')).
fof(f52569,plain,(
  ( ! [X158,X159,X160] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X158))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X158))))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,X159),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X160)))) ) | ($spl49 | $spl242)),
  inference(superposition,[],[f52457,f147])).
fof(f147,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X23] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X23))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_suc|split|2')).
fof(f52457,plain,(
  ( ! [X127,X125,X126] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X127) | s('type.num.num',X127) != s('type.num.num','const.numeral.iSUB_3'(s(bool,X125),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X126)))) ) | ($spl49 | $spl242)),
  inference(subsumption_resolution,[],[f52440,f8452])).
fof(f52440,plain,(
  ( ! [X127,X125,X126] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X127) | s('type.num.num',X127) != s('type.num.num','const.numeral.iSUB_3'(s(bool,X125),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X126)))) ) | $spl49),
  inference(superposition,[],[f49882,f152])).
fof(f49882,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num',X2) != s('type.num.num',X3)) ) | $spl49),
  inference(superposition,[],[f49313,f127])).
fof(f49313,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl49),
  inference(superposition,[],[f579,f127])).
fof(f100925,plain,(
  ( ! [X704,X705] : (s('type.num.num',X705) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X704),'const.list.NIL_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X705))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1342),
  inference(cnf_transformation,[],[f100925_D])).
fof(f100925_D,plain,(
  ( ! [X704,X705] : (s('type.num.num',X705) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X704),'const.list.NIL_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X705))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl1342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1342])])).
fof(f100927,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1345),
  inference(cnf_transformation,[],[f100927_D])).
fof(f100927_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl1345),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1345])])).
fof(f100477,plain,(
  ( ! [X704,X705] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X705) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X704),'const.list.NIL_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X705))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl2 | $spl378)),
  inference(superposition,[],[f16733,f99897])).
fof(f16733,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X8) != s('type.num.num',X9) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl2),
  inference(forward_demodulation,[],[f16693,f168])).
fof(f16693,plain,(
  ( ! [X8,X9] : (s('type.num.num',X8) != s('type.num.num',X9) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f2955,f126])).
fof(f2955,plain,(
  ( ! [X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl2),
  inference(superposition,[],[f127,f168])).
fof(f100902,plain,(
  ( ! [X629,X628] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X629) | s('type.num.num',X629) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X628),'const.list.NIL_0')))))) ) | $spl1340),
  inference(cnf_transformation,[],[f100902_D])).
fof(f100902_D,plain,(
  ( ! [X629,X628] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X629) | s('type.num.num',X629) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X628),'const.list.NIL_0')))))) ) <=> ~$spl1340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1340])])).
fof(f100893,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1337),
  inference(cnf_transformation,[],[f100893_D])).
fof(f100893_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1337),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1337])])).
fof(f100412,plain,(
  ( ! [X629,X628] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X629) | s('type.num.num',X629) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X628),'const.list.NIL_0')))))) ) | ($spl293 | $spl378)),
  inference(superposition,[],[f10036,f99897])).
fof(f10036,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num',X2) != s('type.num.num',X3)) ) | $spl293),
  inference(superposition,[],[f9948,f127])).
fof(f9948,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl293),
  inference(superposition,[],[f9919,f127])).
fof(f100897,plain,(
  ( ! [X617,X618] : (s('type.num.num',sK1) != s('type.num.num',X618) | s('type.num.num',X618) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X617),'const.list.NIL_0')))))) ) | $spl1338),
  inference(cnf_transformation,[],[f100897_D])).
fof(f100897_D,plain,(
  ( ! [X617,X618] : (s('type.num.num',sK1) != s('type.num.num',X618) | s('type.num.num',X618) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X617),'const.list.NIL_0')))))) ) <=> ~$spl1338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1338])])).
fof(f100402,plain,(
  ( ! [X617,X618] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num',X618) | s('type.num.num',X618) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X617),'const.list.NIL_0')))))) ) | ($spl213 | $spl378)),
  inference(superposition,[],[f9909,f99897])).
fof(f9909,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',sK1) != s('type.num.num',X2) | s('type.num.num',X2) != s('type.num.num',X3)) ) | $spl213),
  inference(superposition,[],[f9224,f127])).
fof(f9224,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) != s('type.num.num',X0)) ) | $spl213),
  inference(superposition,[],[f5898,f127])).
fof(f100386,plain,(
  ( ! [X601] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X601),'const.list.NIL_0')))))) ) | ($spl213 | $spl378)),
  inference(superposition,[],[f9224,f99897])).
fof(f100854,plain,(
  ( ! [X480] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0))))))))))))))))) ) | $spl1332),
  inference(cnf_transformation,[],[f100854_D])).
fof(f100854_D,plain,(
  ( ! [X480] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0))))))))))))))))) ) <=> ~$spl1332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1332])])).
fof(f100849,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1329),
  inference(cnf_transformation,[],[f100849_D])).
fof(f100849_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1329),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1329])])).
fof(f100853,plain,(
  ( ! [X480] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0))))))))))))))))) ) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f100289,f135])).
fof(f100289,plain,(
  ( ! [X480] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X480),'const.list.NIL_0')))),sK0))))))))))))))))) ) | ($spl0 | $spl378)),
  inference(superposition,[],[f2108,f99897])).
fof(f2108,plain,(
  ( ! [X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X65))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f2030,f166])).
fof(f2030,plain,(
  ( ! [X65] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X65))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X65,sK0))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f124,f166])).
fof(f100850,plain,(
  ( ! [X471] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0')))),sK0))))) ) | $spl1330),
  inference(cnf_transformation,[],[f100850_D])).
fof(f100850_D,plain,(
  ( ! [X471] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0')))),sK0))))) ) <=> ~$spl1330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1330])])).
fof(f100847,plain,(
  ( ! [X471] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0')))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f100846,f99897])).
fof(f100846,plain,(
  ( ! [X471] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0')))),sK0))))) ) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f100284,f135])).
fof(f100284,plain,(
  ( ! [X471] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X471),'const.list.NIL_0')))),sK0))))) ) | ($spl0 | $spl378)),
  inference(superposition,[],[f2029,f99897])).
fof(f2029,plain,(
  ( ! [X64] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X64))) | s('type.num.num',X64) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X64,sK0))))) ) | $spl0),
  inference(superposition,[],[f123,f166])).
fof(f99339,plain,(
  ( ! [X62] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl1326),
  inference(cnf_transformation,[],[f99339_D])).
fof(f99339_D,plain,(
  ( ! [X62] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl1326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1326])])).
fof(f85254,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1233),
  inference(cnf_transformation,[],[f85254_D])).
fof(f85254_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl1233),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1233])])).
fof(f99284,plain,(
  ( ! [X62] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X62),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl18 | $spl97)),
  inference(superposition,[],[f99245,f301])).
fof(f99245,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')))) ) | $spl97),
  inference(superposition,[],[f99200,f127])).
fof(f99200,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl97),
  inference(equality_resolution,[],[f13416])).
fof(f13416,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))))) ) | $spl97),
  inference(forward_demodulation,[],[f13402,f140])).
fof(f13402,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl97),
  inference(trivial_inequality_removal,[],[f13382])).
fof(f13382,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl97),
  inference(superposition,[],[f8170,f162])).
fof(f8170,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl97),
  inference(superposition,[],[f1072,f126])).
fof(f9481,plain,(
  ( ! [X103] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X103),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl276),
  inference(cnf_transformation,[],[f9481_D])).
fof(f9481_D,plain,(
  ( ! [X103] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X103),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f99282,plain,(
  ( ! [X59] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl97)),
  inference(superposition,[],[f99245,f168])).
fof(f99336,plain,(
  ( ! [X57] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X57),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | $spl1324),
  inference(cnf_transformation,[],[f99336_D])).
fof(f99336_D,plain,(
  ( ! [X57] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X57),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) <=> ~$spl1324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1324])])).
fof(f99280,plain,(
  ( ! [X57] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X57),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | ($spl38 | $spl97)),
  inference(superposition,[],[f99245,f481])).
fof(f9774,plain,(
  ( ! [X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X117),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | $spl288),
  inference(cnf_transformation,[],[f9774_D])).
fof(f9774_D,plain,(
  ( ! [X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X117),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f99276,plain,(
  ( ! [X52] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X52),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl97)),
  inference(superposition,[],[f99245,f170])).
fof(f99176,plain,(
  ( ! [X171,X170] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),sK11(X171,sK1,X170)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),X171))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | $spl1322),
  inference(cnf_transformation,[],[f99176_D])).
fof(f99176_D,plain,(
  ( ! [X171,X170] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),sK11(X171,sK1,X170)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),X171))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) <=> ~$spl1322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1322])])).
fof(f88530,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1275),
  inference(cnf_transformation,[],[f88530_D])).
fof(f88530_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1275),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1275])])).
fof(f99129,plain,(
  ( ! [X171,X170] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),sK11(X171,sK1,X170)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X170),X171))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f10260,f23680])).
fof(f23680,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl2),
  inference(equality_resolution,[],[f2944])).
fof(f2944,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,X3,X2))))) ) | $spl2),
  inference(superposition,[],[f158,f168])).
fof(f10260,plain,(
  ( ! [X10,X11,X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK11(X11,sK1,X10)))) | s('type.num.num',X9) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11)))) ) | $spl4),
  inference(superposition,[],[f391,f126])).
fof(f99175,plain,(
  ( ! [X138,X139] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),sK11(X139,sK1,X138)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),X139))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))))) ) | $spl1320),
  inference(cnf_transformation,[],[f99175_D])).
fof(f99175_D,plain,(
  ( ! [X138,X139] : (s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),sK11(X139,sK1,X138)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),X139))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))))) ) <=> ~$spl1320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1320])])).
fof(f99113,plain,(
  ( ! [X138,X139] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),sK11(X139,sK1,X138)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X138),X139))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))))) ) | $spl4),
  inference(superposition,[],[f10260,f24350])).
fof(f24350,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | $spl4),
  inference(equality_resolution,[],[f3294])).
fof(f3294,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X15))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),X15,X14))))) ) | $spl4),
  inference(superposition,[],[f157,f170])).
fof(f40736,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) ) | $spl694),
  inference(cnf_transformation,[],[f40736_D])).
fof(f40736_D,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) ) <=> ~$spl694),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl694])])).
fof(f38828,plain,(
  ( ! [X10,X8,X9] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),sK2)))))))) ) | $spl604),
  inference(cnf_transformation,[],[f38828_D])).
fof(f38828_D,plain,(
  ( ! [X10,X8,X9] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),sK2)))))))) ) <=> ~$spl604),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl604])])).
fof(f98385,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X36),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X37),s('type.list.list'(sK0),sK2))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X33,X34,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X33,X34,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X33)))) ) | ($spl0 | $spl70)),
  inference(superposition,[],[f22557,f2113])).
fof(f2113,plain,(
  ( ! [X107,X106] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X107,X106,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X107,X106,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num',X107)))) ) | $spl0),
  inference(forward_demodulation,[],[f2037,f166])).
fof(f2037,plain,(
  ( ! [X107,X106] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num',X107))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) = s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X107,X106,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X107,X106,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))))) ) | $spl0),
  inference(superposition,[],[f159,f166])).
fof(f22557,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),X3))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3)))) ) | $spl70),
  inference(trivial_inequality_removal,[],[f22550])).
fof(f22550,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),X3)))))))) ) | $spl70),
  inference(superposition,[],[f617,f162])).
fof(f97731,plain,(
  ( ! [X119] : (s('type.num.num',X119) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X119))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1318),
  inference(cnf_transformation,[],[f97731_D])).
fof(f97731_D,plain,(
  ( ! [X119] : (s('type.num.num',X119) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X119))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl1318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1318])])).
fof(f97684,plain,(
  ( ! [X119] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X119) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X119))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl2),
  inference(superposition,[],[f16733,f23680])).
fof(f97730,plain,(
  ( ! [X103] : (s('type.num.num',X103) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1316),
  inference(cnf_transformation,[],[f97730_D])).
fof(f97730_D,plain,(
  ( ! [X103] : (s('type.num.num',X103) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl1316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1316])])).
fof(f97668,plain,(
  ( ! [X103] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X103) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X103))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f16733,f24350])).
fof(f97341,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl1313),
  inference(cnf_transformation,[],[f97341_D])).
fof(f97341_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) <=> ~$spl1313),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1313])])).
fof(f97342,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4)))) ) | $spl1314),
  inference(cnf_transformation,[],[f97342_D])).
fof(f97342_D,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4)))) ) <=> ~$spl1314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1314])])).
fof(f97307,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X5) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl0),
  inference(superposition,[],[f23049,f130])).
fof(f23049,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0)))) ) | $spl0),
  inference(equality_resolution,[],[f2022])).
fof(f2022,plain,(
  ( ! [X30,X29] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X29) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X29))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X30))) | s('type.num.num',X30) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f97306,plain,(
  ( ! [X4] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl0),
  inference(superposition,[],[f23049,f132])).
fof(f97311,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1310),
  inference(cnf_transformation,[],[f97311_D])).
fof(f97311_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl1310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1310])])).
fof(f49115,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl897),
  inference(cnf_transformation,[],[f49115_D])).
fof(f49115_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl897),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl897])])).
fof(f97244,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl0),
  inference(superposition,[],[f23049,f130])).
fof(f97243,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl0),
  inference(superposition,[],[f23049,f132])).
fof(f88649,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1287),
  inference(cnf_transformation,[],[f88649_D])).
fof(f88649_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1287),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1287])])).
fof(f97234,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl1308),
  inference(cnf_transformation,[],[f97234_D])).
fof(f97234_D,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl1308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1308])])).
fof(f97195,plain,(
  ( ! [X123] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X123),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl45)),
  inference(superposition,[],[f97019,f23680])).
fof(f97019,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl45),
  inference(superposition,[],[f96963,f127])).
fof(f89672,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | $spl1299),
  inference(cnf_transformation,[],[f89672_D])).
fof(f89672_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) <=> ~$spl1299),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1299])])).
fof(f97179,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))))) ) | ($spl4 | $spl45)),
  inference(superposition,[],[f97019,f24350])).
fof(f9468,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl269),
  inference(cnf_transformation,[],[f9468_D])).
fof(f9468_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl269),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl269])])).
fof(f66226,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl1024),
  inference(cnf_transformation,[],[f66226_D])).
fof(f66226_D,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl1024),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1024])])).
fof(f97164,plain,(
  ( ! [X61] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X61),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl45)),
  inference(superposition,[],[f97019,f168])).
fof(f9756,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl281),
  inference(cnf_transformation,[],[f9756_D])).
fof(f9756_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl281),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl281])])).
fof(f97158,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl45)),
  inference(superposition,[],[f97019,f170])).
fof(f88489,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1261),
  inference(cnf_transformation,[],[f88489_D])).
fof(f88489_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1261),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1261])])).
fof(f97131,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl1306),
  inference(cnf_transformation,[],[f97131_D])).
fof(f97131_D,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) <=> ~$spl1306),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1306])])).
fof(f97090,plain,(
  ( ! [X123] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X123),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl45)),
  inference(superposition,[],[f97011,f23680])).
fof(f89658,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | $spl1297),
  inference(cnf_transformation,[],[f89658_D])).
fof(f89658_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) <=> ~$spl1297),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1297])])).
fof(f97074,plain,(
  ( ! [X107] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X107),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))))) ) | ($spl4 | $spl45)),
  inference(superposition,[],[f97011,f24350])).
fof(f1207,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl98),
  inference(cnf_transformation,[],[f1207_D])).
fof(f1207_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f91903,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1304),
  inference(cnf_transformation,[],[f91903_D])).
fof(f91903_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl1304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1304])])).
fof(f91896,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl30 | $spl242)),
  inference(trivial_inequality_removal,[],[f91834])).
fof(f91834,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl30 | $spl242)),
  inference(superposition,[],[f91703,f130])).
fof(f91703,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X10) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X10)))) ) | ($spl30 | $spl242)),
  inference(superposition,[],[f58611,f136])).
fof(f58611,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)))) ) | ($spl30 | $spl242)),
  inference(forward_demodulation,[],[f58561,f52710])).
fof(f52710,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))) | $spl30),
  inference(equality_resolution,[],[f15840])).
fof(f15840,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(sK1,'const.arithmetic.ZERO_0',X1,X0))))) ) | $spl30),
  inference(superposition,[],[f157,f317])).
fof(f58561,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))) ) | ($spl30 | $spl242)),
  inference(superposition,[],[f58525,f135])).
fof(f58525,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))) ) | ($spl30 | $spl242)),
  inference(trivial_inequality_removal,[],[f58515])).
fof(f58515,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | ($spl30 | $spl242)),
  inference(superposition,[],[f53240,f131])).
fof(f53240,plain,(
  ( ! [X97] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X97))) | s('type.num.num',X97) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))) ) | ($spl30 | $spl242)),
  inference(forward_demodulation,[],[f52771,f8452])).
fof(f52771,plain,(
  ( ! [X97] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X97))) | s('type.num.num',X97) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))) ) | $spl30),
  inference(superposition,[],[f126,f52710])).
fof(f91897,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl30 | $spl242)),
  inference(trivial_inequality_removal,[],[f91833])).
fof(f91833,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl30 | $spl242)),
  inference(superposition,[],[f91703,f132])).
fof(f91152,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1301),
  inference(cnf_transformation,[],[f91152_D])).
fof(f91152_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1301),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1301])])).
fof(f91154,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl1303),
  inference(cnf_transformation,[],[f91154_D])).
fof(f91154_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl1303),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1303])])).
fof(f91158,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91157,f23680])).
fof(f91157,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))) | ($spl2 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91156,f149])).
fof(f149,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X23] : s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_suc|split|1')).
fof(f91156,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))) | ($spl2 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91110,f139])).
fof(f91110,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))) | ($spl2 | $spl49 | $spl242)),
  inference(superposition,[],[f52602,f23680])).
fof(f91150,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl4 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91149,f24350])).
fof(f91149,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))))))) | ($spl4 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91148,f149])).
fof(f91148,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))))))) | ($spl4 | $spl49 | $spl242)),
  inference(forward_demodulation,[],[f91094,f139])).
fof(f91094,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))))))) | ($spl4 | $spl49 | $spl242)),
  inference(superposition,[],[f52602,f24350])).
fof(f83654,plain,(
  ( ! [X70] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70)))))) ) | $spl1218),
  inference(cnf_transformation,[],[f83654_D])).
fof(f83654_D,plain,(
  ( ! [X70] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70)))))) ) <=> ~$spl1218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1218])])).
fof(f83652,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl1217),
  inference(cnf_transformation,[],[f83652_D])).
fof(f83652_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl1217),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1217])])).
fof(f90664,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) ) | $spl251),
  inference(superposition,[],[f83975,f155])).
fof(f155,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X23] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_lt|split|1')).
fof(f83975,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl251),
  inference(superposition,[],[f8840,f126])).
fof(f8840,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl251),
  inference(cnf_transformation,[],[f8840_D])).
fof(f8840_D,plain,(
  s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl251),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl251])])).
fof(f83665,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) ) | $spl1224),
  inference(cnf_transformation,[],[f83665_D])).
fof(f83665_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) ) <=> ~$spl1224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1224])])).
fof(f90663,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl251),
  inference(superposition,[],[f83975,f150])).
fof(f150,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X23] : s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_lt|split|0')).
fof(f83661,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74)))))))) ) | $spl1222),
  inference(cnf_transformation,[],[f83661_D])).
fof(f83661_D,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74)))))))) ) <=> ~$spl1222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1222])])).
fof(f90724,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X75),s('type.num.num',X76))))))) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl251),
  inference(forward_demodulation,[],[f90723,f144])).
fof(f144,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X23,X26] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X23),s('type.num.num',X26))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.iSUB_THM|split|4')).
fof(f90723,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76)))))))) ) | $spl251),
  inference(forward_demodulation,[],[f90660,f150])).
fof(f90660,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X75),s('type.num.num',X76))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76)))))))) ) | $spl251),
  inference(superposition,[],[f83975,f144])).
fof(f90722,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74))))))) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl251),
  inference(forward_demodulation,[],[f90721,f143])).
fof(f143,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X23,X26] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X23),s('type.num.num',X26))))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.iSUB_THM|split|5')).
fof(f90721,plain,(
  ( ! [X74,X73] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74)))))))) ) | $spl251),
  inference(forward_demodulation,[],[f90659,f150])).
fof(f90659,plain,(
  ( ! [X74,X73] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74)))))))) ) | $spl251),
  inference(superposition,[],[f83975,f143])).
fof(f83658,plain,(
  ( ! [X72] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72)))))))) ) | $spl1220),
  inference(cnf_transformation,[],[f83658_D])).
fof(f83658_D,plain,(
  ( ! [X72] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72)))))))) ) <=> ~$spl1220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1220])])).
fof(f90720,plain,(
  ( ! [X72] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))))))) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl251),
  inference(forward_demodulation,[],[f90719,f147])).
fof(f90719,plain,(
  ( ! [X72] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X72)))))))) ) | $spl251),
  inference(forward_demodulation,[],[f90658,f150])).
fof(f90658,plain,(
  ( ! [X72] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X72)))))))) ) | $spl251),
  inference(superposition,[],[f83975,f147])).
fof(f90717,plain,(
  ( ! [X70] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70))))) | s(bool,'T_0') != s(bool,'F_0')) ) | $spl251),
  inference(forward_demodulation,[],[f90716,f149])).
fof(f90716,plain,(
  ( ! [X70] : (s(bool,'T_0') != s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X70)))))))) ) | $spl251),
  inference(forward_demodulation,[],[f90656,f155])).
fof(f90656,plain,(
  ( ! [X70] : (s(bool,'F_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X70)))))))) ) | $spl251),
  inference(superposition,[],[f83975,f149])).
fof(f485,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl41),
  inference(cnf_transformation,[],[f485_D])).
fof(f485_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f89930,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl614),
  inference(duplicate_literal_removal,[],[f89858])).
fof(f89858,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl614),
  inference(superposition,[],[f38921,f130])).
fof(f89931,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl614),
  inference(duplicate_literal_removal,[],[f89857])).
fof(f89857,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl614),
  inference(superposition,[],[f38921,f132])).
fof(f88651,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1289),
  inference(cnf_transformation,[],[f88651_D])).
fof(f88651_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1289),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1289])])).
fof(f89429,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl875)),
  inference(superposition,[],[f84933,f24350])).
fof(f84933,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl875),
  inference(superposition,[],[f84907,f127])).
fof(f88647,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl1285),
  inference(cnf_transformation,[],[f88647_D])).
fof(f88647_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl1285),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1285])])).
fof(f89428,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl875)),
  inference(superposition,[],[f84925,f24350])).
fof(f89575,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | $spl1295),
  inference(cnf_transformation,[],[f89575_D])).
fof(f89575_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) <=> ~$spl1295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1295])])).
fof(f88630,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1281),
  inference(cnf_transformation,[],[f88630_D])).
fof(f88630_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1281),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1281])])).
fof(f89375,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl1163)),
  inference(superposition,[],[f69342,f24350])).
fof(f69342,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl1163),
  inference(superposition,[],[f69296,f127])).
fof(f89342,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl875)),
  inference(superposition,[],[f66860,f24350])).
fof(f88543,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1277),
  inference(cnf_transformation,[],[f88543_D])).
fof(f88543_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1277),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1277])])).
fof(f89185,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl345)),
  inference(superposition,[],[f17526,f24350])).
fof(f17526,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl345),
  inference(superposition,[],[f15236,f127])).
fof(f89576,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | $spl1294),
  inference(cnf_transformation,[],[f89576_D])).
fof(f89576_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) <=> ~$spl1294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1294])])).
fof(f89584,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl4 | $spl18 | $spl38)),
  inference(forward_demodulation,[],[f89583,f301])).
fof(f89583,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl4 | $spl38)),
  inference(forward_demodulation,[],[f89183,f135])).
fof(f89183,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl38)),
  inference(superposition,[],[f17130,f24350])).
fof(f17130,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | $spl38),
  inference(superposition,[],[f126,f481])).
fof(f89574,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f89166,f301])).
fof(f89166,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) | ($spl4 | $spl18)),
  inference(superposition,[],[f14985,f24350])).
fof(f14985,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl18),
  inference(superposition,[],[f126,f301])).
fof(f89508,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))))))))))))))) | $spl1292),
  inference(cnf_transformation,[],[f89508_D])).
fof(f89508_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))))))))))))))) <=> ~$spl1292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1292])])).
fof(f88430,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1255),
  inference(cnf_transformation,[],[f88430_D])).
fof(f88430_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1255),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1255])])).
fof(f89004,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))))))))))))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f2108,f24350])).
fof(f89504,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))) | $spl1290),
  inference(cnf_transformation,[],[f89504_D])).
fof(f89504_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))) <=> ~$spl1290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1290])])).
fof(f89502,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f88999,f24350])).
fof(f88999,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK2,sK0))),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f2029,f24350])).
fof(f88342,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl875)),
  inference(superposition,[],[f84933,f23680])).
fof(f88341,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl875)),
  inference(superposition,[],[f84925,f23680])).
fof(f88636,plain,(
  ( ! [X236] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X236) | s('type.num.num',X236) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | $spl1282),
  inference(cnf_transformation,[],[f88636_D])).
fof(f88636_D,plain,(
  ( ! [X236] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X236) | s('type.num.num',X236) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) <=> ~$spl1282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1282])])).
fof(f88491,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1263),
  inference(cnf_transformation,[],[f88491_D])).
fof(f88491_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1263),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1263])])).
fof(f88314,plain,(
  ( ! [X236] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X236) | s('type.num.num',X236) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl290)),
  inference(superposition,[],[f79074,f23680])).
fof(f79074,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X2) | s('type.num.num',X2) != s('type.num.num',X3)) ) | $spl290),
  inference(superposition,[],[f9917,f127])).
fof(f88508,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1271),
  inference(cnf_transformation,[],[f88508_D])).
fof(f88508_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1271),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1271])])).
fof(f88288,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl1163)),
  inference(superposition,[],[f69342,f23680])).
fof(f88255,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl875)),
  inference(superposition,[],[f66860,f23680])).
fof(f88500,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1267),
  inference(cnf_transformation,[],[f88500_D])).
fof(f88500_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1267),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1267])])).
fof(f88619,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1279),
  inference(cnf_transformation,[],[f88619_D])).
fof(f88619_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1279),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1279])])).
fof(f88207,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl49)),
  inference(superposition,[],[f50144,f23680])).
fof(f50144,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X6)) ) | $spl49),
  inference(superposition,[],[f49918,f135])).
fof(f49918,plain,(
  ( ! [X24] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X24)) ) | $spl49),
  inference(superposition,[],[f49891,f136])).
fof(f49891,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) ) | $spl49),
  inference(trivial_inequality_removal,[],[f49881])).
fof(f49881,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl49),
  inference(superposition,[],[f49313,f131])).
fof(f88617,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl49)),
  inference(forward_demodulation,[],[f88203,f135])).
fof(f88203,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl49)),
  inference(superposition,[],[f49918,f23680])).
fof(f88367,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1241),
  inference(cnf_transformation,[],[f88367_D])).
fof(f88367_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl1241),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1241])])).
fof(f88111,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl380)),
  inference(superposition,[],[f20854,f23680])).
fof(f88098,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl345)),
  inference(superposition,[],[f17526,f23680])).
fof(f88507,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1270),
  inference(cnf_transformation,[],[f88507_D])).
fof(f88507_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1270])])).
fof(f88539,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl18 | $spl38)),
  inference(forward_demodulation,[],[f88538,f301])).
fof(f88538,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl38)),
  inference(forward_demodulation,[],[f88096,f135])).
fof(f88096,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl38)),
  inference(superposition,[],[f17130,f23680])).
fof(f88528,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl18)),
  inference(forward_demodulation,[],[f88079,f301])).
fof(f88079,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl18)),
  inference(superposition,[],[f14985,f23680])).
fof(f88510,plain,(
  ( ! [X204] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X204) | s('type.num.num',X204) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | $spl1272),
  inference(cnf_transformation,[],[f88510_D])).
fof(f88510_D,plain,(
  ( ! [X204] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X204) | s('type.num.num',X204) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) <=> ~$spl1272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1272])])).
fof(f88039,plain,(
  ( ! [X204] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X204) | s('type.num.num',X204) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl293)),
  inference(superposition,[],[f10036,f23680])).
fof(f88037,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl297)),
  inference(superposition,[],[f9990,f23680])).
fof(f9990,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl297),
  inference(superposition,[],[f9925,f127])).
fof(f88506,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1269),
  inference(cnf_transformation,[],[f88506_D])).
fof(f88506_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1269),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1269])])).
fof(f88036,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl305)),
  inference(superposition,[],[f9976,f23680])).
fof(f9976,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl305),
  inference(superposition,[],[f9933,f127])).
fof(f88371,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | $spl1247),
  inference(cnf_transformation,[],[f88371_D])).
fof(f88371_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) <=> ~$spl1247),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1247])])).
fof(f88032,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl293)),
  inference(superposition,[],[f9948,f23680])).
fof(f88030,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl290)),
  inference(superposition,[],[f9917,f23680])).
fof(f88498,plain,(
  ( ! [X203] : (s('type.num.num',sK1) != s('type.num.num',X203) | s('type.num.num',X203) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | $spl1264),
  inference(cnf_transformation,[],[f88498_D])).
fof(f88498_D,plain,(
  ( ! [X203] : (s('type.num.num',sK1) != s('type.num.num',X203) | s('type.num.num',X203) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) <=> ~$spl1264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1264])])).
fof(f88029,plain,(
  ( ! [X203] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) != s('type.num.num',X203) | s('type.num.num',X203) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))) ) | ($spl2 | $spl213)),
  inference(superposition,[],[f9909,f23680])).
fof(f88013,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl213)),
  inference(superposition,[],[f9224,f23680])).
fof(f88436,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))))))))))))))) | $spl1258),
  inference(cnf_transformation,[],[f88436_D])).
fof(f88436_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))))))))))))))) <=> ~$spl1258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1258])])).
fof(f87917,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))))))))))))))) | ($spl0 | $spl2)),
  inference(superposition,[],[f2108,f23680])).
fof(f88432,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))) | $spl1256),
  inference(cnf_transformation,[],[f88432_D])).
fof(f88432_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))) <=> ~$spl1256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1256])])).
fof(f88428,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f87912,f23680])).
fof(f87912,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))),sK0)))) | ($spl0 | $spl2)),
  inference(superposition,[],[f2029,f23680])).
fof(f88377,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) | $spl1252),
  inference(cnf_transformation,[],[f88377_D])).
fof(f88377_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) <=> ~$spl1252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1252])])).
fof(f87770,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) | ($spl2 | $spl208 | $spl242)),
  inference(superposition,[],[f37389,f23680])).
fof(f37389,plain,(
  ( ! [X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20(sK1,'const.num.|48|_0',X3,X2))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f158,f37300])).
fof(f88375,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) | $spl1250),
  inference(cnf_transformation,[],[f88375_D])).
fof(f88375_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) <=> ~$spl1250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1250])])).
fof(f87769,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0),sK0)))) | ($spl2 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f23680])).
fof(f37388,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(sK1,'const.num.|48|_0',X1,X0))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f157,f37300])).
fof(f87768,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl4 | $spl59)),
  inference(superposition,[],[f36393,f23680])).
fof(f36393,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | ($spl4 | $spl59)),
  inference(superposition,[],[f24627,f161])).
fof(f24627,plain,(
  ( ! [X95] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),'const.list.NIL_0')))) ) | ($spl4 | $spl59)),
  inference(trivial_inequality_removal,[],[f24626])).
fof(f24626,plain,(
  ( ! [X95] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),'const.list.NIL_0')))) ) | ($spl4 | $spl59)),
  inference(forward_demodulation,[],[f24591,f1466])).
fof(f24591,plain,(
  ( ! [X95] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X95),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))))) ) | ($spl4 | $spl59)),
  inference(superposition,[],[f24558,f1466])).
fof(f24558,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | $spl59),
  inference(superposition,[],[f24543,f127])).
fof(f24543,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl59),
  inference(equality_resolution,[],[f2512])).
fof(f2512,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))))) ) | $spl59),
  inference(trivial_inequality_removal,[],[f2493])).
fof(f2493,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl59),
  inference(superposition,[],[f674,f162])).
fof(f674,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl59),
  inference(superposition,[],[f651,f126])).
fof(f651,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl59),
  inference(trivial_inequality_removal,[],[f646])).
fof(f646,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | $spl59),
  inference(superposition,[],[f611,f162])).
fof(f88373,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X75,X73] : (s('type.list.list'(sK0),X68) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X70),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X71),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X72),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X73),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X74),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X68)))) ) | $spl1248),
  inference(cnf_transformation,[],[f88373_D])).
fof(f88373_D,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X75,X73] : (s('type.list.list'(sK0),X68) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X70),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X71),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X72),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X73),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X74),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X68)))) ) <=> ~$spl1248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1248])])).
fof(f87751,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X75,X73] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(sK0),X68) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X69),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X70),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X71),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X72),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X73),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X74),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X75),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X68)))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3282,f23680])).
fof(f3282,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X9))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X5),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X8),s('type.list.list'(X0),X9))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) ) | $spl4),
  inference(superposition,[],[f170,f125])).
fof(f87727,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0)))) | ($spl2 | $spl54)),
  inference(superposition,[],[f608,f23680])).
fof(f88369,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))) ) | $spl1244),
  inference(cnf_transformation,[],[f88369_D])).
fof(f88369_D,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))) ) <=> ~$spl1244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1244])])).
fof(f87726,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))) ) | ($spl2 | $spl74)),
  inference(superposition,[],[f619,f23680])).
fof(f88368,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))) ) | $spl1242),
  inference(cnf_transformation,[],[f88368_D])).
fof(f88368_D,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))) ) <=> ~$spl1242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1242])])).
fof(f87725,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))) ) | ($spl2 | $spl78)),
  inference(superposition,[],[f621,f23680])).
fof(f88365,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))))) ) | $spl1238),
  inference(cnf_transformation,[],[f88365_D])).
fof(f88365_D,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))))) ) <=> ~$spl1238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1238])])).
fof(f87724,plain,(
  ( ! [X6,X4,X2,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20('const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),sK1,sK2,sK0))))))))))))))))) ) | ($spl2 | $spl82)),
  inference(superposition,[],[f623,f23680])).
fof(f87193,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0))))))))))))))))) ) | $spl1234),
  inference(cnf_transformation,[],[f87193_D])).
fof(f87193_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0))))))))))))))))) ) <=> ~$spl1234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1234])])).
fof(f87195,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))))) | $spl1237),
  inference(cnf_transformation,[],[f87195_D])).
fof(f87195_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))))) <=> ~$spl1237),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1237])])).
fof(f87192,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0))))))))))))))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f87191,f37300])).
fof(f87191,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0))))))))))))))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f87079,f68310])).
fof(f68310,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f67840])).
fof(f67840,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f37389,f67634])).
fof(f67634,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))) | $spl38),
  inference(equality_resolution,[],[f17121])).
fof(f17121,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),X3,X2))))) ) | $spl38),
  inference(superposition,[],[f158,f481])).
fof(f87079,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f86941])).
fof(f86941,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)) | ($spl38 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f86290])).
fof(f86290,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f70999])).
fof(f70999,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f70507])).
fof(f70507,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f68310])).
fof(f85203,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl875)),
  inference(superposition,[],[f84933,f168])).
fof(f85199,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl875)),
  inference(superposition,[],[f84933,f170])).
fof(f9931,plain,(
  ( ! [X67] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl302),
  inference(cnf_transformation,[],[f9931_D])).
fof(f9931_D,plain,(
  ( ! [X67] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl302),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl302])])).
fof(f85028,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1229),
  inference(cnf_transformation,[],[f85028_D])).
fof(f85028_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1229])])).
fof(f85032,plain,(
  ( ! [X69] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl875),
  inference(forward_demodulation,[],[f84991,f140])).
fof(f84991,plain,(
  ( ! [X69] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl875),
  inference(superposition,[],[f84925,f148])).
fof(f148,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X23] : s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|11')).
fof(f85030,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))) | $spl1231),
  inference(cnf_transformation,[],[f85030_D])).
fof(f85030_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))) <=> ~$spl1231),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1231])])).
fof(f84989,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))) | ($spl18 | $spl875)),
  inference(superposition,[],[f84925,f76119])).
fof(f76119,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))) | $spl18),
  inference(equality_resolution,[],[f14978])).
fof(f14978,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,X3,X2))))) ) | $spl18),
  inference(superposition,[],[f158,f301])).
fof(f85026,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))) | $spl1227),
  inference(cnf_transformation,[],[f85026_D])).
fof(f85026_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))) <=> ~$spl1227),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1227])])).
fof(f84975,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))) | ($spl38 | $spl875)),
  inference(superposition,[],[f84925,f76951])).
fof(f76951,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))) | $spl38),
  inference(equality_resolution,[],[f17120])).
fof(f17120,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),X1,X0))))) ) | $spl38),
  inference(superposition,[],[f157,f481])).
fof(f83653,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl1216),
  inference(cnf_transformation,[],[f83653_D])).
fof(f83653_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl1216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1216])])).
fof(f83599,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) ) | $spl250),
  inference(superposition,[],[f155,f66839])).
fof(f66839,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl250),
  inference(superposition,[],[f8841,f126])).
fof(f83598,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl250),
  inference(superposition,[],[f150,f66839])).
fof(f83597,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2)))))) ) | $spl250),
  inference(superposition,[],[f66839,f155])).
fof(f83596,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) ) | $spl250),
  inference(superposition,[],[f66839,f150])).
fof(f83663,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X75),s('type.num.num',X76))))))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl250),
  inference(forward_demodulation,[],[f83662,f144])).
fof(f83662,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76)))))))) ) | $spl250),
  inference(forward_demodulation,[],[f83593,f150])).
fof(f83593,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X75),s('type.num.num',X76))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X75))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X76)))))))) ) | $spl250),
  inference(superposition,[],[f66839,f144])).
fof(f83660,plain,(
  ( ! [X74,X73] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74))))))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl250),
  inference(forward_demodulation,[],[f83659,f143])).
fof(f83659,plain,(
  ( ! [X74,X73] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74)))))))) ) | $spl250),
  inference(forward_demodulation,[],[f83592,f150])).
fof(f83592,plain,(
  ( ! [X74,X73] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'F_0'),s('type.num.num',X73),s('type.num.num',X74))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X73))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X74)))))))) ) | $spl250),
  inference(superposition,[],[f66839,f143])).
fof(f83657,plain,(
  ( ! [X72] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))))))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl250),
  inference(forward_demodulation,[],[f83656,f147])).
fof(f83656,plain,(
  ( ! [X72] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X72)))))))) ) | $spl250),
  inference(forward_demodulation,[],[f83591,f150])).
fof(f83591,plain,(
  ( ! [X72] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X72))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X72)))))))) ) | $spl250),
  inference(superposition,[],[f66839,f147])).
fof(f83651,plain,(
  ( ! [X70] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70))))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl250),
  inference(forward_demodulation,[],[f83650,f149])).
fof(f83650,plain,(
  ( ! [X70] : (s(bool,'T_0') = s(bool,'F_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X70)))))))) ) | $spl250),
  inference(forward_demodulation,[],[f83589,f155])).
fof(f83589,plain,(
  ( ! [X70] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X70)))))))) ) | $spl250),
  inference(superposition,[],[f66839,f149])).
fof(f83259,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1213),
  inference(cnf_transformation,[],[f83259_D])).
fof(f83259_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1213])])).
fof(f83261,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1215),
  inference(cnf_transformation,[],[f83261_D])).
fof(f83261_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1215),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1215])])).
fof(f83312,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f83311,f149])).
fof(f83311,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f83310,f139])).
fof(f83310,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f83309,f148])).
fof(f83309,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(forward_demodulation,[],[f83308,f139])).
fof(f83308,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(forward_demodulation,[],[f83223,f140])).
fof(f83223,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(superposition,[],[f49947,f148])).
fof(f49947,plain,(
  ( ! [X71] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X71))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X71)))))) ) | $spl49),
  inference(superposition,[],[f49891,f139])).
fof(f83257,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f83256,f149])).
fof(f83256,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f83255,f139])).
fof(f83255,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl49),
  inference(forward_demodulation,[],[f83181,f139])).
fof(f83181,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl49),
  inference(superposition,[],[f49947,f140])).
fof(f81927,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) | $spl1211),
  inference(cnf_transformation,[],[f81927_D])).
fof(f81927_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) <=> ~$spl1211),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1211])])).
fof(f81858,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl43),
  inference(superposition,[],[f1359,f162])).
fof(f1359,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl43),
  inference(superposition,[],[f512,f126])).
fof(f81840,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl43),
  inference(superposition,[],[f1359,f131])).
fof(f81839,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl43),
  inference(superposition,[],[f1359,f133])).
fof(f81067,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1207),
  inference(cnf_transformation,[],[f81067_D])).
fof(f81067_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1207),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1207])])).
fof(f81068,plain,(
  ( ! [X6] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl1208),
  inference(cnf_transformation,[],[f81068_D])).
fof(f81068_D,plain,(
  ( ! [X6] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl1208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1208])])).
fof(f80998,plain,(
  ( ! [X7] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl1043),
  inference(superposition,[],[f67466,f130])).
fof(f67466,plain,(
  ( ! [X70] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X70))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70)))))) ) | $spl1043),
  inference(superposition,[],[f66735,f149])).
fof(f66735,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) != s('type.num.num',X0)) ) | $spl1043),
  inference(superposition,[],[f66274,f127])).
fof(f80997,plain,(
  ( ! [X6] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl1043),
  inference(superposition,[],[f67466,f132])).
fof(f81063,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1202),
  inference(cnf_transformation,[],[f81063_D])).
fof(f81063_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl1202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1202])])).
fof(f81065,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl1205),
  inference(cnf_transformation,[],[f81065_D])).
fof(f81065_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl1205),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1205])])).
fof(f80994,plain,(
  ( ! [X1] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl1043),
  inference(superposition,[],[f67466,f130])).
fof(f80993,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1043),
  inference(superposition,[],[f67466,f132])).
fof(f80449,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1199),
  inference(cnf_transformation,[],[f80449_D])).
fof(f80449_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1199),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1199])])).
fof(f80390,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl33),
  inference(superposition,[],[f1263,f162])).
fof(f1263,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl33),
  inference(superposition,[],[f333,f126])).
fof(f80372,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl33),
  inference(superposition,[],[f1263,f131])).
fof(f80371,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl33),
  inference(superposition,[],[f1263,f133])).
fof(f80053,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1195),
  inference(cnf_transformation,[],[f80053_D])).
fof(f80053_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1195),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1195])])).
fof(f79992,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl33),
  inference(superposition,[],[f1259,f162])).
fof(f1259,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl33),
  inference(superposition,[],[f333,f126])).
fof(f79974,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl33),
  inference(superposition,[],[f1259,f131])).
fof(f79973,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl33),
  inference(superposition,[],[f1259,f133])).
fof(f79514,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))))))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl1190),
  inference(cnf_transformation,[],[f79514_D])).
fof(f79514_D,plain,(
  ( ! [X64,X63] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))))))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) <=> ~$spl1190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1190])])).
fof(f79515,plain,(
  ( ! [X65] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0')))) ) | $spl1192),
  inference(cnf_transformation,[],[f79515_D])).
fof(f79515_D,plain,(
  ( ! [X65] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0')))) ) <=> ~$spl1192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1192])])).
fof(f79458,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))))))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl107),
  inference(superposition,[],[f73899,f162])).
fof(f73899,plain,(
  ( ! [X2,X3] : (s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))))) ) | $spl107),
  inference(superposition,[],[f73884,f127])).
fof(f73884,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),'const.list.NIL_0')))))))) ) | $spl107),
  inference(trivial_inequality_removal,[],[f73881])).
fof(f73881,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),'const.list.NIL_0')))))))) ) | $spl107),
  inference(superposition,[],[f73836,f130])).
fof(f73836,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))))) ) | $spl107),
  inference(equality_resolution,[],[f1702])).
fof(f1702,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))))) ) | $spl107),
  inference(trivial_inequality_removal,[],[f1683])).
fof(f1683,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl107),
  inference(superposition,[],[f1293,f162])).
fof(f1293,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl107),
  inference(superposition,[],[f1216,f127])).
fof(f49260,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl980),
  inference(cnf_transformation,[],[f49260_D])).
fof(f49260_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl980),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl980])])).
fof(f66234,plain,(
  ( ! [X65] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0')))) ) | $spl1030),
  inference(cnf_transformation,[],[f66234_D])).
fof(f66234_D,plain,(
  ( ! [X65] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0')))) ) <=> ~$spl1030),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1030])])).
fof(f78938,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl1020),
  inference(superposition,[],[f65984,f162])).
fof(f65984,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl1020),
  inference(superposition,[],[f65940,f127])).
fof(f78999,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1189),
  inference(cnf_transformation,[],[f78999_D])).
fof(f78999_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1189),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1189])])).
fof(f78936,plain,(
  ( ! [X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl18 | $spl1020)),
  inference(superposition,[],[f65984,f301])).
fof(f9480,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl275),
  inference(cnf_transformation,[],[f9480_D])).
fof(f9480_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl275),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl275])])).
fof(f78935,plain,(
  ( ! [X59] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl1020)),
  inference(superposition,[],[f65984,f168])).
fof(f78997,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1187),
  inference(cnf_transformation,[],[f78997_D])).
fof(f78997_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1187),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1187])])).
fof(f78934,plain,(
  ( ! [X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | ($spl38 | $spl1020)),
  inference(superposition,[],[f65984,f481])).
fof(f9773,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl287),
  inference(cnf_transformation,[],[f9773_D])).
fof(f9773_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl287),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl287])])).
fof(f78931,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl1020)),
  inference(superposition,[],[f65984,f170])).
fof(f78353,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl1184),
  inference(cnf_transformation,[],[f78353_D])).
fof(f78353_D,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) <=> ~$spl1184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1184])])).
fof(f78338,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1183),
  inference(cnf_transformation,[],[f78338_D])).
fof(f78338_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl1183),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1183])])).
fof(f78271,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl2),
  inference(superposition,[],[f16448,f162])).
fof(f16448,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl2),
  inference(forward_demodulation,[],[f16383,f168])).
fof(f16383,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(superposition,[],[f2951,f149])).
fof(f2951,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(superposition,[],[f126,f168])).
fof(f78336,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl1180),
  inference(cnf_transformation,[],[f78336_D])).
fof(f78336_D,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl1180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1180])])).
fof(f78253,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f16448,f131])).
fof(f78252,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f16448,f133])).
fof(f78333,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl1176),
  inference(cnf_transformation,[],[f78333_D])).
fof(f78333_D,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl1176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1176])])).
fof(f78335,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1179),
  inference(cnf_transformation,[],[f78335_D])).
fof(f78335_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl1179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1179])])).
fof(f78249,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl2),
  inference(superposition,[],[f16448,f130])).
fof(f78248,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl2),
  inference(superposition,[],[f16448,f132])).
fof(f71896,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0))))))))))))))))) ) | $spl1172),
  inference(cnf_transformation,[],[f71896_D])).
fof(f71896_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0))))))))))))))))) ) <=> ~$spl1172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1172])])).
fof(f71898,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))) | $spl1175),
  inference(cnf_transformation,[],[f71898_D])).
fof(f71898_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))) <=> ~$spl1175),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1175])])).
fof(f71895,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0))))))))))))))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f71894,f37300])).
fof(f71894,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0))))))))))))))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f71796,f67634])).
fof(f71796,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0))))) ) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f71671])).
fof(f71671,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)) | ($spl38 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f71145])).
fof(f71145,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f68311])).
fof(f68311,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f67839])).
fof(f67839,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK2,sK0),sK0)))) | ($spl38 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f67634])).
fof(f66285,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1053),
  inference(cnf_transformation,[],[f66285_D])).
fof(f66285_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1053),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1053])])).
fof(f69701,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl29),
  inference(superposition,[],[f992,f162])).
fof(f992,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl29),
  inference(superposition,[],[f315,f126])).
fof(f69683,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl29),
  inference(superposition,[],[f992,f131])).
fof(f69682,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl29),
  inference(superposition,[],[f992,f133])).
fof(f69616,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1167),
  inference(cnf_transformation,[],[f69616_D])).
fof(f69616_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1167),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1167])])).
fof(f69614,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl1045),
  inference(forward_demodulation,[],[f69577,f140])).
fof(f69577,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl1045),
  inference(superposition,[],[f67356,f148])).
fof(f67356,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num',sK1) != s('type.num.num',X0)) ) | $spl1045),
  inference(superposition,[],[f67348,f127])).
fof(f67348,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl1045),
  inference(trivial_inequality_removal,[],[f67341])).
fof(f67341,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl1045),
  inference(superposition,[],[f66276,f131])).
fof(f9928,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))) ) | $spl300),
  inference(cnf_transformation,[],[f9928_D])).
fof(f9928_D,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f66542,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1109),
  inference(cnf_transformation,[],[f66542_D])).
fof(f66542_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1109),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1109])])).
fof(f69553,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl1045),
  inference(superposition,[],[f67356,f162])).
fof(f9917,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl290),
  inference(cnf_transformation,[],[f9917_D])).
fof(f9917_D,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f69535,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl1045),
  inference(superposition,[],[f67356,f131])).
fof(f69534,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl1045),
  inference(superposition,[],[f67356,f133])).
fof(f69301,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1165),
  inference(cnf_transformation,[],[f69301_D])).
fof(f69301_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1165),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1165])])).
fof(f69299,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl875),
  inference(forward_demodulation,[],[f69269,f140])).
fof(f69269,plain,(
  ( ! [X69] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl875),
  inference(superposition,[],[f66860,f148])).
fof(f69289,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl1159),
  inference(cnf_transformation,[],[f69289_D])).
fof(f69289_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl1159),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1159])])).
fof(f69245,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl875),
  inference(superposition,[],[f66860,f162])).
fof(f9050,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl257),
  inference(cnf_transformation,[],[f9050_D])).
fof(f9050_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl257),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl257])])).
fof(f69296,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl1163),
  inference(cnf_transformation,[],[f69296_D])).
fof(f69296_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl1163),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1163])])).
fof(f69243,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl18 | $spl875)),
  inference(superposition,[],[f66860,f301])).
fof(f69294,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1161),
  inference(cnf_transformation,[],[f69294_D])).
fof(f69294_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1161),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1161])])).
fof(f69241,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl38 | $spl875)),
  inference(superposition,[],[f66860,f481])).
fof(f69227,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl875),
  inference(superposition,[],[f66860,f131])).
fof(f69226,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl875),
  inference(superposition,[],[f66860,f133])).
fof(f16708,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl368),
  inference(cnf_transformation,[],[f16708_D])).
fof(f16708_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl368),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl368])])).
fof(f66606,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1125),
  inference(cnf_transformation,[],[f66606_D])).
fof(f66606_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1125),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1125])])).
fof(f68468,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl38),
  inference(superposition,[],[f17134,f162])).
fof(f17134,plain,(
  ( ! [X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl38),
  inference(superposition,[],[f127,f481])).
fof(f16701,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl366),
  inference(cnf_transformation,[],[f16701_D])).
fof(f16701_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl366])])).
fof(f68455,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl38),
  inference(superposition,[],[f17134,f131])).
fof(f68454,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl38),
  inference(superposition,[],[f17134,f133])).
fof(f9475,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl273),
  inference(cnf_transformation,[],[f9475_D])).
fof(f9475_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl273),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl273])])).
fof(f1213,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl103),
  inference(cnf_transformation,[],[f1213_D])).
fof(f1213_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl103),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl103])])).
fof(f9392,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl113)),
  inference(superposition,[],[f1313,f168])).
fof(f1313,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl113),
  inference(superposition,[],[f1221,f127])).
fof(f9472,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl271),
  inference(cnf_transformation,[],[f9472_D])).
fof(f9472_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl271),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl271])])).
fof(f9397,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl133)),
  inference(superposition,[],[f1977,f168])).
fof(f1977,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl133),
  inference(superposition,[],[f1933,f127])).
fof(f1933,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl133),
  inference(superposition,[],[f1921,f148])).
fof(f9766,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl285),
  inference(cnf_transformation,[],[f9766_D])).
fof(f9766_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl285),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl285])])).
fof(f9652,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl113)),
  inference(superposition,[],[f1313,f170])).
fof(f9762,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl283),
  inference(cnf_transformation,[],[f9762_D])).
fof(f9762_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl283),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl283])])).
fof(f9657,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl133)),
  inference(superposition,[],[f1977,f170])).
fof(f8839,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl248),
  inference(cnf_transformation,[],[f8839_D])).
fof(f8839_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f66695,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl1156),
  inference(cnf_transformation,[],[f66695_D])).
fof(f66695_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl1156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1156])])).
fof(f10113,plain,(
  ( ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f8842,f132])).
fof(f8842,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) ) | ($spl242 | $spl247)),
  inference(subsumption_resolution,[],[f8830,f8761])).
fof(f8830,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) ) | $spl242),
  inference(superposition,[],[f142,f8701])).
fof(f8701,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.num.|48|_0')))) ) | $spl242),
  inference(forward_demodulation,[],[f8509,f156])).
fof(f156,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X23] : s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_lt|split|2')).
fof(f8509,plain,(
  ( ! [X5] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))),s('type.num.num','const.num.|48|_0')))) ) | $spl242),
  inference(superposition,[],[f128,f8452])).
fof(f128,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X23,X26] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X23),s('type.num.num',X26))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|22')).
fof(f142,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X23,X26] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X26)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X26),s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_lt|split|5')).
fof(f10114,plain,(
  ( ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f8842,f130])).
fof(f4771,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl200),
  inference(cnf_transformation,[],[f4771_D])).
fof(f4771_D,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f66657,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl1155),
  inference(cnf_transformation,[],[f66657_D])).
fof(f66657_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl1155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1155])])).
fof(f13636,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl137),
  inference(superposition,[],[f1952,f133])).
fof(f1952,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl137),
  inference(superposition,[],[f1924,f132])).
fof(f13637,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl137),
  inference(superposition,[],[f1952,f131])).
fof(f66648,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1153),
  inference(cnf_transformation,[],[f66648_D])).
fof(f66648_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1153),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1153])])).
fof(f14385,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl321),
  inference(superposition,[],[f12060,f133])).
fof(f12060,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl321),
  inference(superposition,[],[f12001,f132])).
fof(f14386,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl321),
  inference(superposition,[],[f12060,f131])).
fof(f66639,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1150),
  inference(cnf_transformation,[],[f66639_D])).
fof(f66639_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1150])])).
fof(f66614,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1135),
  inference(cnf_transformation,[],[f66614_D])).
fof(f66614_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1135),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1135])])).
fof(f14880,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl2),
  inference(superposition,[],[f2923,f132])).
fof(f2923,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) ) | $spl2),
  inference(superposition,[],[f168,f126])).
fof(f14881,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl2),
  inference(superposition,[],[f2923,f130])).
fof(f66309,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl1067),
  inference(cnf_transformation,[],[f66309_D])).
fof(f66309_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl1067),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1067])])).
fof(f66638,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))) ) | $spl1148),
  inference(cnf_transformation,[],[f66638_D])).
fof(f66638_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))) ) <=> ~$spl1148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1148])])).
fof(f14902,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl2),
  inference(superposition,[],[f2923,f132])).
fof(f14903,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl2),
  inference(superposition,[],[f2923,f130])).
fof(f66637,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1147),
  inference(cnf_transformation,[],[f66637_D])).
fof(f66637_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1147])])).
fof(f15083,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl18 | $spl113)),
  inference(superposition,[],[f1313,f301])).
fof(f66635,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1145),
  inference(cnf_transformation,[],[f66635_D])).
fof(f66635_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1145),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1145])])).
fof(f15089,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl18 | $spl133)),
  inference(superposition,[],[f1977,f301])).
fof(f66631,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1142),
  inference(cnf_transformation,[],[f66631_D])).
fof(f66631_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1142])])).
fof(f66600,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl1123),
  inference(cnf_transformation,[],[f66600_D])).
fof(f66600_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl1123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1123])])).
fof(f15758,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl2),
  inference(superposition,[],[f2935,f132])).
fof(f2935,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2)))) ) | $spl2),
  inference(superposition,[],[f168,f126])).
fof(f15759,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl2),
  inference(superposition,[],[f2935,f130])).
fof(f66299,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl1065),
  inference(cnf_transformation,[],[f66299_D])).
fof(f66299_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl1065),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1065])])).
fof(f66630,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7)))) ) | $spl1140),
  inference(cnf_transformation,[],[f66630_D])).
fof(f66630_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7)))) ) <=> ~$spl1140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1140])])).
fof(f15792,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f2935,f132])).
fof(f15793,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f2935,f130])).
fof(f66623,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1138),
  inference(cnf_transformation,[],[f66623_D])).
fof(f66623_D,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1138])])).
fof(f16394,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl2),
  inference(superposition,[],[f2951,f132])).
fof(f16395,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl2),
  inference(superposition,[],[f2951,f130])).
fof(f66291,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | $spl1057),
  inference(cnf_transformation,[],[f66291_D])).
fof(f66291_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) <=> ~$spl1057),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1057])])).
fof(f66622,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl1136),
  inference(cnf_transformation,[],[f66622_D])).
fof(f66622_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl1136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1136])])).
fof(f16408,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl2),
  inference(superposition,[],[f2951,f132])).
fof(f16409,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl2),
  inference(superposition,[],[f2951,f130])).
fof(f66612,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1132),
  inference(cnf_transformation,[],[f66612_D])).
fof(f66612_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1132])])).
fof(f17046,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl4),
  inference(superposition,[],[f3264,f132])).
fof(f3264,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f170,f126])).
fof(f17047,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl4),
  inference(superposition,[],[f3264,f130])).
fof(f66611,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1)))) ) | $spl1130),
  inference(cnf_transformation,[],[f66611_D])).
fof(f66611_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1)))) ) <=> ~$spl1130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1130])])).
fof(f17068,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl4),
  inference(superposition,[],[f3264,f132])).
fof(f17069,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl4),
  inference(superposition,[],[f3264,f130])).
fof(f66610,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1129),
  inference(cnf_transformation,[],[f66610_D])).
fof(f66610_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1129])])).
fof(f17228,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl38 | $spl113)),
  inference(superposition,[],[f1313,f481])).
fof(f66608,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1127),
  inference(cnf_transformation,[],[f66608_D])).
fof(f66608_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1127),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1127])])).
fof(f17234,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl38 | $spl133)),
  inference(superposition,[],[f1977,f481])).
fof(f66604,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl38 | $spl107 | $spl242)),
  inference(forward_demodulation,[],[f17269,f8452])).
fof(f17269,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl38 | $spl107)),
  inference(superposition,[],[f6686,f481])).
fof(f6686,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl107),
  inference(superposition,[],[f6654,f127])).
fof(f6654,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl107),
  inference(equality_resolution,[],[f1703])).
fof(f1703,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) ) | $spl107),
  inference(trivial_inequality_removal,[],[f1672])).
fof(f1672,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl107),
  inference(superposition,[],[f1293,f131])).
fof(f66598,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1120),
  inference(cnf_transformation,[],[f66598_D])).
fof(f66598_D,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1120])])).
fof(f17905,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl4),
  inference(superposition,[],[f3276,f132])).
fof(f3276,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f170,f126])).
fof(f17906,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl4),
  inference(superposition,[],[f3276,f130])).
fof(f66597,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) | $spl1118),
  inference(cnf_transformation,[],[f66597_D])).
fof(f66597_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1)))) ) <=> ~$spl1118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1118])])).
fof(f17939,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl4),
  inference(superposition,[],[f3276,f132])).
fof(f17940,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl4),
  inference(superposition,[],[f3276,f130])).
fof(f66596,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1116),
  inference(cnf_transformation,[],[f66596_D])).
fof(f66596_D,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1116])])).
fof(f18722,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl4),
  inference(superposition,[],[f3304,f132])).
fof(f3304,plain,(
  ( ! [X48] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X48))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f126,f170])).
fof(f18723,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl4),
  inference(superposition,[],[f3304,f130])).
fof(f66595,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | $spl1114),
  inference(cnf_transformation,[],[f66595_D])).
fof(f66595_D,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) <=> ~$spl1114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1114])])).
fof(f18736,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl4),
  inference(superposition,[],[f3304,f132])).
fof(f18737,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl4),
  inference(superposition,[],[f3304,f130])).
fof(f66587,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl1113),
  inference(cnf_transformation,[],[f66587_D])).
fof(f66587_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) <=> ~$spl1113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1113])])).
fof(f21830,plain,(
  ( ! [X6] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10060,f132])).
fof(f10060,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))))) ) | ($spl242 | $spl247)),
  inference(resolution,[],[f8842,f141])).
fof(f141,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f21831,plain,(
  ( ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10060,f130])).
fof(f66553,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1111),
  inference(cnf_transformation,[],[f66553_D])).
fof(f66553_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1111])])).
fof(f32249,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl427),
  inference(superposition,[],[f32079,f133])).
fof(f32079,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl427),
  inference(superposition,[],[f32024,f132])).
fof(f32250,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl427),
  inference(superposition,[],[f32079,f131])).
fof(f66276,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl1045),
  inference(cnf_transformation,[],[f66276_D])).
fof(f66276_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) <=> ~$spl1045),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1045])])).
fof(f32702,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl59),
  inference(superposition,[],[f32677,f132])).
fof(f32677,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl59),
  inference(equality_resolution,[],[f2534])).
fof(f2534,plain,(
  ( ! [X2] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl59),
  inference(superposition,[],[f2510,f126])).
fof(f2510,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl59),
  inference(equality_resolution,[],[f674])).
fof(f32703,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl59),
  inference(superposition,[],[f32677,f130])).
fof(f48950,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl843),
  inference(cnf_transformation,[],[f48950_D])).
fof(f48950_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl843),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl843])])).
fof(f59214,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl49 | $spl242)),
  inference(forward_demodulation,[],[f59209,f8452])).
fof(f59209,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f59155])).
fof(f59155,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num',X6) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f51044,f132])).
fof(f51044,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f50996])).
fof(f50996,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(superposition,[],[f49317,f131])).
fof(f49317,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl49),
  inference(superposition,[],[f579,f126])).
fof(f59215,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl49 | $spl242)),
  inference(forward_demodulation,[],[f59208,f8452])).
fof(f59208,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f59156])).
fof(f59156,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(superposition,[],[f51044,f130])).
fof(f66404,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl1107),
  inference(cnf_transformation,[],[f66404_D])).
fof(f66404_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl1107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1107])])).
fof(f60124,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl49 | $spl242)),
  inference(superposition,[],[f59104,f133])).
fof(f59104,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl49 | $spl242)),
  inference(subsumption_resolution,[],[f59038,f8452])).
fof(f59038,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f49879,f132])).
fof(f49879,plain,(
  ( ! [X79] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X79),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X79)))) ) | $spl49),
  inference(superposition,[],[f49313,f154])).
fof(f154,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X0),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X23] : s('type.num.num',X23) = s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X23),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_22_prove_ltb|split|1')).
fof(f60125,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl49 | $spl242)),
  inference(superposition,[],[f59104,f131])).
fof(f66295,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1061),
  inference(cnf_transformation,[],[f66295_D])).
fof(f66295_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1061),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1061])])).
fof(f66385,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1105),
  inference(cnf_transformation,[],[f66385_D])).
fof(f66385_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1105),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1105])])).
fof(f61323,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl411),
  inference(superposition,[],[f61291,f132])).
fof(f61291,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl411),
  inference(equality_resolution,[],[f25239])).
fof(f25239,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl411),
  inference(superposition,[],[f25203,f126])).
fof(f61324,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl411),
  inference(superposition,[],[f61291,f130])).
fof(f66383,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl1102),
  inference(cnf_transformation,[],[f66383_D])).
fof(f66383_D,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) <=> ~$spl1102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1102])])).
fof(f62100,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl18),
  inference(superposition,[],[f14985,f132])).
fof(f62101,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl18),
  inference(superposition,[],[f14985,f130])).
fof(f66381,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl1100),
  inference(cnf_transformation,[],[f66381_D])).
fof(f66381_D,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) <=> ~$spl1100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1100])])).
fof(f66382,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f62114,f301])).
fof(f62114,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl18),
  inference(superposition,[],[f14985,f132])).
fof(f66380,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl18),
  inference(forward_demodulation,[],[f62115,f301])).
fof(f62115,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))))) ) | $spl18),
  inference(superposition,[],[f14985,f130])).
fof(f66371,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1098),
  inference(cnf_transformation,[],[f66371_D])).
fof(f66371_D,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1098),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1098])])).
fof(f66274,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl1043),
  inference(cnf_transformation,[],[f66274_D])).
fof(f66274_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl1043),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1043])])).
fof(f66098,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl38),
  inference(superposition,[],[f17111,f130])).
fof(f17111,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X0)))) ) | $spl38),
  inference(superposition,[],[f481,f126])).
fof(f66097,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl38),
  inference(superposition,[],[f17111,f132])).
fof(f561,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl45),
  inference(cnf_transformation,[],[f561_D])).
fof(f561_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f66370,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6)))) ) | $spl1096),
  inference(cnf_transformation,[],[f66370_D])).
fof(f66370_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6)))) ) <=> ~$spl1096),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1096])])).
fof(f66034,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl38),
  inference(superposition,[],[f17111,f130])).
fof(f66033,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl38),
  inference(superposition,[],[f17111,f132])).
fof(f66360,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1094),
  inference(cnf_transformation,[],[f66360_D])).
fof(f66360_D,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1094),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1094])])).
fof(f60374,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl18),
  inference(superposition,[],[f14962,f130])).
fof(f14962,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl18),
  inference(superposition,[],[f301,f126])).
fof(f60373,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl18),
  inference(superposition,[],[f14962,f132])).
fof(f66359,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl1092),
  inference(cnf_transformation,[],[f66359_D])).
fof(f66359_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl1092),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1092])])).
fof(f60313,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl18),
  inference(superposition,[],[f14962,f130])).
fof(f60312,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl18),
  inference(superposition,[],[f14962,f132])).
fof(f66358,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl1091),
  inference(cnf_transformation,[],[f66358_D])).
fof(f66358_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) <=> ~$spl1091),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1091])])).
fof(f58131,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl167),
  inference(superposition,[],[f54485,f130])).
fof(f54485,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | $spl167),
  inference(equality_resolution,[],[f2206])).
fof(f2206,plain,(
  ( ! [X5] : (s('type.num.num',sK1) != s('type.num.num',X5) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))) ) | $spl167),
  inference(superposition,[],[f2089,f126])).
fof(f58130,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl167),
  inference(superposition,[],[f54485,f132])).
fof(f66344,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1088),
  inference(cnf_transformation,[],[f66344_D])).
fof(f66344_D,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1088),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1088])])).
fof(f52177,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl30),
  inference(superposition,[],[f15833,f130])).
fof(f15833,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) ) | $spl30),
  inference(superposition,[],[f317,f126])).
fof(f52176,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl30),
  inference(superposition,[],[f15833,f132])).
fof(f66343,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) ) | $spl1086),
  inference(cnf_transformation,[],[f66343_D])).
fof(f66343_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6)))) ) <=> ~$spl1086),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1086])])).
fof(f52120,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl30),
  inference(superposition,[],[f15833,f130])).
fof(f52119,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl30),
  inference(superposition,[],[f15833,f132])).
fof(f66339,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1084),
  inference(cnf_transformation,[],[f66339_D])).
fof(f66339_D,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1084),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1084])])).
fof(f47879,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f45721,f130])).
fof(f45721,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))) ) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f45665,f37300])).
fof(f45665,plain,(
  ( ! [X24] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X24))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37399,f136])).
fof(f37399,plain,(
  ( ! [X34] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X34))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f126,f37300])).
fof(f47878,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f45721,f132])).
fof(f66338,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) | $spl1082),
  inference(cnf_transformation,[],[f66338_D])).
fof(f66338_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl1082),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1082])])).
fof(f47823,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f45721,f130])).
fof(f47822,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f45721,f132])).
fof(f66328,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1080),
  inference(cnf_transformation,[],[f66328_D])).
fof(f66328_D,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1080),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1080])])).
fof(f45702,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37399,f130])).
fof(f45701,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37399,f132])).
fof(f66327,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | $spl1078),
  inference(cnf_transformation,[],[f66327_D])).
fof(f66327_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) <=> ~$spl1078),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1078])])).
fof(f45649,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37399,f130])).
fof(f45648,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37399,f132])).
fof(f66320,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1076),
  inference(cnf_transformation,[],[f66320_D])).
fof(f66320_D,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1076),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1076])])).
fof(f42753,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37378,f130])).
fof(f37378,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37300,f126])).
fof(f42752,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37378,f132])).
fof(f66319,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) ) | $spl1074),
  inference(cnf_transformation,[],[f66319_D])).
fof(f66319_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6)))) ) <=> ~$spl1074),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1074])])).
fof(f42702,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37378,f130])).
fof(f42701,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37378,f132])).
fof(f66318,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl1073),
  inference(cnf_transformation,[],[f66318_D])).
fof(f66318_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) <=> ~$spl1073),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1073])])).
fof(f41759,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl575),
  inference(superposition,[],[f41727,f130])).
fof(f41727,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl575),
  inference(equality_resolution,[],[f37369])).
fof(f37369,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))) ) | $spl575),
  inference(superposition,[],[f36344,f126])).
fof(f41758,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))))) | $spl575),
  inference(superposition,[],[f41727,f132])).
fof(f66316,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | $spl1071),
  inference(cnf_transformation,[],[f66316_D])).
fof(f66316_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) <=> ~$spl1071),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1071])])).
fof(f40929,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | $spl507),
  inference(superposition,[],[f40897,f130])).
fof(f40897,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | $spl507),
  inference(equality_resolution,[],[f37325])).
fof(f37325,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))) ) | $spl507),
  inference(superposition,[],[f36218,f126])).
fof(f40928,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | $spl507),
  inference(superposition,[],[f40897,f132])).
fof(f66314,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | $spl1069),
  inference(cnf_transformation,[],[f66314_D])).
fof(f66314_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) <=> ~$spl1069),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1069])])).
fof(f40461,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | $spl493),
  inference(superposition,[],[f40409,f130])).
fof(f40409,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl493),
  inference(equality_resolution,[],[f37307])).
fof(f37307,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | $spl493),
  inference(superposition,[],[f36202,f126])).
fof(f40460,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))))) | $spl493),
  inference(superposition,[],[f40409,f132])).
fof(f39054,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl537),
  inference(superposition,[],[f36265,f130])).
fof(f39053,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl537),
  inference(superposition,[],[f36265,f132])).
fof(f31424,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl423),
  inference(superposition,[],[f31391,f130])).
fof(f31423,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl423),
  inference(superposition,[],[f31391,f132])).
fof(f66297,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))))))) ) | $spl1062),
  inference(cnf_transformation,[],[f66297_D])).
fof(f66297_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))))))) ) <=> ~$spl1062),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1062])])).
fof(f24561,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),'const.list.NIL_0')))))))) ) | $spl59),
  inference(superposition,[],[f24543,f130])).
fof(f24560,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))))))) ) | $spl59),
  inference(superposition,[],[f24543,f132])).
fof(f21436,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl387),
  inference(superposition,[],[f21408,f130])).
fof(f21408,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl387),
  inference(equality_resolution,[],[f21065])).
fof(f21065,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl387),
  inference(superposition,[],[f21020,f126])).
fof(f21435,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl387),
  inference(superposition,[],[f21408,f132])).
fof(f66293,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl1059),
  inference(cnf_transformation,[],[f66293_D])).
fof(f66293_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl1059),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1059])])).
fof(f21291,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl385),
  inference(superposition,[],[f21261,f130])).
fof(f21261,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl385),
  inference(equality_resolution,[],[f21055])).
fof(f21055,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl385),
  inference(superposition,[],[f21018,f126])).
fof(f21290,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl385),
  inference(superposition,[],[f21261,f132])).
fof(f19451,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | ($spl23 | $spl242)),
  inference(superposition,[],[f19425,f130])).
fof(f19425,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl23 | $spl242)),
  inference(equality_resolution,[],[f9234])).
fof(f9234,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | ($spl23 | $spl242)),
  inference(superposition,[],[f9217,f126])).
fof(f9217,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | ($spl23 | $spl242)),
  inference(forward_demodulation,[],[f9216,f136])).
fof(f9216,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl23 | $spl242)),
  inference(forward_demodulation,[],[f305,f8452])).
fof(f305,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl23),
  inference(cnf_transformation,[],[f305_D])).
fof(f305_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f19450,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | ($spl23 | $spl242)),
  inference(superposition,[],[f19425,f132])).
fof(f66289,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl1055),
  inference(cnf_transformation,[],[f66289_D])).
fof(f66289_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) <=> ~$spl1055),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1055])])).
fof(f19302,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl0),
  inference(superposition,[],[f19276,f130])).
fof(f19276,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl0),
  inference(equality_resolution,[],[f2127])).
fof(f2127,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl0),
  inference(superposition,[],[f2057,f126])).
fof(f2057,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl0),
  inference(trivial_inequality_removal,[],[f2011])).
fof(f2011,plain,(
  s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f19301,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))))) | $spl0),
  inference(superposition,[],[f19276,f132])).
fof(f18529,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl311),
  inference(superposition,[],[f18501,f130])).
fof(f18501,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl311),
  inference(equality_resolution,[],[f10672])).
fof(f10672,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl311),
  inference(superposition,[],[f10653,f126])).
fof(f18528,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl311),
  inference(superposition,[],[f18501,f132])).
fof(f66282,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1050),
  inference(cnf_transformation,[],[f66282_D])).
fof(f66282_D,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1050),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1050])])).
fof(f18234,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl4),
  inference(superposition,[],[f3280,f130])).
fof(f3280,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X0)))) ) | $spl4),
  inference(superposition,[],[f170,f126])).
fof(f18233,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl4),
  inference(superposition,[],[f3280,f132])).
fof(f66281,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) | $spl1048),
  inference(cnf_transformation,[],[f66281_D])).
fof(f66281_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) <=> ~$spl1048),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1048])])).
fof(f18186,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl4),
  inference(superposition,[],[f3280,f130])).
fof(f18185,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl4),
  inference(superposition,[],[f3280,f132])).
fof(f66278,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl1047),
  inference(cnf_transformation,[],[f66278_D])).
fof(f66278_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl1047),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1047])])).
fof(f17774,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl293),
  inference(superposition,[],[f17638,f130])).
fof(f17638,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl293),
  inference(equality_resolution,[],[f9952])).
fof(f9952,plain,(
  ( ! [X2] : (s('type.num.num',sK1) != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl293),
  inference(superposition,[],[f9919,f126])).
fof(f17773,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl293),
  inference(superposition,[],[f17638,f132])).
fof(f16624,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl213),
  inference(superposition,[],[f16592,f130])).
fof(f16592,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl213),
  inference(equality_resolution,[],[f9228])).
fof(f9228,plain,(
  ( ! [X2] : (s('type.num.num',sK1) != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl213),
  inference(superposition,[],[f5898,f126])).
fof(f16623,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl213),
  inference(superposition,[],[f16592,f132])).
fof(f66272,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl1040),
  inference(cnf_transformation,[],[f66272_D])).
fof(f66272_D,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) <=> ~$spl1040),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1040])])).
fof(f14515,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl2),
  inference(superposition,[],[f2909,f130])).
fof(f2909,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(superposition,[],[f168,f126])).
fof(f14514,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl2),
  inference(superposition,[],[f2909,f132])).
fof(f66271,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl1038),
  inference(cnf_transformation,[],[f66271_D])).
fof(f66271_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl1038),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1038])])).
fof(f14470,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl2),
  inference(superposition,[],[f2909,f130])).
fof(f14469,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl2),
  inference(superposition,[],[f2909,f132])).
fof(f66263,plain,(
  $false | ($spl44 | $spl248)),
  inference(subsumption_resolution,[],[f560,f8839])).
fof(f560,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl44),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f49017,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl875),
  inference(cnf_transformation,[],[f49017_D])).
fof(f49017_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl875),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl875])])).
fof(f66258,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.NIL_0')))) ) | $spl1036),
  inference(cnf_transformation,[],[f66258_D])).
fof(f66258_D,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.NIL_0')))) ) <=> ~$spl1036),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1036])])).
fof(f66208,plain,(
  ( ! [X10] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl45),
  inference(superposition,[],[f65848,f140])).
fof(f65848,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl45),
  inference(superposition,[],[f65798,f127])).
fof(f65798,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(equality_resolution,[],[f34747])).
fof(f34747,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(trivial_inequality_removal,[],[f34712])).
fof(f34712,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl45),
  inference(superposition,[],[f22528,f162])).
fof(f22528,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(superposition,[],[f22489,f127])).
fof(f22489,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))))) | $spl45),
  inference(equality_resolution,[],[f735])).
fof(f735,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))))) ) | $spl45),
  inference(superposition,[],[f561,f126])).
fof(f66257,plain,(
  ( ! [X119] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.NIL_0')))) ) | $spl45),
  inference(forward_demodulation,[],[f66256,f151])).
fof(f66256,plain,(
  ( ! [X119] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl45),
  inference(forward_demodulation,[],[f66196,f140])).
fof(f66196,plain,(
  ( ! [X119] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X119),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl45),
  inference(superposition,[],[f65848,f151])).
fof(f66254,plain,(
  ( ! [X117] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) | $spl1032),
  inference(cnf_transformation,[],[f66254_D])).
fof(f66254_D,plain,(
  ( ! [X117] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl1032),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1032])])).
fof(f66255,plain,(
  ( ! [X118] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl1034),
  inference(cnf_transformation,[],[f66255_D])).
fof(f66255_D,plain,(
  ( ! [X118] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl1034),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1034])])).
fof(f66253,plain,(
  ( ! [X118,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(forward_demodulation,[],[f66195,f140])).
fof(f66195,plain,(
  ( ! [X118,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(superposition,[],[f65848,f148])).
fof(f49291,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))) ) | $spl992),
  inference(cnf_transformation,[],[f49291_D])).
fof(f49291_D,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))) ) <=> ~$spl992),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl992])])).
fof(f66172,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl45),
  inference(superposition,[],[f65848,f162])).
fof(f66232,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1029),
  inference(cnf_transformation,[],[f66232_D])).
fof(f66232_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1029),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1029])])).
fof(f66170,plain,(
  ( ! [X60] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X60),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl18 | $spl45)),
  inference(superposition,[],[f65848,f301])).
fof(f66169,plain,(
  ( ! [X59] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl45)),
  inference(superposition,[],[f65848,f168])).
fof(f66230,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl1027),
  inference(cnf_transformation,[],[f66230_D])).
fof(f66230_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl1027),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1027])])).
fof(f66168,plain,(
  ( ! [X58] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X58),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)))) ) | ($spl38 | $spl45)),
  inference(superposition,[],[f65848,f481])).
fof(f66165,plain,(
  ( ! [X54] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X54),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl45)),
  inference(superposition,[],[f65848,f170])).
fof(f65951,plain,(
  ( ! [X118] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl1022),
  inference(cnf_transformation,[],[f65951_D])).
fof(f65951_D,plain,(
  ( ! [X118] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl1022),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1022])])).
fof(f65950,plain,(
  ( ! [X118,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(forward_demodulation,[],[f65912,f140])).
fof(f65912,plain,(
  ( ! [X118,X117] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X118),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X117),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(superposition,[],[f65840,f148])).
fof(f65840,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X3),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))))) | s('type.num.num',sK1) != s('type.num.num',X2)) ) | $spl45),
  inference(superposition,[],[f65798,f127])).
fof(f65940,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl1020),
  inference(cnf_transformation,[],[f65940_D])).
fof(f65940_D,plain,(
  ( ! [X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl1020),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1020])])).
fof(f65889,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X65),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl45),
  inference(superposition,[],[f65840,f162])).
fof(f65871,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl45),
  inference(superposition,[],[f65840,f131])).
fof(f65870,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X15),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | $spl45),
  inference(superposition,[],[f65840,f133])).
fof(f65394,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0))))))))))))))))) ) | $spl1016),
  inference(cnf_transformation,[],[f65394_D])).
fof(f65394_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0))))))))))))))))) ) <=> ~$spl1016),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1016])])).
fof(f65396,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))))) | $spl1019),
  inference(cnf_transformation,[],[f65396_D])).
fof(f65396_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))))) <=> ~$spl1019),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1019])])).
fof(f65393,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0))))))))))))))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f65392,f37300])).
fof(f65392,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0))))))))))))))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f65293,f61909])).
fof(f61909,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f61427])).
fof(f61427,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f37389,f61367])).
fof(f61367,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))) | $spl18),
  inference(equality_resolution,[],[f14977])).
fof(f14977,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,X1,X0))))) ) | $spl18),
  inference(superposition,[],[f157,f301])).
fof(f65293,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f65166])).
fof(f65166,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)) | ($spl18 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f64641])).
fof(f64641,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f62707])).
fof(f62707,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f62220])).
fof(f62220,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f61909])).
fof(f63738,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl1015),
  inference(cnf_transformation,[],[f63738_D])).
fof(f63738_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl1015),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1015])])).
fof(f63691,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl18),
  inference(superposition,[],[f14989,f162])).
fof(f14989,plain,(
  ( ! [X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl18),
  inference(superposition,[],[f127,f301])).
fof(f63677,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl18),
  inference(superposition,[],[f14989,f131])).
fof(f63676,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl18),
  inference(superposition,[],[f14989,f133])).
fof(f63591,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0))))))))))))))))) ) | $spl1010),
  inference(cnf_transformation,[],[f63591_D])).
fof(f63591_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0))))))))))))))))) ) <=> ~$spl1010),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1010])])).
fof(f63593,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))) | $spl1013),
  inference(cnf_transformation,[],[f63593_D])).
fof(f63593_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))) <=> ~$spl1013),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1013])])).
fof(f63590,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0))))))))))))))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f63589,f37300])).
fof(f63589,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0))))))))))))))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f63494,f61367])).
fof(f63494,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0))))) ) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f63368])).
fof(f63368,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)) | ($spl18 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f62848])).
fof(f62848,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f61910])).
fof(f61910,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f61426])).
fof(f61426,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK19('const.num.SUC_1'(s('type.num.num','const.num.|48|_0')),sK1,sK2,sK0),sK0)))) | ($spl18 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f61367])).
fof(f59033,plain,(
  $false | ($spl240 | $spl299)),
  inference(subsumption_resolution,[],[f59016,f9927])).
fof(f59016,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl240),
  inference(equality_resolution,[],[f8451])).
fof(f59031,plain,(
  $false | ($spl240 | $spl299)),
  inference(subsumption_resolution,[],[f59030,f9927])).
fof(f59030,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl240),
  inference(forward_demodulation,[],[f59017,f152])).
fof(f59017,plain,(
  ( ! [X78,X77] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X77),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X78)))))))))))))) ) | $spl240),
  inference(trivial_inequality_removal,[],[f59014])).
fof(f59014,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X77),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X78)))))))))))))) ) | $spl240),
  inference(superposition,[],[f8451,f152])).
fof(f59029,plain,(
  $false | ($spl30 | $spl240 | $spl299)),
  inference(subsumption_resolution,[],[f59028,f9927])).
fof(f59028,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl30 | $spl240)),
  inference(forward_demodulation,[],[f59018,f52710])).
fof(f59018,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))))))))))))) | ($spl30 | $spl240)),
  inference(trivial_inequality_removal,[],[f58997])).
fof(f58997,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))))))))))))) | ($spl30 | $spl240)),
  inference(superposition,[],[f8451,f52710])).
fof(f57603,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0))))))))))))))))) ) | $spl1006),
  inference(cnf_transformation,[],[f57603_D])).
fof(f57603_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0))))))))))))))))) ) <=> ~$spl1006),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1006])])).
fof(f57605,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))))) | $spl1009),
  inference(cnf_transformation,[],[f57605_D])).
fof(f57605_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))))) <=> ~$spl1009),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1009])])).
fof(f57602,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0))))))))))))))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f57601,f37300])).
fof(f57601,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0))))))))))))))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f57507,f54023])).
fof(f54023,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f53596])).
fof(f53596,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f37389,f53552])).
fof(f53552,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))) | $spl30),
  inference(equality_resolution,[],[f15841])).
fof(f15841,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),X3))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),sK20(sK1,'const.arithmetic.ZERO_0',X3,X2))))) ) | $spl30),
  inference(superposition,[],[f158,f317])).
fof(f57507,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f57316])).
fof(f57316,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)) | ($spl30 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f56843])).
fof(f56843,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f55005])).
fof(f55005,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f54564])).
fof(f54564,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f54023])).
fof(f55803,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))))))))))))))) ) | $spl1002),
  inference(cnf_transformation,[],[f55803_D])).
fof(f55803_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))))))))))))))) ) <=> ~$spl1002),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1002])])).
fof(f55805,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))) | $spl1005),
  inference(cnf_transformation,[],[f55805_D])).
fof(f55805_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))) <=> ~$spl1005),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1005])])).
fof(f55802,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))))))))))))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f55801,f37300])).
fof(f55801,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))))))))))))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f55707,f53552])).
fof(f55707,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0))))) ) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f55599])).
fof(f55599,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)) | ($spl30 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f55131])).
fof(f55131,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f54024])).
fof(f54024,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f53595])).
fof(f53595,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.arithmetic.ZERO_0',sK2,sK0),sK0)))) | ($spl30 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f53552])).
fof(f1219,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl110),
  inference(cnf_transformation,[],[f1219_D])).
fof(f1219_D,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f51308,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl1001),
  inference(cnf_transformation,[],[f51308_D])).
fof(f51308_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl1001),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1001])])).
fof(f51306,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f51274,f140])).
fof(f51274,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f49952,f148])).
fof(f49952,plain,(
  ( ! [X79] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X79),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X79)) ) | $spl49),
  inference(superposition,[],[f49891,f154])).
fof(f50166,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | $spl999),
  inference(cnf_transformation,[],[f50166_D])).
fof(f50166_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) <=> ~$spl999),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl999])])).
fof(f50164,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f50129,f140])).
fof(f50129,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f49918,f148])).
fof(f579,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl49),
  inference(cnf_transformation,[],[f579_D])).
fof(f579_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f49297,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl997),
  inference(cnf_transformation,[],[f49297_D])).
fof(f49297_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl997),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl997])])).
fof(f1929,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl133),
  inference(superposition,[],[f1921,f132])).
fof(f1930,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl133),
  inference(superposition,[],[f1921,f130])).
fof(f1948,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl137),
  inference(superposition,[],[f1924,f132])).
fof(f1949,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl137),
  inference(superposition,[],[f1924,f130])).
fof(f49294,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl995),
  inference(cnf_transformation,[],[f49294_D])).
fof(f49294_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl995),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl995])])).
fof(f49295,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl129 | $spl242)),
  inference(forward_demodulation,[],[f2138,f8452])).
fof(f2138,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl129),
  inference(superposition,[],[f1918,f132])).
fof(f49292,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl129 | $spl242)),
  inference(forward_demodulation,[],[f2139,f8452])).
fof(f2139,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl129),
  inference(superposition,[],[f1918,f130])).
fof(f2604,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl45),
  inference(superposition,[],[f731,f162])).
fof(f731,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl45),
  inference(superposition,[],[f561,f127])).
fof(f49289,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl990),
  inference(cnf_transformation,[],[f49289_D])).
fof(f49289_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl990),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl990])])).
fof(f2691,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl17),
  inference(superposition,[],[f804,f133])).
fof(f804,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl17),
  inference(superposition,[],[f715,f127])).
fof(f715,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl17),
  inference(duplicate_literal_removal,[],[f698])).
fof(f698,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl17),
  inference(superposition,[],[f299,f130])).
fof(f2692,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl17),
  inference(superposition,[],[f804,f131])).
fof(f49288,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl988),
  inference(cnf_transformation,[],[f49288_D])).
fof(f49288_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl988),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl988])])).
fof(f2702,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f804,f162])).
fof(f49286,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl986),
  inference(cnf_transformation,[],[f49286_D])).
fof(f49286_D,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl986),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl986])])).
fof(f2790,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl53),
  inference(superposition,[],[f972,f133])).
fof(f972,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl53),
  inference(superposition,[],[f583,f127])).
fof(f2791,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl53),
  inference(superposition,[],[f972,f131])).
fof(f49285,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl984),
  inference(cnf_transformation,[],[f49285_D])).
fof(f49285_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl984),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl984])])).
fof(f2801,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl53),
  inference(superposition,[],[f972,f162])).
fof(f49278,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl983),
  inference(cnf_transformation,[],[f49278_D])).
fof(f49278_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl983),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl983])])).
fof(f49279,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl207),
  inference(forward_demodulation,[],[f5581,f151])).
fof(f5581,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl207),
  inference(superposition,[],[f5578,f132])).
fof(f49276,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl207),
  inference(forward_demodulation,[],[f5582,f151])).
fof(f5582,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl207),
  inference(superposition,[],[f5578,f130])).
fof(f12544,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl332),
  inference(cnf_transformation,[],[f12544_D])).
fof(f12544_D,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f49271,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl101 | $spl242)),
  inference(subsumption_resolution,[],[f49270,f162])).
fof(f49270,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl101 | $spl242)),
  inference(forward_demodulation,[],[f6244,f8452])).
fof(f6244,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl101),
  inference(superposition,[],[f1337,f162])).
fof(f1337,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl101),
  inference(superposition,[],[f1239,f127])).
fof(f1239,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl101),
  inference(trivial_inequality_removal,[],[f1236])).
fof(f1236,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl101),
  inference(superposition,[],[f1209,f130])).
fof(f6516,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl107),
  inference(superposition,[],[f1412,f162])).
fof(f1412,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl107),
  inference(superposition,[],[f1299,f127])).
fof(f1299,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl107),
  inference(trivial_inequality_removal,[],[f1296])).
fof(f1296,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl107),
  inference(superposition,[],[f1216,f130])).
fof(f21943,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl388),
  inference(cnf_transformation,[],[f21943_D])).
fof(f21943_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl388),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl388])])).
fof(f6912,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl35),
  inference(superposition,[],[f660,f133])).
fof(f660,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl35),
  inference(superposition,[],[f336,f127])).
fof(f6913,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl35),
  inference(superposition,[],[f660,f131])).
fof(f21949,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl392),
  inference(cnf_transformation,[],[f21949_D])).
fof(f21949_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl392),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl392])])).
fof(f6927,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl35),
  inference(superposition,[],[f660,f162])).
fof(f49251,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl978),
  inference(cnf_transformation,[],[f49251_D])).
fof(f49251_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl978),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl978])])).
fof(f7630,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl17),
  inference(superposition,[],[f707,f133])).
fof(f707,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl17),
  inference(superposition,[],[f299,f127])).
fof(f7631,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl17),
  inference(superposition,[],[f707,f131])).
fof(f49250,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl976),
  inference(cnf_transformation,[],[f49250_D])).
fof(f49250_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl976),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl976])])).
fof(f7645,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f707,f162])).
fof(f49246,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f8140,f151])).
fof(f8140,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(superposition,[],[f8131,f132])).
fof(f49245,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f8141,f151])).
fof(f8141,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(superposition,[],[f8131,f130])).
fof(f49234,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl974),
  inference(cnf_transformation,[],[f49234_D])).
fof(f49234_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl974),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl974])])).
fof(f8762,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(superposition,[],[f8704,f132])).
fof(f8704,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(forward_demodulation,[],[f8517,f156])).
fof(f8517,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(superposition,[],[f153,f8452])).
fof(f153,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X23))) = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.num.|48|_0')))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|24')).
fof(f8763,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(superposition,[],[f8704,f130])).
fof(f24006,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl402),
  inference(cnf_transformation,[],[f24006_D])).
fof(f24006_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl402),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl402])])).
fof(f8883,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl248),
  inference(superposition,[],[f8839,f133])).
fof(f8884,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl248),
  inference(superposition,[],[f8839,f131])).
fof(f49232,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | $spl972),
  inference(cnf_transformation,[],[f49232_D])).
fof(f49232_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) <=> ~$spl972),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl972])])).
fof(f8961,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl244),
  inference(superposition,[],[f8758,f132])).
fof(f8962,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl244),
  inference(superposition,[],[f8758,f130])).
fof(f49227,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl971),
  inference(cnf_transformation,[],[f49227_D])).
fof(f49227_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl971),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl971])])).
fof(f49228,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl305),
  inference(forward_demodulation,[],[f9966,f151])).
fof(f9966,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl305),
  inference(superposition,[],[f9933,f132])).
fof(f49225,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl305),
  inference(forward_demodulation,[],[f9967,f151])).
fof(f9967,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl305),
  inference(superposition,[],[f9933,f130])).
fof(f49222,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) ) | $spl968),
  inference(cnf_transformation,[],[f49222_D])).
fof(f49222_D,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))))) ) <=> ~$spl968),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl968])])).
fof(f10061,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f8842,f132])).
fof(f10062,plain,(
  ( ! [X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f8842,f130])).
fof(f49220,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl967),
  inference(cnf_transformation,[],[f49220_D])).
fof(f49220_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl967),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl967])])).
fof(f49221,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f10242,f151])).
fof(f10242,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10230,f132])).
fof(f10230,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10186,f140])).
fof(f10186,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | ($spl242 | $spl247)),
  inference(trivial_inequality_removal,[],[f10179])).
fof(f10179,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10123,f131])).
fof(f10123,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | ($spl242 | $spl247)),
  inference(subsumption_resolution,[],[f10122,f8761])).
fof(f10122,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f10117,f156])).
fof(f10117,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f8842,f132])).
fof(f49218,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f10243,f151])).
fof(f10243,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10230,f130])).
fof(f49216,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl964),
  inference(cnf_transformation,[],[f49216_D])).
fof(f49216_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl964),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl964])])).
fof(f49217,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f10309,f151])).
fof(f10309,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f9867,f132])).
fof(f9867,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl242 | $spl247)),
  inference(subsumption_resolution,[],[f9858,f8761])).
fof(f9858,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl242),
  inference(superposition,[],[f142,f8819])).
fof(f8819,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(superposition,[],[f8701,f140])).
fof(f49214,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f10310,f151])).
fof(f10310,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f9867,f130])).
fof(f49213,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl962),
  inference(cnf_transformation,[],[f49213_D])).
fof(f49213_D,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) <=> ~$spl962),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl962])])).
fof(f10328,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | $spl248),
  inference(superposition,[],[f8895,f133])).
fof(f8895,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))) ) | $spl248),
  inference(superposition,[],[f8839,f127])).
fof(f10329,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl248),
  inference(superposition,[],[f8895,f131])).
fof(f49211,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) | $spl960),
  inference(cnf_transformation,[],[f49211_D])).
fof(f49211_D,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) <=> ~$spl960),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl960])])).
fof(f10342,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) | $spl248),
  inference(superposition,[],[f8895,f162])).
fof(f49209,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl958),
  inference(cnf_transformation,[],[f49209_D])).
fof(f49209_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl958),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl958])])).
fof(f10500,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl244 | $spl247)),
  inference(superposition,[],[f9815,f133])).
fof(f9815,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl244 | $spl247)),
  inference(superposition,[],[f8975,f127])).
fof(f8975,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl244 | $spl247)),
  inference(subsumption_resolution,[],[f8974,f8761])).
fof(f8974,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(forward_demodulation,[],[f8965,f156])).
fof(f8965,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0')))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(superposition,[],[f8758,f132])).
fof(f10501,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl244 | $spl247)),
  inference(superposition,[],[f9815,f131])).
fof(f49207,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl956),
  inference(cnf_transformation,[],[f49207_D])).
fof(f49207_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl956),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl956])])).
fof(f10514,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl244 | $spl247)),
  inference(superposition,[],[f9815,f162])).
fof(f49205,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl955),
  inference(cnf_transformation,[],[f49205_D])).
fof(f49205_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl955),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl955])])).
fof(f10782,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl309),
  inference(superposition,[],[f9941,f132])).
fof(f10783,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl309),
  inference(superposition,[],[f9941,f130])).
fof(f49203,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl952),
  inference(cnf_transformation,[],[f49203_D])).
fof(f49203_D,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) <=> ~$spl952),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl952])])).
fof(f10868,plain,(
  ( ! [X0] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl242),
  inference(superposition,[],[f8513,f132])).
fof(f8513,plain,(
  ( ! [X6] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X6))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl242),
  inference(superposition,[],[f137,f8452])).
fof(f137,plain,(
  ( ! [X0,X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X23,X26] : s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X26))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X26)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|28')).
fof(f10869,plain,(
  ( ! [X1] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl242),
  inference(superposition,[],[f8513,f130])).
fof(f49202,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl951),
  inference(cnf_transformation,[],[f49202_D])).
fof(f49202_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl951),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl951])])).
fof(f10938,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl244),
  inference(superposition,[],[f8956,f132])).
fof(f8956,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | $spl244),
  inference(resolution,[],[f8758,f141])).
fof(f10939,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl244),
  inference(superposition,[],[f8956,f130])).
fof(f24020,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl406),
  inference(cnf_transformation,[],[f24020_D])).
fof(f24020_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl406),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl406])])).
fof(f11470,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl47),
  inference(superposition,[],[f2401,f162])).
fof(f2401,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl47),
  inference(trivial_inequality_removal,[],[f2364])).
fof(f2364,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl47),
  inference(superposition,[],[f586,f130])).
fof(f586,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl47),
  inference(superposition,[],[f563,f126])).
fof(f49198,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl948),
  inference(cnf_transformation,[],[f49198_D])).
fof(f49198_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) <=> ~$spl948),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl948])])).
fof(f11931,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f7617,f132])).
fof(f7617,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl15),
  inference(superposition,[],[f7593,f127])).
fof(f7593,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl15),
  inference(equality_resolution,[],[f576])).
fof(f576,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl15),
  inference(superposition,[],[f293,f126])).
fof(f11932,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl15),
  inference(superposition,[],[f7617,f130])).
fof(f49197,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl946),
  inference(cnf_transformation,[],[f49197_D])).
fof(f49197_D,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl946),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl946])])).
fof(f12125,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2911,f133])).
fof(f2911,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))))))) ) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f12126,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2911,f131])).
fof(f49195,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl944),
  inference(cnf_transformation,[],[f49195_D])).
fof(f49195_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl944),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl944])])).
fof(f12139,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2911,f162])).
fof(f49193,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl942),
  inference(cnf_transformation,[],[f49193_D])).
fof(f49193_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl942),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl942])])).
fof(f12308,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl321),
  inference(superposition,[],[f12109,f133])).
fof(f12109,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl321),
  inference(superposition,[],[f12079,f127])).
fof(f12079,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl321),
  inference(forward_demodulation,[],[f12076,f149])).
fof(f12076,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl321),
  inference(trivial_inequality_removal,[],[f12071])).
fof(f12071,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl321),
  inference(superposition,[],[f12001,f132])).
fof(f12309,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl321),
  inference(superposition,[],[f12109,f131])).
fof(f49191,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl940),
  inference(cnf_transformation,[],[f49191_D])).
fof(f49191_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl940),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl940])])).
fof(f12322,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl321),
  inference(superposition,[],[f12109,f162])).
fof(f49188,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))))) ) | $spl938),
  inference(cnf_transformation,[],[f49188_D])).
fof(f49188_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))))))) ) <=> ~$spl938),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl938])])).
fof(f49189,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f12358,f151])).
fof(f12358,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(superposition,[],[f3037,f132])).
fof(f3037,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))))) ) | $spl2),
  inference(forward_demodulation,[],[f2919,f140])).
fof(f2919,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl2),
  inference(superposition,[],[f168,f126])).
fof(f49187,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(forward_demodulation,[],[f12359,f151])).
fof(f12359,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl2),
  inference(superposition,[],[f3037,f130])).
fof(f49183,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl937),
  inference(cnf_transformation,[],[f49183_D])).
fof(f49183_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl937),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl937])])).
fof(f49184,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl335),
  inference(forward_demodulation,[],[f12587,f151])).
fof(f12587,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl335),
  inference(superposition,[],[f12549,f132])).
fof(f49181,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl335),
  inference(forward_demodulation,[],[f12588,f151])).
fof(f12588,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl335),
  inference(superposition,[],[f12549,f130])).
fof(f49180,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl934),
  inference(cnf_transformation,[],[f49180_D])).
fof(f49180_D,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl934),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl934])])).
fof(f12746,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl4),
  inference(superposition,[],[f3252,f133])).
fof(f3252,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f12747,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl4),
  inference(superposition,[],[f3252,f131])).
fof(f49178,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl932),
  inference(cnf_transformation,[],[f49178_D])).
fof(f49178_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl932),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl932])])).
fof(f12760,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl4),
  inference(superposition,[],[f3252,f162])).
fof(f49176,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl931),
  inference(cnf_transformation,[],[f49176_D])).
fof(f49176_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl931),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl931])])).
fof(f13055,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl337),
  inference(superposition,[],[f13034,f132])).
fof(f13056,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl337),
  inference(superposition,[],[f13034,f130])).
fof(f49173,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))),s('type.num.num',sK1)))) ) | $spl928),
  inference(cnf_transformation,[],[f49173_D])).
fof(f49173_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))),s('type.num.num',sK1)))) ) <=> ~$spl928),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl928])])).
fof(f49174,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f13082,f151])).
fof(f13082,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f3390,f132])).
fof(f3390,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',sK1)))) ) | $spl4),
  inference(forward_demodulation,[],[f3260,f140])).
fof(f3260,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl4),
  inference(superposition,[],[f170,f126])).
fof(f49172,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(forward_demodulation,[],[f13083,f151])).
fof(f13083,plain,(
  ( ! [X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f3390,f130])).
fof(f49169,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl926),
  inference(cnf_transformation,[],[f49169_D])).
fof(f49169_D,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) <=> ~$spl926),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl926])])).
fof(f13521,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10180,f133])).
fof(f10180,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2)))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10123,f127])).
fof(f13522,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10180,f131])).
fof(f49167,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) | $spl924),
  inference(cnf_transformation,[],[f49167_D])).
fof(f49167_D,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) <=> ~$spl924),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl924])])).
fof(f13535,plain,(
  ( ! [X57,X58,X56] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X56),X57))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X58))))) | s('type.list.list'(X56),'const.list.NIL_0') != s('type.list.list'(X56),X57)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10180,f162])).
fof(f49164,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl922),
  inference(cnf_transformation,[],[f49164_D])).
fof(f49164_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl922),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl922])])).
fof(f14007,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10295,f133])).
fof(f10295,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10168,f127])).
fof(f10168,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10123,f140])).
fof(f14008,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10295,f131])).
fof(f49162,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl920),
  inference(cnf_transformation,[],[f49162_D])).
fof(f49162_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl920),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl920])])).
fof(f14021,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10295,f162])).
fof(f49157,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl918),
  inference(cnf_transformation,[],[f49157_D])).
fof(f49157_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl918),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl918])])).
fof(f14677,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl137),
  inference(superposition,[],[f2180,f133])).
fof(f2180,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl137),
  inference(superposition,[],[f1962,f127])).
fof(f1962,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl137),
  inference(trivial_inequality_removal,[],[f1959])).
fof(f1959,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl137),
  inference(superposition,[],[f1924,f130])).
fof(f14678,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl137),
  inference(superposition,[],[f2180,f131])).
fof(f49155,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl916),
  inference(cnf_transformation,[],[f49155_D])).
fof(f49155_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl916),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl916])])).
fof(f14691,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl137),
  inference(superposition,[],[f2180,f162])).
fof(f49152,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl914),
  inference(cnf_transformation,[],[f49152_D])).
fof(f49152_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl914),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl914])])).
fof(f49153,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(forward_demodulation,[],[f14964,f151])).
fof(f14964,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(superposition,[],[f301,f132])).
fof(f49150,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(forward_demodulation,[],[f14965,f151])).
fof(f14965,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl18),
  inference(superposition,[],[f301,f130])).
fof(f49148,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl913),
  inference(cnf_transformation,[],[f49148_D])).
fof(f49148_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl913),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl913])])).
fof(f49149,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl18 | $spl35)),
  inference(forward_demodulation,[],[f15256,f151])).
fof(f15256,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl18 | $spl35)),
  inference(superposition,[],[f15197,f132])).
fof(f15197,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl18 | $spl35)),
  inference(subsumption_resolution,[],[f14999,f336])).
fof(f14999,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl18),
  inference(superposition,[],[f131,f301])).
fof(f49146,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl18 | $spl35)),
  inference(forward_demodulation,[],[f15257,f151])).
fof(f15257,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl18 | $spl35)),
  inference(superposition,[],[f15197,f130])).
fof(f49145,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl910),
  inference(cnf_transformation,[],[f49145_D])).
fof(f49145_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl910),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl910])])).
fof(f16149,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16119,f133])).
fof(f16119,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16069,f132])).
fof(f16069,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | ($spl30 | $spl35)),
  inference(subsumption_resolution,[],[f15862,f336])).
fof(f15862,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl30),
  inference(superposition,[],[f131,f317])).
fof(f16150,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16119,f131])).
fof(f49143,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl908),
  inference(cnf_transformation,[],[f49143_D])).
fof(f49143_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl908),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl908])])).
fof(f16165,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16119,f162])).
fof(f49140,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl906),
  inference(cnf_transformation,[],[f49140_D])).
fof(f49140_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) <=> ~$spl906),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl906])])).
fof(f49141,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl207),
  inference(forward_demodulation,[],[f16328,f151])).
fof(f16328,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl207),
  inference(superposition,[],[f5591,f132])).
fof(f5591,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl207),
  inference(superposition,[],[f5578,f127])).
fof(f49139,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl207),
  inference(forward_demodulation,[],[f16329,f151])).
fof(f16329,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl207),
  inference(superposition,[],[f5591,f130])).
fof(f49135,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl904),
  inference(cnf_transformation,[],[f49135_D])).
fof(f49135_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) <=> ~$spl904),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl904])])).
fof(f49136,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl38),
  inference(forward_demodulation,[],[f17101,f151])).
fof(f17101,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl38),
  inference(superposition,[],[f481,f132])).
fof(f49133,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl38),
  inference(forward_demodulation,[],[f17102,f151])).
fof(f17102,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl38),
  inference(superposition,[],[f481,f130])).
fof(f49131,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl903),
  inference(cnf_transformation,[],[f49131_D])).
fof(f49131_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) <=> ~$spl903),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl903])])).
fof(f49132,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl38)),
  inference(forward_demodulation,[],[f17488,f151])).
fof(f17488,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl38)),
  inference(superposition,[],[f17372,f132])).
fof(f17372,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl35 | $spl38)),
  inference(subsumption_resolution,[],[f17144,f336])).
fof(f17144,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl38),
  inference(superposition,[],[f131,f481])).
fof(f49129,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl38)),
  inference(forward_demodulation,[],[f17489,f151])).
fof(f17489,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl35 | $spl38)),
  inference(superposition,[],[f17372,f130])).
fof(f49119,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl900),
  inference(cnf_transformation,[],[f49119_D])).
fof(f49119_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) <=> ~$spl900),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl900])])).
fof(f18885,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl309),
  inference(superposition,[],[f18113,f132])).
fof(f18113,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl309),
  inference(superposition,[],[f18088,f127])).
fof(f18088,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl309),
  inference(equality_resolution,[],[f10788])).
fof(f10788,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl309),
  inference(superposition,[],[f9941,f126])).
fof(f18886,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl309),
  inference(superposition,[],[f18113,f130])).
fof(f49116,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl898),
  inference(cnf_transformation,[],[f49116_D])).
fof(f49116_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) <=> ~$spl898),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl898])])).
fof(f19307,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl139),
  inference(superposition,[],[f2133,f132])).
fof(f2133,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3)))))) ) | $spl139),
  inference(superposition,[],[f2059,f126])).
fof(f19308,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl139),
  inference(superposition,[],[f2133,f130])).
fof(f19371,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl139),
  inference(superposition,[],[f19350,f133])).
fof(f19350,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))))) | $spl139),
  inference(equality_resolution,[],[f2133])).
fof(f19372,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl139),
  inference(superposition,[],[f19350,f131])).
fof(f2895,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl196),
  inference(cnf_transformation,[],[f2895_D])).
fof(f2895_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f19937,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl378),
  inference(superposition,[],[f130,f19882])).
fof(f2896,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl197),
  inference(cnf_transformation,[],[f2896_D])).
fof(f2896_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl197),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl197])])).
fof(f578,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl48),
  inference(cnf_transformation,[],[f578_D])).
fof(f578_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f19939,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl378),
  inference(superposition,[],[f131,f19882])).
fof(f19941,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl378),
  inference(superposition,[],[f132,f19882])).
fof(f19943,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl378),
  inference(superposition,[],[f133,f19882])).
fof(f49079,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl378)),
  inference(forward_demodulation,[],[f20508,f152])).
fof(f20508,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)))) ) | ($spl242 | $spl378)),
  inference(forward_demodulation,[],[f20462,f8452])).
fof(f20462,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)))) ) | $spl378),
  inference(superposition,[],[f19925,f152])).
fof(f19925,plain,(
  ( ! [X53] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X53))) | s('type.num.num',X53) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))) ) | $spl378),
  inference(superposition,[],[f126,f19882])).
fof(f49078,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl894),
  inference(cnf_transformation,[],[f49078_D])).
fof(f49078_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) <=> ~$spl894),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl894])])).
fof(f20464,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl378),
  inference(superposition,[],[f19925,f133])).
fof(f20465,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl378),
  inference(superposition,[],[f19925,f131])).
fof(f49077,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl47 | $spl378)),
  inference(subsumption_resolution,[],[f20512,f2401])).
fof(f20512,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl378),
  inference(superposition,[],[f19929,f132])).
fof(f49076,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl47 | $spl378)),
  inference(subsumption_resolution,[],[f20513,f2401])).
fof(f20513,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl378),
  inference(superposition,[],[f19929,f130])).
fof(f49074,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X5)) ) | ($spl47 | $spl378)),
  inference(forward_demodulation,[],[f49073,f19882])).
fof(f49073,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X5) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | ($spl47 | $spl378)),
  inference(subsumption_resolution,[],[f20554,f586])).
fof(f20554,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X5) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl378),
  inference(superposition,[],[f19929,f132])).
fof(f49072,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X6)) ) | ($spl47 | $spl378)),
  inference(forward_demodulation,[],[f49071,f19882])).
fof(f49071,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X6) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | ($spl47 | $spl378)),
  inference(subsumption_resolution,[],[f20555,f586])).
fof(f20555,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X6) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl378),
  inference(superposition,[],[f19929,f130])).
fof(f49068,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X13)) ) | $spl892),
  inference(cnf_transformation,[],[f49068_D])).
fof(f49068_D,plain,(
  ( ! [X13] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X13)) ) <=> ~$spl892),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl892])])).
fof(f20855,plain,(
  ( ! [X10] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) | $spl382),
  inference(cnf_transformation,[],[f20855_D])).
fof(f20855_D,plain,(
  ( ! [X10] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) <=> ~$spl382),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl382])])).
fof(f21583,plain,(
  ( ! [X10,X11] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X11) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X11) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) | $spl293),
  inference(superposition,[],[f10036,f132])).
fof(f21584,plain,(
  ( ! [X12,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X13) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))) ) | $spl293),
  inference(superposition,[],[f10036,f130])).
fof(f49066,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) | $spl890),
  inference(cnf_transformation,[],[f49066_D])).
fof(f49066_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) ) <=> ~$spl890),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl890])])).
fof(f21842,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10060,f132])).
fof(f21843,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl242 | $spl247)),
  inference(superposition,[],[f10060,f130])).
fof(f49064,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl889),
  inference(cnf_transformation,[],[f49064_D])).
fof(f49064_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl889),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl889])])).
fof(f49065,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f21872,f151])).
fof(f21872,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10304,f132])).
fof(f10304,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | ($spl242 | $spl247)),
  inference(resolution,[],[f9867,f141])).
fof(f49062,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(forward_demodulation,[],[f21873,f151])).
fof(f21873,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl242 | $spl247)),
  inference(superposition,[],[f10304,f130])).
fof(f49056,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl886),
  inference(cnf_transformation,[],[f49056_D])).
fof(f49056_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) <=> ~$spl886),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl886])])).
fof(f49057,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl397),
  inference(forward_demodulation,[],[f22031,f151])).
fof(f22031,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl397),
  inference(superposition,[],[f21987,f132])).
fof(f21987,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))) ) | $spl397),
  inference(superposition,[],[f21957,f127])).
fof(f49055,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl397),
  inference(forward_demodulation,[],[f22032,f151])).
fof(f22032,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl397),
  inference(superposition,[],[f21987,f130])).
fof(f4780,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl204),
  inference(cnf_transformation,[],[f4780_D])).
fof(f4780_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f49029,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl879),
  inference(cnf_transformation,[],[f49029_D])).
fof(f49029_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl879),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl879])])).
fof(f22203,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl25),
  inference(superposition,[],[f771,f162])).
fof(f771,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl25),
  inference(superposition,[],[f309,f132])).
fof(f49053,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl884),
  inference(cnf_transformation,[],[f49053_D])).
fof(f49053_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl884),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl884])])).
fof(f22265,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl21),
  inference(superposition,[],[f846,f133])).
fof(f846,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl21),
  inference(superposition,[],[f304,f127])).
fof(f22266,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl21),
  inference(superposition,[],[f846,f131])).
fof(f49051,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl882),
  inference(cnf_transformation,[],[f49051_D])).
fof(f49051_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl882),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl882])])).
fof(f22282,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl21),
  inference(superposition,[],[f846,f162])).
fof(f48972,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl852),
  inference(cnf_transformation,[],[f48972_D])).
fof(f48972_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl852),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl852])])).
fof(f22399,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl45),
  inference(superposition,[],[f727,f162])).
fof(f727,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl45),
  inference(superposition,[],[f561,f126])).
fof(f49042,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl880),
  inference(cnf_transformation,[],[f49042_D])).
fof(f49042_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl880),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl880])])).
fof(f49041,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(forward_demodulation,[],[f22749,f140])).
fof(f22749,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f799,f162])).
fof(f799,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl17),
  inference(superposition,[],[f715,f126])).
fof(f49026,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl876),
  inference(cnf_transformation,[],[f49026_D])).
fof(f49026_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl876),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl876])])).
fof(f22937,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl53),
  inference(superposition,[],[f968,f162])).
fof(f968,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl53),
  inference(superposition,[],[f583,f126])).
fof(f23122,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl123),
  inference(superposition,[],[f4324,f162])).
fof(f4324,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl123),
  inference(superposition,[],[f1768,f132])).
fof(f23453,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl221),
  inference(superposition,[],[f6493,f162])).
fof(f6493,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl221),
  inference(superposition,[],[f6454,f126])).
fof(f23760,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | ($spl235 | $spl242)),
  inference(forward_demodulation,[],[f23759,f8452])).
fof(f23759,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl235),
  inference(forward_demodulation,[],[f23758,f152])).
fof(f23758,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)))))) ) | $spl235),
  inference(forward_demodulation,[],[f23722,f151])).
fof(f23722,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)))))) ) | $spl235),
  inference(superposition,[],[f8142,f152])).
fof(f8142,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl235),
  inference(superposition,[],[f8131,f126])).
fof(f23762,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | ($spl235 | $spl242)),
  inference(forward_demodulation,[],[f23724,f8452])).
fof(f23724,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(superposition,[],[f8142,f151])).
fof(f49013,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl873),
  inference(cnf_transformation,[],[f49013_D])).
fof(f49013_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) <=> ~$spl873),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl873])])).
fof(f49015,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f49014,f140])).
fof(f49014,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f23830,f151])).
fof(f23830,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(superposition,[],[f23814,f132])).
fof(f23814,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl235),
  inference(equality_resolution,[],[f8146])).
fof(f8146,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl235),
  inference(superposition,[],[f8131,f126])).
fof(f49011,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f49010,f140])).
fof(f49010,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(forward_demodulation,[],[f23831,f151])).
fof(f23831,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(superposition,[],[f23814,f130])).
fof(f49006,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl870),
  inference(cnf_transformation,[],[f49006_D])).
fof(f49006_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl870),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl870])])).
fof(f24954,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl45),
  inference(superposition,[],[f2603,f133])).
fof(f2603,plain,(
  ( ! [X35] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) ) | $spl45),
  inference(superposition,[],[f731,f136])).
fof(f24955,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl45),
  inference(superposition,[],[f2603,f131])).
fof(f49003,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl868),
  inference(cnf_transformation,[],[f49003_D])).
fof(f49003_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl868),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl868])])).
fof(f24971,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl45),
  inference(superposition,[],[f2603,f162])).
fof(f49000,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl866),
  inference(cnf_transformation,[],[f49000_D])).
fof(f49000_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl866),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl866])])).
fof(f25023,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl17),
  inference(superposition,[],[f2701,f133])).
fof(f2701,plain,(
  ( ! [X35] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) ) | $spl17),
  inference(superposition,[],[f804,f136])).
fof(f25024,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl17),
  inference(superposition,[],[f2701,f131])).
fof(f48998,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl864),
  inference(cnf_transformation,[],[f48998_D])).
fof(f48998_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl864),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl864])])).
fof(f25040,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f2701,f162])).
fof(f48995,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl862),
  inference(cnf_transformation,[],[f48995_D])).
fof(f48995_D,plain,(
  ( ! [X9] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl862),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl862])])).
fof(f25092,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl53),
  inference(superposition,[],[f2800,f133])).
fof(f2800,plain,(
  ( ! [X35] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) ) | $spl53),
  inference(superposition,[],[f972,f136])).
fof(f25093,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl53),
  inference(superposition,[],[f2800,f131])).
fof(f48992,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl860),
  inference(cnf_transformation,[],[f48992_D])).
fof(f48992_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl860),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl860])])).
fof(f25109,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl53),
  inference(superposition,[],[f2800,f162])).
fof(f48989,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl859),
  inference(cnf_transformation,[],[f48989_D])).
fof(f48989_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl859),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl859])])).
fof(f25233,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl411),
  inference(superposition,[],[f25203,f132])).
fof(f25234,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl411),
  inference(superposition,[],[f25203,f130])).
fof(f32064,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl443),
  inference(cnf_transformation,[],[f32064_D])).
fof(f32064_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl443),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl443])])).
fof(f48985,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f32176,f151])).
fof(f32176,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(superposition,[],[f32058,f132])).
fof(f48984,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f32177,f151])).
fof(f32177,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(superposition,[],[f32058,f130])).
fof(f48981,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl857),
  inference(cnf_transformation,[],[f48981_D])).
fof(f48981_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl857),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl857])])).
fof(f48983,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f48982,f149])).
fof(f48982,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f32199,f151])).
fof(f32199,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(superposition,[],[f32188,f132])).
fof(f32188,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl439),
  inference(superposition,[],[f32058,f147])).
fof(f48979,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f48978,f149])).
fof(f48978,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(forward_demodulation,[],[f32200,f151])).
fof(f32200,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl439),
  inference(superposition,[],[f32188,f130])).
fof(f48975,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | $spl855),
  inference(cnf_transformation,[],[f48975_D])).
fof(f48975_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl855),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl855])])).
fof(f32370,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl441),
  inference(superposition,[],[f32160,f162])).
fof(f32160,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl441),
  inference(superposition,[],[f32062,f132])).
fof(f32642,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl59),
  inference(superposition,[],[f2534,f162])).
fof(f48960,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl850),
  inference(cnf_transformation,[],[f48960_D])).
fof(f48960_D,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) ) <=> ~$spl850),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl850])])).
fof(f33724,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl233),
  inference(superposition,[],[f8158,f132])).
fof(f8158,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) ) | $spl233),
  inference(superposition,[],[f8024,f126])).
fof(f33725,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl233),
  inference(superposition,[],[f8158,f130])).
fof(f48957,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl849),
  inference(cnf_transformation,[],[f48957_D])).
fof(f48957_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl849),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl849])])).
fof(f33801,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl233),
  inference(superposition,[],[f33772,f133])).
fof(f33772,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl233),
  inference(equality_resolution,[],[f8158])).
fof(f33802,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl233),
  inference(superposition,[],[f33772,f131])).
fof(f48955,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl846),
  inference(cnf_transformation,[],[f48955_D])).
fof(f48955_D,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) <=> ~$spl846),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl846])])).
fof(f33846,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X15))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | $spl248),
  inference(superposition,[],[f8891,f133])).
fof(f8891,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | $spl248),
  inference(superposition,[],[f8839,f126])).
fof(f33847,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X17))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl248),
  inference(superposition,[],[f8891,f131])).
fof(f48953,plain,(
  ( ! [X61,X59,X60] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60))))) | s('type.list.list'(X59),'const.list.NIL_0') != s('type.list.list'(X59),X60)) ) | $spl844),
  inference(cnf_transformation,[],[f48953_D])).
fof(f48953_D,plain,(
  ( ! [X61,X59,X60] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60))))) | s('type.list.list'(X59),'const.list.NIL_0') != s('type.list.list'(X59),X60)) ) <=> ~$spl844),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl844])])).
fof(f33863,plain,(
  ( ! [X61,X59,X60] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X61))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X59),X60))))) | s('type.list.list'(X59),'const.list.NIL_0') != s('type.list.list'(X59),X60)) ) | $spl248),
  inference(superposition,[],[f8891,f162])).
fof(f34076,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | $spl248),
  inference(superposition,[],[f34013,f133])).
fof(f34013,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))))) ) | $spl248),
  inference(equality_resolution,[],[f8899])).
fof(f8899,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X9) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))))) ) | $spl248),
  inference(superposition,[],[f8839,f126])).
fof(f34077,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl248),
  inference(superposition,[],[f34013,f131])).
fof(f48941,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl840),
  inference(cnf_transformation,[],[f48941_D])).
fof(f48941_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl840),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl840])])).
fof(f48942,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl221),
  inference(forward_demodulation,[],[f34940,f151])).
fof(f34940,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl221),
  inference(superposition,[],[f23503,f132])).
fof(f23503,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl221),
  inference(superposition,[],[f23484,f127])).
fof(f23484,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl221),
  inference(equality_resolution,[],[f6493])).
fof(f48940,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl221),
  inference(forward_demodulation,[],[f34941,f151])).
fof(f34941,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl221),
  inference(superposition,[],[f23503,f130])).
fof(f48938,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl838),
  inference(cnf_transformation,[],[f48938_D])).
fof(f48938_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) <=> ~$spl838),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl838])])).
fof(f48939,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl235),
  inference(forward_demodulation,[],[f35003,f151])).
fof(f35003,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl235),
  inference(superposition,[],[f23840,f132])).
fof(f23840,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))))) ) | $spl235),
  inference(superposition,[],[f23814,f127])).
fof(f48937,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl235),
  inference(forward_demodulation,[],[f35004,f151])).
fof(f35004,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl235),
  inference(superposition,[],[f23840,f130])).
fof(f48936,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl837),
  inference(cnf_transformation,[],[f48936_D])).
fof(f48936_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl837),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl837])])).
fof(f36522,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl380),
  inference(superposition,[],[f20956,f132])).
fof(f20956,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl380),
  inference(equality_resolution,[],[f20878])).
fof(f20878,plain,(
  ( ! [X24] : (s('type.num.num',sK1) != s('type.num.num',X24) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num','const.num.|48|_0')))) ) | $spl380),
  inference(superposition,[],[f20854,f136])).
fof(f36523,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl380),
  inference(superposition,[],[f20956,f130])).
fof(f48934,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl208 | $spl211 | $spl242)),
  inference(forward_demodulation,[],[f36670,f37300])).
fof(f36670,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl211 | $spl242)),
  inference(superposition,[],[f36555,f133])).
fof(f36555,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl211 | $spl242)),
  inference(superposition,[],[f36430,f127])).
fof(f36430,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | ($spl211 | $spl242)),
  inference(trivial_inequality_removal,[],[f36427])).
fof(f36427,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) | ($spl211 | $spl242)),
  inference(superposition,[],[f36391,f130])).
fof(f36391,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl211 | $spl242)),
  inference(forward_demodulation,[],[f5896,f8452])).
fof(f48933,plain,(
  ( ! [X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl208 | $spl211 | $spl242)),
  inference(forward_demodulation,[],[f36671,f37300])).
fof(f36671,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl211 | $spl242)),
  inference(superposition,[],[f36555,f131])).
fof(f48930,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl208 | $spl211 | $spl242)),
  inference(forward_demodulation,[],[f36686,f37300])).
fof(f36686,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl211 | $spl242)),
  inference(superposition,[],[f36555,f162])).
fof(f48927,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f25471,f25777])).
fof(f25777,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f25437])).
fof(f25437,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)) | ($spl4 | $spl208)),
  inference(superposition,[],[f161,f25421])).
fof(f25421,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f25413])).
fof(f25413,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f5914,f1466])).
fof(f25471,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f133,f25421])).
fof(f48926,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f25469,f25777])).
fof(f25469,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f132,f25421])).
fof(f48925,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f25467,f25777])).
fof(f25467,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f131,f25421])).
fof(f48924,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f25465,f25777])).
fof(f25465,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f130,f25421])).
fof(f48900,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl824),
  inference(cnf_transformation,[],[f48900_D])).
fof(f48900_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) <=> ~$spl824),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl824])])).
fof(f37372,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl208 | $spl242)),
  inference(superposition,[],[f37300,f132])).
fof(f37373,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl208 | $spl242)),
  inference(superposition,[],[f37300,f130])).
fof(f48923,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl835),
  inference(cnf_transformation,[],[f48923_D])).
fof(f48923_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) <=> ~$spl835),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl835])])).
fof(f37959,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl527),
  inference(superposition,[],[f36247,f132])).
fof(f37960,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl527),
  inference(superposition,[],[f36247,f130])).
fof(f36363,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl579),
  inference(cnf_transformation,[],[f36363_D])).
fof(f36363_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl579),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl579])])).
fof(f39265,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl519),
  inference(superposition,[],[f37901,f162])).
fof(f37901,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl519),
  inference(superposition,[],[f36238,f127])).
fof(f48920,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl832),
  inference(cnf_transformation,[],[f48920_D])).
fof(f48920_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl832),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl832])])).
fof(f39318,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl585),
  inference(superposition,[],[f37951,f133])).
fof(f37951,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | $spl585),
  inference(superposition,[],[f36377,f127])).
fof(f39319,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl585),
  inference(superposition,[],[f37951,f131])).
fof(f48918,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl830),
  inference(cnf_transformation,[],[f48918_D])).
fof(f48918_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl830),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl830])])).
fof(f39335,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl585),
  inference(superposition,[],[f37951,f162])).
fof(f48907,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl828),
  inference(cnf_transformation,[],[f48907_D])).
fof(f48907_D,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl828),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl828])])).
fof(f42475,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl35),
  inference(superposition,[],[f656,f133])).
fof(f656,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl35),
  inference(superposition,[],[f336,f126])).
fof(f42476,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl35),
  inference(superposition,[],[f656,f131])).
fof(f48905,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl826),
  inference(cnf_transformation,[],[f48905_D])).
fof(f48905_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl826),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl826])])).
fof(f42492,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl35),
  inference(superposition,[],[f656,f162])).
fof(f48898,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f42622,f152])).
fof(f42622,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76))),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f42592,f8452])).
fof(f42592,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76))),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37374,f152])).
fof(f37374,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37300,f126])).
fof(f48897,plain,(
  ( ! [X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl822),
  inference(cnf_transformation,[],[f48897_D])).
fof(f48897_D,plain,(
  ( ! [X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) <=> ~$spl822),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl822])])).
fof(f42594,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37374,f133])).
fof(f42595,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37374,f131])).
fof(f48896,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42865,f43275])).
fof(f43275,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)) | ($spl114 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f42824])).
fof(f42824,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f42803])).
fof(f42803,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f42794])).
fof(f42794,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f1576])).
fof(f42865,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f130,f42803])).
fof(f48895,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42867,f43275])).
fof(f42867,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f131,f42803])).
fof(f48894,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42869,f43275])).
fof(f42869,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f132,f42803])).
fof(f48893,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42871,f43275])).
fof(f42871,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f133,f42803])).
fof(f48827,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f44914,f45326])).
fof(f45326,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)) | ($spl114 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f44872])).
fof(f44872,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f161,f44146])).
fof(f44146,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f43720])).
fof(f43720,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f37388,f43674])).
fof(f43674,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f43665])).
fof(f43665,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f37389,f1576])).
fof(f44914,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f130,f44146])).
fof(f48826,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f44916,f45326])).
fof(f44916,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f131,f44146])).
fof(f48825,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f44918,f45326])).
fof(f44918,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f132,f44146])).
fof(f48824,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f44920,f45326])).
fof(f44920,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f133,f44146])).
fof(f48758,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl820),
  inference(cnf_transformation,[],[f48758_D])).
fof(f48758_D,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) <=> ~$spl820),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl820])])).
fof(f45781,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37403,f132])).
fof(f37403,plain,(
  ( ! [X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f127,f37300])).
fof(f45782,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37403,f130])).
fof(f17946,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl372),
  inference(cnf_transformation,[],[f17946_D])).
fof(f17946_D,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl372),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl372])])).
fof(f46980,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl30),
  inference(superposition,[],[f15825,f133])).
fof(f15825,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | $spl30),
  inference(superposition,[],[f317,f132])).
fof(f46981,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl30),
  inference(superposition,[],[f15825,f131])).
fof(f17951,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl374),
  inference(cnf_transformation,[],[f17951_D])).
fof(f17951_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl374),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl374])])).
fof(f46999,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))),s('type.num.num',sK1))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl30),
  inference(superposition,[],[f15825,f162])).
fof(f48741,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl818),
  inference(cnf_transformation,[],[f48741_D])).
fof(f48741_D,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) <=> ~$spl818),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl818])])).
fof(f47921,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f42678,f133])).
fof(f42678,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f42631])).
fof(f42631,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f42608,f130])).
fof(f42608,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(trivial_inequality_removal,[],[f42557])).
fof(f42557,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f37374,f131])).
fof(f47922,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f42678,f131])).
fof(f48739,plain,(
  ( ! [X39,X38] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))),s('type.num.num',sK1))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | $spl816),
  inference(cnf_transformation,[],[f48739_D])).
fof(f48739_D,plain,(
  ( ! [X39,X38] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))),s('type.num.num',sK1))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) <=> ~$spl816),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl816])])).
fof(f47940,plain,(
  ( ! [X39,X38] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X38),X39))))),s('type.num.num',sK1))) | s('type.list.list'(X38),'const.list.NIL_0') != s('type.list.list'(X38),X39)) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f42678,f162])).
fof(f48731,plain,(
  ( ! [X111,X110] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X111))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X110),s('type.num.num','const.num.|48|_0')))) ) | $spl812),
  inference(cnf_transformation,[],[f48731_D])).
fof(f48731_D,plain,(
  ( ! [X111,X110] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X111))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X110),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl812),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl812])])).
fof(f48733,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl815),
  inference(cnf_transformation,[],[f48733_D])).
fof(f48733_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl815),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl815])])).
fof(f48730,plain,(
  ( ! [X111,X110] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X111))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X110),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f48673,f140])).
fof(f48673,plain,(
  ( ! [X111,X110] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X111))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X110),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f1903,f148])).
fof(f1903,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))))) | s('type.num.num',X3) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))) ) | $spl49),
  inference(superposition,[],[f1065,f127])).
fof(f1065,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f1054])).
fof(f1054,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))))) ) | $spl49),
  inference(superposition,[],[f953,f146])).
fof(f146,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X23] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X23)))))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|9')).
fof(f953,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl49),
  inference(trivial_inequality_removal,[],[f945])).
fof(f945,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl49),
  inference(superposition,[],[f636,f131])).
fof(f636,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0)) ) | $spl49),
  inference(superposition,[],[f579,f127])).
fof(f48719,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X65))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl810),
  inference(cnf_transformation,[],[f48719_D])).
fof(f48719_D,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X65))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) <=> ~$spl810),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl810])])).
fof(f48704,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | $spl803),
  inference(cnf_transformation,[],[f48704_D])).
fof(f48704_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl803),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl803])])).
fof(f48657,plain,(
  ( ! [X64,X65,X63] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X65))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X63),X64))) | s('type.list.list'(X63),'const.list.NIL_0') != s('type.list.list'(X63),X64)) ) | $spl49),
  inference(superposition,[],[f1903,f162])).
fof(f48716,plain,(
  ( ! [X59] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl808),
  inference(cnf_transformation,[],[f48716_D])).
fof(f48716_D,plain,(
  ( ! [X59] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl808),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl808])])).
fof(f48711,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | $spl807),
  inference(cnf_transformation,[],[f48711_D])).
fof(f48711_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) <=> ~$spl807),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl807])])).
fof(f48654,plain,(
  ( ! [X59] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X59))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl49)),
  inference(superposition,[],[f1903,f168])).
fof(f48709,plain,(
  ( ! [X54] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X54))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | $spl804),
  inference(cnf_transformation,[],[f48709_D])).
fof(f48709_D,plain,(
  ( ! [X54] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X54))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) <=> ~$spl804),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl804])])).
fof(f48650,plain,(
  ( ! [X54] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X54))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl49)),
  inference(superposition,[],[f1903,f170])).
fof(f48702,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X15))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | $spl800),
  inference(cnf_transformation,[],[f48702_D])).
fof(f48702_D,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X15))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) <=> ~$spl800),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl800])])).
fof(f48639,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X16))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X16)) ) | $spl49),
  inference(superposition,[],[f1903,f131])).
fof(f48638,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X15))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X14))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X14)) ) | $spl49),
  inference(superposition,[],[f1903,f133])).
fof(f1919,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))) ) | $spl130),
  inference(cnf_transformation,[],[f1919_D])).
fof(f1919_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f48701,plain,(
  ( ! [X10] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) | $spl798),
  inference(cnf_transformation,[],[f48701_D])).
fof(f48701_D,plain,(
  ( ! [X10] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) <=> ~$spl798),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl798])])).
fof(f48637,plain,(
  ( ! [X12,X13] : (s('type.num.num',X12) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))) ) | $spl49),
  inference(superposition,[],[f1903,f130])).
fof(f48636,plain,(
  ( ! [X10,X11] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) | $spl49),
  inference(superposition,[],[f1903,f132])).
fof(f45537,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))))))))))))))))) ) | $spl794),
  inference(cnf_transformation,[],[f45537_D])).
fof(f45537_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))))))))))))))))) ) <=> ~$spl794),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl794])])).
fof(f45539,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))))) | $spl797),
  inference(cnf_transformation,[],[f45539_D])).
fof(f45539_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))))) <=> ~$spl797),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl797])])).
fof(f45536,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))))))))))))))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f45535,f37300])).
fof(f45535,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))))))))))))))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f45445,f43674])).
fof(f45445,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f45326])).
fof(f45395,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))))))))))))))) | $spl792),
  inference(cnf_transformation,[],[f45395_D])).
fof(f45395_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))))))))))))))) <=> ~$spl792),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl792])])).
fof(f38925,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl619),
  inference(cnf_transformation,[],[f38925_D])).
fof(f38925_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl619),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl619])])).
fof(f45393,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))))))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f45034,f135])).
fof(f45034,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))))))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f2108,f44146])).
fof(f45388,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))) | $spl790),
  inference(cnf_transformation,[],[f45388_D])).
fof(f45388_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))) <=> ~$spl790),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl790])])).
fof(f45386,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f45385,f44146])).
fof(f45385,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f45029,f135])).
fof(f45029,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0))),sK0)))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f2029,f44146])).
fof(f43482,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0))))))))))))))))) ) | $spl786),
  inference(cnf_transformation,[],[f43482_D])).
fof(f43482_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0))))))))))))))))) ) <=> ~$spl786),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl786])])).
fof(f43484,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))) | $spl789),
  inference(cnf_transformation,[],[f43484_D])).
fof(f43484_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))) <=> ~$spl789),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl789])])).
fof(f43481,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0))))))))))))))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f43480,f37300])).
fof(f43480,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0))))))))))))))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f43393,f1576])).
fof(f43393,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0))))) ) | ($spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f593,f43275])).
fof(f43343,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))))))))))))))) | $spl784),
  inference(cnf_transformation,[],[f43343_D])).
fof(f43343_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))))))))))))))) <=> ~$spl784),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl784])])).
fof(f43341,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))))))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42984,f135])).
fof(f42984,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))))))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f2108,f42803])).
fof(f43336,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))) | $spl782),
  inference(cnf_transformation,[],[f43336_D])).
fof(f43336_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))) <=> ~$spl782),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl782])])).
fof(f43334,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f43333,f42803])).
fof(f43333,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f42979,f135])).
fof(f42979,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0))),sK0)))) | ($spl0 | $spl114 | $spl208 | $spl242)),
  inference(superposition,[],[f2029,f42803])).
fof(f42367,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | $spl780),
  inference(cnf_transformation,[],[f42367_D])).
fof(f42367_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) <=> ~$spl780),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl780])])).
fof(f38981,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl641),
  inference(cnf_transformation,[],[f38981_D])).
fof(f38981_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl641),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl641])])).
fof(f42365,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f42303,f135])).
fof(f42303,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | $spl0),
  inference(superposition,[],[f2108,f151])).
fof(f42364,plain,(
  ( ! [X67] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))))))))))))))) ) | $spl778),
  inference(cnf_transformation,[],[f42364_D])).
fof(f42364_D,plain,(
  ( ! [X67] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))))))))))))))) ) <=> ~$spl778),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl778])])).
fof(f38930,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl621),
  inference(cnf_transformation,[],[f38930_D])).
fof(f38930_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl621),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl621])])).
fof(f42363,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f42362,f140])).
fof(f42362,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f42302,f135])).
fof(f42302,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f2108,f148])).
fof(f42361,plain,(
  ( ! [X66] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))))))))))))))) ) | $spl776),
  inference(cnf_transformation,[],[f42361_D])).
fof(f42361_D,plain,(
  ( ! [X66] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))))))))))))))) ) <=> ~$spl776),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl776])])).
fof(f42360,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))))))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f42301,f135])).
fof(f42301,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f2108,f146])).
fof(f42355,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))))))))))))))) | $spl774),
  inference(cnf_transformation,[],[f42355_D])).
fof(f42355_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))))))))))))))) <=> ~$spl774),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl774])])).
fof(f42353,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))))))))))))))) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f42296,f135])).
fof(f42296,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))))))))))))))) | ($spl0 | $spl378)),
  inference(superposition,[],[f2108,f19882])).
fof(f42352,plain,(
  ( ! [X37,X36] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl772),
  inference(cnf_transformation,[],[f42352_D])).
fof(f42352_D,plain,(
  ( ! [X37,X36] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl772),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl772])])).
fof(f42351,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl0),
  inference(forward_demodulation,[],[f42290,f135])).
fof(f42290,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))))))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl0),
  inference(superposition,[],[f2108,f162])).
fof(f42350,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))))))))))))))) | $spl770),
  inference(cnf_transformation,[],[f42350_D])).
fof(f42350_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))))))))))))))) <=> ~$spl770),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl770])])).
fof(f32941,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl463),
  inference(cnf_transformation,[],[f32941_D])).
fof(f32941_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl463),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl463])])).
fof(f42348,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))))))))))))))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f42289,f135])).
fof(f42289,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))))))))))))))) | ($spl0 | $spl18)),
  inference(superposition,[],[f2108,f301])).
fof(f41605,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | $spl738),
  inference(cnf_transformation,[],[f41605_D])).
fof(f41605_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) <=> ~$spl738),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl738])])).
fof(f42347,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f42288,f135])).
fof(f42288,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | ($spl0 | $spl2)),
  inference(superposition,[],[f2108,f168])).
fof(f42346,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))))))))))))))) | $spl768),
  inference(cnf_transformation,[],[f42346_D])).
fof(f42346_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))))))))))))))) <=> ~$spl768),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl768])])).
fof(f42344,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl38)),
  inference(forward_demodulation,[],[f42287,f135])).
fof(f42287,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl38)),
  inference(superposition,[],[f2108,f481])).
fof(f41817,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | $spl748),
  inference(cnf_transformation,[],[f41817_D])).
fof(f41817_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) <=> ~$spl748),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl748])])).
fof(f42342,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f42285,f135])).
fof(f42285,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f2108,f170])).
fof(f42341,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))))))))))))))) | $spl766),
  inference(cnf_transformation,[],[f42341_D])).
fof(f42341_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))))))))))))))) <=> ~$spl766),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl766])])).
fof(f42339,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f42283,f135])).
fof(f42283,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl30)),
  inference(superposition,[],[f2108,f317])).
fof(f42338,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | $spl764),
  inference(cnf_transformation,[],[f42338_D])).
fof(f42338_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) <=> ~$spl764),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl764])])).
fof(f42336,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | ($spl0 | $spl242)),
  inference(forward_demodulation,[],[f42278,f135])).
fof(f42278,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))))))))))))))) | ($spl0 | $spl242)),
  inference(superposition,[],[f2108,f8452])).
fof(f42335,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))))))))))))))) | $spl762),
  inference(cnf_transformation,[],[f42335_D])).
fof(f42335_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))))))))))))))) <=> ~$spl762),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl762])])).
fof(f42333,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f42277,f135])).
fof(f42277,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))))))))))))))) | $spl0),
  inference(superposition,[],[f2108,f140])).
fof(f42331,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl760),
  inference(cnf_transformation,[],[f42331_D])).
fof(f42331_D,plain,(
  ( ! [X8] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl760),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl760])])).
fof(f42332,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl0),
  inference(forward_demodulation,[],[f42274,f135])).
fof(f42274,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl0),
  inference(superposition,[],[f2108,f131])).
fof(f42330,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl0),
  inference(forward_demodulation,[],[f42273,f135])).
fof(f42273,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl0),
  inference(superposition,[],[f2108,f133])).
fof(f42329,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))))))))))))))) | $spl758),
  inference(cnf_transformation,[],[f42329_D])).
fof(f42329_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))))))))))))))) <=> ~$spl758),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl758])])).
fof(f38921,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))),s('type.num.num',X6)))) ) | $spl614),
  inference(cnf_transformation,[],[f38921_D])).
fof(f38921_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))),s('type.num.num',X6)))) ) <=> ~$spl614),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl614])])).
fof(f42272,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))),s('type.num.num',X7))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl0),
  inference(superposition,[],[f2108,f130])).
fof(f42271,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))),s('type.num.num',X6))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl0),
  inference(superposition,[],[f2108,f132])).
fof(f32953,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl473),
  inference(cnf_transformation,[],[f32953_D])).
fof(f32953_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl473),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl473])])).
fof(f41825,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6))))))))))))))))) ) | $spl756),
  inference(cnf_transformation,[],[f41825_D])).
fof(f41825_D,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6))))))))))))))))) ) <=> ~$spl756),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl756])])).
fof(f41812,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) | s('type.list.list'(X8),X9) = s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK12(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK13(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK14(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK15(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK16(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK17(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK18(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)),s('type.list.list'(X8),sK11(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl4),
  inference(superposition,[],[f3405,f130])).
fof(f3405,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X26),X27))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X26),X27) = s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK12(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK13(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK14(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK15(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK16(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK17(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK18(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),sK11(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26))))))))))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3301,f135])).
fof(f3301,plain,(
  ( ! [X26,X27] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X26),X27))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(X26),X27) = s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK12(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK13(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK14(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK15(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK16(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK17(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),'const.list.CONS_2'(s(X26,sK18(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26)),s('type.list.list'(X26),sK11(X27,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X26))))))))))))))))) ) | $spl4),
  inference(superposition,[],[f124,f170])).
fof(f41811,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl4),
  inference(superposition,[],[f3405,f132])).
fof(f41820,plain,(
  ( ! [X30,X31] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl754),
  inference(cnf_transformation,[],[f41820_D])).
fof(f41820_D,plain,(
  ( ! [X30,X31] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) <=> ~$spl754),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl754])])).
fof(f32947,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl471),
  inference(cnf_transformation,[],[f32947_D])).
fof(f32947_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl471),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl471])])).
fof(f41775,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X32),X33) = s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK12(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK13(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK14(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK15(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK16(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK17(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK18(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)),s('type.list.list'(X32),sK11(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | $spl4),
  inference(superposition,[],[f3405,f130])).
fof(f41774,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl4),
  inference(superposition,[],[f3405,f132])).
fof(f41819,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl752),
  inference(cnf_transformation,[],[f41819_D])).
fof(f41819_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl752),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl752])])).
fof(f32944,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl467),
  inference(cnf_transformation,[],[f32944_D])).
fof(f32944_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl467),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl467])])).
fof(f41768,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl4),
  inference(superposition,[],[f3405,f162])).
fof(f41818,plain,(
  ( ! [X12,X11] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) | $spl750),
  inference(cnf_transformation,[],[f41818_D])).
fof(f41818_D,plain,(
  ( ! [X12,X11] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) <=> ~$spl750),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl750])])).
fof(f41767,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3405,f2113])).
fof(f41815,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f41766,f166])).
fof(f41766,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))))))))))))))) | ($spl0 | $spl4)),
  inference(superposition,[],[f3405,f166])).
fof(f41613,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6))))))))))))))))) ) | $spl746),
  inference(cnf_transformation,[],[f41613_D])).
fof(f41613_D,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6))))))))))))))))) ) <=> ~$spl746),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl746])])).
fof(f41600,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) | s('type.list.list'(X8),X9) = s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK12(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK13(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK14(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK15(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK16(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK17(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,sK18(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)),s('type.list.list'(X8),sK11(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f3047,f130])).
fof(f3047,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X12),X13) = s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK12(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK13(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK14(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK15(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK16(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK17(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK18(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),sK11(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12))))))))))))))))) ) | $spl2),
  inference(forward_demodulation,[],[f2948,f135])).
fof(f2948,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X12),X13))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.list.list'(X12),X13) = s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK12(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK13(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK14(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK15(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK16(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK17(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),'const.list.CONS_2'(s(X12,sK18(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12)),s('type.list.list'(X12),sK11(X13,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X12))))))))))))))))) ) | $spl2),
  inference(superposition,[],[f124,f168])).
fof(f41599,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.list.list'(X6),X7) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK12(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK13(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK14(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK15(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK16(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK17(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,sK18(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)),s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f3047,f132])).
fof(f41608,plain,(
  ( ! [X30,X31] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl744),
  inference(cnf_transformation,[],[f41608_D])).
fof(f41608_D,plain,(
  ( ! [X30,X31] : (s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) <=> ~$spl744),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl744])])).
fof(f41563,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X32),X33) = s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK12(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK13(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK14(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK15(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK16(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK17(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),'const.list.CONS_2'(s(X32,sK18(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)),s('type.list.list'(X32),sK11(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | $spl2),
  inference(superposition,[],[f3047,f130])).
fof(f41562,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X30),X31) = s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK12(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK13(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK14(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK15(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK16(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK17(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),'const.list.CONS_2'(s(X30,sK18(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)),s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl2),
  inference(superposition,[],[f3047,f132])).
fof(f41607,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl742),
  inference(cnf_transformation,[],[f41607_D])).
fof(f41607_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl742),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl742])])).
fof(f41556,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK12(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK13(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK14(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK15(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK16(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK17(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,sK18(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)),s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))))))))))))))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl2),
  inference(superposition,[],[f3047,f162])).
fof(f41606,plain,(
  ( ! [X12,X11] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) | $spl740),
  inference(cnf_transformation,[],[f41606_D])).
fof(f41606_D,plain,(
  ( ! [X12,X11] : (s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) <=> ~$spl740),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl740])])).
fof(f41555,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X11,X12,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f3047,f2113])).
fof(f41603,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f41554,f166])).
fof(f41554,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK12('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK13('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK14('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK15('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK16('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))))))))))))))) | ($spl0 | $spl2)),
  inference(superposition,[],[f3047,f166])).
fof(f38829,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl606),
  inference(cnf_transformation,[],[f38829_D])).
fof(f38829_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) <=> ~$spl606),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl606])])).
fof(f620,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) | $spl76),
  inference(cnf_transformation,[],[f620_D])).
fof(f620_D,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.NIL_0')))))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f41171,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl188),
  inference(superposition,[],[f2105,f161])).
fof(f40783,plain,(
  ( ! [X399,X398] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X399),s('type.num.num',X398)))) ) | $spl736),
  inference(cnf_transformation,[],[f40783_D])).
fof(f40783_D,plain,(
  ( ! [X399,X398] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X399),s('type.num.num',X398)))) ) <=> ~$spl736),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl736])])).
fof(f40712,plain,(
  ( ! [X399,X398] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X398,X399,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X399),s('type.num.num',X398)))) ) | ($spl0 | $spl2 | $spl4)),
  inference(superposition,[],[f3404,f2113])).
fof(f3404,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK11(X25,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X24))))) ) | ($spl2 | $spl4)),
  inference(forward_demodulation,[],[f3403,f168])).
fof(f3403,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK11(X25,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X24)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl4),
  inference(forward_demodulation,[],[f3402,f135])).
fof(f3402,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK11(X25,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X24))))) ) | $spl4),
  inference(forward_demodulation,[],[f3300,f135])).
fof(f3300,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X24),sK11(X25,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X24))))) ) | $spl4),
  inference(superposition,[],[f123,f170])).
fof(f40766,plain,(
  ( ! [X306,X305,X307] : (s('type.list.list'(sK0),X305) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X306),s('type.list.list'(sK0),sK2))) | s('type.num.num',X307) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X306))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X305))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl726),
  inference(cnf_transformation,[],[f40766_D])).
fof(f40766_D,plain,(
  ( ! [X306,X305,X307] : (s('type.list.list'(sK0),X305) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X306),s('type.list.list'(sK0),sK2))) | s('type.num.num',X307) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X306))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X305))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl726),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl726])])).
fof(f40761,plain,(
  ( ! [X283,X284] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X284),s('type.num.num',X283)))) ) | $spl724),
  inference(cnf_transformation,[],[f40761_D])).
fof(f40761_D,plain,(
  ( ! [X283,X284] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X284),s('type.num.num',X283)))) ) <=> ~$spl724),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl724])])).
fof(f40782,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X395) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X396),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X397) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X396))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X394),s('type.num.num',X393)))) ) | ($spl0 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f40781,f168])).
fof(f40781,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X395) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X396),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X397) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X396))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X394),s('type.num.num',X393)))) ) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f40711,f135])).
fof(f40711,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s('type.list.list'(sK0),X395) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X396),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X395))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X393,X394,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X397) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X396))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X394),s('type.num.num',X393)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3363,f2113])).
fof(f3363,plain,(
  ( ! [X103,X105,X102,X106,X104] : (s('type.list.list'(X102),X103) != s('type.list.list'(X102),'const.list.APPEND_2'(s('type.list.list'(X102),X105),s('type.list.list'(X102),X106))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),X103))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),X106))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num',X104) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X102),X105)))) ) | $spl4),
  inference(superposition,[],[f160,f170])).
fof(f160,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X4),s('type.list.list'(X0),X5))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f118])).
fof(f40760,plain,(
  ( ! [X285,X287,X286] : (s('type.list.list'(sK0),X285) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X286))) | s('type.num.num',X287) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X286))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X285))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X287)))) ) | $spl722),
  inference(cnf_transformation,[],[f40760_D])).
fof(f40760_D,plain,(
  ( ! [X285,X287,X286] : (s('type.list.list'(sK0),X285) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X286))) | s('type.num.num',X287) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X286))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X285))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X287)))) ) <=> ~$spl722),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl722])])).
fof(f40774,plain,(
  ( ! [X377,X374,X376,X373,X375] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X375) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X376))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X375))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X377))) | s('type.num.num',X377) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X376))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X374),s('type.num.num',X373)))) ) | ($spl0 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f40773,f168])).
fof(f40773,plain,(
  ( ! [X377,X374,X376,X373,X375] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X375) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X376))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X375))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X377))) | s('type.num.num',X377) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X376))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X374),s('type.num.num',X373)))) ) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f40707,f135])).
fof(f40707,plain,(
  ( ! [X377,X374,X376,X373,X375] : (s('type.list.list'(sK0),X375) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X376))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X375))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X377))) | s('type.num.num',X377) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X376))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X373,X374,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X374),s('type.num.num',X373)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3362,f2113])).
fof(f3362,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s('type.list.list'(X97),X98) != s('type.list.list'(X97),'const.list.APPEND_2'(s('type.list.list'(X97),X100),s('type.list.list'(X97),X101))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X98))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X99))) | s('type.num.num',X99) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X101))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X97),X100))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f160,f170])).
fof(f40770,plain,(
  ( ! [X346,X347] : (s('type.list.list'(sK0),X346) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X347),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X347))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X346)))) ) | $spl734),
  inference(cnf_transformation,[],[f40770_D])).
fof(f40770_D,plain,(
  ( ! [X346,X347] : (s('type.list.list'(sK0),X346) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X347),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X347))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X346)))) ) <=> ~$spl734),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl734])])).
fof(f40697,plain,(
  ( ! [X344,X346,X345,X347] : (s('type.list.list'(sK0),X346) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X347),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X346))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X344,X345,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X344,X345,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X347))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',X344)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3283,f2113])).
fof(f3283,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.list.list'(X10),X11) != s('type.list.list'(X10),'const.list.APPEND_2'(s('type.list.list'(X10),X12),s('type.list.list'(X10),X13))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X13))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X12))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl4),
  inference(superposition,[],[f170,f160])).
fof(f40754,plain,(
  ( ! [X253,X252] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252)))) ) | $spl714),
  inference(cnf_transformation,[],[f40754_D])).
fof(f40754_D,plain,(
  ( ! [X253,X252] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252)))) ) <=> ~$spl714),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl714])])).
fof(f40769,plain,(
  ( ! [X343,X342] : (s('type.list.list'(sK0),X342) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X343))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X343))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X342)))) ) | $spl732),
  inference(cnf_transformation,[],[f40769_D])).
fof(f40769_D,plain,(
  ( ! [X343,X342] : (s('type.list.list'(sK0),X342) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X343))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X343))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X342)))) ) <=> ~$spl732),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl732])])).
fof(f40696,plain,(
  ( ! [X341,X343,X340,X342] : (s('type.list.list'(sK0),X342) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X343))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X342))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X343))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X340,X341,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X340,X341,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num',X340)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3283,f2113])).
fof(f40756,plain,(
  ( ! [X257,X256] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X257),s('type.num.num',X256)))) ) | $spl718),
  inference(cnf_transformation,[],[f40756_D])).
fof(f40756_D,plain,(
  ( ! [X257,X256] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X257),s('type.num.num',X256)))) ) <=> ~$spl718),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl718])])).
fof(f40768,plain,(
  ( ! [X339,X338] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X338),s('type.list.list'(sK0),X339))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X338))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X339)))) ) | $spl730),
  inference(cnf_transformation,[],[f40768_D])).
fof(f40768_D,plain,(
  ( ! [X339,X338] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X338),s('type.list.list'(sK0),X339))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X338))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X339)))) ) <=> ~$spl730),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl730])])).
fof(f40695,plain,(
  ( ! [X337,X339,X336,X338] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X338),s('type.list.list'(sK0),X339))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X336,X337,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X336,X337,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X339))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X338))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3283,f2113])).
fof(f40767,plain,(
  ( ! [X308,X309] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X308)))) ) | $spl728),
  inference(cnf_transformation,[],[f40767_D])).
fof(f40767_D,plain,(
  ( ! [X308,X309] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X308)))) ) <=> ~$spl728),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl728])])).
fof(f40690,plain,(
  ( ! [X308,X309] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X308,X309,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X308)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f3046,f2113])).
fof(f3046,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK11(X11,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X10))))) ) | $spl2),
  inference(forward_demodulation,[],[f3045,f168])).
fof(f3045,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK11(X11,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X10))))) ) | $spl2),
  inference(forward_demodulation,[],[f2947,f135])).
fof(f2947,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),X11))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X10),sK11(X11,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X10))))) ) | $spl2),
  inference(superposition,[],[f123,f168])).
fof(f40765,plain,(
  ( ! [X304,X306,X303,X305,X307] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X303,X304,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X303,X304,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X305) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X306),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X305))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',X307) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X306))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X304),s('type.num.num',X303)))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f40689,f168])).
fof(f40689,plain,(
  ( ! [X304,X306,X303,X305,X307] : (s('type.list.list'(sK0),X305) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X306),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X305))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X303,X304,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X303,X304,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X307) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X306))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X304),s('type.num.num',X303)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f3010,f2113])).
fof(f3010,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s('type.list.list'(X88),X89) != s('type.list.list'(X88),'const.list.APPEND_2'(s('type.list.list'(X88),X91),s('type.list.list'(X88),X92))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X89))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X90),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X92))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X90) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X88),X91)))) ) | $spl2),
  inference(superposition,[],[f160,f168])).
fof(f40759,plain,(
  ( ! [X285,X287,X283,X284,X286] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.list.list'(sK0),X285) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X286))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X285))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X287))) | s('type.num.num',X287) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X286))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X284),s('type.num.num',X283)))) ) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f40685,f168])).
fof(f40685,plain,(
  ( ! [X285,X287,X283,X284,X286] : (s('type.list.list'(sK0),X285) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X286))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X285))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X287))) | s('type.num.num',X287) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X286))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X283,X284,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X284),s('type.num.num',X283)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f3009,f2113])).
fof(f3009,plain,(
  ( ! [X87,X85,X83,X86,X84] : (s('type.list.list'(X83),X84) != s('type.list.list'(X83),'const.list.APPEND_2'(s('type.list.list'(X83),X86),s('type.list.list'(X83),X87))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X84))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num',X85))) | s('type.num.num',X85) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X87))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X83),X86))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(superposition,[],[f160,f168])).
fof(f40757,plain,(
  ( ! [X259,X258] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X258),s('type.list.list'(sK0),X259))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X258))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X259))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl720),
  inference(cnf_transformation,[],[f40757_D])).
fof(f40757_D,plain,(
  ( ! [X259,X258] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X258),s('type.list.list'(sK0),X259))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X258))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X259))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl720),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl720])])).
fof(f40676,plain,(
  ( ! [X257,X259,X256,X258] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X258),s('type.list.list'(sK0),X259))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X256,X257,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X259))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X258))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X257),s('type.num.num',X256)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f2937,f2113])).
fof(f2937,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X2),s('type.list.list'(X0),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2)))) ) | $spl2),
  inference(superposition,[],[f168,f160])).
fof(f40755,plain,(
  ( ! [X255,X254] : (s('type.list.list'(sK0),X254) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X255),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X255))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X254)))) ) | $spl716),
  inference(cnf_transformation,[],[f40755_D])).
fof(f40755_D,plain,(
  ( ! [X255,X254] : (s('type.list.list'(sK0),X254) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X255),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X255))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X254)))) ) <=> ~$spl716),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl716])])).
fof(f40675,plain,(
  ( ! [X255,X253,X254,X252] : (s('type.list.list'(sK0),X254) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),X255),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X254))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X252,X253,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X255))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f2937,f2113])).
fof(f40753,plain,(
  ( ! [X251,X250] : (s('type.list.list'(sK0),X250) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X251))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X251))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X250)))) ) | $spl712),
  inference(cnf_transformation,[],[f40753_D])).
fof(f40753_D,plain,(
  ( ! [X251,X250] : (s('type.list.list'(sK0),X250) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X251))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X251))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X250)))) ) <=> ~$spl712),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl712])])).
fof(f40674,plain,(
  ( ! [X251,X249,X250,X248] : (s('type.list.list'(sK0),X250) != s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK2),s('type.list.list'(sK0),X251))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X250))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X251))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X248,X249,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X248,X249,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X249),s('type.num.num',X248)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f2937,f2113])).
fof(f40746,plain,(
  ( ! [X125,X126] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))))) ) | $spl710),
  inference(cnf_transformation,[],[f40746_D])).
fof(f40746_D,plain,(
  ( ! [X125,X126] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))))) ) <=> ~$spl710),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl710])])).
fof(f40743,plain,(
  ( ! [X116] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X116) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X116)))) ) | $spl708),
  inference(cnf_transformation,[],[f40743_D])).
fof(f40743_D,plain,(
  ( ! [X116] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X116) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X116)))) ) <=> ~$spl708),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl708])])).
fof(f40649,plain,(
  ( ! [X127,X125,X126] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X127) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X127))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X125,X126,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125)))) ) | ($spl0 | $spl4)),
  inference(superposition,[],[f3283,f2113])).
fof(f40742,plain,(
  ( ! [X114,X115] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))))) ) | $spl706),
  inference(cnf_transformation,[],[f40742_D])).
fof(f40742_D,plain,(
  ( ! [X114,X115] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0))))) ) <=> ~$spl706),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl706])])).
fof(f40646,plain,(
  ( ! [X116,X114,X115] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),X116) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X116))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(X114,X115,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114)))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f2937,f2113])).
fof(f40741,plain,(
  ( ! [X99,X98,X106] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X106))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num',X98))) | s('type.num.num',X106) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | $spl704),
  inference(cnf_transformation,[],[f40741_D])).
fof(f40741_D,plain,(
  ( ! [X99,X98,X106] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X106))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num',X98))) | s('type.num.num',X106) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) <=> ~$spl704),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl704])])).
fof(f2105,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),sK2)))))))))))))) ) | $spl188),
  inference(cnf_transformation,[],[f2105_D])).
fof(f2105_D,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),sK2)))))))))))))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f40643,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X106,X104] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X100),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X101),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X102),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X103),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X104),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X105),s('type.list.list'(sK0),sK2))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X106))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X98,X99,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X106) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X99),s('type.num.num',X98)))) ) | $spl0),
  inference(superposition,[],[f2028,f2113])).
fof(f2028,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X63] : (s('type.list.list'(sK0),X56) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X57),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X58),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X59),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X60),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X61),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X62),s('type.list.list'(sK0),sK2))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X56))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X63))) | s('type.num.num',X63) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f40740,plain,(
  ( ! [X90,X97,X91] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X97))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X90))) | s('type.num.num',X97) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) | $spl702),
  inference(cnf_transformation,[],[f40740_D])).
fof(f40740_D,plain,(
  ( ! [X90,X97,X91] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X97))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X90))) | s('type.num.num',X97) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) <=> ~$spl702),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl702])])).
fof(f2102,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl184),
  inference(cnf_transformation,[],[f2102_D])).
fof(f2102_D,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2)))))))))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f40642,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X92),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X93),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X94),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X95),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X96),s('type.list.list'(sK0),sK2))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X97))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X90,X91,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X97) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X90)))) ) | $spl0),
  inference(superposition,[],[f2027,f2113])).
fof(f2027,plain,(
  ( ! [X54,X52,X50,X55,X53,X51,X49] : (s('type.list.list'(sK0),X49) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X50),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X51),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X52),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X53),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X54),s('type.list.list'(sK0),sK2))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X49))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X55))) | s('type.num.num',X55) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f40739,plain,(
  ( ! [X83,X89,X84] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X89))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X83))) | s('type.num.num',X89) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) | $spl700),
  inference(cnf_transformation,[],[f40739_D])).
fof(f40739_D,plain,(
  ( ! [X83,X89,X84] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X89))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X83))) | s('type.num.num',X89) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) <=> ~$spl700),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl700])])).
fof(f2099,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK2)))))))))) ) | $spl180),
  inference(cnf_transformation,[],[f2099_D])).
fof(f2099_D,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK2)))))))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f40641,plain,(
  ( ! [X88,X87,X85,X83,X89,X86,X84] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X85),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X86),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X87),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X88),s('type.list.list'(sK0),sK2))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X89))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X83,X84,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X89) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X83)))) ) | $spl0),
  inference(superposition,[],[f2026,f2113])).
fof(f2026,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s('type.list.list'(sK0),X43) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X44),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X45),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X46),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X47),s('type.list.list'(sK0),sK2))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X43))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X48))) | s('type.num.num',X48) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f40738,plain,(
  ( ! [X78,X77,X82] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X82))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) | s('type.num.num',X82) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) | $spl698),
  inference(cnf_transformation,[],[f40738_D])).
fof(f40738_D,plain,(
  ( ! [X78,X77,X82] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X82))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) | s('type.num.num',X82) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) <=> ~$spl698),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl698])])).
fof(f2096,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2)))))))) ) | $spl176),
  inference(cnf_transformation,[],[f2096_D])).
fof(f2096_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2)))))))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f40640,plain,(
  ( ! [X80,X78,X81,X79,X77,X82] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X79),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X80),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X81),s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X82))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X77,X78,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num',X82) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)))) ) | $spl0),
  inference(superposition,[],[f2025,f2113])).
fof(f2025,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s('type.list.list'(sK0),X38) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X39),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X40),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X41),s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X38))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X42))) | s('type.num.num',X42) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f40633,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X41),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X42),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X43),s('type.list.list'(sK0),sK2))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X39,X40,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X39,X40,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',X39)))) ) | ($spl0 | $spl70)),
  inference(superposition,[],[f617,f2113])).
fof(f40737,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2)))))))))))))))) ) | $spl696),
  inference(cnf_transformation,[],[f40737_D])).
fof(f40737_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2)))))))))))))))) ) <=> ~$spl696),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl696])])).
fof(f40626,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2))))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK19(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)),s('type.list.list'(sK0),sK20(X9,X10,'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9)))) ) | $spl0),
  inference(superposition,[],[f163,f2113])).
fof(f40446,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2)))))))))))))))) ) | $spl690),
  inference(cnf_transformation,[],[f40446_D])).
fof(f40446_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2)))))))))))))))) ) <=> ~$spl690),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl690])])).
fof(f40447,plain,(
  ( ! [X6,X7] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X6) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) | $spl692),
  inference(cnf_transformation,[],[f40447_D])).
fof(f40447_D,plain,(
  ( ! [X6,X7] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X6) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) <=> ~$spl692),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl692])])).
fof(f40438,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X6) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2)))))))))))))))) ) | $spl0),
  inference(superposition,[],[f2028,f161])).
fof(f40210,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),sK2)))))))))))))) ) | $spl676),
  inference(cnf_transformation,[],[f40210_D])).
fof(f40210_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),sK2)))))))))))))) ) <=> ~$spl676),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl676])])).
fof(f40445,plain,(
  ( ! [X6,X7,X5] : (s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) | $spl688),
  inference(cnf_transformation,[],[f40445_D])).
fof(f40445_D,plain,(
  ( ! [X6,X7,X5] : (s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) <=> ~$spl688),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl688])])).
fof(f40437,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),X5) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),sK2)))))))))))))) ) | $spl0),
  inference(superposition,[],[f2028,f161])).
fof(f39562,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl664),
  inference(cnf_transformation,[],[f39562_D])).
fof(f39562_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK2)))))))))))) ) <=> ~$spl664),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl664])])).
fof(f40444,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) | $spl686),
  inference(cnf_transformation,[],[f40444_D])).
fof(f40444_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) <=> ~$spl686),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl686])])).
fof(f40436,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl0),
  inference(superposition,[],[f2028,f161])).
fof(f40443,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) | $spl684),
  inference(cnf_transformation,[],[f40443_D])).
fof(f40443_D,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) <=> ~$spl684),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl684])])).
fof(f40435,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',X7) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl0),
  inference(superposition,[],[f2028,f161])).
fof(f40441,plain,(
  ( ! [X26,X19] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X26))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) | s('type.num.num',X26) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | $spl680),
  inference(cnf_transformation,[],[f40441_D])).
fof(f40441_D,plain,(
  ( ! [X26,X19] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X26))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) | s('type.num.num',X26) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) <=> ~$spl680),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl680])])).
fof(f40442,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK2)))))))))))))) ) | $spl682),
  inference(cnf_transformation,[],[f40442_D])).
fof(f40442_D,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK2)))))))))))))) ) <=> ~$spl682),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl682])])).
fof(f40429,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X25),s('type.list.list'(sK0),sK2))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X26))) | s('type.num.num',X26) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X19)))) ) | $spl0),
  inference(superposition,[],[f2028,f161])).
fof(f40211,plain,(
  ( ! [X6,X5] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X5) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) | $spl678),
  inference(cnf_transformation,[],[f40211_D])).
fof(f40211_D,plain,(
  ( ! [X6,X5] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X5) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) <=> ~$spl678),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl678])])).
fof(f40203,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X5) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),sK2)))))))))))))) ) | $spl0),
  inference(superposition,[],[f2027,f161])).
fof(f40209,plain,(
  ( ! [X6,X4,X5] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) | $spl674),
  inference(cnf_transformation,[],[f40209_D])).
fof(f40209_D,plain,(
  ( ! [X6,X4,X5] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) <=> ~$spl674),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl674])])).
fof(f40202,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),X4) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl0),
  inference(superposition,[],[f2027,f161])).
fof(f40208,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) | $spl672),
  inference(cnf_transformation,[],[f40208_D])).
fof(f40208_D,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6)))) ) <=> ~$spl672),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl672])])).
fof(f40201,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X6))) | s('type.num.num',X6) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl0),
  inference(superposition,[],[f2027,f161])).
fof(f40206,plain,(
  ( ! [X22,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16))) | s('type.num.num',X22) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) | $spl668),
  inference(cnf_transformation,[],[f40206_D])).
fof(f40206_D,plain,(
  ( ! [X22,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16))) | s('type.num.num',X22) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) <=> ~$spl668),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl668])])).
fof(f40207,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl670),
  inference(cnf_transformation,[],[f40207_D])).
fof(f40207_D,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),sK2)))))))))))) ) <=> ~$spl670),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl670])])).
fof(f40195,plain,(
  ( ! [X21,X19,X17,X22,X20,X18,X16] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),sK2))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X22))) | s('type.num.num',X22) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X16)))) ) | $spl0),
  inference(superposition,[],[f2027,f161])).
fof(f39563,plain,(
  ( ! [X4,X5] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X4) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) | $spl666),
  inference(cnf_transformation,[],[f39563_D])).
fof(f39563_D,plain,(
  ( ! [X4,X5] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X4) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) <=> ~$spl666),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl666])])).
fof(f39556,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X4) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),sK2)))))))))))) ) | $spl0),
  inference(superposition,[],[f2026,f161])).
fof(f39561,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) | $spl662),
  inference(cnf_transformation,[],[f39561_D])).
fof(f39561_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) <=> ~$spl662),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl662])])).
fof(f39555,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),X3) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',X5) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl0),
  inference(superposition,[],[f2026,f161])).
fof(f39559,plain,(
  ( ! [X13,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) | $spl658),
  inference(cnf_transformation,[],[f39559_D])).
fof(f39559_D,plain,(
  ( ! [X13,X18] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) <=> ~$spl658),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl658])])).
fof(f39560,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2)))))))))) ) | $spl660),
  inference(cnf_transformation,[],[f39560_D])).
fof(f39560_D,plain,(
  ( ! [X14,X17,X15,X16] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2)))))))))) ) <=> ~$spl660),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl660])])).
fof(f39549,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),sK2))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num',X18) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X13)))) ) | $spl0),
  inference(superposition,[],[f2026,f161])).
fof(f39394,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0))))))))))))))))) ) | $spl654),
  inference(cnf_transformation,[],[f39394_D])).
fof(f39394_D,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0))))))))))))))))) ) <=> ~$spl654),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl654])])).
fof(f39396,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))) | $spl657),
  inference(cnf_transformation,[],[f39396_D])).
fof(f39396_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))) <=> ~$spl657),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl657])])).
fof(f39393,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0))))))))))))))))) ) | ($spl4 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f39392,f37300])).
fof(f39392,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0))))))))))))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f39374,f26494])).
fof(f39374,plain,(
  ( ! [X12,X10,X8,X7,X13,X11,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0))))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f593,f28488])).
fof(f28488,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f28143])).
fof(f28143,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)) | ($spl4 | $spl208)),
  inference(superposition,[],[f161,f26855])).
fof(f26855,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(trivial_inequality_removal,[],[f26522])).
fof(f26522,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))) | ($spl4 | $spl208)),
  inference(superposition,[],[f5914,f26494])).
fof(f39389,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))))))))))))))) ) | $spl650),
  inference(cnf_transformation,[],[f39389_D])).
fof(f39389_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))))))))))))))) ) <=> ~$spl650),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl650])])).
fof(f39391,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))) | $spl653),
  inference(cnf_transformation,[],[f39391_D])).
fof(f39391_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))) <=> ~$spl653),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl653])])).
fof(f39388,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))))))))))))))) ) | ($spl4 | $spl208 | $spl242)),
  inference(subsumption_resolution,[],[f39387,f37300])).
fof(f39387,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))))))))))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f39373,f1466])).
fof(f39373,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))))))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0))))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f593,f25777])).
fof(f38994,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.|48|_0',sK0)))) | $spl646),
  inference(cnf_transformation,[],[f38994_D])).
fof(f38994_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.|48|_0',sK0)))) <=> ~$spl646),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl646])])).
fof(f38996,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl649),
  inference(cnf_transformation,[],[f38996_D])).
fof(f38996_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl649),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl649])])).
fof(f38906,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.|48|_0',sK0)))) | $spl0),
  inference(superposition,[],[f2029,f136])).
fof(f287,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl11),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f38991,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)),sK0))))) ) | $spl644),
  inference(cnf_transformation,[],[f38991_D])).
fof(f38991_D,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)),sK0))))) ) <=> ~$spl644),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl644])])).
fof(f38990,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f38989,f152])).
fof(f38989,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)),sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f38899,f135])).
fof(f38899,plain,(
  ( ! [X76,X75] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.numeral.iSUB_3'(s(bool,X75),s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X76)),sK0))))) ) | $spl0),
  inference(superposition,[],[f2029,f152])).
fof(f38983,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl642),
  inference(cnf_transformation,[],[f38983_D])).
fof(f38983_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl642),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl642])])).
fof(f38979,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f38978,f151])).
fof(f38978,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl0),
  inference(forward_demodulation,[],[f38893,f135])).
fof(f38893,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl0),
  inference(superposition,[],[f2029,f151])).
fof(f38977,plain,(
  ( ! [X67] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))) ) | $spl638),
  inference(cnf_transformation,[],[f38977_D])).
fof(f38977_D,plain,(
  ( ! [X67] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))) ) <=> ~$spl638),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl638])])).
fof(f38976,plain,(
  ( ! [X67] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f38975,f140])).
fof(f38975,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f38974,f148])).
fof(f38974,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f38973,f140])).
fof(f38973,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f38892,f135])).
fof(f38892,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')),sK0))))) ) | $spl0),
  inference(superposition,[],[f2029,f148])).
fof(f38972,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))) ) | $spl636),
  inference(cnf_transformation,[],[f38972_D])).
fof(f38972_D,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))) ) <=> ~$spl636),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl636])])).
fof(f38971,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f38970,f146])).
fof(f38970,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))) ) | $spl0),
  inference(forward_demodulation,[],[f38891,f135])).
fof(f38891,plain,(
  ( ! [X66] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))),sK0))))) ) | $spl0),
  inference(superposition,[],[f2029,f146])).
fof(f38963,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | $spl634),
  inference(cnf_transformation,[],[f38963_D])).
fof(f38963_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) <=> ~$spl634),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl634])])).
fof(f38961,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f38960,f19882])).
fof(f38960,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | ($spl0 | $spl378)),
  inference(forward_demodulation,[],[f38887,f135])).
fof(f38887,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')),sK0)))) | ($spl0 | $spl378)),
  inference(superposition,[],[f2029,f19882])).
fof(f38959,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl632),
  inference(cnf_transformation,[],[f38959_D])).
fof(f38959_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl632),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl632])])).
fof(f38958,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl0),
  inference(forward_demodulation,[],[f38881,f135])).
fof(f38881,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.list.LENGTH_1'(s('type.list.list'(X36),X37)),sK0)))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl0),
  inference(superposition,[],[f2029,f162])).
fof(f38957,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))) | $spl630),
  inference(cnf_transformation,[],[f38957_D])).
fof(f38957_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))) <=> ~$spl630),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl630])])).
fof(f38955,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f38954,f301])).
fof(f38954,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f38880,f135])).
fof(f38880,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))),sK0)))) | ($spl0 | $spl18)),
  inference(superposition,[],[f2029,f301])).
fof(f32939,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | $spl460),
  inference(cnf_transformation,[],[f32939_D])).
fof(f32939_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) <=> ~$spl460),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl460])])).
fof(f38953,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f38952,f168])).
fof(f38952,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f38879,f135])).
fof(f38879,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | ($spl0 | $spl2)),
  inference(superposition,[],[f2029,f168])).
fof(f38951,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) | $spl628),
  inference(cnf_transformation,[],[f38951_D])).
fof(f38951_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) <=> ~$spl628),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl628])])).
fof(f38949,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl18 | $spl38)),
  inference(forward_demodulation,[],[f38948,f301])).
fof(f38948,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl38)),
  inference(forward_demodulation,[],[f38947,f135])).
fof(f38947,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl38)),
  inference(forward_demodulation,[],[f38878,f135])).
fof(f38878,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl38)),
  inference(superposition,[],[f2029,f481])).
fof(f33329,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | $spl478),
  inference(cnf_transformation,[],[f33329_D])).
fof(f33329_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) <=> ~$spl478),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl478])])).
fof(f38944,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f38943,f168])).
fof(f38943,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f38942,f135])).
fof(f38942,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f38876,f135])).
fof(f38876,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl4)),
  inference(superposition,[],[f2029,f170])).
fof(f38941,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))) | $spl626),
  inference(cnf_transformation,[],[f38941_D])).
fof(f38941_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))) <=> ~$spl626),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl626])])).
fof(f38939,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f38938,f317])).
fof(f38938,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f38874,f135])).
fof(f38874,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl30)),
  inference(superposition,[],[f2029,f317])).
fof(f38936,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | $spl624),
  inference(cnf_transformation,[],[f38936_D])).
fof(f38936_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) <=> ~$spl624),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl624])])).
fof(f38934,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl0 | $spl242)),
  inference(forward_demodulation,[],[f38933,f8452])).
fof(f38933,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl0 | $spl242)),
  inference(forward_demodulation,[],[f38869,f135])).
fof(f38869,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0')),sK0)))) | ($spl0 | $spl242)),
  inference(superposition,[],[f2029,f8452])).
fof(f38932,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl622),
  inference(cnf_transformation,[],[f38932_D])).
fof(f38932_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) <=> ~$spl622),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl622])])).
fof(f38928,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f38927,f140])).
fof(f38927,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl0),
  inference(forward_demodulation,[],[f38868,f135])).
fof(f38868,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))),sK0)))) | $spl0),
  inference(superposition,[],[f2029,f140])).
fof(f38923,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl616),
  inference(cnf_transformation,[],[f38923_D])).
fof(f38923_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl616),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl616])])).
fof(f38926,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl0),
  inference(forward_demodulation,[],[f38865,f135])).
fof(f38865,plain,(
  ( ! [X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X9)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl0),
  inference(superposition,[],[f2029,f131])).
fof(f38922,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl0),
  inference(forward_demodulation,[],[f38864,f135])).
fof(f38864,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.NUMERAL_1'(s('type.num.num',X8)),sK0)))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl0),
  inference(superposition,[],[f2029,f133])).
fof(f38920,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))) | $spl612),
  inference(cnf_transformation,[],[f38920_D])).
fof(f38920_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))) <=> ~$spl612),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl612])])).
fof(f38863,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))),s('type.num.num',X7))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl0),
  inference(superposition,[],[f2029,f130])).
fof(f38862,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.ZERO_0',sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl0),
  inference(superposition,[],[f2029,f132])).
fof(f38917,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X0,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl610),
  inference(cnf_transformation,[],[f38917_D])).
fof(f38917_D,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X0,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl610),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl610])])).
fof(f38918,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl0),
  inference(forward_demodulation,[],[f38859,f135])).
fof(f38859,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num',X1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl0),
  inference(superposition,[],[f2029,f130])).
fof(f38916,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X0,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl0),
  inference(forward_demodulation,[],[f38858,f135])).
fof(f38858,plain,(
  ( ! [X0] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num',X0) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X0,sK0)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl0),
  inference(superposition,[],[f2029,f132])).
fof(f38830,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X3) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4)))) ) | $spl608),
  inference(cnf_transformation,[],[f38830_D])).
fof(f38830_D,plain,(
  ( ! [X4,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X3) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4)))) ) <=> ~$spl608),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl608])])).
fof(f38824,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X3) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X4))) | s('type.num.num',X4) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))))))) ) | $spl0),
  inference(superposition,[],[f2025,f161])).
fof(f38827,plain,(
  ( ! [X7,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))) | s('type.num.num',X11) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) | $spl602),
  inference(cnf_transformation,[],[f38827_D])).
fof(f38827_D,plain,(
  ( ! [X7,X11] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X11))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))) | s('type.num.num',X11) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) <=> ~$spl602),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl602])])).
fof(f38818,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),sK2))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X11))) | s('type.num.num',X11) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X7)))) ) | $spl0),
  inference(superposition,[],[f2025,f161])).
fof(f38253,plain,(
  ( ! [X17,X15,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),X15))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X15)))) ) | $spl598),
  inference(cnf_transformation,[],[f38253_D])).
fof(f38253_D,plain,(
  ( ! [X17,X15,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),X15))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X15)))) ) <=> ~$spl598),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl598])])).
fof(f38254,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X18,sK0))))))))) ) | $spl600),
  inference(cnf_transformation,[],[f38254_D])).
fof(f38254_D,plain,(
  ( ! [X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X18,sK0))))))))) ) <=> ~$spl600),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl600])])).
fof(f38252,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),X15))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X18,sK0)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X15)))) ) | $spl378),
  inference(forward_demodulation,[],[f38237,f19882])).
fof(f38237,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),X15))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X18,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X18,sK0)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X15)))) )),
  inference(superposition,[],[f602,f161])).
fof(f602,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),X0))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(X0,X1,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X0,X1,sK0)),s('type.list.list'(sK0),sK11(X0,X1,sK0)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f163,f124])).
fof(f38251,plain,(
  ( ! [X6,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(X6,X9,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X6,X9,sK0)),s('type.list.list'(sK0),sK11(X6,X9,sK0)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9)))) ) | $spl596),
  inference(cnf_transformation,[],[f38251_D])).
fof(f38251_D,plain,(
  ( ! [X6,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(X6,X9,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X6,X9,sK0)),s('type.list.list'(sK0),sK11(X6,X9,sK0)))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9)))) ) <=> ~$spl596),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl596])])).
fof(f622,plain,(
  ( ! [X10,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl80),
  inference(cnf_transformation,[],[f622_D])).
fof(f622_D,plain,(
  ( ! [X10,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.NIL_0')))))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f38235,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(X6,X9,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X6,X9,sK0)),s('type.list.list'(sK0),sK11(X6,X9,sK0)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X6)))) )),
  inference(superposition,[],[f602,f161])).
fof(f38250,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0))))))))) ) | $spl594),
  inference(cnf_transformation,[],[f38250_D])).
fof(f38250_D,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0))))))))) ) <=> ~$spl594),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl594])])).
fof(f38249,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0))))))))) ) | ($spl4 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f38248,f19882])).
fof(f38248,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0))))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f38234,f25777])).
fof(f38234,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X5,sK0)))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f602,f25777])).
fof(f2093,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))) ) | $spl172),
  inference(cnf_transformation,[],[f2093_D])).
fof(f2093_D,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f38247,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0))))))))) ) | $spl592),
  inference(cnf_transformation,[],[f38247_D])).
fof(f38247_D,plain,(
  ( ! [X2] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0))))))))) ) <=> ~$spl592),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl592])])).
fof(f38246,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0))))))))) ) | $spl0),
  inference(forward_demodulation,[],[f38233,f166])).
fof(f38233,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK17('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X2,sK0)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f602,f166])).
fof(f37232,plain,(
  $false | ($spl4 | $spl209 | $spl242)),
  inference(trivial_inequality_removal,[],[f37209])).
fof(f37209,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | ($spl4 | $spl209 | $spl242)),
  inference(superposition,[],[f37168,f1466])).
fof(f37168,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))) ) | ($spl209 | $spl242)),
  inference(subsumption_resolution,[],[f37131,f136])).
fof(f37131,plain,(
  ( ! [X5] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))) ) | ($spl209 | $spl242)),
  inference(superposition,[],[f36410,f135])).
fof(f36410,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl209 | $spl242)),
  inference(superposition,[],[f36392,f126])).
fof(f36392,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl209 | $spl242)),
  inference(forward_demodulation,[],[f5651,f8452])).
fof(f5651,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl209),
  inference(cnf_transformation,[],[f5651_D])).
fof(f5651_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) <=> ~$spl209),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl209])])).
fof(f37231,plain,(
  $false | ($spl114 | $spl209 | $spl242)),
  inference(trivial_inequality_removal,[],[f37210])).
fof(f37210,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | ($spl114 | $spl209 | $spl242)),
  inference(superposition,[],[f37168,f1576])).
fof(f37230,plain,(
  $false | ($spl209 | $spl242)),
  inference(equality_resolution,[],[f37168])).
fof(f36390,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))))) ) | $spl590),
  inference(cnf_transformation,[],[f36390_D])).
fof(f36390_D,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))))) ) <=> ~$spl590),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl590])])).
fof(f311,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl26),
  inference(cnf_transformation,[],[f311_D])).
fof(f311_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f15412,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl2 | $spl242)),
  inference(forward_demodulation,[],[f15411,f135])).
fof(f15411,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl2 | $spl242)),
  inference(forward_demodulation,[],[f15344,f8452])).
fof(f15344,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(superposition,[],[f2927,f132])).
fof(f2927,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl2),
  inference(superposition,[],[f168,f126])).
fof(f15416,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl2 | $spl242)),
  inference(forward_demodulation,[],[f15415,f135])).
fof(f15415,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl2 | $spl242)),
  inference(forward_demodulation,[],[f15345,f8452])).
fof(f15345,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(superposition,[],[f2927,f130])).
fof(f17727,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl4 | $spl242)),
  inference(forward_demodulation,[],[f17726,f135])).
fof(f17726,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl4 | $spl242)),
  inference(forward_demodulation,[],[f17725,f8452])).
fof(f17725,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl4),
  inference(forward_demodulation,[],[f17657,f135])).
fof(f17657,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl4),
  inference(superposition,[],[f3268,f132])).
fof(f3268,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f170,f126])).
fof(f17732,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl4 | $spl242)),
  inference(forward_demodulation,[],[f17731,f135])).
fof(f17731,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl4 | $spl242)),
  inference(forward_demodulation,[],[f17730,f8452])).
fof(f17730,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl4),
  inference(forward_demodulation,[],[f17658,f135])).
fof(f17658,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl4),
  inference(superposition,[],[f3268,f130])).
fof(f36255,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | $spl529),
  inference(cnf_transformation,[],[f36255_D])).
fof(f36255_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) <=> ~$spl529),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl529])])).
fof(f36297,plain,(
  ( ! [X320] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X320),'const.list.NIL_0')))))))))) ) | $spl556),
  inference(cnf_transformation,[],[f36297_D])).
fof(f36297_D,plain,(
  ( ! [X320] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X320),'const.list.NIL_0')))))))))) ) <=> ~$spl556),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl556])])).
fof(f36387,plain,(
  ( ! [X521] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X521),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl51 | $spl208)),
  inference(forward_demodulation,[],[f36129,f135])).
fof(f36129,plain,(
  ( ! [X521] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X521),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl51 | $spl208)),
  inference(superposition,[],[f35461,f35568])).
fof(f35568,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0'))),s('type.num.num',sK1)))) ) | $spl208),
  inference(equality_resolution,[],[f25305])).
fof(f25305,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1)))) ) | $spl208),
  inference(trivial_inequality_removal,[],[f25274])).
fof(f25274,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl208),
  inference(superposition,[],[f5902,f162])).
fof(f5902,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1)))) ) | $spl208),
  inference(superposition,[],[f5808,f126])).
fof(f35461,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) ) | $spl51),
  inference(trivial_inequality_removal,[],[f35454])).
fof(f35454,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))) ) | $spl51),
  inference(superposition,[],[f25231,f131])).
fof(f25231,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl51),
  inference(subsumption_resolution,[],[f25197,f130])).
fof(f25197,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0)))))) ) | $spl51),
  inference(superposition,[],[f4694,f132])).
fof(f4694,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl51),
  inference(superposition,[],[f1073,f149])).
fof(f1073,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl51),
  inference(superposition,[],[f581,f132])).
fof(f36382,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl587),
  inference(cnf_transformation,[],[f36382_D])).
fof(f36382_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl587),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl587])])).
fof(f36207,plain,(
  ( ! [X200] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X200),'const.list.NIL_0')))))))) ) | $spl498),
  inference(cnf_transformation,[],[f36207_D])).
fof(f36207_D,plain,(
  ( ! [X200] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X200),'const.list.NIL_0')))))))) ) <=> ~$spl498),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl498])])).
fof(f36386,plain,(
  ( ! [X519] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X519),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl427)),
  inference(forward_demodulation,[],[f36127,f135])).
fof(f36127,plain,(
  ( ! [X519] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X519),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl427)),
  inference(superposition,[],[f32293,f35568])).
fof(f32293,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl427),
  inference(superposition,[],[f32079,f147])).
fof(f36385,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl589),
  inference(cnf_transformation,[],[f36385_D])).
fof(f36385_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl589),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl589])])).
fof(f36383,plain,(
  ( ! [X518] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X518),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl441)),
  inference(forward_demodulation,[],[f36126,f135])).
fof(f36126,plain,(
  ( ! [X518] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X518),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl441)),
  inference(superposition,[],[f32160,f35568])).
fof(f36380,plain,(
  ( ! [X517] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X517),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl427)),
  inference(forward_demodulation,[],[f36379,f135])).
fof(f36379,plain,(
  ( ! [X517] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X517),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl427)),
  inference(forward_demodulation,[],[f36125,f147])).
fof(f36125,plain,(
  ( ! [X517] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X517),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl427)),
  inference(superposition,[],[f32079,f35568])).
fof(f36231,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl515),
  inference(cnf_transformation,[],[f36231_D])).
fof(f36231_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl515),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl515])])).
fof(f36239,plain,(
  ( ! [X227] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X227),'const.list.NIL_0')))))))))) ) | $spl520),
  inference(cnf_transformation,[],[f36239_D])).
fof(f36239_D,plain,(
  ( ! [X227] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X227),'const.list.NIL_0')))))))))) ) <=> ~$spl520),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl520])])).
fof(f36378,plain,(
  ( ! [X516] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X516),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f36124,f135])).
fof(f36124,plain,(
  ( ! [X516] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X516),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(superposition,[],[f31843,f35568])).
fof(f31843,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f31836])).
fof(f31836,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(superposition,[],[f1058,f131])).
fof(f1058,plain,(
  ( ! [X69] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X69))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X69)))))) ) | $spl49),
  inference(superposition,[],[f953,f139])).
fof(f36377,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | $spl585),
  inference(cnf_transformation,[],[f36377_D])).
fof(f36377_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) <=> ~$spl585),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl585])])).
fof(f36375,plain,(
  ( ! [X512] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X512),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))))) ) | ($spl51 | $spl208)),
  inference(forward_demodulation,[],[f36120,f135])).
fof(f36120,plain,(
  ( ! [X512] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X512),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl51 | $spl208)),
  inference(superposition,[],[f25231,f35568])).
fof(f36373,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',sK1),s('type.num.num',sK1))) | $spl583),
  inference(cnf_transformation,[],[f36373_D])).
fof(f36373_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl583),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl583])])).
fof(f36371,plain,(
  ( ! [X507] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X507),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl49 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f36117,f135])).
fof(f36117,plain,(
  ( ! [X507] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X507),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl49 | $spl208 | $spl242)),
  inference(superposition,[],[f24506,f35568])).
fof(f24506,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl49 | $spl242)),
  inference(subsumption_resolution,[],[f24452,f8452])).
fof(f24452,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X6),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f943,f132])).
fof(f943,plain,(
  ( ! [X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X77)))) ) | $spl49),
  inference(superposition,[],[f636,f154])).
fof(f36314,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | $spl563),
  inference(cnf_transformation,[],[f36314_D])).
fof(f36314_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) <=> ~$spl563),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl563])])).
fof(f36212,plain,(
  ( ! [X201] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X201),'const.list.NIL_0')))))))) ) | $spl502),
  inference(cnf_transformation,[],[f36212_D])).
fof(f36212_D,plain,(
  ( ! [X201] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X201),'const.list.NIL_0')))))))) ) <=> ~$spl502),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl502])])).
fof(f36369,plain,(
  ( ! [X504] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X504),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl405)),
  inference(forward_demodulation,[],[f36368,f140])).
fof(f36368,plain,(
  ( ! [X504] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X504),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl405)),
  inference(forward_demodulation,[],[f36114,f135])).
fof(f36114,plain,(
  ( ! [X504] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X504),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl405)),
  inference(superposition,[],[f24044,f35568])).
fof(f24044,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl405),
  inference(superposition,[],[f24008,f126])).
fof(f36367,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | $spl581),
  inference(cnf_transformation,[],[f36367_D])).
fof(f36367_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) <=> ~$spl581),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl581])])).
fof(f36365,plain,(
  ( ! [X503] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X503),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl405)),
  inference(forward_demodulation,[],[f36113,f135])).
fof(f36113,plain,(
  ( ! [X503] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X503),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl405)),
  inference(superposition,[],[f24036,f35568])).
fof(f24036,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl405),
  inference(superposition,[],[f24008,f132])).
fof(f36223,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | $spl509),
  inference(cnf_transformation,[],[f36223_D])).
fof(f36223_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) <=> ~$spl509),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl509])])).
fof(f36340,plain,(
  ( ! [X432] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.NIL_0')))))))))) ) | $spl572),
  inference(cnf_transformation,[],[f36340_D])).
fof(f36340_D,plain,(
  ( ! [X432] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.NIL_0')))))))))) ) <=> ~$spl572),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl572])])).
fof(f36364,plain,(
  ( ! [X500] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X500),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl217 | $spl242)),
  inference(forward_demodulation,[],[f36110,f135])).
fof(f36110,plain,(
  ( ! [X500] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X500),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl208 | $spl217 | $spl242)),
  inference(superposition,[],[f23297,f35568])).
fof(f23297,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | ($spl217 | $spl242)),
  inference(superposition,[],[f23253,f149])).
fof(f23253,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl217 | $spl242)),
  inference(forward_demodulation,[],[f6481,f8452])).
fof(f6481,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl217),
  inference(superposition,[],[f6451,f126])).
fof(f36203,plain,(
  ( ! [X183] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X183),'const.list.NIL_0')))))))) ) | $spl494),
  inference(cnf_transformation,[],[f36203_D])).
fof(f36203_D,plain,(
  ( ! [X183] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X183),'const.list.NIL_0')))))))) ) <=> ~$spl494),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl494])])).
fof(f36361,plain,(
  ( ! [X499] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X499),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl217 | $spl242)),
  inference(forward_demodulation,[],[f36109,f135])).
fof(f36109,plain,(
  ( ! [X499] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X499),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl217 | $spl242)),
  inference(superposition,[],[f23253,f35568])).
fof(f36238,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl519),
  inference(cnf_transformation,[],[f36238_D])).
fof(f36238_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl519),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl519])])).
fof(f36360,plain,(
  ( ! [X496] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X496),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl53 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f36106,f135])).
fof(f36106,plain,(
  ( ! [X496] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X496),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl53 | $spl208 | $spl242)),
  inference(superposition,[],[f22911,f35568])).
fof(f22911,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3)))) ) | ($spl53 | $spl242)),
  inference(subsumption_resolution,[],[f22910,f126])).
fof(f22910,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) ) | ($spl53 | $spl242)),
  inference(forward_demodulation,[],[f22866,f8452])).
fof(f22866,plain,(
  ( ! [X3] : (s('type.num.num',X3) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) ) | $spl53),
  inference(superposition,[],[f964,f132])).
fof(f964,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl53),
  inference(superposition,[],[f583,f126])).
fof(f36344,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | $spl575),
  inference(cnf_transformation,[],[f36344_D])).
fof(f36344_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) <=> ~$spl575),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl575])])).
fof(f36358,plain,(
  ( ! [X487] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X487),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl387)),
  inference(forward_demodulation,[],[f36097,f135])).
fof(f36097,plain,(
  ( ! [X487] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X487),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl387)),
  inference(superposition,[],[f21061,f35568])).
fof(f21061,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl387),
  inference(superposition,[],[f21020,f126])).
fof(f36356,plain,(
  ( ! [X485] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X485),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl385)),
  inference(forward_demodulation,[],[f36095,f135])).
fof(f36095,plain,(
  ( ! [X485] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X485),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl385)),
  inference(superposition,[],[f21047,f35568])).
fof(f21047,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl385),
  inference(superposition,[],[f21018,f132])).
fof(f36235,plain,(
  ( ! [X226] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X226),'const.list.NIL_0')))))))))) ) | $spl516),
  inference(cnf_transformation,[],[f36235_D])).
fof(f36235_D,plain,(
  ( ! [X226] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X226),'const.list.NIL_0')))))))))) ) <=> ~$spl516),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl516])])).
fof(f36354,plain,(
  ( ! [X483] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X483),'const.list.NIL_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl380)),
  inference(forward_demodulation,[],[f36093,f135])).
fof(f36093,plain,(
  ( ! [X483] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X483),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl208 | $spl380)),
  inference(superposition,[],[f20898,f35568])).
fof(f20898,plain,(
  ( ! [X68] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl380),
  inference(superposition,[],[f20854,f149])).
fof(f36350,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl577),
  inference(cnf_transformation,[],[f36350_D])).
fof(f36350_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl577),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl577])])).
fof(f36348,plain,(
  ( ! [X455] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X455),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl208 | $spl261)),
  inference(forward_demodulation,[],[f36068,f135])).
fof(f36068,plain,(
  ( ! [X455] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X455),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl261)),
  inference(superposition,[],[f14952,f35568])).
fof(f14952,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl261),
  inference(superposition,[],[f9055,f127])).
fof(f36347,plain,(
  ( ! [X441] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X441),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl321)),
  inference(forward_demodulation,[],[f36055,f135])).
fof(f36055,plain,(
  ( ! [X441] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X441),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl321)),
  inference(superposition,[],[f12083,f35568])).
fof(f12083,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl321),
  inference(superposition,[],[f12070,f132])).
fof(f12070,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl321),
  inference(superposition,[],[f12001,f149])).
fof(f36346,plain,(
  ( ! [X439] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl321)),
  inference(forward_demodulation,[],[f36345,f135])).
fof(f36345,plain,(
  ( ! [X439] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl321)),
  inference(forward_demodulation,[],[f36053,f149])).
fof(f36053,plain,(
  ( ! [X439] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X439),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl321)),
  inference(superposition,[],[f12060,f35568])).
fof(f36342,plain,(
  ( ! [X437] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X437),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl327)),
  inference(forward_demodulation,[],[f36051,f135])).
fof(f36051,plain,(
  ( ! [X437] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X437),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl327)),
  inference(superposition,[],[f12042,f35568])).
fof(f12042,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl327),
  inference(superposition,[],[f12005,f126])).
fof(f36341,plain,(
  ( ! [X435] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X435),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl319)),
  inference(forward_demodulation,[],[f36049,f135])).
fof(f36049,plain,(
  ( ! [X435] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X435),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl319)),
  inference(superposition,[],[f12028,f35568])).
fof(f12028,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl319),
  inference(superposition,[],[f11999,f132])).
fof(f36339,plain,(
  ( ! [X432] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl53 | $spl208)),
  inference(forward_demodulation,[],[f36046,f135])).
fof(f36046,plain,(
  ( ! [X432] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X432),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl53 | $spl208)),
  inference(superposition,[],[f11357,f35568])).
fof(f11357,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl53),
  inference(superposition,[],[f1020,f149])).
fof(f1020,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl53),
  inference(superposition,[],[f978,f126])).
fof(f978,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl53),
  inference(trivial_inequality_removal,[],[f971])).
fof(f971,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl53),
  inference(superposition,[],[f583,f131])).
fof(f36202,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl493),
  inference(cnf_transformation,[],[f36202_D])).
fof(f36202_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl493),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl493])])).
fof(f36337,plain,(
  ( ! [X428] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X428),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl309)),
  inference(forward_demodulation,[],[f36042,f135])).
fof(f36042,plain,(
  ( ! [X428] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X428),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl309)),
  inference(superposition,[],[f10784,f35568])).
fof(f10784,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl309),
  inference(superposition,[],[f9941,f126])).
fof(f36218,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | $spl507),
  inference(cnf_transformation,[],[f36218_D])).
fof(f36218_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) <=> ~$spl507),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl507])])).
fof(f36335,plain,(
  ( ! [X426] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X426),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl311)),
  inference(forward_demodulation,[],[f36040,f135])).
fof(f36040,plain,(
  ( ! [X426] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X426),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl311)),
  inference(superposition,[],[f10668,f35568])).
fof(f10668,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl311),
  inference(superposition,[],[f10653,f126])).
fof(f36332,plain,(
  ( ! [X407] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X407),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl307)),
  inference(forward_demodulation,[],[f36025,f135])).
fof(f36025,plain,(
  ( ! [X407] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X407),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl307)),
  inference(superposition,[],[f9954,f35568])).
fof(f9954,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl307),
  inference(superposition,[],[f9939,f132])).
fof(f36330,plain,(
  ( ! [X399] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X399),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl244 | $spl247)),
  inference(forward_demodulation,[],[f36018,f135])).
fof(f36018,plain,(
  ( ! [X399] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X399),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl244 | $spl247)),
  inference(superposition,[],[f9825,f35568])).
fof(f9825,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl244 | $spl247)),
  inference(superposition,[],[f9821,f126])).
fof(f9821,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | ($spl244 | $spl247)),
  inference(trivial_inequality_removal,[],[f9814])).
fof(f9814,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | ($spl244 | $spl247)),
  inference(superposition,[],[f8975,f131])).
fof(f36211,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | $spl501),
  inference(cnf_transformation,[],[f36211_D])).
fof(f36211_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) <=> ~$spl501),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl501])])).
fof(f36329,plain,(
  ( ! [X396] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X396),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl239)),
  inference(forward_demodulation,[],[f36015,f135])).
fof(f36015,plain,(
  ( ! [X396] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X396),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl239)),
  inference(superposition,[],[f9797,f35568])).
fof(f9797,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl239),
  inference(superposition,[],[f9793,f126])).
fof(f9793,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | $spl239),
  inference(trivial_inequality_removal,[],[f9786])).
fof(f9786,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | $spl239),
  inference(superposition,[],[f8161,f131])).
fof(f36327,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl571),
  inference(cnf_transformation,[],[f36327_D])).
fof(f36327_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl571),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl571])])).
fof(f36328,plain,(
  ( ! [X394] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X394),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl9 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f36013,f135])).
fof(f36013,plain,(
  ( ! [X394] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X394),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl9 | $spl208 | $spl242)),
  inference(superposition,[],[f9489,f35568])).
fof(f9489,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl9 | $spl208 | $spl242)),
  inference(superposition,[],[f9105,f126])).
fof(f9105,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl9 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f6088,f8452])).
fof(f6088,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl9 | $spl208)),
  inference(superposition,[],[f5844,f135])).
fof(f5844,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl9 | $spl208)),
  inference(subsumption_resolution,[],[f5720,f286])).
fof(f5720,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl208),
  inference(superposition,[],[f131,f5652])).
fof(f36325,plain,(
  ( ! [X391] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X391),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl9 | $spl208 | $spl242)),
  inference(forward_demodulation,[],[f36010,f135])).
fof(f36010,plain,(
  ( ! [X391] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X391),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl9 | $spl208 | $spl242)),
  inference(superposition,[],[f9239,f35568])).
fof(f9239,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl9 | $spl208 | $spl242)),
  inference(superposition,[],[f8487,f126])).
fof(f8487,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl9 | $spl208 | $spl242)),
  inference(backward_demodulation,[],[f8452,f5844])).
fof(f36322,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl568),
  inference(cnf_transformation,[],[f36322_D])).
fof(f36322_D,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl568),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl568])])).
fof(f36320,plain,(
  ( ! [X375] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X375),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f35998,f135])).
fof(f35998,plain,(
  ( ! [X375] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X375),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f8764,f35568])).
fof(f8764,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.>_2'(s('type.num.num',X0),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl242),
  inference(superposition,[],[f8704,f126])).
fof(f36319,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl566),
  inference(cnf_transformation,[],[f36319_D])).
fof(f36319_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) <=> ~$spl566),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl566])])).
fof(f36317,plain,(
  ( ! [X374] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X374),'const.list.NIL_0'))))))) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl208 | $spl242)),
  inference(forward_demodulation,[],[f35997,f135])).
fof(f35997,plain,(
  ( ! [X374] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X374),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl242)),
  inference(superposition,[],[f8746,f35568])).
fof(f8746,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl242),
  inference(superposition,[],[f8702,f126])).
fof(f8702,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(forward_demodulation,[],[f8512,f156])).
fof(f8512,plain,(
  s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.ZERO_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl242),
  inference(superposition,[],[f134,f8452])).
fof(f134,plain,(
  ( ! [X0] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X23] : s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X23))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X23)))))),
  file('thm.quantHeuristics.LIST_LENGTH_7|split|11','thm.numeral.numeral_distrib|split|21')).
fof(f36316,plain,(
  ( ! [X369] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X369),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl97 | $spl208)),
  inference(forward_demodulation,[],[f35992,f135])).
fof(f35992,plain,(
  ( ! [X369] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X369),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl97 | $spl208)),
  inference(superposition,[],[f8162,f35568])).
fof(f8162,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl97),
  inference(superposition,[],[f1072,f132])).
fof(f36315,plain,(
  ( ! [X367] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X367),'const.list.NIL_0')))))))) ) | $spl564),
  inference(cnf_transformation,[],[f36315_D])).
fof(f36315_D,plain,(
  ( ! [X367] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X367),'const.list.NIL_0')))))))) ) <=> ~$spl564),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl564])])).
fof(f36312,plain,(
  ( ! [X367] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X367),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl233)),
  inference(forward_demodulation,[],[f35990,f135])).
fof(f35990,plain,(
  ( ! [X367] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X367),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl233)),
  inference(superposition,[],[f8154,f35568])).
fof(f8154,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl233),
  inference(superposition,[],[f8024,f126])).
fof(f36206,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | $spl497),
  inference(cnf_transformation,[],[f36206_D])).
fof(f36206_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) <=> ~$spl497),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl497])])).
fof(f36311,plain,(
  ( ! [X366] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X366),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))) ) | ($spl208 | $spl233)),
  inference(forward_demodulation,[],[f35989,f135])).
fof(f35989,plain,(
  ( ! [X366] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X366),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl233)),
  inference(superposition,[],[f8150,f35568])).
fof(f8150,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl233),
  inference(superposition,[],[f8024,f126])).
fof(f36305,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl559),
  inference(cnf_transformation,[],[f36305_D])).
fof(f36305_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl559),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl559])])).
fof(f36310,plain,(
  ( ! [X364] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X364),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl235)),
  inference(forward_demodulation,[],[f35987,f135])).
fof(f35987,plain,(
  ( ! [X364] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X364),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl235)),
  inference(superposition,[],[f8142,f35568])).
fof(f36309,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | $spl561),
  inference(cnf_transformation,[],[f36309_D])).
fof(f36309_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) <=> ~$spl561),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl561])])).
fof(f36307,plain,(
  ( ! [X358] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X358),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl229)),
  inference(forward_demodulation,[],[f35981,f135])).
fof(f35981,plain,(
  ( ! [X358] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X358),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl229)),
  inference(superposition,[],[f7879,f35568])).
fof(f7879,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl229),
  inference(superposition,[],[f7868,f126])).
fof(f36303,plain,(
  ( ! [X341] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X341),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl208 | $spl221)),
  inference(forward_demodulation,[],[f35966,f135])).
fof(f35966,plain,(
  ( ! [X341] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X341),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl208 | $spl221)),
  inference(superposition,[],[f6489,f35568])).
fof(f6489,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl221),
  inference(superposition,[],[f6454,f126])).
fof(f36298,plain,(
  ( ! [X322] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X322),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl203 | $spl208)),
  inference(forward_demodulation,[],[f35949,f135])).
fof(f35949,plain,(
  ( ! [X322] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X322),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl203 | $spl208)),
  inference(superposition,[],[f4799,f35568])).
fof(f4799,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl203),
  inference(superposition,[],[f4773,f126])).
fof(f36296,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | $spl555),
  inference(cnf_transformation,[],[f36296_D])).
fof(f36296_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) <=> ~$spl555),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl555])])).
fof(f36294,plain,(
  ( ! [X320] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X320),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl51 | $spl208)),
  inference(forward_demodulation,[],[f35947,f135])).
fof(f35947,plain,(
  ( ! [X320] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X320),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl51 | $spl208)),
  inference(superposition,[],[f4694,f35568])).
fof(f36293,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | $spl553),
  inference(cnf_transformation,[],[f36293_D])).
fof(f36293_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) <=> ~$spl553),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl553])])).
fof(f36291,plain,(
  ( ! [X319] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X319),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))))) ) | ($spl123 | $spl208)),
  inference(forward_demodulation,[],[f35946,f135])).
fof(f35946,plain,(
  ( ! [X319] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X319),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl123 | $spl208)),
  inference(superposition,[],[f4324,f35568])).
fof(f9923,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl295),
  inference(cnf_transformation,[],[f9923_D])).
fof(f9923_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl295])])).
fof(f36275,plain,(
  ( ! [X284] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X284),'const.list.NIL_0')))))))) ) | $spl546),
  inference(cnf_transformation,[],[f36275_D])).
fof(f36275_D,plain,(
  ( ! [X284] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X284),'const.list.NIL_0')))))))) ) <=> ~$spl546),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl546])])).
fof(f36286,plain,(
  ( ! [X305] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X305),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f35940,f135])).
fof(f35940,plain,(
  ( ! [X305] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X305),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f3308,f35568])).
fof(f3308,plain,(
  ( ! [X52] : (s('type.num.num',X52) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X52))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl4),
  inference(superposition,[],[f127,f170])).
fof(f36273,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl545),
  inference(cnf_transformation,[],[f36273_D])).
fof(f36273_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl545),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl545])])).
fof(f36283,plain,(
  ( ! [X300] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X300),'const.list.NIL_0'))))))),s('type.num.num',sK1)))) ) | $spl550),
  inference(cnf_transformation,[],[f36283_D])).
fof(f36283_D,plain,(
  ( ! [X300] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X300),'const.list.NIL_0'))))))),s('type.num.num',sK1)))) ) <=> ~$spl550),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl550])])).
fof(f36284,plain,(
  ( ! [X301] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X301),'const.list.NIL_0'))))))),s('type.num.num',sK1))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f35936,f135])).
fof(f35936,plain,(
  ( ! [X301] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X301),'const.list.NIL_0'))),s('type.num.num',sK1))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f3272,f35568])).
fof(f3272,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',sK1)))) ) | $spl4),
  inference(superposition,[],[f170,f127])).
fof(f36269,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl541),
  inference(cnf_transformation,[],[f36269_D])).
fof(f36269_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl541),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl541])])).
fof(f36282,plain,(
  ( ! [X300] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X300),'const.list.NIL_0'))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f35935,f135])).
fof(f35935,plain,(
  ( ! [X300] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X300),'const.list.NIL_0'))),s('type.num.num',sK1))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f3268,f35568])).
fof(f36265,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl537),
  inference(cnf_transformation,[],[f36265_D])).
fof(f36265_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl537),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl537])])).
fof(f36281,plain,(
  ( ! [X299] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X299),'const.list.NIL_0'))))))))),s('type.num.num',sK1)))) ) | $spl548),
  inference(cnf_transformation,[],[f36281_D])).
fof(f36281_D,plain,(
  ( ! [X299] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X299),'const.list.NIL_0'))))))))),s('type.num.num',sK1)))) ) <=> ~$spl548),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl548])])).
fof(f36280,plain,(
  ( ! [X299] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X299),'const.list.NIL_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f35934,f135])).
fof(f35934,plain,(
  ( ! [X299] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X299),'const.list.NIL_0'))),s('type.num.num',sK1))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f3264,f35568])).
fof(f9927,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl299),
  inference(cnf_transformation,[],[f9927_D])).
fof(f9927_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl299),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl299])])).
fof(f36274,plain,(
  ( ! [X284] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X284),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl208)),
  inference(forward_demodulation,[],[f35927,f135])).
fof(f35927,plain,(
  ( ! [X284] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X284),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl2 | $spl208)),
  inference(superposition,[],[f2955,f35568])).
fof(f36270,plain,(
  ( ! [X280] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X280),'const.list.NIL_0')))))))))) ) | $spl542),
  inference(cnf_transformation,[],[f36270_D])).
fof(f36270_D,plain,(
  ( ! [X280] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X280),'const.list.NIL_0')))))))))) ) <=> ~$spl542),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl542])])).
fof(f36271,plain,(
  ( ! [X281] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X281),'const.list.NIL_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl2 | $spl208)),
  inference(forward_demodulation,[],[f35924,f135])).
fof(f35924,plain,(
  ( ! [X281] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X281),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl2 | $spl208)),
  inference(superposition,[],[f2931,f35568])).
fof(f2931,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl2),
  inference(superposition,[],[f168,f127])).
fof(f36267,plain,(
  ( ! [X280] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X280),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | ($spl2 | $spl208)),
  inference(forward_demodulation,[],[f35923,f135])).
fof(f35923,plain,(
  ( ! [X280] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X280),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl2 | $spl208)),
  inference(superposition,[],[f2927,f35568])).
fof(f36266,plain,(
  ( ! [X279] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X279),'const.list.NIL_0')))))))))))) ) | $spl538),
  inference(cnf_transformation,[],[f36266_D])).
fof(f36266_D,plain,(
  ( ! [X279] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X279),'const.list.NIL_0')))))))))))) ) <=> ~$spl538),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl538])])).
fof(f36263,plain,(
  ( ! [X279] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X279),'const.list.NIL_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | ($spl2 | $spl208)),
  inference(forward_demodulation,[],[f35922,f135])).
fof(f35922,plain,(
  ( ! [X279] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X279),'const.list.NIL_0'))),s('type.num.num',sK1)))))))))) ) | ($spl2 | $spl208)),
  inference(superposition,[],[f2923,f35568])).
fof(f36261,plain,(
  ( ! [X275] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X275),'const.list.NIL_0')))))))))) ) | $spl534),
  inference(cnf_transformation,[],[f36261_D])).
fof(f36261_D,plain,(
  ( ! [X275] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X275),'const.list.NIL_0')))))))))) ) <=> ~$spl534),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl534])])).
fof(f36260,plain,(
  ( ! [X275] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X275),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl53 | $spl208)),
  inference(forward_demodulation,[],[f35918,f135])).
fof(f35918,plain,(
  ( ! [X275] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X275),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl53 | $spl208)),
  inference(superposition,[],[f2868,f35568])).
fof(f2868,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl53),
  inference(superposition,[],[f2827,f149])).
fof(f2827,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl53),
  inference(trivial_inequality_removal,[],[f2819])).
fof(f2819,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl53),
  inference(superposition,[],[f972,f131])).
fof(f36258,plain,(
  ( ! [X270] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X270),'const.list.NIL_0')))))))))) ) | $spl532),
  inference(cnf_transformation,[],[f36258_D])).
fof(f36258_D,plain,(
  ( ! [X270] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X270),'const.list.NIL_0')))))))))) ) <=> ~$spl532),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl532])])).
fof(f36257,plain,(
  ( ! [X270] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X270),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl17 | $spl208)),
  inference(forward_demodulation,[],[f35913,f135])).
fof(f35913,plain,(
  ( ! [X270] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X270),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl17 | $spl208)),
  inference(superposition,[],[f2770,f35568])).
fof(f2770,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl17),
  inference(superposition,[],[f2729,f149])).
fof(f2729,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))) ) | $spl17),
  inference(trivial_inequality_removal,[],[f2720])).
fof(f2720,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl17),
  inference(superposition,[],[f804,f131])).
fof(f36256,plain,(
  ( ! [X265] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X265),'const.list.NIL_0')))))))))) ) | $spl530),
  inference(cnf_transformation,[],[f36256_D])).
fof(f36256_D,plain,(
  ( ! [X265] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X265),'const.list.NIL_0')))))))))) ) <=> ~$spl530),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl530])])).
fof(f36253,plain,(
  ( ! [X265] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X265),'const.list.NIL_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl45 | $spl208)),
  inference(forward_demodulation,[],[f35908,f135])).
fof(f35908,plain,(
  ( ! [X265] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X265),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl45 | $spl208)),
  inference(superposition,[],[f2671,f35568])).
fof(f2671,plain,(
  ( ! [X68] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl45),
  inference(superposition,[],[f2630,f149])).
fof(f2630,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1)))) ) | $spl45),
  inference(trivial_inequality_removal,[],[f2622])).
fof(f2622,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl45),
  inference(superposition,[],[f731,f131])).
fof(f36247,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl527),
  inference(cnf_transformation,[],[f36247_D])).
fof(f36247_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl527),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl527])])).
fof(f36245,plain,(
  ( ! [X243] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X243),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl137 | $spl208)),
  inference(forward_demodulation,[],[f35890,f135])).
fof(f35890,plain,(
  ( ! [X243] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X243),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl137 | $spl208)),
  inference(superposition,[],[f1952,f35568])).
fof(f36244,plain,(
  ( ! [X232] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X232),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl51 | $spl208)),
  inference(forward_demodulation,[],[f35879,f135])).
fof(f35879,plain,(
  ( ! [X232] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X232),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl51 | $spl208)),
  inference(superposition,[],[f1073,f35568])).
fof(f36242,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl523),
  inference(cnf_transformation,[],[f36242_D])).
fof(f36242_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl523),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl523])])).
fof(f36243,plain,(
  ( ! [X228] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X228),'const.list.NIL_0')))))))))) ) | $spl524),
  inference(cnf_transformation,[],[f36243_D])).
fof(f36243_D,plain,(
  ( ! [X228] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X228),'const.list.NIL_0')))))))))) ) <=> ~$spl524),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl524])])).
fof(f36240,plain,(
  ( ! [X228] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X228),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f35875,f135])).
fof(f35875,plain,(
  ( ! [X228] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X228),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(superposition,[],[f1059,f35568])).
fof(f1059,plain,(
  ( ! [X70] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X70))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X70)))))) ) | $spl49),
  inference(superposition,[],[f953,f147])).
fof(f36236,plain,(
  ( ! [X227] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X227),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f35874,f135])).
fof(f35874,plain,(
  ( ! [X227] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X227),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(superposition,[],[f1058,f35568])).
fof(f36234,plain,(
  ( ! [X226] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X226),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f35873,f135])).
fof(f35873,plain,(
  ( ! [X226] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X226),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(superposition,[],[f1057,f35568])).
fof(f1057,plain,(
  ( ! [X68] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68)))))) ) | $spl49),
  inference(superposition,[],[f953,f149])).
fof(f36229,plain,(
  ( ! [X219] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X219),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl53 | $spl208)),
  inference(forward_demodulation,[],[f35868,f135])).
fof(f35868,plain,(
  ( ! [X219] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X219),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl53 | $spl208)),
  inference(superposition,[],[f1020,f35568])).
fof(f36228,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | $spl513),
  inference(cnf_transformation,[],[f36228_D])).
fof(f36228_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) <=> ~$spl513),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl513])])).
fof(f36226,plain,(
  ( ! [X215] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X215),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))))) ) | ($spl53 | $spl208)),
  inference(forward_demodulation,[],[f35864,f135])).
fof(f35864,plain,(
  ( ! [X215] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X215),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl53 | $spl208)),
  inference(superposition,[],[f964,f35568])).
fof(f36224,plain,(
  ( ! [X210] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),'const.list.NIL_0')))))))))) ) | $spl510),
  inference(cnf_transformation,[],[f36224_D])).
fof(f36224_D,plain,(
  ( ! [X210] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),'const.list.NIL_0')))))))))) ) <=> ~$spl510),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl510])])).
fof(f36221,plain,(
  ( ! [X210] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1)))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f36220,f135])).
fof(f36220,plain,(
  ( ! [X210] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(forward_demodulation,[],[f35860,f149])).
fof(f35860,plain,(
  ( ! [X210] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X210),'const.list.NIL_0'))),s('type.num.num',sK1)))))))) ) | ($spl49 | $spl208)),
  inference(superposition,[],[f937,f35568])).
fof(f937,plain,(
  ( ! [X68] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X68))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X68)))))) ) | $spl49),
  inference(superposition,[],[f636,f149])).
fof(f36216,plain,(
  ( ! [X207] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X207),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl17 | $spl208)),
  inference(forward_demodulation,[],[f35857,f135])).
fof(f35857,plain,(
  ( ! [X207] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X207),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl17 | $spl208)),
  inference(superposition,[],[f814,f35568])).
fof(f814,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl17),
  inference(superposition,[],[f810,f132])).
fof(f810,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl17),
  inference(trivial_inequality_removal,[],[f803])).
fof(f803,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl17),
  inference(superposition,[],[f715,f131])).
fof(f36215,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | $spl505),
  inference(cnf_transformation,[],[f36215_D])).
fof(f36215_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) <=> ~$spl505),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl505])])).
fof(f36213,plain,(
  ( ! [X203] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))))) ) | ($spl25 | $spl208)),
  inference(forward_demodulation,[],[f35853,f135])).
fof(f35853,plain,(
  ( ! [X203] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X203),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl25 | $spl208)),
  inference(superposition,[],[f771,f35568])).
fof(f36209,plain,(
  ( ! [X201] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X201),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl17 | $spl208)),
  inference(forward_demodulation,[],[f36208,f140])).
fof(f36208,plain,(
  ( ! [X201] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X201),'const.list.NIL_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))) ) | ($spl17 | $spl208)),
  inference(forward_demodulation,[],[f35851,f135])).
fof(f35851,plain,(
  ( ! [X201] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X201),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl17 | $spl208)),
  inference(superposition,[],[f761,f35568])).
fof(f761,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl17),
  inference(superposition,[],[f713,f126])).
fof(f713,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl17),
  inference(trivial_inequality_removal,[],[f706])).
fof(f706,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl17),
  inference(superposition,[],[f299,f131])).
fof(f36204,plain,(
  ( ! [X200] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X200),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1)))))) ) | ($spl17 | $spl208)),
  inference(forward_demodulation,[],[f35850,f135])).
fof(f35850,plain,(
  ( ! [X200] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X200),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl17 | $spl208)),
  inference(superposition,[],[f753,f35568])).
fof(f753,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl17),
  inference(superposition,[],[f713,f132])).
fof(f36200,plain,(
  ( ! [X183] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X183),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1)))) ) | ($spl15 | $spl208)),
  inference(forward_demodulation,[],[f35833,f135])).
fof(f35833,plain,(
  ( ! [X183] : (s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X183),'const.list.NIL_0'))),s('type.num.num',sK1)))))) ) | ($spl15 | $spl208)),
  inference(superposition,[],[f572,f35568])).
fof(f572,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl15),
  inference(superposition,[],[f293,f126])).
fof(f22560,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2)))))))) ) | $spl400),
  inference(cnf_transformation,[],[f22560_D])).
fof(f22560_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2)))))))) ) <=> ~$spl400),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl400])])).
fof(f33824,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X2) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3)))) ) | $spl490),
  inference(cnf_transformation,[],[f33824_D])).
fof(f33824_D,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X2) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3)))) ) <=> ~$spl490),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl490])])).
fof(f33818,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X2) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2)))))))) ) | $spl0),
  inference(superposition,[],[f2024,f161])).
fof(f2024,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.list.list'(sK0),X34) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X35),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X36),s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X34))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X37))) | s('type.num.num',X37) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f33822,plain,(
  ( ! [X12,X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12))) | s('type.num.num',X15) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))) ) | $spl486),
  inference(cnf_transformation,[],[f33822_D])).
fof(f33822_D,plain,(
  ( ! [X12,X15] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12))) | s('type.num.num',X15) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))) ) <=> ~$spl486),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl486])])).
fof(f33823,plain,(
  ( ! [X14,X13] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2)))))) ) | $spl488),
  inference(cnf_transformation,[],[f33823_D])).
fof(f33823_D,plain,(
  ( ! [X14,X13] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl488),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl488])])).
fof(f33813,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X15))) | s('type.num.num',X15) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X12)))) ) | $spl0),
  inference(superposition,[],[f2024,f161])).
fof(f33336,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6))))) ) | $spl484),
  inference(cnf_transformation,[],[f33336_D])).
fof(f33336_D,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6))))) ) <=> ~$spl484),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl484])])).
fof(f33325,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK11(X9,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X8)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3404,f130])).
fof(f33324,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X6)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3404,f132])).
fof(f33331,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl482),
  inference(cnf_transformation,[],[f33331_D])).
fof(f33331_D,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) <=> ~$spl482),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl482])])).
fof(f33288,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),sK11(X33,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X32)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3404,f130])).
fof(f33287,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3404,f132])).
fof(f33330,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl480),
  inference(cnf_transformation,[],[f33330_D])).
fof(f33330_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl480),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl480])])).
fof(f33281,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | ($spl2 | $spl4)),
  inference(superposition,[],[f3404,f162])).
fof(f33280,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)),sK0)))) | ($spl0 | $spl2 | $spl4)),
  inference(superposition,[],[f3404,f166])).
fof(f33097,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl477),
  inference(cnf_transformation,[],[f33097_D])).
fof(f33097_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl477),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl477])])).
fof(f33095,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl17),
  inference(forward_demodulation,[],[f33065,f140])).
fof(f33065,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl17),
  inference(superposition,[],[f2776,f148])).
fof(f2776,plain,(
  ( ! [X77] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X77)) ) | $spl17),
  inference(superposition,[],[f2729,f154])).
fof(f32954,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6))))) ) | $spl474),
  inference(cnf_transformation,[],[f32954_D])).
fof(f32954_D,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6))))) ) <=> ~$spl474),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl474])])).
fof(f32935,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),X9))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X8),sK11(X9,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X8)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f3046,f130])).
fof(f32934,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X7))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),sK11(X7,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X6)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl2),
  inference(superposition,[],[f3046,f132])).
fof(f32945,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl468),
  inference(cnf_transformation,[],[f32945_D])).
fof(f32945_D,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) <=> ~$spl468),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl468])])).
fof(f32898,plain,(
  ( ! [X33,X32] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),sK11(X33,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X32)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X32),X33)))))) ) | $spl2),
  inference(superposition,[],[f3046,f130])).
fof(f32897,plain,(
  ( ! [X30,X31] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),sK11(X31,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X30)))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X30),X31)))))) ) | $spl2),
  inference(superposition,[],[f3046,f132])).
fof(f32942,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl464),
  inference(cnf_transformation,[],[f32942_D])).
fof(f32942_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) <=> ~$spl464),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl464])])).
fof(f32891,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),sK11(X1,'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),X0)))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) ) | $spl2),
  inference(superposition,[],[f3046,f162])).
fof(f32890,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),sK0)))) | ($spl0 | $spl2)),
  inference(superposition,[],[f3046,f166])).
fof(f32735,plain,(
  ( ! [X17,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),X17))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) ) | $spl456),
  inference(cnf_transformation,[],[f32735_D])).
fof(f32735_D,plain,(
  ( ! [X17,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),X17))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) ) <=> ~$spl456),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl456])])).
fof(f32736,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X19))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X19,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X19,sK0))))))) ) | $spl458),
  inference(cnf_transformation,[],[f32736_D])).
fof(f32736_D,plain,(
  ( ! [X19] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X19))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X19,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X19,sK0))))))) ) <=> ~$spl458),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl458])])).
fof(f32734,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X19))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),X17))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X19,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X19,sK0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) ) | $spl378),
  inference(forward_demodulation,[],[f32713,f19882])).
fof(f32713,plain,(
  ( ! [X19,X17,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),X17))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.NIL_0',X19,sK0)),s('type.list.list'(sK0),sK11('const.list.NIL_0',X19,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X19))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) )),
  inference(superposition,[],[f604,f161])).
fof(f604,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),X0))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X0,X1,sK0)),s('type.list.list'(sK0),sK11(X0,X1,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1)))) )),
  inference(superposition,[],[f163,f124])).
fof(f32733,plain,(
  ( ! [X12,X10] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X10,X12,sK0)),s('type.list.list'(sK0),sK11(X10,X12,sK0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12)))) ) | $spl454),
  inference(cnf_transformation,[],[f32733_D])).
fof(f32733_D,plain,(
  ( ! [X12,X10] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X10,X12,sK0)),s('type.list.list'(sK0),sK11(X10,X12,sK0)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12)))) ) <=> ~$spl454),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl454])])).
fof(f624,plain,(
  ( ! [X10] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.NIL_0')))) ) | $spl84),
  inference(cnf_transformation,[],[f624_D])).
fof(f624_D,plain,(
  ( ! [X10] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.NIL_0')))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f32711,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(X10,X12,sK0)),s('type.list.list'(sK0),sK11(X10,X12,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10)))) )),
  inference(superposition,[],[f604,f161])).
fof(f32732,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0))))))) ) | $spl452),
  inference(cnf_transformation,[],[f32732_D])).
fof(f32732_D,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0))))))) ) <=> ~$spl452),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl452])])).
fof(f32731,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0))))))) ) | ($spl114 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f32730,f19882])).
fof(f32730,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0))))))) ) | ($spl114 | $spl208)),
  inference(forward_demodulation,[],[f32710,f29836])).
fof(f29836,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)) | ($spl114 | $spl208)),
  inference(trivial_inequality_removal,[],[f29485])).
fof(f29485,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)) | ($spl114 | $spl208)),
  inference(superposition,[],[f161,f27361])).
fof(f27361,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208)),
  inference(trivial_inequality_removal,[],[f27026])).
fof(f27026,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) | ($spl114 | $spl208)),
  inference(superposition,[],[f5914,f26493])).
fof(f26493,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208)),
  inference(trivial_inequality_removal,[],[f26487])).
fof(f26487,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208)),
  inference(superposition,[],[f5915,f1576])).
fof(f32710,plain,(
  ( ! [X8,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0),X9,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),sK0)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X9)))) ) | ($spl114 | $spl208)),
  inference(superposition,[],[f604,f29836])).
fof(f32729,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0))))))) ) | $spl450),
  inference(cnf_transformation,[],[f32729_D])).
fof(f32729_D,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0))))))) ) <=> ~$spl450),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl450])])).
fof(f32728,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0))))))) ) | ($spl4 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f32727,f19882])).
fof(f32727,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f32709,f28488])).
fof(f32709,plain,(
  ( ! [X6,X7] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0),X7,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK20(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),sK0)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X7)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f604,f28488])).
fof(f32726,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0))))))) ) | $spl448),
  inference(cnf_transformation,[],[f32726_D])).
fof(f32726_D,plain,(
  ( ! [X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0))))))) ) <=> ~$spl448),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl448])])).
fof(f32725,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0))))))) ) | ($spl114 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f32724,f19882])).
fof(f32724,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0))))))) ) | ($spl114 | $spl208)),
  inference(forward_demodulation,[],[f32708,f26302])).
fof(f26302,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)) | ($spl114 | $spl208)),
  inference(trivial_inequality_removal,[],[f25960])).
fof(f25960,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') = s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)) | ($spl114 | $spl208)),
  inference(superposition,[],[f161,f25420])).
fof(f25420,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208)),
  inference(trivial_inequality_removal,[],[f25414])).
fof(f25414,plain,(
  s('type.num.num',sK1) != s('type.num.num',sK1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) | ($spl114 | $spl208)),
  inference(superposition,[],[f5914,f1576])).
fof(f32708,plain,(
  ( ! [X4,X5] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0),X5,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK11(sK2,sK1,sK0),sK1,sK0),sK0)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X5)))) ) | ($spl114 | $spl208)),
  inference(superposition,[],[f604,f26302])).
fof(f32723,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0))))))) ) | $spl446),
  inference(cnf_transformation,[],[f32723_D])).
fof(f32723_D,plain,(
  ( ! [X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0))))))) ) <=> ~$spl446),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl446])])).
fof(f32722,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0))))))) ) | ($spl4 | $spl208 | $spl378)),
  inference(forward_demodulation,[],[f32721,f19882])).
fof(f32721,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0))))))) ) | ($spl4 | $spl208)),
  inference(forward_demodulation,[],[f32707,f25777])).
fof(f32707,plain,(
  ( ! [X2,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)),s('type.list.list'(sK0),sK11(sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0),X3,sK0)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK19(sK1,'const.num.|48|_0',sK11(sK2,sK1,sK0),sK0)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X3)))) ) | ($spl4 | $spl208)),
  inference(superposition,[],[f604,f25777])).
fof(f2090,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) | $spl168),
  inference(cnf_transformation,[],[f2090_D])).
fof(f2090_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f32720,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0))))))) ) | $spl444),
  inference(cnf_transformation,[],[f32720_D])).
fof(f32720_D,plain,(
  ( ! [X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0))))))) ) <=> ~$spl444),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl444])])).
fof(f32719,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) | s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0))))))) ) | $spl0),
  inference(forward_demodulation,[],[f32706,f166])).
fof(f32706,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK18('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)),s('type.list.list'(sK0),sK11('const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))),X1,sK0)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X1))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))))) ) | $spl0),
  inference(superposition,[],[f604,f166])).
fof(f32062,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl441),
  inference(cnf_transformation,[],[f32062_D])).
fof(f32062_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl441),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl441])])).
fof(f32060,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl49),
  inference(forward_demodulation,[],[f32059,f151])).
fof(f32059,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f32001,f149])).
fof(f32001,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl49),
  inference(superposition,[],[f1059,f151])).
fof(f32056,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl437),
  inference(cnf_transformation,[],[f32056_D])).
fof(f32056_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl437),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl437])])).
fof(f32058,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl439),
  inference(cnf_transformation,[],[f32058_D])).
fof(f32058_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl439),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl439])])).
fof(f32054,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f32053,f140])).
fof(f32053,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl49),
  inference(forward_demodulation,[],[f32052,f148])).
fof(f32052,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(forward_demodulation,[],[f32051,f149])).
fof(f32051,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(forward_demodulation,[],[f32000,f139])).
fof(f32000,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))))))) ) | $spl49),
  inference(superposition,[],[f1059,f148])).
fof(f32042,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl434),
  inference(cnf_transformation,[],[f32042_D])).
fof(f32042_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl434),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl434])])).
fof(f32028,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl433),
  inference(cnf_transformation,[],[f32028_D])).
fof(f32028_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl433),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl433])])).
fof(f31986,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(superposition,[],[f1059,f162])).
fof(f32026,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl430),
  inference(cnf_transformation,[],[f32026_D])).
fof(f32026_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl430),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl430])])).
fof(f31970,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(superposition,[],[f1059,f131])).
fof(f31969,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl49),
  inference(superposition,[],[f1059,f133])).
fof(f32024,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl427),
  inference(cnf_transformation,[],[f32024_D])).
fof(f32024_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl427),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl427])])).
fof(f32025,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl428),
  inference(cnf_transformation,[],[f32025_D])).
fof(f32025_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl428),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl428])])).
fof(f31968,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(superposition,[],[f1059,f130])).
fof(f31967,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X6))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f1059,f132])).
fof(f31391,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl423),
  inference(cnf_transformation,[],[f31391_D])).
fof(f31391_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl423),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl423])])).
fof(f31392,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X16))) | s('type.list.list'(X7),X8) != s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X11),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X13),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X14),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X15),s('type.list.list'(X7),X16)))))))))))))))) ) | $spl424),
  inference(cnf_transformation,[],[f31392_D])).
fof(f31392_D,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X16))) | s('type.list.list'(X7),X8) != s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X11),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X13),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X14),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X15),s('type.list.list'(X7),X16)))))))))))))))) ) <=> ~$spl424),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl424])])).
fof(f31344,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9,X16] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X8))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X7),X8) != s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X9),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X11),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X12),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X13),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X14),s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X15),s('type.list.list'(X7),X16))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X16)))) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f24285,f125])).
fof(f24285,plain,(
  ( ! [X5] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5)))) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16127,f135])).
fof(f16127,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl30 | $spl35)),
  inference(superposition,[],[f16069,f126])).
fof(f7394,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))))) ) | $spl226),
  inference(cnf_transformation,[],[f7394_D])).
fof(f7394_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f30569,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X1) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2)))) ) | $spl420),
  inference(cnf_transformation,[],[f30569_D])).
fof(f30569_D,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X1) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2)))) ) <=> ~$spl420),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl420])])).
fof(f30560,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),X1) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X2))) | s('type.num.num',X2) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2)))))) ) | $spl0),
  inference(superposition,[],[f2023,f161])).
fof(f2023,plain,(
  ( ! [X33,X31,X32] : (s('type.list.list'(sK0),X31) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X32),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X33))) | s('type.num.num',X33) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))) ) | $spl0),
  inference(superposition,[],[f125,f166])).
fof(f30567,plain,(
  ( ! [X12,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) | s('type.num.num',X12) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))) ) | $spl416),
  inference(cnf_transformation,[],[f30567_D])).
fof(f30567_D,plain,(
  ( ! [X12,X10] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) | s('type.num.num',X12) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))) ) <=> ~$spl416),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl416])])).
fof(f30568,plain,(
  ( ! [X11] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK2)))) ) | $spl418),
  inference(cnf_transformation,[],[f30568_D])).
fof(f30568_D,plain,(
  ( ! [X11] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl418),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl418])])).
fof(f30556,plain,(
  ( ! [X12,X10,X11] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',X12))) | s('type.num.num',X12) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X10)))) ) | $spl0),
  inference(superposition,[],[f2023,f161])).
fof(f30202,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl415),
  inference(cnf_transformation,[],[f30202_D])).
fof(f30202_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl415),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl415])])).
fof(f30216,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl59 | $spl208)),
  inference(subsumption_resolution,[],[f30163,f2512])).
fof(f30163,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl208),
  inference(superposition,[],[f5926,f162])).
fof(f5926,plain,(
  ( ! [X38] : (s('type.num.num',X38) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X38)))) ) | $spl208),
  inference(superposition,[],[f127,f5808])).
fof(f30203,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl59 | $spl208)),
  inference(subsumption_resolution,[],[f30150,f2513])).
fof(f2513,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))))) ) | $spl59),
  inference(trivial_inequality_removal,[],[f2483])).
fof(f2483,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl59),
  inference(superposition,[],[f674,f131])).
fof(f30150,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl208),
  inference(superposition,[],[f5926,f131])).
fof(f30200,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl59 | $spl208)),
  inference(subsumption_resolution,[],[f30149,f2513])).
fof(f30149,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl208),
  inference(superposition,[],[f5926,f133])).
fof(f25215,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl412),
  inference(cnf_transformation,[],[f25215_D])).
fof(f25215_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl412),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl412])])).
fof(f25203,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | $spl411),
  inference(cnf_transformation,[],[f25203_D])).
fof(f25203_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl411),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl411])])).
fof(f25178,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl51),
  inference(superposition,[],[f4694,f162])).
fof(f25201,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl408),
  inference(cnf_transformation,[],[f25201_D])).
fof(f25201_D,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl408),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl408])])).
fof(f25162,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl51),
  inference(superposition,[],[f4694,f131])).
fof(f25161,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl51),
  inference(superposition,[],[f4694,f133])).
fof(f24008,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl405),
  inference(cnf_transformation,[],[f24008_D])).
fof(f24008_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl405),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl405])])).
fof(f23973,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl261),
  inference(superposition,[],[f14952,f162])).
fof(f24009,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl261 | $spl378)),
  inference(subsumption_resolution,[],[f23958,f20561])).
fof(f20561,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))))) ) | $spl378),
  inference(subsumption_resolution,[],[f20516,f19882])).
fof(f20516,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl378),
  inference(superposition,[],[f19929,f133])).
fof(f23958,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl261),
  inference(superposition,[],[f14952,f131])).
fof(f24005,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl261 | $spl378)),
  inference(subsumption_resolution,[],[f23957,f20561])).
fof(f23957,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl261),
  inference(superposition,[],[f14952,f133])).
fof(f2101,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | $spl183),
  inference(cnf_transformation,[],[f2101_D])).
fof(f2101_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) <=> ~$spl183),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl183])])).
fof(f22544,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) | ($spl0 | $spl70)),
  inference(superposition,[],[f617,f166])).
fof(f2104,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | $spl187),
  inference(cnf_transformation,[],[f2104_D])).
fof(f2104_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) <=> ~$spl187),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl187])])).
fof(f22541,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),sK2))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | ($spl0 | $spl70)),
  inference(superposition,[],[f617,f166])).
fof(f10781,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl313),
  inference(cnf_transformation,[],[f10781_D])).
fof(f10781_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl313),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl313])])).
fof(f21961,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl399),
  inference(cnf_transformation,[],[f21961_D])).
fof(f21961_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl399),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl399])])).
fof(f21932,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl345),
  inference(superposition,[],[f17526,f140])).
fof(f21959,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl345),
  inference(forward_demodulation,[],[f21958,f151])).
fof(f21958,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl345),
  inference(forward_demodulation,[],[f21920,f140])).
fof(f21920,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl345),
  inference(superposition,[],[f17526,f151])).
fof(f21955,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl394),
  inference(cnf_transformation,[],[f21955_D])).
fof(f21955_D,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl394),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl394])])).
fof(f21957,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl397),
  inference(cnf_transformation,[],[f21957_D])).
fof(f21957_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl397),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl397])])).
fof(f21954,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl345),
  inference(forward_demodulation,[],[f21919,f140])).
fof(f21919,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl345),
  inference(superposition,[],[f17526,f148])).
fof(f21945,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl391),
  inference(cnf_transformation,[],[f21945_D])).
fof(f21945_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl391),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl391])])).
fof(f21909,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl345),
  inference(superposition,[],[f17526,f162])).
fof(f21893,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl345),
  inference(superposition,[],[f17526,f131])).
fof(f21892,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl345),
  inference(superposition,[],[f17526,f133])).
fof(f12013,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl328),
  inference(cnf_transformation,[],[f12013_D])).
fof(f12013_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f21020,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | $spl387),
  inference(cnf_transformation,[],[f21020_D])).
fof(f21020_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl387),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl387])])).
fof(f20994,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl380),
  inference(superposition,[],[f20898,f162])).
fof(f12003,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl324),
  inference(cnf_transformation,[],[f12003_D])).
fof(f12003_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f20978,plain,(
  ( ! [X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl380),
  inference(superposition,[],[f20898,f131])).
fof(f20977,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl380),
  inference(superposition,[],[f20898,f133])).
fof(f11997,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl316),
  inference(cnf_transformation,[],[f11997_D])).
fof(f11997_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f21018,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl385),
  inference(cnf_transformation,[],[f21018_D])).
fof(f21018_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl385),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl385])])).
fof(f20972,plain,(
  ( ! [X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl380),
  inference(superposition,[],[f20898,f130])).
fof(f20971,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl380),
  inference(superposition,[],[f20898,f132])).
fof(f20854,plain,(
  ( ! [X11] : (s('type.num.num',sK1) != s('type.num.num',X11) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X11)) ) | $spl380),
  inference(cnf_transformation,[],[f20854_D])).
fof(f20854_D,plain,(
  ( ! [X11] : (s('type.num.num',sK1) != s('type.num.num',X11) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X11)) ) <=> ~$spl380),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl380])])).
fof(f20805,plain,(
  ( ! [X12,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12))) | s('type.num.num',sK1) != s('type.num.num',X13) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X13) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X12)))) ) | $spl213),
  inference(superposition,[],[f9909,f130])).
fof(f20804,plain,(
  ( ! [X10,X11] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10))) | s('type.num.num',sK1) != s('type.num.num',X11) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X11) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X10)))) ) | $spl213),
  inference(superposition,[],[f9909,f132])).
fof(f19901,plain,(
  $false | $spl379),
  inference(trivial_inequality_removal,[],[f19896])).
fof(f19896,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),'const.list.NIL_0') | $spl379),
  inference(superposition,[],[f19883,f162])).
fof(f19881,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl376),
  inference(cnf_transformation,[],[f19881_D])).
fof(f19881_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl376),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl376])])).
fof(f19883,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl379),
  inference(cnf_transformation,[],[f19883_D])).
fof(f19883_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl379),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl379])])).
fof(f19846,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl59),
  inference(superposition,[],[f19047,f162])).
fof(f19047,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl59),
  inference(superposition,[],[f19023,f127])).
fof(f19023,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl59),
  inference(equality_resolution,[],[f649])).
fof(f649,plain,(
  ( ! [X3] : (s('type.num.num',sK1) != s('type.num.num',X3) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0')))))) ) | $spl59),
  inference(superposition,[],[f611,f126])).
fof(f9752,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl279),
  inference(cnf_transformation,[],[f9752_D])).
fof(f9752_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl279),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl279])])).
fof(f19070,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl4),
  inference(superposition,[],[f3308,f162])).
fof(f19061,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl4),
  inference(superposition,[],[f3308,f131])).
fof(f19060,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl4),
  inference(superposition,[],[f3308,f133])).
fof(f15804,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl353),
  inference(cnf_transformation,[],[f15804_D])).
fof(f15804_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl353),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl353])])).
fof(f17886,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))),s('type.num.num',sK1))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl4),
  inference(superposition,[],[f3276,f162])).
fof(f17876,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl4),
  inference(superposition,[],[f3276,f131])).
fof(f17875,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl4),
  inference(superposition,[],[f3276,f133])).
fof(f17446,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl371),
  inference(cnf_transformation,[],[f17446_D])).
fof(f17446_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl371),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl371])])).
fof(f15236,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl345),
  inference(cnf_transformation,[],[f15236_D])).
fof(f15236_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl345),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl345])])).
fof(f17262,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | ($spl38 | $spl49)),
  inference(superposition,[],[f5509,f481])).
fof(f5509,plain,(
  ( ! [X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl49),
  inference(trivial_inequality_removal,[],[f5501])).
fof(f5501,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | $spl49),
  inference(superposition,[],[f1204,f131])).
fof(f1204,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f1162])).
fof(f1162,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(superposition,[],[f1067,f130])).
fof(f1067,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(trivial_inequality_removal,[],[f1037])).
fof(f1037,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(superposition,[],[f953,f131])).
fof(f481,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | $spl38),
  inference(cnf_transformation,[],[f481_D])).
fof(f481_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f17076,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl4),
  inference(forward_demodulation,[],[f17009,f140])).
fof(f17009,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl4),
  inference(superposition,[],[f3264,f130])).
fof(f17075,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl4),
  inference(forward_demodulation,[],[f17008,f140])).
fof(f17008,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl4),
  inference(superposition,[],[f3264,f132])).
fof(f9464,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl267),
  inference(cnf_transformation,[],[f9464_D])).
fof(f9464_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl267),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl267])])).
fof(f16644,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2955,f162])).
fof(f16634,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2955,f131])).
fof(f16633,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2955,f133])).
fof(f16446,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl363),
  inference(cnf_transformation,[],[f16446_D])).
fof(f16446_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl363),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl363])])).
fof(f16447,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl364),
  inference(cnf_transformation,[],[f16447_D])).
fof(f16447_D,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl364),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl364])])).
fof(f16444,plain,(
  ( ! [X67] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2)))))) ) | $spl2),
  inference(forward_demodulation,[],[f16443,f168])).
fof(f16443,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(forward_demodulation,[],[f16382,f140])).
fof(f16382,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl2),
  inference(superposition,[],[f2951,f148])).
fof(f16432,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl360),
  inference(cnf_transformation,[],[f16432_D])).
fof(f16432_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl360),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl360])])).
fof(f16420,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl359),
  inference(cnf_transformation,[],[f16420_D])).
fof(f16420_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl359),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl359])])).
fof(f16373,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2951,f162])).
fof(f16418,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl356),
  inference(cnf_transformation,[],[f16418_D])).
fof(f16418_D,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl356])])).
fof(f16359,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2951,f131])).
fof(f16358,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2951,f133])).
fof(f15809,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl354),
  inference(cnf_transformation,[],[f15809_D])).
fof(f15809_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f15739,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2935,f162])).
fof(f15802,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl350),
  inference(cnf_transformation,[],[f15802_D])).
fof(f15802_D,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f15729,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2935,f131])).
fof(f15728,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2935,f133])).
fof(f15800,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl348),
  inference(cnf_transformation,[],[f15800_D])).
fof(f15800_D,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f317,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | $spl30),
  inference(cnf_transformation,[],[f317_D])).
fof(f317_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f15801,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(forward_demodulation,[],[f15727,f135])).
fof(f15727,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(superposition,[],[f2935,f130])).
fof(f15799,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(forward_demodulation,[],[f15726,f135])).
fof(f15726,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(superposition,[],[f2935,f132])).
fof(f1773,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl124),
  inference(cnf_transformation,[],[f1773_D])).
fof(f1773_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f15420,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl347),
  inference(cnf_transformation,[],[f15420_D])).
fof(f15420_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl347),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl347])])).
fof(f15358,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2927,f162])).
fof(f1766,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl120),
  inference(cnf_transformation,[],[f1766_D])).
fof(f1766_D,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f15347,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2927,f131])).
fof(f15346,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2927,f133])).
fof(f15234,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl343),
  inference(cnf_transformation,[],[f15234_D])).
fof(f15234_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl343),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl343])])).
fof(f15114,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl18 | $spl49)),
  inference(superposition,[],[f5509,f301])).
fof(f14918,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl340),
  inference(cnf_transformation,[],[f14918_D])).
fof(f14918_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f9055,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl261),
  inference(cnf_transformation,[],[f9055_D])).
fof(f9055_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl261),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl261])])).
fof(f14859,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f2923,f162])).
fof(f14911,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl338),
  inference(cnf_transformation,[],[f14911_D])).
fof(f14911_D,plain,(
  ( ! [X8] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f14847,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f2923,f131])).
fof(f14846,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f2923,f133])).
fof(f301,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl18),
  inference(cnf_transformation,[],[f301_D])).
fof(f301_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f14910,plain,(
  ( ! [X7] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(forward_demodulation,[],[f14845,f140])).
fof(f14845,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(superposition,[],[f2923,f130])).
fof(f14909,plain,(
  ( ! [X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(forward_demodulation,[],[f14844,f140])).
fof(f14844,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(superposition,[],[f2923,f132])).
fof(f13034,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl337),
  inference(cnf_transformation,[],[f13034_D])).
fof(f13034_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl337),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl337])])).
fof(f13031,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(duplicate_literal_removal,[],[f12984])).
fof(f12984,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(superposition,[],[f11278,f130])).
fof(f11278,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f926,f135])).
fof(f926,plain,(
  ( ! [X35] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X35)))) ) | $spl49),
  inference(superposition,[],[f636,f136])).
fof(f13032,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(duplicate_literal_removal,[],[f12983])).
fof(f12983,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(superposition,[],[f11278,f132])).
fof(f958,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl94),
  inference(cnf_transformation,[],[f958_D])).
fof(f958_D,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f12549,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl335),
  inference(cnf_transformation,[],[f12549_D])).
fof(f12549_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl335),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl335])])).
fof(f12547,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f12510,f140])).
fof(f12510,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f1063,f148])).
fof(f1063,plain,(
  ( ! [X77] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num',X77),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X77)) ) | $spl49),
  inference(superposition,[],[f953,f154])).
fof(f12536,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl331),
  inference(cnf_transformation,[],[f12536_D])).
fof(f12536_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl331),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl331])])).
fof(f12543,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(subsumption_resolution,[],[f12501,f162])).
fof(f12501,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(superposition,[],[f1063,f162])).
fof(f12537,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))) ) | $spl49),
  inference(subsumption_resolution,[],[f12488,f130])).
fof(f12488,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(superposition,[],[f1063,f131])).
fof(f12534,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8)))) ) | $spl49),
  inference(subsumption_resolution,[],[f12487,f130])).
fof(f12487,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.numeral.iSUB_3'(s(bool,'T_0'),s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl49),
  inference(superposition,[],[f1063,f133])).
fof(f12005,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | $spl327),
  inference(cnf_transformation,[],[f12005_D])).
fof(f12005_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl327),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl327])])).
fof(f11975,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(superposition,[],[f1057,f162])).
fof(f11962,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl49),
  inference(superposition,[],[f1057,f131])).
fof(f11961,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl49),
  inference(superposition,[],[f1057,f133])).
fof(f12001,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl321),
  inference(cnf_transformation,[],[f12001_D])).
fof(f12001_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl321),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl321])])).
fof(f12002,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl322),
  inference(cnf_transformation,[],[f12002_D])).
fof(f12002_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f11960,plain,(
  ( ! [X7] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X7))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl49),
  inference(superposition,[],[f1057,f130])).
fof(f11959,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X6))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl49),
  inference(superposition,[],[f1057,f132])).
fof(f11999,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl319),
  inference(cnf_transformation,[],[f11999_D])).
fof(f11999_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl319),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl319])])).
fof(f11956,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(superposition,[],[f1057,f130])).
fof(f11955,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(superposition,[],[f1057,f132])).
fof(f10952,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl315),
  inference(cnf_transformation,[],[f10952_D])).
fof(f10952_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl315),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl315])])).
fof(f8971,plain,(
  ~p(s(bool,'T_0')) | $spl253),
  inference(cnf_transformation,[],[f8971_D])).
fof(f8971_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl253),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl253])])).
fof(f10953,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl244),
  inference(forward_demodulation,[],[f10935,f155])).
fof(f10935,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl244),
  inference(superposition,[],[f8956,f130])).
fof(f10950,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl244),
  inference(forward_demodulation,[],[f10934,f155])).
fof(f10934,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl244),
  inference(superposition,[],[f8956,f132])).
fof(f9941,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl309),
  inference(cnf_transformation,[],[f9941_D])).
fof(f9941_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl309),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl309])])).
fof(f10769,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl297),
  inference(superposition,[],[f9990,f140])).
fof(f10653,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | $spl311),
  inference(cnf_transformation,[],[f10653_D])).
fof(f10653_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl311),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl311])])).
fof(f10623,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl307),
  inference(superposition,[],[f9954,f162])).
fof(f9939,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl307),
  inference(cnf_transformation,[],[f9939_D])).
fof(f9939_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl307),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl307])])).
fof(f9911,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl213),
  inference(superposition,[],[f9224,f140])).
fof(f9933,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl305),
  inference(cnf_transformation,[],[f9933_D])).
fof(f9933_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl305),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl305])])).
fof(f9930,plain,(
  ( ! [X67] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl213),
  inference(forward_demodulation,[],[f9898,f140])).
fof(f9898,plain,(
  ( ! [X67] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl213),
  inference(superposition,[],[f9224,f148])).
fof(f9919,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl293),
  inference(cnf_transformation,[],[f9919_D])).
fof(f9919_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl293),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl293])])).
fof(f9889,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl213),
  inference(superposition,[],[f9224,f162])).
fof(f9925,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl297),
  inference(cnf_transformation,[],[f9925_D])).
fof(f9925_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl297),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl297])])).
fof(f9888,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl213)),
  inference(superposition,[],[f9224,f168])).
fof(f9886,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl213)),
  inference(superposition,[],[f9224,f170])).
fof(f9876,plain,(
  ( ! [X9] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl213),
  inference(superposition,[],[f9224,f131])).
fof(f9875,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl213),
  inference(superposition,[],[f9224,f133])).
fof(f336,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl35),
  inference(cnf_transformation,[],[f336_D])).
fof(f336_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f9662,plain,(
  ( ! [X117] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X117),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))) ) | ($spl4 | $spl49)),
  inference(superposition,[],[f5090,f170])).
fof(f5090,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X3))) | s('type.num.num',X3) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X2),'const.list.NIL_0')))) ) | $spl49),
  inference(superposition,[],[f5064,f127])).
fof(f5064,plain,(
  ( ! [X17] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f5061])).
fof(f5061,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X17),'const.list.NIL_0')))))) ) | $spl49),
  inference(superposition,[],[f5052,f130])).
fof(f5052,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl49),
  inference(equality_resolution,[],[f1066])).
fof(f1066,plain,(
  ( ! [X37,X36] : (s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37)))) ) | $spl49),
  inference(trivial_inequality_removal,[],[f1048])).
fof(f1048,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(superposition,[],[f953,f162])).
fof(f9655,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl107)),
  inference(superposition,[],[f1412,f170])).
fof(f9771,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl4 | $spl101 | $spl242)),
  inference(forward_demodulation,[],[f9653,f8452])).
fof(f9653,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl101)),
  inference(superposition,[],[f1337,f170])).
fof(f9644,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl53)),
  inference(superposition,[],[f972,f170])).
fof(f9641,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl17)),
  inference(superposition,[],[f804,f170])).
fof(f9637,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl45)),
  inference(superposition,[],[f731,f170])).
fof(f9631,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl49)),
  inference(superposition,[],[f636,f170])).
fof(f9402,plain,(
  ( ! [X103] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X103),'const.list.NIL_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl49)),
  inference(superposition,[],[f5090,f168])).
fof(f9395,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl107)),
  inference(superposition,[],[f1412,f168])).
fof(f9478,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | ($spl2 | $spl101 | $spl242)),
  inference(forward_demodulation,[],[f9393,f8452])).
fof(f9393,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl101)),
  inference(superposition,[],[f1337,f168])).
fof(f9384,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl53)),
  inference(superposition,[],[f972,f168])).
fof(f9381,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl17)),
  inference(superposition,[],[f804,f168])).
fof(f9377,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl45)),
  inference(superposition,[],[f731,f168])).
fof(f9371,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl49)),
  inference(superposition,[],[f636,f168])).
fof(f9236,plain,(
  $false | ($spl23 | $spl116 | $spl242)),
  inference(subsumption_resolution,[],[f1577,f9217])).
fof(f1577,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl116),
  inference(cnf_transformation,[],[f1577_D])).
fof(f1577_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f9108,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl265),
  inference(cnf_transformation,[],[f9108_D])).
fof(f9108_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) <=> ~$spl265),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl265])])).
fof(f5898,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl213),
  inference(cnf_transformation,[],[f5898_D])).
fof(f5898_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl213),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl213])])).
fof(f6009,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | ($spl49 | $spl208)),
  inference(superposition,[],[f5509,f5808])).
fof(f9062,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl262),
  inference(cnf_transformation,[],[f9062_D])).
fof(f9062_D,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f8997,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3788,f162])).
fof(f3788,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3623,f126])).
fof(f3623,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl22)),
  inference(backward_demodulation,[],[f3568,f168])).
fof(f3568,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl22),
  inference(forward_demodulation,[],[f3567,f136])).
fof(f3567,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl22),
  inference(trivial_inequality_removal,[],[f3459])).
fof(f3459,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl22),
  inference(superposition,[],[f306,f133])).
fof(f9053,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl258),
  inference(cnf_transformation,[],[f9053_D])).
fof(f9053_D,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f8985,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3788,f131])).
fof(f8984,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3788,f133])).
fof(f9051,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl256),
  inference(cnf_transformation,[],[f9051_D])).
fof(f9051_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f9052,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f8983,f140])).
fof(f8983,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3788,f130])).
fof(f9048,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f8982,f140])).
fof(f8982,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3788,f132])).
fof(f8161,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl239),
  inference(cnf_transformation,[],[f8161_D])).
fof(f8161_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl239),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl239])])).
fof(f8972,plain,(
  p(s(bool,'T_0')) | $spl252),
  inference(cnf_transformation,[],[f8972_D])).
fof(f8972_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f8973,plain,(
  p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(forward_demodulation,[],[f8958,f155])).
fof(f8958,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(superposition,[],[f8758,f130])).
fof(f8970,plain,(
  p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(forward_demodulation,[],[f8957,f155])).
fof(f8957,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl244),
  inference(superposition,[],[f8758,f132])).
fof(f8841,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | $spl250),
  inference(cnf_transformation,[],[f8841_D])).
fof(f8841_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f8822,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))))) ) | $spl242),
  inference(superposition,[],[f8701,f130])).
fof(f8821,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))))) ) | $spl242),
  inference(superposition,[],[f8701,f132])).
fof(f8758,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | $spl244),
  inference(cnf_transformation,[],[f8758_D])).
fof(f8758_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f8760,plain,(
  p(s(bool,'F_0')) | $spl246),
  inference(cnf_transformation,[],[f8760_D])).
fof(f8760_D,plain,(
  p(s(bool,'F_0')) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f8749,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | $spl242),
  inference(superposition,[],[f142,f8702])).
fof(f8759,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | $spl245),
  inference(cnf_transformation,[],[f8759_D])).
fof(f8759_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl245),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl245])])).
fof(f8761,plain,(
  ~p(s(bool,'F_0')) | $spl247),
  inference(cnf_transformation,[],[f8761_D])).
fof(f8761_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl247),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl247])])).
fof(f8748,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.num.|48|_0')))))) | $spl242),
  inference(superposition,[],[f141,f8702])).
fof(f8469,plain,(
  $false | $spl243),
  inference(trivial_inequality_removal,[],[f8460])).
fof(f8460,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl243),
  inference(superposition,[],[f8453,f133])).
fof(f8468,plain,(
  $false | $spl243),
  inference(trivial_inequality_removal,[],[f8461])).
fof(f8461,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl243),
  inference(superposition,[],[f8453,f131])).
fof(f8451,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))))))) ) | $spl240),
  inference(cnf_transformation,[],[f8451_D])).
fof(f8451_D,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))))))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f8453,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl243),
  inference(cnf_transformation,[],[f8453_D])).
fof(f8453_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl243),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl243])])).
fof(f8422,plain,(
  ( ! [X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3780,f131])).
fof(f3780,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X2))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2)))))))))))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3623,f126])).
fof(f8421,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3780,f133])).
fof(f1072,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl97),
  inference(cnf_transformation,[],[f1072_D])).
fof(f1072_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f8153,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl233),
  inference(superposition,[],[f8024,f130])).
fof(f8152,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl233),
  inference(superposition,[],[f8024,f132])).
fof(f8133,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl236),
  inference(cnf_transformation,[],[f8133_D])).
fof(f8133_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f8131,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl235),
  inference(cnf_transformation,[],[f8131_D])).
fof(f8131_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl235),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl235])])).
fof(f8097,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl22)),
  inference(superposition,[],[f3774,f140])).
fof(f3774,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3623,f126])).
fof(f8129,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f8128,f151])).
fof(f8128,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f8085,f140])).
fof(f8085,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl22)),
  inference(superposition,[],[f3774,f151])).
fof(f8024,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | $spl233),
  inference(cnf_transformation,[],[f8024_D])).
fof(f8024_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl233),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl233])])).
fof(f7984,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f753,f162])).
fof(f7870,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl231),
  inference(cnf_transformation,[],[f7870_D])).
fof(f7870_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl231),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl231])])).
fof(f7868,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl229),
  inference(cnf_transformation,[],[f7868_D])).
fof(f7868_D,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl229),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl229])])).
fof(f7847,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl49),
  inference(superposition,[],[f632,f140])).
fof(f632,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(superposition,[],[f579,f126])).
fof(f7866,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl49),
  inference(forward_demodulation,[],[f7865,f151])).
fof(f7865,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl49),
  inference(forward_demodulation,[],[f7835,f140])).
fof(f7835,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl49),
  inference(superposition,[],[f632,f151])).
fof(f7379,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | ($spl0 | $spl66)),
  inference(superposition,[],[f615,f166])).
fof(f6661,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl225),
  inference(cnf_transformation,[],[f6661_D])).
fof(f6661_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl225),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl225])])).
fof(f6656,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl107),
  inference(trivial_inequality_removal,[],[f6618])).
fof(f6618,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num',X7) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl107),
  inference(superposition,[],[f1703,f130])).
fof(f6657,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl107),
  inference(trivial_inequality_removal,[],[f6617])).
fof(f6617,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num',X6) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl107),
  inference(superposition,[],[f1703,f132])).
fof(f6463,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl222),
  inference(cnf_transformation,[],[f6463_D])).
fof(f6463_D,plain,(
  ( ! [X37,X36] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f6454,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl221),
  inference(cnf_transformation,[],[f6454_D])).
fof(f6454_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl221),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl221])])).
fof(f6419,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3905,f162])).
fof(f3905,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))))))) ) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f3784,f140])).
fof(f3784,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3623,f126])).
fof(f6452,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl218),
  inference(cnf_transformation,[],[f6452_D])).
fof(f6452_D,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f6405,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3905,f131])).
fof(f6404,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3905,f133])).
fof(f6449,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl214),
  inference(cnf_transformation,[],[f6449_D])).
fof(f6449_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f6451,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl217),
  inference(cnf_transformation,[],[f6451_D])).
fof(f6451_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl217),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl217])])).
fof(f6401,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3905,f130])).
fof(f6400,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | ($spl2 | $spl22)),
  inference(superposition,[],[f3905,f132])).
fof(f5896,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl211),
  inference(cnf_transformation,[],[f5896_D])).
fof(f5896_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) <=> ~$spl211),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl211])])).
fof(f5795,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | ($spl49 | $spl208)),
  inference(superposition,[],[f5509,f5652])).
fof(f5652,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | $spl208),
  inference(cnf_transformation,[],[f5652_D])).
fof(f5652_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f1765,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl118),
  inference(cnf_transformation,[],[f1765_D])).
fof(f1765_D,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f5602,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | ($spl4 | $spl22)),
  inference(superposition,[],[f3968,f130])).
fof(f3968,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num',sK1)))) ) | ($spl4 | $spl22)),
  inference(superposition,[],[f3624,f127])).
fof(f3624,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl22)),
  inference(backward_demodulation,[],[f3568,f170])).
fof(f5601,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | ($spl4 | $spl22)),
  inference(superposition,[],[f3968,f132])).
fof(f5578,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl207),
  inference(cnf_transformation,[],[f5578_D])).
fof(f5578_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl207),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl207])])).
fof(f5576,plain,(
  ( ! [X67] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f5552,f140])).
fof(f5552,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f5509,f148])).
fof(f4773,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | $spl203),
  inference(cnf_transformation,[],[f4773_D])).
fof(f4773_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl203),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl203])])).
fof(f4746,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl17),
  inference(superposition,[],[f814,f162])).
fof(f4734,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl17),
  inference(superposition,[],[f814,f131])).
fof(f4733,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl17),
  inference(superposition,[],[f814,f133])).
fof(f3622,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl199),
  inference(cnf_transformation,[],[f3622_D])).
fof(f3622_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl199),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl199])])).
fof(f3554,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ($spl22 | $spl49)),
  inference(superposition,[],[f1067,f306])).
fof(f1576,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0)))) | $spl114),
  inference(cnf_transformation,[],[f1576_D])).
fof(f1576_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0)))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f1578,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl117),
  inference(cnf_transformation,[],[f1578_D])).
fof(f1578_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl117),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl117])])).
fof(f1484,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK11(sK2,sK1,sK0),sK1,sK0)))) | $spl4),
  inference(superposition,[],[f391,f1466])).
fof(f3571,plain,(
  $false | ($spl22 | $spl117)),
  inference(subsumption_resolution,[],[f3570,f1578])).
fof(f3570,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl22),
  inference(forward_demodulation,[],[f3566,f136])).
fof(f3566,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | $spl22),
  inference(trivial_inequality_removal,[],[f3460])).
fof(f3460,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.ZERO_0') | $spl22),
  inference(superposition,[],[f306,f131])).
fof(f3569,plain,(
  $false | ($spl22 | $spl117)),
  inference(subsumption_resolution,[],[f3568,f1578])).
fof(f2894,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) | $spl195),
  inference(cnf_transformation,[],[f2894_D])).
fof(f2894_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) <=> ~$spl195),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl195])])).
fof(f1648,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) | ($spl4 | $spl9)),
  inference(superposition,[],[f1594,f161])).
fof(f1594,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1503,f286])).
fof(f1503,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK11(sK2,sK1,sK0)))) | $spl4),
  inference(superposition,[],[f131,f1466])).
fof(f2883,plain,(
  $false | ($spl0 | $spl6)),
  inference(subsumption_resolution,[],[f172,f2057])).
fof(f2882,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f385,f167])).
fof(f167,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl3),
  inference(cnf_transformation,[],[f167_D])).
fof(f167_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f385,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl4),
  inference(superposition,[],[f170,f135])).
fof(f2404,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl193),
  inference(cnf_transformation,[],[f2404_D])).
fof(f2404_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl193),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl193])])).
fof(f2399,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl47),
  inference(trivial_inequality_removal,[],[f2368])).
fof(f2368,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl47),
  inference(superposition,[],[f586,f130])).
fof(f2400,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl47),
  inference(trivial_inequality_removal,[],[f2367])).
fof(f2367,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num',X6) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl47),
  inference(superposition,[],[f586,f132])).
fof(f2325,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl191),
  inference(cnf_transformation,[],[f2325_D])).
fof(f2325_D,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl191),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl191])])).
fof(f2320,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl9),
  inference(trivial_inequality_removal,[],[f2289])).
fof(f2289,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num',X7) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl9),
  inference(superposition,[],[f566,f130])).
fof(f566,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl9),
  inference(superposition,[],[f558,f126])).
fof(f558,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK1) | $spl9),
  inference(trivial_inequality_removal,[],[f551])).
fof(f551,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',sK1) | $spl9),
  inference(superposition,[],[f286,f131])).
fof(f2321,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl9),
  inference(trivial_inequality_removal,[],[f2288])).
fof(f2288,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num',X6) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl9),
  inference(superposition,[],[f566,f132])).
fof(f2018,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X16),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X17),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),sK2))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2016,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),sK2))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2098,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | $spl179),
  inference(cnf_transformation,[],[f2098_D])).
fof(f2098_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) <=> ~$spl179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl179])])).
fof(f2015,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X9),s('type.list.list'(sK0),sK2))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2095,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl175),
  inference(cnf_transformation,[],[f2095_D])).
fof(f2095_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) <=> ~$spl175),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl175])])).
fof(f2014,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),sK2))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2092,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | $spl171),
  inference(cnf_transformation,[],[f2092_D])).
fof(f2092_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) <=> ~$spl171),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl171])])).
fof(f2013,plain,(
  ( ! [X2,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),sK2))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2089,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | $spl167),
  inference(cnf_transformation,[],[f2089_D])).
fof(f2089_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) <=> ~$spl167),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl167])])).
fof(f2012,plain,(
  ( ! [X0] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X0),s('type.list.list'(sK0),sK2))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))) ) | $spl0),
  inference(superposition,[],[f163,f166])).
fof(f2083,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | $spl163),
  inference(cnf_transformation,[],[f2083_D])).
fof(f2083_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) <=> ~$spl163),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl163])])).
fof(f2085,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl164),
  inference(cnf_transformation,[],[f2085_D])).
fof(f2085_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f2009,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2079,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | $spl159),
  inference(cnf_transformation,[],[f2079_D])).
fof(f2079_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) <=> ~$spl159),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl159])])).
fof(f2081,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl160),
  inference(cnf_transformation,[],[f2081_D])).
fof(f2081_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.NIL_0'))))) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f2008,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2075,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | $spl155),
  inference(cnf_transformation,[],[f2075_D])).
fof(f2075_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) <=> ~$spl155),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl155])])).
fof(f2077,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | $spl156),
  inference(cnf_transformation,[],[f2077_D])).
fof(f2077_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f2007,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2071,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl151),
  inference(cnf_transformation,[],[f2071_D])).
fof(f2071_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) <=> ~$spl151),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl151])])).
fof(f2073,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) | $spl152),
  inference(cnf_transformation,[],[f2073_D])).
fof(f2073_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f2006,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2067,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | $spl147),
  inference(cnf_transformation,[],[f2067_D])).
fof(f2067_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) <=> ~$spl147),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl147])])).
fof(f2069,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))) | $spl148),
  inference(cnf_transformation,[],[f2069_D])).
fof(f2069_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f2005,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2063,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | $spl143),
  inference(cnf_transformation,[],[f2063_D])).
fof(f2063_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) <=> ~$spl143),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl143])])).
fof(f2065,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))) | $spl144),
  inference(cnf_transformation,[],[f2065_D])).
fof(f2065_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f2004,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f2059,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl139),
  inference(cnf_transformation,[],[f2059_D])).
fof(f2059_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl139),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl139])])).
fof(f2061,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))))) | $spl140),
  inference(cnf_transformation,[],[f2061_D])).
fof(f2061_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f2003,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl0),
  inference(superposition,[],[f166,f161])).
fof(f1922,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))) ) | $spl134),
  inference(cnf_transformation,[],[f1922_D])).
fof(f1922_D,plain,(
  ( ! [X6] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f1924,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl137),
  inference(cnf_transformation,[],[f1924_D])).
fof(f1924_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl137),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl137])])).
fof(f1906,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7)))))))) ) | $spl49),
  inference(superposition,[],[f1065,f130])).
fof(f1905,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6)))))))) ) | $spl49),
  inference(superposition,[],[f1065,f132])).
fof(f1921,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl133),
  inference(cnf_transformation,[],[f1921_D])).
fof(f1921_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl133),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl133])])).
fof(f1902,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(superposition,[],[f1065,f131])).
fof(f1901,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(superposition,[],[f1065,f133])).
fof(f1916,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl126),
  inference(cnf_transformation,[],[f1916_D])).
fof(f1916_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f1918,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl129),
  inference(cnf_transformation,[],[f1918_D])).
fof(f1918_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl129),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl129])])).
fof(f1897,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))))) ) | $spl49),
  inference(superposition,[],[f1065,f130])).
fof(f1896,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0)))))) ) | $spl49),
  inference(superposition,[],[f1065,f132])).
fof(f1768,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl123),
  inference(cnf_transformation,[],[f1768_D])).
fof(f1768_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f1731,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))))))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl2),
  inference(superposition,[],[f197,f162])).
fof(f197,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))) ) | $spl2),
  inference(superposition,[],[f168,f127])).
fof(f1721,plain,(
  ( ! [X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X9)) ) | $spl2),
  inference(superposition,[],[f197,f131])).
fof(f1720,plain,(
  ( ! [X8] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X8)) ) | $spl2),
  inference(superposition,[],[f197,f133])).
fof(f306,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl22),
  inference(cnf_transformation,[],[f306_D])).
fof(f306_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f1719,plain,(
  ( ! [X7] : (s('type.num.num',X7) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X7)))) ) | $spl2),
  inference(superposition,[],[f197,f130])).
fof(f1718,plain,(
  ( ! [X6] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X6))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X6)))) ) | $spl2),
  inference(superposition,[],[f197,f132])).
fof(f1221,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl113),
  inference(cnf_transformation,[],[f1221_D])).
fof(f1221_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl113),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl113])])).
fof(f1218,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f1182,f140])).
fof(f1182,plain,(
  ( ! [X67] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f1067,f148])).
fof(f1217,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))))) ) | $spl108),
  inference(cnf_transformation,[],[f1217_D])).
fof(f1217_D,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f1216,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl107),
  inference(cnf_transformation,[],[f1216_D])).
fof(f1216_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl107),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl107])])).
fof(f1181,plain,(
  ( ! [X66] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X66)))))))) ) | $spl49),
  inference(superposition,[],[f1067,f146])).
fof(f1214,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl104),
  inference(cnf_transformation,[],[f1214_D])).
fof(f1214_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f1175,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X36),X37))) | s('type.list.list'(X36),'const.list.NIL_0') != s('type.list.list'(X36),X37)) ) | $spl49),
  inference(superposition,[],[f1067,f162])).
fof(f333,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl33),
  inference(cnf_transformation,[],[f333_D])).
fof(f333_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f1174,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ($spl2 | $spl49)),
  inference(superposition,[],[f1067,f168])).
fof(f512,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl43),
  inference(cnf_transformation,[],[f512_D])).
fof(f512_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f1169,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | ($spl4 | $spl49)),
  inference(superposition,[],[f1067,f170])).
fof(f1209,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl101),
  inference(cnf_transformation,[],[f1209_D])).
fof(f1209_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl101),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl101])])).
fof(f1210,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(subsumption_resolution,[],[f1158,f130])).
fof(f1158,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))) ) | $spl49),
  inference(superposition,[],[f1067,f130])).
fof(f1206,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(subsumption_resolution,[],[f1157,f130])).
fof(f1157,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) ) | $spl49),
  inference(superposition,[],[f1067,f132])).
fof(f581,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl51),
  inference(cnf_transformation,[],[f581_D])).
fof(f581_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f1056,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | $spl49),
  inference(superposition,[],[f953,f151])).
fof(f583,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl53),
  inference(cnf_transformation,[],[f583_D])).
fof(f583_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl53),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl53])])).
fof(f957,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(forward_demodulation,[],[f935,f140])).
fof(f935,plain,(
  ( ! [X67] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X67),s('type.num.num','const.num.|48|_0')))) ) | $spl49),
  inference(superposition,[],[f636,f148])).
fof(f669,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl91),
  inference(cnf_transformation,[],[f669_D])).
fof(f669_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl91),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl91])])).
fof(f671,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | $spl93),
  inference(cnf_transformation,[],[f671_D])).
fof(f671_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) <=> ~$spl93),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl93])])).
fof(f652,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) | $spl35),
  inference(superposition,[],[f336,f161])).
fof(f625,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))))) ) | $spl86),
  inference(cnf_transformation,[],[f625_D])).
fof(f625_D,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f627,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | $spl89),
  inference(cnf_transformation,[],[f627_D])).
fof(f627_D,plain,(
  s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) <=> ~$spl89),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl89])])).
fof(f607,plain,(
  ( ! [X6,X4,X2,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),'const.list.NIL_0') != s('type.list.list'(sK0),sK2) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f623,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))) ) | $spl82),
  inference(cnf_transformation,[],[f623_D])).
fof(f623_D,plain,(
  ( ! [X6,X4,X8,X7,X5,X3,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f605,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f621,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))) ) | $spl78),
  inference(cnf_transformation,[],[f621_D])).
fof(f621_D,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f603,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.NIL_0'))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f619,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))) ) | $spl74),
  inference(cnf_transformation,[],[f619_D])).
fof(f619_D,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f601,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.NIL_0'))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f617,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) | $spl70),
  inference(cnf_transformation,[],[f617_D])).
fof(f617_D,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f618,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.NIL_0')))))))))) ) | $spl72),
  inference(cnf_transformation,[],[f618_D])).
fof(f618_D,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.NIL_0')))))))))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f599,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.NIL_0'))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f615,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) | $spl66),
  inference(cnf_transformation,[],[f615_D])).
fof(f615_D,plain,(
  ( ! [X8,X7,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f616,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))) ) | $spl68),
  inference(cnf_transformation,[],[f616_D])).
fof(f616_D,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f597,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))))) )),
  inference(superposition,[],[f163,f161])).
fof(f613,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) | $spl62),
  inference(cnf_transformation,[],[f613_D])).
fof(f613_D,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f614,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))))) ) | $spl64),
  inference(cnf_transformation,[],[f614_D])).
fof(f614_D,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f595,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X10),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X11),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X12),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X13),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X14),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X15),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X9))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X8),s('type.list.list'(sK0),X9)))))) )),
  inference(superposition,[],[f163,f161])).
fof(f611,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | $spl59),
  inference(cnf_transformation,[],[f611_D])).
fof(f611_D,plain,(
  s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f612,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),X17))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) ) | $spl60),
  inference(cnf_transformation,[],[f612_D])).
fof(f612_D,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),X17))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f592,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X18),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X19),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X20),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X21),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X22),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X23),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X24),s('type.list.list'(sK0),X17))))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),'const.list.NIL_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X17)))) )),
  inference(superposition,[],[f163,f161])).
fof(f608,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0)))) ) | $spl54),
  inference(cnf_transformation,[],[f608_D])).
fof(f608_D,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f609,plain,(
  ( ! [X6,X4,X2,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))))))) ) | $spl56),
  inference(cnf_transformation,[],[f609_D])).
fof(f609_D,plain,(
  ( ! [X6,X4,X2,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.NIL_0')))))))))))))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f590,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.list.list'(sK0),sK2) != s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X1),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X2),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X3),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,X7),s('type.list.list'(sK0),'const.list.NIL_0'))))))))))))))) | s('type.num.num',sK1) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),X0)))) )),
  inference(superposition,[],[f163,f161])).
fof(f563,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | $spl47),
  inference(cnf_transformation,[],[f563_D])).
fof(f563_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f575,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl15),
  inference(superposition,[],[f293,f130])).
fof(f574,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl15),
  inference(superposition,[],[f293,f132])).
fof(f571,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl15),
  inference(superposition,[],[f293,f130])).
fof(f570,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.num.|48|_0'))) | $spl15),
  inference(superposition,[],[f293,f132])).
fof(f555,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl9),
  inference(superposition,[],[f286,f130])).
fof(f554,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))))) | $spl9),
  inference(superposition,[],[f286,f132])).
fof(f335,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | $spl34),
  inference(cnf_transformation,[],[f335_D])).
fof(f335_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f422,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f133,f170])).
fof(f513,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl42),
  inference(cnf_transformation,[],[f513_D])).
fof(f513_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f420,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f132,f170])).
fof(f418,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f131,f170])).
fof(f416,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f130,f170])).
fof(f286,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl9),
  inference(cnf_transformation,[],[f286_D])).
fof(f286_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f486,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | $spl40),
  inference(cnf_transformation,[],[f486_D])).
fof(f486_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f380,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f170,f130])).
fof(f379,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f315,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl29),
  inference(cnf_transformation,[],[f315_D])).
fof(f315_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f376,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl4),
  inference(superposition,[],[f170,f130])).
fof(f375,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f309,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl25),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f372,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(superposition,[],[f170,f131])).
fof(f371,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(superposition,[],[f170,f133])).
fof(f304,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl21),
  inference(cnf_transformation,[],[f304_D])).
fof(f304_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f484,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl4),
  inference(forward_demodulation,[],[f368,f135])).
fof(f368,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl4),
  inference(superposition,[],[f170,f130])).
fof(f483,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl4),
  inference(forward_demodulation,[],[f367,f135])).
fof(f367,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f299,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl17),
  inference(cnf_transformation,[],[f299_D])).
fof(f299_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f482,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f364,f140])).
fof(f364,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(superposition,[],[f170,f130])).
fof(f479,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(forward_demodulation,[],[f363,f140])).
fof(f363,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f475,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl36),
  inference(cnf_transformation,[],[f475_D])).
fof(f475_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f293,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl15),
  inference(cnf_transformation,[],[f293_D])).
fof(f293_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f476,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl4),
  inference(forward_demodulation,[],[f360,f140])).
fof(f360,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(superposition,[],[f170,f130])).
fof(f473,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | $spl4),
  inference(forward_demodulation,[],[f359,f140])).
fof(f359,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl4),
  inference(superposition,[],[f170,f132])).
fof(f234,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f133,f168])).
fof(f334,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl32),
  inference(cnf_transformation,[],[f334_D])).
fof(f334_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f232,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f132,f168])).
fof(f230,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f131,f168])).
fof(f228,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f130,f168])).
fof(f318,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(forward_demodulation,[],[f200,f135])).
fof(f200,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f168,f130])).
fof(f313,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(forward_demodulation,[],[f199,f135])).
fof(f199,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.ZERO_0'))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f312,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(forward_demodulation,[],[f196,f135])).
fof(f196,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(superposition,[],[f168,f131])).
fof(f307,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(forward_demodulation,[],[f195,f135])).
fof(f195,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(superposition,[],[f168,f133])).
fof(f192,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl2),
  inference(superposition,[],[f168,f130])).
fof(f191,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f302,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(forward_demodulation,[],[f188,f140])).
fof(f188,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(superposition,[],[f168,f130])).
fof(f297,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(forward_demodulation,[],[f187,f140])).
fof(f187,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f291,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl12),
  inference(cnf_transformation,[],[f291_D])).
fof(f291_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f294,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl2),
  inference(forward_demodulation,[],[f184,f140])).
fof(f184,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl2),
  inference(superposition,[],[f168,f130])).
fof(f289,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl2),
  inference(forward_demodulation,[],[f183,f140])).
fof(f183,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f288,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl10),
  inference(cnf_transformation,[],[f288_D])).
fof(f288_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f174,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl2),
  inference(superposition,[],[f168,f130])).
fof(f173,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK1))) | $spl2),
  inference(superposition,[],[f168,f132])).
fof(f170,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) | $spl4),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f172,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | $spl6),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f120,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f108])).
fof(f166,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | $spl0),
  inference(cnf_transformation,[],[f166_D])).
fof(f166_D,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f168,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl2),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f164,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3)))))))))))))))),
  inference(forward_demodulation,[],[f121,f135])).
fof(f121,plain,(
  s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK4),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK5),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK6),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK7),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK8),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK9),s('type.list.list'(sK0),'const.list.CONS_2'(s(sK0,sK10),s('type.list.list'(sK0),sK3))))))))))))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num',sK1)))),
  inference(cnf_transformation,[],[f108])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1348
% Passive clauses: 23432
% Generated clauses: 111931
% Final active clauses: 1038
% Final passive clauses: 14976
% Input formulas: 69
% Initial clauses: 43
% 
% Selected by SInE selection: 31
% SInE iterations: 1
% 
% Duplicate literals: 317
% Trivial inequalities: 4653
% Fw subsumption resolutions: 1417
% Fw demodulations: 22606
% Bw demodulations: 68
% 
% Simple tautologies: 18
% Equational tautologies: 1
% Forward subsumptions: 60137
% Fw demodulations to eq. taut.: 107
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 25
% Forward superposition: 51372
% Backward superposition: 27577
% Equality resolution: 400
% 
% Split clauses: 908
% Split components: 1816
% SAT solver clauses: 927
% SAT solver unit clauses: 4
% SAT solver binary clauses: 23
% 
% Sat splits: 908
% Sat splitting refutations: 18
% 
% Memory used [KB]: 53218
% Time elapsed: 2.818 s
% ------------------------------
% ------------------------------
% Success in time 14.55 s
