Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.list
% SZS output start Proof for thm.list
fof(f278,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f274])).
fof(f274,plain,(
  s('type.list.list'(sK1),'const.list.NIL_0') != s('type.list.list'(sK1),'const.list.NIL_0')),
  inference(superposition,[],[f55,f264])).
fof(f264,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s(fun(X1,'type.list.list'(X0)),X2)))) )),
  inference(forward_demodulation,[],[f263,f59])).
fof(f59,plain,(
  ( ! [X0] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7] : s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),'const.list.NIL_0')))),
  file('thm.list.LIST_BIND_THM|split|0','thm.list.FLAT|split|0')).
fof(f263,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.NIL_0'))) = s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),'const.list.NIL_0'),s(fun(X1,'type.list.list'(X0)),X2)))) )),
  inference(superposition,[],[f80,f79])).
fof(f79,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.MAP_2'(s(fun(X0,X1),X2),s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X8] : s('type.list.list'(X6),'const.list.NIL_0') = s('type.list.list'(X6),'const.list.MAP_2'(s(fun(X7,X6),X8),s('type.list.list'(X7),'const.list.NIL_0')))),
  file('thm.list.LIST_BIND_THM|split|0','thm.list.MAP|split|0')).
fof(f80,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'(X0),'const.list.LIST_BIND_2'(s('type.list.list'(X1),X2),s(fun(X1,'type.list.list'(X0)),X3))) = s('type.list.list'(X0),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X0)),'const.list.MAP_2'(s(fun(X1,'type.list.list'(X0)),X3),s('type.list.list'(X1),X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X7,X6] : ! [X12,X8] : s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),X12),s(fun(X6,'type.list.list'(X7)),X8))) = s('type.list.list'(X7),'const.list.FLAT_1'(s('type.list.list'('type.list.list'(X7)),'const.list.MAP_2'(s(fun(X6,'type.list.list'(X7)),X8),s('type.list.list'(X6),X12)))))),
  file('thm.list.LIST_BIND_THM|split|0','thm.list.LIST_BIND_def')).
fof(f55,plain,(
  s('type.list.list'(sK1),'const.list.NIL_0') != s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun(sK0,'type.list.list'(sK1)),sK2)))),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  s('type.list.list'(sK1),'const.list.NIL_0') != s('type.list.list'(sK1),'const.list.LIST_BIND_2'(s('type.list.list'(sK0),'const.list.NIL_0'),s(fun(sK0,'type.list.list'(sK1)),sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') != s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1] : ! [X2] : s('type.list.list'(X1),'const.list.NIL_0') = s('type.list.list'(X1),'const.list.LIST_BIND_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(fun(X0,'type.list.list'(X1)),X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8] : s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s(fun(X6,'type.list.list'(X7)),X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8] : s('type.list.list'(X7),'const.list.NIL_0') = s('type.list.list'(X7),'const.list.LIST_BIND_2'(s('type.list.list'(X6),'const.list.NIL_0'),s(fun(X6,'type.list.list'(X7)),X8)))),
  file('thm.list.LIST_BIND_THM|split|0','thm.list.LIST_BIND_THM|split|0')).
% SZS output end Proof for thm.list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 15
% Passive clauses: 37
% Generated clauses: 207
% Final active clauses: 14
% Final passive clauses: 15
% Input formulas: 17
% Initial clauses: 28
% 
% Duplicate literals: 38
% Trivial inequalities: 4
% Fw demodulations: 1
% 
% Simple tautologies: 27
% Equational tautologies: 15
% Forward subsumptions: 75
% 
% Binary resolution: 3
% Forward superposition: 41
% Backward superposition: 35
% Self superposition: 27
% Equality factoring: 26
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 10
% SAT solver unit clauses: 4
% SAT solver binary clauses: 5
% 
% Sat splits: 5
% 
% TWLsolver clauses: 10
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.017 s
% ------------------------------
% ------------------------------
% Success in time 0.019 s
