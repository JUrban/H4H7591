Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.option
% (48705)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 138
% Passive clauses: 3330
% Generated clauses: 25859
% Final active clauses: 75
% Final passive clauses: 2867
% Input formulas: 19
% Initial clauses: 32
% 
% Duplicate literals: 986
% Trivial inequalities: 491
% Fw subsumption resolutions: 4005
% Fw demodulations: 3267
% Bw demodulations: 54
% 
% Simple tautologies: 396
% Equational tautologies: 80
% Forward subsumptions: 12276
% Fw demodulations to eq. taut.: 149
% 
% Binary resolution: 18
% Forward superposition: 7749
% Backward superposition: 8407
% Self superposition: 427
% Equality factoring: 236
% Equality resolution: 52
% 
% Split clauses: 324
% Split components: 655
% SAT solver clauses: 949
% SAT solver unit clauses: 19
% SAT solver binary clauses: 218
% 
% Sat splits: 324
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 944
% TWLsolver calls for satisfiability: 111
% 
% Memory used [KB]: 11001
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 293 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.option
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.option
% SZS output start Proof for thm.option
fof(f10619,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f10618,f93,f122,f9863,f144,f69,f109,f73,f113,f2506,f2507,f91,f120,f429,f468,f74,f114,f97,f123,f1013,f1041,f1039,f128,f135,f75,f115,f589,f624,f96,f124,f1586,f137,f139,f134,f142,f2281,f2279,f265,f418,f1692,f647,f140,f98,f125,f172,f176,f5028,f5029,f3517,f3682,f3423,f3450,f590,f625,f2637,f2638,f430,f469,f10611,f10613,f92,f121,f9641,f9846,f9844,f70,f107,f797,f855,f100,f127])).
fof(f127,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) | $spl26),
  inference(cnf_transformation,[],[f127_D])).
fof(f127_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f100,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X11,X6] : ! [X8,X12,X13] : s(X11,happ(s(fun(X6,X11),X13),s(X6,X8))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))),s(X11,X12),s(fun(X6,X11),X13)))),
  file('thm.option.option_28_prove_ltb','thm.option.option_case_def|split|1')).
fof(f855,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(X14,happ(s(fun(X12,X14),X15),s(X12,sK3(X13,X12)))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X14,X16),s(fun(X12,X14),X15))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X13)) ) | $spl136),
  inference(cnf_transformation,[],[f855_D])).
fof(f855_D,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(X14,happ(s(fun(X12,X14),X15),s(X12,sK3(X13,X12)))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X14,X16),s(fun(X12,X14),X15))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X13)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f797,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(X14,happ(s(fun(X12,X14),X15),s(X12,sK3(X13,X12)))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X14,X16),s(fun(X12,X14),X15))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X13)) ) | ($spl16 | $spl26)),
  inference(superposition,[],[f127,f122])).
fof(f107,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))) | $spl1),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f70,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))) & s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.option_CASE_3'(s('type.option.option'(sK0),sK2),s('type.option.option'(sK0),sK1),s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) & s('type.option.option'(X0),X2) != s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),X2)))) => s('type.option.option'(X0),X2) = s('type.option.option'(X0),'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s('type.option.option'(X0),X1),s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8)))) => s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),X8)))) => s('type.option.option'(X6),X8) = s('type.option.option'(X6),'const.option.option_CASE_3'(s('type.option.option'(X6),X8),s('type.option.option'(X6),X7),s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'))))),
  file('thm.option.option_28_prove_ltb','thm.option.option_28_prove_ltb')).
fof(f9844,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | $spl1684),
  inference(cnf_transformation,[],[f9844_D])).
fof(f9844_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) <=> ~$spl1684),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1684])])).
fof(f9846,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK3(sK2,sK0)))) | $spl1687),
  inference(cnf_transformation,[],[f9846_D])).
fof(f9846_D,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK3(sK2,sK0)))) <=> ~$spl1687),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1687])])).
fof(f9641,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),happ(s(fun(sK0,'type.option.option'(sK0)),'const.option.SOME_0'),s(sK0,sK3(sK2,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl1 | $spl136)),
  inference(superposition,[],[f107,f855])).
fof(f121,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))) ) | $spl14),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f92,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1] : s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),happ(s(fun(X0,'type.option.option'(X0)),'const.option.SOME_0'),s(X0,X1)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X15] : s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X15))) = s('type.option.option'(X6),happ(s(fun(X6,'type.option.option'(X6)),'const.option.SOME_0'),s(X6,X15)))),
  file('thm.option.option_28_prove_ltb','ARITY_0_1_const.option.SOME')).
fof(f10613,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK2,sK0)))) | $spl1763),
  inference(cnf_transformation,[],[f10613_D])).
fof(f10613_D,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK2,sK0)))) <=> ~$spl1763),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1763])])).
fof(f10611,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3(sK2,sK0)))) | ($spl14 | $spl1687)),
  inference(superposition,[],[f9846,f121])).
fof(f469,plain,(
  ( ! [X26,X24,X25] : (s(bool,X26) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26)))) ) | $spl64),
  inference(cnf_transformation,[],[f469_D])).
fof(f469_D,plain,(
  ( ! [X26,X24,X25] : (s(bool,X26) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f430,plain,(
  ( ! [X26,X24,X25] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,X26) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25)))))) ) | ($spl12 | $spl18)),
  inference(superposition,[],[f123,f120])).
fof(f2638,plain,(
  ( ! [X72] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'F_0') = s(bool,X72)) ) | $spl316),
  inference(cnf_transformation,[],[f2638_D])).
fof(f2638_D,plain,(
  ( ! [X72] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'F_0') = s(bool,X72)) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f2637,plain,(
  ( ! [X72] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'F_0') = s(bool,X72)) ) | ($spl12 | $spl22 | $spl38 | $spl64)),
  inference(forward_demodulation,[],[f2636,f125])).
fof(f2636,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),'const.option.NONE_0'),s(bool,X72),s(fun(X71,bool),X73))))) | s(bool,'F_0') = s(bool,X72)) ) | ($spl12 | $spl38 | $spl64)),
  inference(subsumption_resolution,[],[f2555,f120])).
fof(f2555,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X74),'const.option.SOME_1'(s(X74,X75))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),'const.option.NONE_0'),s(bool,X72),s(fun(X71,bool),X73))))) | s(bool,'F_0') = s(bool,X72)) ) | ($spl38 | $spl64)),
  inference(superposition,[],[f469,f176])).
fof(f625,plain,(
  ( ! [X30,X31,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31)))))) ) | $spl92),
  inference(cnf_transformation,[],[f625_D])).
fof(f625_D,plain,(
  ( ! [X30,X31,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31)))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f590,plain,(
  ( ! [X30,X31,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31)))))) ) | ($spl12 | $spl20)),
  inference(superposition,[],[f124,f120])).
fof(f3450,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))))) | s(bool,'F_0') = s(bool,X11)) ) | $spl476),
  inference(cnf_transformation,[],[f3450_D])).
fof(f3450_D,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))))) | s(bool,'F_0') = s(bool,X11)) ) <=> ~$spl476),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl476])])).
fof(f3423,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))))) | s(bool,'F_0') = s(bool,X11)) ) | ($spl92 | $spl316)),
  inference(trivial_inequality_removal,[],[f3394])).
fof(f3394,plain,(
  ( ! [X12,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))))) | s(bool,'F_0') = s(bool,X11)) ) | ($spl92 | $spl316)),
  inference(superposition,[],[f625,f2638])).
fof(f3682,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) ) | $spl494),
  inference(cnf_transformation,[],[f3682_D])).
fof(f3682_D,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) ) <=> ~$spl494),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl494])])).
fof(f3517,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) ) | $spl476),
  inference(superposition,[],[f3450,f3450])).
fof(f5029,plain,(
  ( ! [X59] : (s(bool,X59) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | s(bool,'F_0') = s(bool,X59)) ) | $spl626),
  inference(cnf_transformation,[],[f5029_D])).
fof(f5029_D,plain,(
  ( ! [X59] : (s(bool,X59) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | s(bool,'F_0') = s(bool,X59)) ) <=> ~$spl626),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl626])])).
fof(f5028,plain,(
  ( ! [X59] : (s(bool,X59) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | s(bool,'F_0') = s(bool,X59)) ) | ($spl32 | $spl37 | $spl494)),
  inference(subsumption_resolution,[],[f4260,f142])).
fof(f4260,plain,(
  ( ! [X59] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X59) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | s(bool,'F_0') = s(bool,X59)) ) | ($spl32 | $spl494)),
  inference(superposition,[],[f3682,f139])).
fof(f176,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s(bool,'F_0') = s(bool,X1)) ) | $spl38),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2)))) ) | ($spl10 | $spl22)),
  inference(superposition,[],[f125,f115])).
fof(f125,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) | $spl22),
  inference(cnf_transformation,[],[f125_D])).
fof(f125_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f98,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X11] : ! [X12,X13] : s(X11,X12) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X11,X12),s(fun(X6,X11),X13)))),
  file('thm.option.option_28_prove_ltb','thm.option.option_case_def|split|0')).
fof(f140,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl34),
  inference(cnf_transformation,[],[f140_D])).
fof(f140_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f647,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) | $spl102),
  inference(cnf_transformation,[],[f647_D])).
fof(f647_D,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X1),'const.option.NONE_0')))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f1692,plain,(
  ( ! [X38,X36] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X38),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X36)) ) | ($spl20 | $spl22 | $spl38 | $spl62)),
  inference(subsumption_resolution,[],[f1691,f124])).
fof(f1691,plain,(
  ( ! [X38,X36] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36))) | s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X38),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X36)) ) | ($spl22 | $spl38 | $spl62)),
  inference(forward_demodulation,[],[f878,f125])).
fof(f878,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,'T_0') != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X38),'const.option.NONE_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X35),'const.option.NONE_0'),s(bool,X36),s(fun(X35,bool),X37))))) | s(bool,'F_0') = s(bool,X36)) ) | ($spl38 | $spl62)),
  inference(superposition,[],[f468,f176])).
fof(f418,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl50),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f265,plain,(
  ( ! [X12,X11] : (s(bool,X11) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X11))))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | ($spl12 | $spl28)),
  inference(superposition,[],[f120,f135])).
fof(f2279,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) ) | $spl212),
  inference(cnf_transformation,[],[f2279_D])).
fof(f2279_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f2281,plain,(
  ( ! [X35] : (s(bool,'F_0') = s(bool,X35) | s(bool,X35) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35)))))) ) | ($spl8 | $spl50 | $spl102)),
  inference(subsumption_resolution,[],[f1922,f647])).
fof(f1922,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,X35) | s(bool,X35) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X35))))) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X34),'const.option.NONE_0')))) ) | ($spl8 | $spl50)),
  inference(superposition,[],[f418,f114])).
fof(f142,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl37),
  inference(cnf_transformation,[],[f142_D])).
fof(f142_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f134,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) ) | $spl10),
  inference(equality_factoring,[],[f115])).
fof(f139,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | $spl32),
  inference(cnf_transformation,[],[f139_D])).
fof(f139_D,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f137,plain,(
  s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | ($spl2 | $spl7 | $spl10)),
  inference(subsumption_resolution,[],[f132,f113])).
fof(f132,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | ($spl2 | $spl10)),
  inference(superposition,[],[f109,f115])).
fof(f1586,plain,(
  $false | ($spl8 | $spl32 | $spl37 | $spl186)),
  inference(subsumption_resolution,[],[f1585,f142])).
fof(f1585,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl8 | $spl32 | $spl186)),
  inference(condensation,[],[f1584])).
fof(f1584,plain,(
  ( ! [X79] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X79)) ) | ($spl8 | $spl32 | $spl186)),
  inference(forward_demodulation,[],[f1583,f139])).
fof(f1583,plain,(
  ( ! [X79] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) | s(bool,'T_0') = s(bool,X79)) ) | ($spl8 | $spl32 | $spl186)),
  inference(forward_demodulation,[],[f1491,f114])).
fof(f1491,plain,(
  ( ! [X80,X79] : (s(bool,'T_0') = s(bool,X79) | s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X80),'const.option.NONE_0')))) ) | ($spl32 | $spl186)),
  inference(duplicate_literal_removal,[],[f1129])).
fof(f1129,plain,(
  ( ! [X80,X79] : (s(bool,'T_0') = s(bool,X79) | s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X80),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X79)) ) | ($spl32 | $spl186)),
  inference(superposition,[],[f1039,f139])).
fof(f124,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) ) | $spl20),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f96,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X8,X14] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X14))) <=> s(X6,X8) = s(X6,X14))),
  file('thm.option.option_28_prove_ltb','thm.option.SOME_|49||49|')).
fof(f624,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X28),'const.option.NONE_0')))) ) | $spl90),
  inference(cnf_transformation,[],[f624_D])).
fof(f624_D,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X28),'const.option.NONE_0')))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f589,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X28),'const.option.NONE_0')))) ) | ($spl8 | $spl20)),
  inference(superposition,[],[f124,f114])).
fof(f115,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f75,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.option.option_28_prove_ltb',aHL_BOOL_CASES)).
fof(f135,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f128,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(superposition,[],[f115,f115])).
fof(f1039,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X4),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X5)) ) | $spl186),
  inference(cnf_transformation,[],[f1039_D])).
fof(f1039_D,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X4),'const.option.NONE_0'))) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X5)) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f1041,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | $spl189),
  inference(cnf_transformation,[],[f1041_D])).
fof(f1041_D,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) <=> ~$spl189),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl189])])).
fof(f1013,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X3) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X4),'const.option.NONE_0'))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | ($spl28 | $spl90)),
  inference(superposition,[],[f624,f135])).
fof(f123,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) != s(X0,X2)) ) | $spl18),
  inference(cnf_transformation,[],[f123_D])).
fof(f123_D,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) != s(X0,X2)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f97,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f67])).
fof(f114,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) | $spl8),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f74,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.NONE_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : s(bool,'F_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.NONE_0')))),
  file('thm.option.option_28_prove_ltb','thm.option.IS_SOME_DEF|split|1')).
fof(f468,plain,(
  ( ! [X23,X22] : (s(bool,X23) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X22),'const.option.NONE_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) | $spl62),
  inference(cnf_transformation,[],[f468_D])).
fof(f468_D,plain,(
  ( ! [X23,X22] : (s(bool,X23) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X22),'const.option.NONE_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f429,plain,(
  ( ! [X23,X22] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X23) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X22),'const.option.NONE_0')))) ) | ($spl8 | $spl18)),
  inference(superposition,[],[f123,f114])).
fof(f120,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) | $spl12),
  inference(cnf_transformation,[],[f120_D])).
fof(f120_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f91,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X8] : s(bool,'T_0') = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8)))))),
  file('thm.option.option_28_prove_ltb','thm.option.IS_SOME_DEF|split|0')).
fof(f2507,plain,(
  ( ! [X35,X34] : (s(bool,X34) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X35),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X34)) ) | $spl298),
  inference(cnf_transformation,[],[f2507_D])).
fof(f2507_D,plain,(
  ( ! [X35,X34] : (s(bool,X34) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X35),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X34)) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f2506,plain,(
  ( ! [X35,X34] : (s(bool,X34) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X35),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl12 | $spl62 | $spl189 | $spl212)),
  inference(subsumption_resolution,[],[f2505,f1041])).
fof(f2505,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X34) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X35),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl12 | $spl62 | $spl212)),
  inference(forward_demodulation,[],[f2466,f120])).
fof(f2466,plain,(
  ( ! [X35,X34] : (s(bool,X34) != s(bool,'const.option.IS_SOME_1'(s('type.option.option'(X35),'const.option.NONE_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))))))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl62 | $spl212)),
  inference(superposition,[],[f468,f2279])).
fof(f113,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f113_D])).
fof(f113_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.option.option_28_prove_ltb',aHL_FALSITY)).
fof(f109,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))) | $spl2),
  inference(cnf_transformation,[],[f109_D])).
fof(f109_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f69,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),sK2))))),
  inference(cnf_transformation,[],[f54])).
fof(f144,plain,(
  $false | ($spl2 | $spl7 | $spl34)),
  inference(subsumption_resolution,[],[f143,f113])).
fof(f143,plain,(
  p(s(bool,'F_0')) | ($spl2 | $spl34)),
  inference(backward_demodulation,[],[f140,f109])).
fof(f9863,plain,(
  ( ! [X59] : (s(bool,'F_0') = s(bool,X59)) ) | ($spl298 | $spl626 | $spl1684)),
  inference(subsumption_resolution,[],[f9857,f2507])).
fof(f9857,plain,(
  ( ! [X59] : (s(bool,X59) = s(bool,'const.option.IS_SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) | s(bool,'F_0') = s(bool,X59)) ) | ($spl626 | $spl1684)),
  inference(backward_demodulation,[],[f9844,f5029])).
fof(f122,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | $spl16),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f93,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK3(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X10] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X10) | ? [X8] : s('type.option.option'(X6),X10) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X8))))),
  file('thm.option.option_28_prove_ltb','thm.option.option_nchotomy')).
fof(f10618,plain,(
  $false | ($spl16 | $spl1685 | $spl1763)),
  inference(subsumption_resolution,[],[f10617,f9843])).
fof(f9843,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) | $spl1685),
  inference(cnf_transformation,[],[f9843_D])).
fof(f9843_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK2) <=> ~$spl1685),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1685])])).
fof(f10617,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl16 | $spl1763)),
  inference(trivial_inequality_removal,[],[f10614])).
fof(f10614,plain,(
  s('type.option.option'(sK0),sK2) != s('type.option.option'(sK0),sK2) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK2) | ($spl16 | $spl1763)),
  inference(superposition,[],[f10613,f122])).
% SZS output end Proof for thm.option
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 94
% Passive clauses: 902
% Generated clauses: 10532
% Final active clauses: 76
% Final passive clauses: 767
% Input formulas: 19
% Initial clauses: 32
% 
% Duplicate literals: 556
% Trivial inequalities: 161
% Fw subsumption resolutions: 812
% Fw demodulations: 927
% Bw demodulations: 47
% Condensations: 882
% Global subsumptions: 4
% 
% Simple tautologies: 186
% Equational tautologies: 42
% Forward subsumptions: 4184
% Fw demodulations to eq. taut.: 28
% 
% Binary resolution: 5
% Forward superposition: 3451
% Backward superposition: 2309
% Self superposition: 148
% Equality factoring: 96
% Equality resolution: 41
% 
% Split clauses: 85
% Split components: 173
% SAT solver clauses: 1601
% SAT solver unit clauses: 51
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 9
% 
% Sat splits: 85
% Sat splitting refutations: 47
% 
% TWLsolver clauses: 1584
% TWLsolver calls for satisfiability: 135
% 
% Memory used [KB]: 9083
% Time elapsed: 0.566 s
% ------------------------------
% ------------------------------
% Success in time 1.186 s
