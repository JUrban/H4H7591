Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f1092,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1078,f58,f84,f545,f546,f309,f353,f91,f94,f92,f104,f59,f83,f81,f1062,f80,f1077])).
fof(f1077,plain,(
  $false | ($spl2 | $spl22)),
  inference(subsumption_resolution,[],[f1076,f61])).
fof(f61,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|3',aHL_FALSITY)).
fof(f1076,plain,(
  p(s(bool,'F_0')) | ($spl2 | $spl22)),
  inference(forward_demodulation,[],[f83,f546])).
fof(f80,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl0),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1062,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl22),
  inference(subsumption_resolution,[],[f1049,f61])).
fof(f1049,plain,(
  p(s(bool,'F_0')) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl22),
  inference(superposition,[],[f79,f546])).
fof(f79,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK15(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK15(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15])],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7] : ! [X11,X12] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X7,X6),X11),s(fun(X6,bool),X12)))) <=> ! [X10] : ~p(s(bool,happ(s(fun(X6,bool),X12),s(X6,happ(s(fun(X7,X6),X11),s(X7,X10)))))))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|3','thm.quantHeuristics.GUESS_FORALL_POINT_def')).
fof(f81,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f83,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4)))))) | $spl2),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4)))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f59,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4)))))) | ~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))))),
  inference(cnf_transformation,[],[f38])).
fof(f38,plain,(
  (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | ! [X5] : ~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3)))) | p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,sK4)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f37])).
fof(f37,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))))),
  inference(rectify,[],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ? [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <~> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : ~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,happ(s(fun(X7,X6),X8),s(X7,X10)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X7,X6),X8),s(fun(X6,bool),X9)))) <=> ! [X10] : ~p(s(bool,happ(s(fun(X6,bool),X9),s(X6,happ(s(fun(X7,X6),X8),s(X7,X10)))))))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|3','thm.quantHeuristics.GUESS_REWRITES|split|3')).
fof(f104,plain,(
  $false | $spl6),
  inference(resolution,[],[f101,f60])).
fof(f60,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|3',aHL_TRUTH)).
fof(f101,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl6),
  inference(superposition,[],[f61,f92])).
fof(f92,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f94,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl9),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f62])).
fof(f62,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.quantHeuristics.GUESS_REWRITES|split|3',aHL_BOOL_CASES)).
fof(f353,plain,(
  $false | ($spl9 | $spl10)),
  inference(trivial_inequality_removal,[],[f348])).
fof(f348,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl9 | $spl10)),
  inference(superposition,[],[f94,f309])).
fof(f309,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl10),
  inference(cnf_transformation,[],[f309_D])).
fof(f309_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f546,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X1)))))) ) | $spl22),
  inference(cnf_transformation,[],[f546_D])).
fof(f546_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X1)))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f545,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f488])).
fof(f488,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X1))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f250,f62])).
fof(f250,plain,(
  ( ! [X10,X11] : (s(bool,X11) = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X10))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl4),
  inference(subsumption_resolution,[],[f178,f60])).
fof(f178,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s(bool,X11) = s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X10))))) | s(bool,'T_0') = s(bool,X11)) ) | $spl4),
  inference(superposition,[],[f84,f85])).
fof(f85,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f62,f62])).
fof(f84,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5))))))) ) | $spl4),
  inference(cnf_transformation,[],[f84_D])).
fof(f84_D,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f58,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X5)))))) | p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(sK1,sK0),sK2),s(fun(sK0,bool),sK3))))) )),
  inference(cnf_transformation,[],[f38])).
fof(f1078,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK0,bool),sK3),s(sK0,happ(s(fun(sK1,sK0),sK2),s(sK1,X0))))))) ) | $spl0),
  inference(resolution,[],[f80,f78])).
fof(f78,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_FORALL_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) )),
  inference(cnf_transformation,[],[f57])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 49
% Passive clauses: 239
% Generated clauses: 1018
% Final active clauses: 32
% Final passive clauses: 126
% Input formulas: 11
% Initial clauses: 22
% 
% Duplicate literals: 86
% Trivial inequalities: 5
% Fw subsumption resolutions: 123
% Fw demodulations: 69
% Bw demodulations: 7
% 
% Simple tautologies: 20
% Equational tautologies: 16
% Forward subsumptions: 380
% 
% Binary resolution: 45
% Forward superposition: 425
% Backward superposition: 136
% Self superposition: 32
% Equality factoring: 30
% 
% Split clauses: 45
% Split components: 90
% SAT solver clauses: 108
% SAT solver unit clauses: 11
% SAT solver binary clauses: 38
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 45
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 102
% TWLsolver calls for satisfiability: 39
% 
% Memory used [KB]: 1279
% Time elapsed: 0.035 s
% ------------------------------
% ------------------------------
% Success in time 0.037 s
