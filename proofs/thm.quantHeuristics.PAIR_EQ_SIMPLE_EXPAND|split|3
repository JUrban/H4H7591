Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 300 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f634,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f628,f607,f57,f91,f89,f58,f92,f90])).
fof(f90,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) | $spl1),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl3),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f58,plain,(
  s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3)))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  (s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) | s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3)))) & (s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) | s(sK0,sK2) != s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f40])).
fof(f40,plain,(
  ? [X0,X1,X2,X3] : ((s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X3))))) | s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3)))) & (s('type.pair.prod'(X0,X1),X3) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X3))))) | s(X0,X2) != s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3)))))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ? [X0,X1,X2,X3] : (s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X3))))) <~> s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ~! [X0,X1,X2,X3] : (s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X3))))) <=> s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.pair.prod'(X0,X1),X3) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X3))))) <=> s(X0,X2) = s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X3))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X9))))) <=> s(X6,X8) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X9))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.pair.prod'(X6,X7),X9) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),X9))))) <=> s(X6,X8) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),X9))))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|3','thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|3')).
fof(f89,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) | $spl0),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f91,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl2),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f57,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,'const.pair.SND_1'(s('type.pair.prod'(sK0,sK1),sK3)))))),
  inference(cnf_transformation,[],[f41])).
fof(f607,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f474,f399])).
fof(f399,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) != s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK5(sK3,sK1,sK0)))) | $spl1),
  inference(backward_demodulation,[],[f340,f90])).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (s(X1,sK5(X2,X1,X0)) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))) )),
  inference(superposition,[],[f82,f80])).
fof(f80,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f28])).
fof(f28,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X8] : ? [X14,X15] : s('type.pair.prod'(X6,X7),X8) = s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X14),s(X7,X15)))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|3','thm.pair.ABS_PAIR_THM')).
fof(f82,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7] : ! [X8,X11] : s(X7,X11) = s(X7,'const.pair.SND_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,X11)))))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|3','thm.pair.SND')).
fof(f474,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK5(sK3,sK1,sK0)))) | $spl2),
  inference(superposition,[],[f80,f445])).
fof(f445,plain,(
  s(sK0,sK2) = s(sK0,sK4(sK3,sK1,sK0)) | $spl2),
  inference(superposition,[],[f341,f91])).
fof(f341,plain,(
  ( ! [X4,X5,X3] : (s(X3,sK4(X5,X4,X3)) = s(X3,'const.pair.FST_1'(s('type.pair.prod'(X3,X4),X5)))) )),
  inference(superposition,[],[f81,f80])).
fof(f81,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X7,X6] : ! [X8,X11] : s(X6,X8) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X7),'const.pair.,_2'(s(X6,X8),s(X7,X11)))))),
  file('thm.quantHeuristics.PAIR_EQ_SIMPLE_EXPAND|split|3','thm.pair.FST')).
fof(f628,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f613,f92])).
fof(f613,plain,(
  s(sK0,sK2) = s(sK0,'const.pair.FST_1'(s('type.pair.prod'(sK0,sK1),sK3))) | $spl0),
  inference(superposition,[],[f81,f608])).
fof(f608,plain,(
  s('type.pair.prod'(sK0,sK1),sK3) = s('type.pair.prod'(sK0,sK1),'const.pair.,_2'(s(sK0,sK2),s(sK1,sK5(sK3,sK1,sK0)))) | $spl0),
  inference(forward_demodulation,[],[f89,f340])).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 23
% Passive clauses: 156
% Generated clauses: 560
% Final active clauses: 18
% Final passive clauses: 122
% Input formulas: 16
% Initial clauses: 30
% 
% Duplicate literals: 38
% Trivial inequalities: 3
% Fw subsumption resolutions: 3
% Fw demodulations: 39
% Bw demodulations: 1
% 
% Simple tautologies: 27
% Equational tautologies: 16
% Forward subsumptions: 270
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 3
% Forward superposition: 202
% Backward superposition: 172
% Self superposition: 34
% Equality factoring: 26
% Equality resolution: 1
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 17
% SAT solver unit clauses: 5
% SAT solver binary clauses: 10
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 7
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 14
% TWLsolver calls for satisfiability: 7
% 
% Memory used [KB]: 1023
% Time elapsed: 0.026 s
% ------------------------------
% ------------------------------
% Success in time 0.028 s
