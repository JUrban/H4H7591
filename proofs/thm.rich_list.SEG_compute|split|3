Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.rich_list
% (45982)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 962
% Passive clauses: 5061
% Generated clauses: 39141
% Final active clauses: 946
% Final passive clauses: 3729
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 216
% Trivial inequalities: 50
% Fw subsumption resolutions: 1498
% Fw demodulations: 7279
% Bw demodulations: 15
% 
% Simple tautologies: 210
% Equational tautologies: 34
% Forward subsumptions: 24628
% Fw demodulations to eq. taut.: 8
% 
% Binary resolution: 6177
% Factoring: 1194
% Forward superposition: 12728
% Backward superposition: 9361
% Self superposition: 49
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 315
% Split components: 632
% SAT solver clauses: 534
% SAT solver unit clauses: 20
% SAT solver binary clauses: 82
% 
% Sat splits: 315
% 
% TWLsolver clauses: 534
% TWLsolver calls for satisfiability: 457
% 
% Memory used [KB]: 19189
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.rich_list
% (46005)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 539
% Passive clauses: 3372
% Generated clauses: 32463
% Final active clauses: 525
% Final passive clauses: 2562
% Input formulas: 261
% Initial clauses: 461
% 
% Duplicate literals: 98
% Trivial inequalities: 33
% Fw subsumption resolutions: 896
% Fw demodulations: 4493
% Bw demodulations: 277
% Condensations: 125
% Global subsumptions: 24
% 
% Simple tautologies: 219
% Equational tautologies: 11
% Forward subsumptions: 19144
% Fw demodulations to eq. taut.: 55
% Bw demodulations to eq. taut.: 6
% 
% Binary resolution: 2492
% Factoring: 310
% Forward superposition: 12131
% Backward superposition: 7691
% Self superposition: 110
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 4467
% SAT solver unit clauses: 613
% SAT solver binary clauses: 133
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 12
% 
% Sat splits: 9
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 4371
% TWLsolver calls for satisfiability: 2435
% 
% Memory used [KB]: 32494
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.rich_list
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.rich_list
% SZS output start Proof for thm.rich_list
fof(f187130,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f187126])).
fof(f187126,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f186000,f186940])).
fof(f186940,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),sK14))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f185980,f1355])).
fof(f1355,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(forward_demodulation,[],[f1354,f872])).
fof(f872,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X0] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))),
  inference(rectify,[],[f90])).
fof(f90,axiom,(
  ! [X9] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X9)))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.NUMERAL_DEF')).
fof(f1354,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(forward_demodulation,[],[f1353,f1352])).
fof(f1352,plain,(
  s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(backward_demodulation,[],[f872,f1347])).
fof(f1347,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(forward_demodulation,[],[f864,f860])).
fof(f860,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  inference(cnf_transformation,[],[f91])).
fof(f91,axiom,(
  s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num','const.num.|48|_0')),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.ALT_ZERO')).
fof(f864,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f99])).
fof(f99,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.ONE')).
fof(f1353,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f872,f1348])).
fof(f1348,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'(sK10),sK14)))),
  inference(backward_demodulation,[],[f1347,f857])).
fof(f857,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK10),sK14)))),
  inference(cnf_transformation,[],[f711])).
fof(f711,plain,(
  s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.list.list'(sK10),'const.list.CONS_2'(s(sK10,sK13),s('type.list.list'(sK10),sK14))))) != s('type.list.list'(sK10),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK11))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',sK12))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(sK10),sK14)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f627])).
fof(f627,plain,(
  ? [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) != s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X2))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X10)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10))))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X7))))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X8))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'(X6),X10)))),
  file('thm.rich_list.SEG_compute|split|3','thm.rich_list.SEG_compute|split|3')).
fof(f185980,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.list.list'(X27),'const.rich_list.SEG_3'(s('type.num.num',X28),s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))))),s('type.list.list'(X27),X29))) = s('type.list.list'(X27),'const.rich_list.SEG_3'(s('type.num.num',X28),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X26))),s('type.list.list'(X27),'const.list.CONS_2'(s(X27,X30),s('type.list.list'(X27),X29)))))) )),
  inference(superposition,[],[f1103,f14068])).
fof(f14068,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))))) )),
  inference(forward_demodulation,[],[f14067,f1398])).
fof(f1398,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f1397,f1391])).
fof(f1391,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(forward_demodulation,[],[f914,f872])).
fof(f914,plain,(
  ( ! [X0] : (s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(cnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(rectify,[],[f195])).
fof(f195,axiom,(
  ! [X7] : s('type.num.num','const.num.SUC_1'(s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.ADD|49|')).
fof(f1397,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f1396,f1352])).
fof(f1396,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) )),
  inference(forward_demodulation,[],[f918,f860])).
fof(f918,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  inference(rectify,[],[f92])).
fof(f92,axiom,(
  ! [X13] : s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0')))))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.BIT|49|')).
fof(f14067,plain,(
  ( ! [X17] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))))) )),
  inference(subsumption_resolution,[],[f14028,f4806])).
fof(f4806,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f4757,f1406])).
fof(f1406,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f1405,f860])).
fof(f1405,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(forward_demodulation,[],[f925,f860])).
fof(f925,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))))),
  inference(rectify,[],[f256])).
fof(f256,axiom,(
  ! [X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num',X7) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.LESS_|48|_CASES')).
fof(f4757,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))) )),
  inference(subsumption_resolution,[],[f4633,f1350])).
fof(f1350,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f867,f858])).
fof(f858,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f42])).
fof(f42,axiom,(
  p(s(bool,'T_0'))),
  file('thm.rich_list.SEG_compute|split|3','thm.bool.TRUTH')).
fof(f867,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f712])).
fof(f712,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f136])).
fof(f136,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.rich_list.SEG_compute|split|3','thm.bool.NOT_CLAUSES|split|1')).
fof(f4633,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X1)))) )),
  inference(superposition,[],[f1163,f896])).
fof(f896,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))) )),
  inference(cnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.ZERO_0')))),
  inference(rectify,[],[f143])).
fof(f143,axiom,(
  ! [X13] : s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X13))),s('type.num.num','const.arithmetic.ZERO_0')))),
  file('thm.rich_list.SEG_compute|split|3','thm.numeral.numeral_lte|split|1')).
fof(f1163,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) != s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f791])).
fof(f791,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f790])).
fof(f790,plain,(
  ! [X0,X1] : ((s('type.num.num',X0) != s('type.num.num',X1) | (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))) & ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(nnf_transformation,[],[f582])).
fof(f582,plain,(
  ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))))),
  inference(rectify,[],[f205])).
fof(f205,axiom,(
  ! [X7,X13] : (s('type.num.num',X7) = s('type.num.num',X13) <=> (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',X13)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.EQ_LESS_EQ')).
fof(f14028,plain,(
  ( ! [X17] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X17)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17))))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X17)))))))))) )),
  inference(superposition,[],[f1422,f1398])).
fof(f1422,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) )),
  inference(forward_demodulation,[],[f954,f860])).
fof(f954,plain,(
  ( ! [X0] : (s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f729])).
fof(f729,plain,(
  ! [X0] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0)))))) & (s('type.num.num',X0) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))))),
  inference(nnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) <=> s('type.num.num',X0) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f193])).
fof(f193,axiom,(
  ! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) <=> s('type.num.num',X7) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num',X7))))))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.SUC_PRE')).
fof(f1103,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))) )),
  inference(cnf_transformation,[],[f524])).
fof(f524,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(flattening,[],[f523])).
fof(f523,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num',X2),s('type.list.list'(X0),X3))) = s('type.list.list'(X0),'const.rich_list.SEG_3'(s('type.num.num',X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X4),s('type.list.list'(X0),X3)))))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X6] : ! [X7,X13,X10,X9] : s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num',X13),s('type.list.list'(X6),X10))) = s('type.list.list'(X6),'const.rich_list.SEG_3'(s('type.num.num',X7),s('type.num.num','const.num.SUC_1'(s('type.num.num',X13))),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X9),s('type.list.list'(X6),X10)))))),
  file('thm.rich_list.SEG_compute|split|3','thm.rich_list.SEG_SUC_CONS')).
fof(f186000,plain,(
  ( ! [X77] : (s('type.num.num','const.prim_rec.PRE_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X77))))) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X77))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f8473,f14068])).
fof(f8473,plain,(
  ( ! [X2] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',X2))),s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(superposition,[],[f1117,f1391])).
fof(f1117,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f541])).
fof(f541,plain,(
  ! [X0,X1] : s('type.num.num',X0) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X1)))),
  inference(rectify,[],[f238])).
fof(f238,axiom,(
  ! [X39,X41] : s('type.num.num',X39) = s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X41))),s('type.num.num',X41)))),
  file('thm.rich_list.SEG_compute|split|3','thm.arithmetic.ADD_SUB')).
% SZS output end Proof for thm.rich_list
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1088
% Passive clauses: 7794
% Generated clauses: 185962
% Final active clauses: 1046
% Final passive clauses: 4627
% Input formulas: 261
% Initial clauses: 461
% Discarded non-redundant clauses: 2846
% 
% Duplicate literals: 8
% Trivial inequalities: 56
% Fw subsumption resolutions: 704
% Fw demodulations: 74333
% Bw demodulations: 557
% Condensations: 20
% Global subsumptions: 2
% 
% Simple tautologies: 108
% Equational tautologies: 37
% Forward subsumptions: 73567
% Fw demodulations to eq. taut.: 27341
% Bw demodulations to eq. taut.: 241
% 
% Unit resulting resolution: 48897
% Factoring: 2
% Forward superposition: 40246
% Backward superposition: 20665
% Self superposition: 169
% Equality factoring: 2
% Equality resolution: 12
% 
% Split clauses: 7
% Split components: 14
% SAT solver clauses: 7812
% SAT solver unit clauses: 3892
% SAT solver binary clauses: 3065
% 
% Sat splits: 7
% 
% Memory used [KB]: 91725
% Time elapsed: 5.877 s
% ------------------------------
% ------------------------------
% Success in time 7.21 s
