Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 299 next slice time: 5
dis+11_7_3 on thm.quantHeuristics
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.quantHeuristics
% SZS output start Proof for thm.quantHeuristics
fof(f1645,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1638,f134,f206,f135,f207,f138,f208,f212])).
fof(f212,plain,(
  ~p(s(bool,'F_0')) | $spl7),
  inference(cnf_transformation,[],[f212_D])).
fof(f212_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f208,plain,(
  ~p(s(bool,'T_0')) | $spl3),
  inference(cnf_transformation,[],[f208_D])).
fof(f208_D,plain,(
  ~p(s(bool,'T_0')) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f138,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f15])).
fof(f15,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.bool.NOT_CLAUSES|split|1')).
fof(f207,plain,(
  p(s(bool,'T_0')) | $spl2),
  inference(cnf_transformation,[],[f207_D])).
fof(f207_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f135,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.bool.TRUTH')).
fof(f206,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X4))))) ) | $spl0),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X4))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f134,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X4))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3)))) & (p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,sK4)))) | p(s(bool,'T_0'))) & (! [X4] : ~p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X4)))) | ~p(s(bool,'T_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (? [X5] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X5)))) | p(s(bool,'T_0'))) & (! [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'T_0'))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (? [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | p(s(bool,'T_0'))) & (! [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'T_0'))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & ((? [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | p(s(bool,'T_0'))) & (! [X4] : ~p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) | ~p(s(bool,'T_0')))))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) & (? [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <~> p(s(bool,'T_0'))))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ~! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => (? [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <=> p(s(bool,'T_0'))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ~! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X0,X1),X2),s(fun(X1,bool),X3)))) => (? [X4] : p(s(bool,happ(s(fun(X1,bool),X3),s(X1,X4)))) <=> p(s(bool,'T_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => (? [X10] : p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) <=> p(s(bool,'T_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) => (? [X10] : p(s(bool,happ(s(fun(X7,bool),X9),s(X7,X10)))) <=> p(s(bool,'T_0'))))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.quantHeuristics.GUESS_POINT_THM|split|0')).
fof(f1638,plain,(
  $false | ($spl0 | $spl2 | $spl7)),
  inference(subsumption_resolution,[],[f1637,f212])).
fof(f1637,plain,(
  p(s(bool,'F_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f1636,f227])).
fof(f227,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,X0)))) ) | $spl0),
  inference(resolution,[],[f206,f153])).
fof(f153,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.bool.EQ_CLAUSES|split|3')).
fof(f1636,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,happ(s(fun(sK0,sK1),sK2),s(sK0,X0))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f1625,f207])).
fof(f1625,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(sK1,bool),sK3),s(sK1,happ(s(fun(sK0,sK1),sK2),s(sK0,X0))))))) )),
  inference(superposition,[],[f186,f229])).
fof(f229,plain,(
  s(bool,'T_0') = s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3)))),
  inference(resolution,[],[f132,f149])).
fof(f149,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.bool.EQ_CLAUSES|split|1')).
fof(f132,plain,(
  p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(sK0,sK1),sK2),s(fun(sK1,bool),sK3))))),
  inference(cnf_transformation,[],[f98])).
fof(f186,plain,(
  ( ! [X2,X0,X5,X3,X1] : (~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,sK8(X3,X2,X1,X0))))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X5))))))) & (? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(rectify,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4))))))) & (? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))) | p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3))))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ! [X2,X3] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X1,X0),X2),s(fun(X0,bool),X3)))) <=> ! [X4] : p(s(bool,happ(s(fun(X0,bool),X3),s(X0,happ(s(fun(X1,X0),X2),s(X1,X4)))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X7,X6] : ! [X8,X9] : (p(s(bool,'const.quantHeuristics.GUESS_EXISTS_POINT_2'(s(fun(X6,X7),X8),s(fun(X7,bool),X9)))) <=> ! [X19] : p(s(bool,happ(s(fun(X7,bool),X9),s(X7,happ(s(fun(X6,X7),X8),s(X6,X19)))))))),
  file('thm.quantHeuristics.GUESS_POINT_THM|split|0','thm.quantHeuristics.GUESS_EXISTS_POINT_def')).
% SZS output end Proof for thm.quantHeuristics
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 40
% Passive clauses: 279
% Generated clauses: 1457
% Final active clauses: 32
% Final passive clauses: 204
% Input formulas: 30
% Initial clauses: 72
% 
% Duplicate literals: 126
% Trivial inequalities: 29
% Fw subsumption resolutions: 200
% Fw demodulations: 37
% Bw demodulations: 4
% 
% Simple tautologies: 107
% Equational tautologies: 29
% Forward subsumptions: 612
% 
% Binary resolution: 76
% Factoring: 1
% Forward superposition: 323
% Backward superposition: 462
% Self superposition: 48
% Equality factoring: 52
% Equality resolution: 10
% 
% Split clauses: 45
% Split components: 92
% SAT solver clauses: 66
% SAT solver unit clauses: 6
% SAT solver binary clauses: 44
% SAT solver learnt clauses: 1
% 
% Sat splits: 45
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 62
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.039 s
% ------------------------------
% ------------------------------
% Success in time 0.04 s
